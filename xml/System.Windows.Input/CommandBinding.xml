<Type Name="CommandBinding" FullName="System.Windows.Input.CommandBinding">
  <TypeSignature Language="C#" Value="public class CommandBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CommandBinding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CommandBinding" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Windows.Input.RoutedCommand" /> を、コマンドを実装するイベント ハンドラーにバインドします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Input.CommandBinding>とコマンドに関連付けます、 <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed>と<xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute>イベントを実装し、コマンドの状態を判別します。  
  
 ときに、<xref:System.Windows.Input.RoutedCommand.Execute%2A>または<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>のメソッド、<xref:System.Windows.Input.RoutedCommand>が呼び出されたが、 <xref:System.Windows.Input.CommandBinding.PreviewExecuted> / <xref:System.Windows.Input.CommandBinding.Executed>または<xref:System.Windows.Input.CommandBinding.PreviewCanExecute> / <xref:System.Windows.Input.CommandBinding.CanExecute>コマンド ターゲットでのイベントが発生します。  コマンド ターゲットがある場合、<xref:System.Windows.Input.CommandBinding>コマンドは、適切なハンドラーが呼び出されます。  コマンド ターゲットがあるない場合、<xref:System.Windows.Input.CommandBinding>コマンドは、イベントは、要素ツリーを通じてルーティングを持つ要素まで、<xref:System.Windows.Input.CommandBinding>が見つかった。  
  
 A<xref:System.Windows.Input.CommandBinding>使用が制限されていると、<xref:System.Windows.Input.ICommand>外にある、<xref:System.Windows.Input.RoutedCommand>です。  これは、ため、<xref:System.Windows.Input.CommandBinding>バインドは、コマンドを<xref:System.Windows.Input.ExecutedRoutedEventHandler>と<xref:System.Windows.Input.CanExecuteRoutedEventHandler>をリッスンする、<xref:System.Windows.Input.CommandManager.Executed>と<xref:System.Windows.Input.CommandManager.CanExecute>ルーティング イベントは場合に発生、<xref:System.Windows.Input.RoutedCommand.Execute%2A>と<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>のメソッド、<xref:System.Windows.Input.RoutedCommand>と呼ばれます。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Input.CommandBinding" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
      </Parameters>
      <Docs>
        <param name="command">新しい基本コマンド<see cref="T:System.Windows.Input.RoutedCommand" />にします。</param>
        <summary>指定された <see cref="T:System.Windows.Input.CommandBinding" /> を使用して、<see cref="T:System.Windows.Input.ICommand" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">新しい基本コマンド<see cref="T:System.Windows.Input.RoutedCommand" />にします。</param>
        <param name="executed">ハンドラーを<see cref="E:System.Windows.Input.CommandBinding.Executed" />、新しいイベント<see cref="T:System.Windows.Input.RoutedCommand" />です。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Windows.Input.CommandBinding" />クラスを指定して<see cref="T:System.Windows.Input.ICommand" />と、指定した<see cref="E:System.Windows.Input.CommandBinding.Executed" />イベント ハンドラー。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommandBinding (System.Windows.Input.ICommand command, System.Windows.Input.ExecutedRoutedEventHandler executed, System.Windows.Input.CanExecuteRoutedEventHandler canExecute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.ExecutedRoutedEventHandler executed, class System.Windows.Input.CanExecuteRoutedEventHandler canExecute) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CommandBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.ExecutedRoutedEventHandler,System.Windows.Input.CanExecuteRoutedEventHandler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="executed" Type="System.Windows.Input.ExecutedRoutedEventHandler" />
        <Parameter Name="canExecute" Type="System.Windows.Input.CanExecuteRoutedEventHandler" />
      </Parameters>
      <Docs>
        <param name="command">新しい基本コマンド<see cref="T:System.Windows.Input.RoutedCommand" />にします。</param>
        <param name="executed">ハンドラーを<see cref="E:System.Windows.Input.CommandBinding.Executed" />、新しいイベント<see cref="T:System.Windows.Input.RoutedCommand" />です。</param>
        <param name="canExecute">ハンドラーを<see cref="E:System.Windows.Input.CommandBinding.CanExecute" />、新しいイベント<see cref="T:System.Windows.Input.RoutedCommand" />です。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Windows.Input.CommandBinding" />クラスを指定して<see cref="T:System.Windows.Input.ICommand" />と、指定した<see cref="E:System.Windows.Input.CommandBinding.Executed" />と<see cref="E:System.Windows.Input.CommandBinding.CanExecute" />イベント ハンドラー。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler CanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler CanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.CanExecute" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Input.CommandBinding" /> に関連付けられたコマンドがコマンド ターゲットで実行可能かどうかのチェックを開始したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドを<xref:System.Windows.Input.RoutedCommand>が呼び出されたが、<xref:System.Windows.Input.CommandBinding.PreviewCanExecute>イベントがコマンド ターゲットで発生します。  イベントが処理されない場合、<xref:System.Windows.Input.CommandBinding.CanExecute>イベントが発生します。  コマンド ターゲットがある場合、<xref:System.Windows.Input.CommandBinding>コマンドは、<xref:System.Windows.Input.CommandBinding.CanExecute>そのハンドラー<xref:System.Windows.Input.CommandBinding>と呼びます。  コマンド ターゲットがあるない場合、<xref:System.Windows.Input.CommandBinding>コマンドは、<xref:System.Windows.Input.CommandBinding.CanExecute>イベント バブルを持つ要素を検索する要素のツリー、<xref:System.Windows.Input.CommandBinding>コマンドに関連付けられています。  
  
<a name="routedEventInfo_CanExecute"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Input.CommandManager.CanExecuteEvent>|  
|ルーティング方法|バブル|  
|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   対応するトンネリング イベントが<xref:System.Windows.Input.CommandBinding.PreviewCanExecute>です。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Windows.Input.CommandBinding>マップされる、<xref:System.Windows.Input.ExecutedRoutedEventHandler>と<xref:System.Windows.Input.CanExecuteRoutedEventArgs>ハンドラー、<xref:System.Windows.Input.ApplicationCommands.Open%2A>コマンド。  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 次に示す、<xref:System.Windows.Input.CanExecuteRoutedEventHandler>どの<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>に`true`です。  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CommandBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、<see cref="T:System.Windows.Input.ICommand" />これに関連付けられている<see cref="T:System.Windows.Input.CommandBinding" />です。</summary>
        <value>このバインドに関連付けられたコマンド。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を作成、<xref:System.Windows.Input.CommandBinding>マップされる、<xref:System.Windows.Input.ExecutedRoutedEventHandler>と<xref:System.Windows.Input.CanExecuteRoutedEventArgs>ハンドラー、<xref:System.Windows.Input.ApplicationCommands.Open%2A>コマンド。  
  
 [!code-xaml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[commandhandlerprocedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 次に示す、<xref:System.Windows.Input.CanExecuteRoutedEventHandler>どの<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>に`true`です。  
  
 [!code-csharp[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandWithHandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 次に示す、<xref:System.Windows.Input.ExecutedRoutedEventHandler>を作成する、<xref:System.Windows.MessageBox>コマンドを実行するとします。  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Executed">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler Executed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler Executed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.Executed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Input.CommandBinding" /> に関連付けられたコマンドが実行されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.Input.RoutedCommand>が実行されるを生成、<xref:System.Windows.Input.CommandBinding.PreviewExecuted>コマンド ターゲットでのイベントです。  場合、<xref:System.Windows.Input.CommandBinding.PreviewExecuted>イベントが処理されない、<xref:System.Windows.Input.CommandBinding.Executed>イベントがコマンド ターゲットで発生します。  コマンド ターゲットがある場合、<xref:System.Windows.Input.CommandBinding>特定のコマンドに対して、<xref:System.Windows.Input.CommandBinding.Executed>そのハンドラー<xref:System.Windows.Input.CommandBinding>と呼びます。  コマンド ターゲットがあるない場合、<xref:System.Windows.Input.CommandBinding>特定のコマンド、<xref:System.Windows.Input.CommandBinding.Executed>イベント バブルを持つ要素を検索する要素のツリー、<xref:System.Windows.Input.CommandBinding>コマンドに関連付けられています。  場合、<xref:System.Windows.Input.CommandBinding>が見つからない場合、コマンドは処理されません。  
  
<a name="routedEventInfo_Executed"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Input.CommandManager.ExecutedEvent>|  
|ルーティング方法|バブル|  
|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   対応するトンネリング イベントが<xref:System.Windows.Input.CommandBinding.PreviewExecuted>です。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Windows.Input.CommandBinding>マップされる、<xref:System.Windows.Input.ExecutedRoutedEventHandler>と<xref:System.Windows.Input.CanExecuteRoutedEventArgs>ハンドラー、<xref:System.Windows.Input.ApplicationCommands.Open%2A>コマンド。  
  
 [!code-xaml[commandwithhandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]  
  
 次に示す、<xref:System.Windows.Input.ExecutedRoutedEventHandler>を作成する、<xref:System.Windows.MessageBox>コマンドを実行するとします。  
  
 [!code-csharp[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandWithHandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewCanExecute">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.CanExecuteRoutedEventHandler PreviewCanExecute" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewCanExecute" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CanExecuteRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコマンドは、関連付けられているときに発生<see cref="T:System.Windows.Input.CommandBinding" />コマンドを現在のコマンド ターゲットで実行できるかどうかを決定するチェックを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>メソッドを<xref:System.Windows.Input.RoutedCommand>が呼び出されると、<xref:System.Windows.Input.CommandBinding.PreviewCanExecute>コマンド ターゲットがある場合、コマンド ターゲットでイベントが発生、<xref:System.Windows.Input.CommandBinding>コマンド。 次に、<xref:System.Windows.Input.CommandBinding.CanExecute>そのハンドラー<xref:System.Windows.Input.CommandBinding>と呼びます。  コマンド ターゲットがあるない場合、<xref:System.Windows.Input.CommandBinding>コマンドは、<xref:System.Windows.Input.CommandBinding.CanExecute>イベント バブルを持つ要素を検索する要素のツリー、<xref:System.Windows.Input.CommandBinding>コマンドに関連付けられています。  イベントが処理されない場合、<xref:System.Windows.Input.CommandBinding.CanExecute>イベントが発生します。  
  
<a name="routedEventInfo_PreviewCanExecute"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Input.CommandManager.PreviewCanExecuteEvent>|  
|ルーティング方法|トンネリング|  
|Delegate|<xref:System.Windows.Input.CanExecuteRoutedEventHandler>|  
  
-   バブルの対応するイベントが<xref:System.Windows.Input.CommandBinding.CanExecute>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviewExecuted">
      <MemberSignature Language="C#" Value="public event System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Input.ExecutedRoutedEventHandler PreviewExecuted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.CommandBinding.PreviewExecuted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ExecutedRoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Input.CommandBinding" /> に関連付けられたコマンドが実行されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.Input.RoutedCommand>が実行されるを生成、<xref:System.Windows.Input.CommandBinding.PreviewExecuted>コマンド ターゲットでのイベントです。  コマンド ターゲットがある場合、<xref:System.Windows.Input.CommandBinding>コマンド、<xref:System.Windows.Input.CommandBinding.PreviewExecuted>そのハンドラー<xref:System.Windows.Input.CommandBinding>と呼びます。  コマンド ターゲットがあるない場合、<xref:System.Windows.Input.CommandBinding>コマンドに対して、<xref:System.Windows.Input.CommandBinding.PreviewExecuted>イベント トンネル下矢印を持つ要素を検索する要素のツリー、<xref:System.Windows.Input.CommandBinding>コマンドに関連付けられています。  プレビュー イベントが処理されない場合、<xref:System.Windows.Input.CommandBinding.Executed>イベントがコマンド ターゲットで発生します。  
  
<a name="routedEventInfo_PreviewExecuted"></a>   
## <a name="routed-event-information"></a>ルーティングされたイベント情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent>|  
|ルーティング方法|トンネリング|  
|Delegate|<xref:System.Windows.Input.ExecutedRoutedEventHandler>|  
  
-   バブルの対応するイベントが<xref:System.Windows.Input.CommandBinding.Executed>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
