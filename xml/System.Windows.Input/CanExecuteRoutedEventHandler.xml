<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">ハンドラーを起動するコマンド ターゲットです。</param>
    <param name="e">イベントのデータ。</param>
    <summary><see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> イベントを処理するメソッドを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.CanExecuteRoutedEventHandler>イベント ソースに関連付けられたコマンドがコマンド ターゲットで実行できるかどうかを決定します。 コマンドにコマンド ソース、ターゲットを指定したかどうかに、使用するターゲットの情報を取得できます`sender`です。 場合、<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>がキーボード フォーカスを持つ要素が、ターゲットであるし、を取得することもできます、設定されていない`sender`です。  コマンドが、ターゲットで実行できることが特定された場合、<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType>プロパティに設定する必要があります`true`、それ以外に設定`false`です。  
  
 コマンド、ソースとターゲットを特定のイベント データに依存する必要はありません。 これは、コマンドの構造は、イベント ルートの連続する潜在的な目標に同じコマンドを実行するコマンド ルーティングに広範囲に依存している場合に実行するより困難ですが、既知コマンド呼び出しのハンドラーの使用量を制限できます。  
  
   
  
## Examples  
 次の例は、<xref:System.Windows.Input.CanExecuteRoutedEventHandler>が設定された<xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A>に`true`です。  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
