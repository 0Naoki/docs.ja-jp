<Type Name="CanExecuteChangedEventManager" FullName="System.Windows.Input.CanExecuteChangedEventManager">
  <TypeSignature Language="C#" Value="public class CanExecuteChangedEventManager : System.Windows.WeakEventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CanExecuteChangedEventManager extends System.Windows.WeakEventManager" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteChangedEventManager" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.WeakEventManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供、<see cref="T:System.Windows.WeakEventManager" />実装のリスナーをアタッチする、「脆弱なイベントのリスナー」パターンを使用できるように、<see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" />イベント。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスを使用する方法についてを参照してください「を使用して、既存弱いイベント マネージャー クラス」[弱いイベント パターン](~/docs/framework/wpf/advanced/weak-event-patterns.md)です。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public static void AddHandler (System.Windows.Input.ICommand source, EventHandler&lt;EventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHandler(class System.Windows.Input.ICommand source, class System.EventHandler`1&lt;class System.EventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteChangedEventManager.AddHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.Input.ICommand" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.EventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="source">基になるオブジェクトが発生し、<see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" />イベント。</param>
        <param name="handler">処理するデリゲート、<see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" />イベント。</param>
        <summary>指定したソースのイベント ハンドラーとして指定されたデリゲートを追加します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="handler" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteChangedEventManager.NewListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected override bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteChangedEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">リッスンされているイベントのソース。</param>
        <param name="data">チェックするデータ。 このオブジェクトができると予想される、<see cref="T:System.Windows.WeakEventManager.ListenerList" />実装します。</param>
        <param name="purgeAll">
          <see langword="true" />待機を停止する<c>ソース</c>からすべてのエントリを完全に削除<c>データ</c>です。</param>
        <summary>指定されたソースのデータの一覧から非アクティブなリスナー エントリを削除します。</summary>
        <returns>
          <see langword="true" />いくつかのエントリが実際に削除された場合それ以外の場合、<see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveHandler (System.Windows.Input.ICommand source, EventHandler&lt;EventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveHandler(class System.Windows.Input.ICommand source, class System.EventHandler`1&lt;class System.EventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteChangedEventManager.RemoveHandler(System.Windows.Input.ICommand,System.EventHandler{System.EventArgs})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.Input.ICommand" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.EventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="source">基になるオブジェクトが発生し、<see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" />イベント。</param>
        <param name="handler">処理するデリゲート、<see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" />イベント。</param>
        <summary>指定したソースから指定されたイベント ハンドラーを削除します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="handler" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected override void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteChangedEventManager.StartListening(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">イベントを持つオブジェクト。</param>
        <summary>リッスンを開始、<see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" />指定したソースのイベントです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected override void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteChangedEventManager.StopListening(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">リッスンを停止するソース オブジェクト。</param>
        <summary>リッスンが停止、<see cref="E:System.Windows.Input.ICommand.CanExecuteChanged" />指定したソースのイベントです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
