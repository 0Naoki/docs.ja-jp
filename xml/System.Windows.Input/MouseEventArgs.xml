<Type Name="MouseEventArgs" FullName="System.Windows.Input.MouseEventArgs">
  <TypeSignature Language="C#" Value="public class MouseEventArgs : System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MouseEventArgs extends System.Windows.Input.InputEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.MouseEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>データは、マウス関連のルーティング イベントを具体的には関係しないマウス ボタンやマウスのホイール、たとえば<see cref="E:System.Windows.UIElement.MouseMove" />します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベント データ クラスには、次の添付イベントを使用します。  
  
-   <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=nameWithType>  
  
 このイベント データ クラスには、次のルーティング イベントを使用します。 これらのルーティング イベントがより一般的な要素のモデルにアクセスできるようにする上記のアタッチされたイベントを転送[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]です。  
  
-   <xref:System.Windows.UIElement.MouseEnter?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.MouseLeave?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.MouseMove?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewMouseMove?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.MouseEnter?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.MouseLeave?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.MouseMove?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewMouseMove?displayProperty=nameWithType>  
  
 添付イベントおよび基本要素のルーティング イベントは、それぞれのイベント データを共有し、バブルとトンネル ルーティング イベントのバージョンは、イベント データを共有もします。 イベント ルートをたどる際は、イベントの処理の特性に影響することができます。 詳細については、「[入力概要](~/docs/framework/wpf/advanced/input-overview.md)です。  
  
 Other than、<xref:System.Windows.RoutedEventArgs>すべてのルーティング イベントの最も興味深いプロパティに関連するプロパティ<xref:System.Windows.Input.MouseEventArgs>で使用する場合があります、<xref:System.Windows.Input.MouseEventHandler>実装は現在のボタンの状態を公開するいくつかのプロパティ (など<xref:System.Windows.Input.MouseEventArgs.LeftButton%2A>) および<xref:System.Windows.Input.MouseEventArgs.MouseDevice%2A>)。 <xref:System.Windows.Input.MouseEventArgs.MouseDevice%2A>確認するために特に便利ですが<xref:System.Windows.Input.MouseDevice.Captured%2A>にします。  
  
 特にマウス ボタンのイベントを処理するイベントが、別のイベント データ クラスを使用することに注意してください<xref:System.Windows.Input.MouseButtonEventArgs>です。 マウス ボタンのプロパティは<xref:System.Windows.Input.MouseEventArgs>入力モードや、ボタンを含むボタン以外のイベントを処理している場合でも相互作用がある場合にします。  
  
 <xref:System.Windows.Input.Mouse>クラスには、追加のプロパティと、マウスの状態を判断するためのメソッドが用意されています。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseEventArgs (System.Windows.Input.MouseDevice mouse, int timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.MouseDevice mouse, int32 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mouse" Type="System.Windows.Input.MouseDevice" />
        <Parameter Name="timestamp" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="mouse">このイベントに関連付けられているマウス デバイス。</param>
        <param name="timestamp">入力が発生した時刻。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Windows.Input.MouseEventArgs" />クラス<see cref="T:System.Windows.Input.MouseDevice" />とタイムスタンプ</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MouseEventArgs (System.Windows.Input.MouseDevice mouse, int timestamp, System.Windows.Input.StylusDevice stylusDevice);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.MouseDevice mouse, int32 timestamp, class System.Windows.Input.StylusDevice stylusDevice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseEventArgs.#ctor(System.Windows.Input.MouseDevice,System.Int32,System.Windows.Input.StylusDevice)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mouse" Type="System.Windows.Input.MouseDevice" />
        <Parameter Name="timestamp" Type="System.Int32" />
        <Parameter Name="stylusDevice" Type="System.Windows.Input.StylusDevice" />
      </Parameters>
      <Docs>
        <param name="mouse">このイベントに関連付けられているマウス デバイス。</param>
        <param name="timestamp">入力が発生した時刻。</param>
        <param name="stylusDevice">このイベントに関連付けられている論理スタイラス デバイス。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Windows.Input.MouseEventArgs" />クラス<see cref="T:System.Windows.Input.MouseDevice" />、タイムスタンプ、および<see cref="T:System.Windows.Input.StylusDevice" />です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Point GetPosition (System.Windows.IInputElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Point GetPosition(class System.Windows.IInputElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseEventArgs.GetPosition(System.Windows.IInputElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="relativeTo">マウス ポインターの位置を計算するための基準枠として使用する要素。</param>
        <summary>指定した要素から見た相対的なマウス ポインターの位置を返します。</summary>
        <returns>指定したオブジェクトから見た相対的なマウス ポインターの位置の X 座標と Y 座標。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ポイント (0, 0) は、参照のフレームの左上隅です。  
  
 静的な<xref:System.Windows.Input.Mouse.GetPosition%2A?displayProperty=nameWithType>メソッドは、マウスの位置を取得するも使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.MouseEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">型固有の方法で呼び出すジェネリック ハンドラー。</param>
        <param name="genericTarget">ハンドラーを呼び出すターゲット。</param>
        <summary>イベントのシステムの効率を高めることができます、型固有の方法でイベント ハンドラーを呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この実装は、ジェネリック ハンドラーをキャスト、<xref:System.Windows.Input.MouseEventHandler>してそれを呼び出します。 この実装パターンとその理由の詳細については、次を参照してください。<xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>と[ルーティング イベントの概要](~/docs/framework/wpf/advanced/routed-events-overview.md)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftButton">
      <MemberSignature Language="C#" Value="public System.Windows.Input.MouseButtonState LeftButton { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.MouseButtonState LeftButton" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseEventArgs.LeftButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウスの左ボタンの現在の状態を取得します。</summary>
        <value>次のいずれか、マウスの左ボタンの現在の状態<see cref="F:System.Windows.Input.MouseButtonState.Pressed" />または<see cref="F:System.Windows.Input.MouseButtonState.Released" />です。  既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Mouse>クラスには、追加のプロパティと、マウスの状態を判断するためのメソッドが用意されています。  
  
   
  
## Examples  
 場合、次の例は、メッセージを出力の状態、<xref:System.Windows.Input.MouseEventArgs.LeftButton%2A>プロパティは<xref:System.Windows.Input.MouseButtonState.Pressed>します。  
  
 [!code-csharp[mousesnippetsample#MouseEventArgsLeftButtonDown](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#mouseeventargsleftbuttondown)]
 [!code-vb[mousesnippetsample#MouseEventArgsLeftButtonDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#mouseeventargsleftbuttondown)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MiddleButton">
      <MemberSignature Language="C#" Value="public System.Windows.Input.MouseButtonState MiddleButton { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.MouseButtonState MiddleButton" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseEventArgs.MiddleButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウスの中央ボタンの現在の状態を取得します。</summary>
        <value>次のいずれか、マウスの中央ボタンの現在の状態<see cref="F:System.Windows.Input.MouseButtonState.Pressed" />または<see cref="F:System.Windows.Input.MouseButtonState.Released" />です。 既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Mouse>クラスには、追加のプロパティと、マウスの状態を判断するためのメソッドが用意されています。  
  
   
  
## Examples  
 場合、次の例は、メッセージを出力の状態、<xref:System.Windows.Input.MouseEventArgs.MiddleButton%2A>プロパティは<xref:System.Windows.Input.MouseButtonState.Pressed>します。  
  
 [!code-csharp[mousesnippetsample#MouseEventArgsMiddleButtonDown](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#mouseeventargsmiddlebuttondown)]
 [!code-vb[mousesnippetsample#MouseEventArgsMiddleButtonDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#mouseeventargsmiddlebuttondown)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDevice">
      <MemberSignature Language="C#" Value="public System.Windows.Input.MouseDevice MouseDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.MouseDevice MouseDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseEventArgs.MouseDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このイベントに関連付けられているマウス デバイスを取得します。</summary>
        <value>このイベントに関連付けられているマウス デバイス。  既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Mouse>クラスには、追加のプロパティと、マウスの状態を判断するためのメソッドが用意されています。  
  
   
  
## Examples  
 次の例の取得、<xref:System.Windows.Input.MouseDevice>入力イベントに関連付けられています。  
  
 [!code-csharp[mousesnippetsample#MouseEventArgsMouseDevice](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#mouseeventargsmousedevice)]
 [!code-vb[mousesnippetsample#MouseEventArgsMouseDevice](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#mouseeventargsmousedevice)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightButton">
      <MemberSignature Language="C#" Value="public System.Windows.Input.MouseButtonState RightButton { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.MouseButtonState RightButton" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseEventArgs.RightButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウスの右ボタンの現在の状態を取得します。</summary>
        <value>次のいずれか、マウスの右ボタンの現在の状態<see cref="F:System.Windows.Input.MouseButtonState.Pressed" />または<see cref="F:System.Windows.Input.MouseButtonState.Released" />です。  既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Mouse>クラスには、追加のプロパティと、マウスの状態を判断するためのメソッドが用意されています。  
  
   
  
## Examples  
 場合、次の例は、メッセージを出力の状態、<xref:System.Windows.Input.MouseEventArgs.RightButton%2A>プロパティは<xref:System.Windows.Input.MouseButtonState.Pressed>します。  
  
 [!code-csharp[mousesnippetsample#MouseEventArgsRightButtonDown](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#mouseeventargsrightbuttondown)]
 [!code-vb[mousesnippetsample#MouseEventArgsRightButtonDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#mouseeventargsrightbuttondown)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusDevice">
      <MemberSignature Language="C#" Value="public System.Windows.Input.StylusDevice StylusDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.StylusDevice StylusDevice" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseEventArgs.StylusDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.StylusDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このイベントに関連付けられているスタイラス デバイスを取得します。</summary>
        <value>このイベントに関連付けられているスタイラスです。  既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、取得する方法を示します、<xref:System.Windows.Input.StylusDevice>イベントに関連付けられています。  
  
 [!code-csharp[mousesnippetsample#MouseEventArgsStylusDevice](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#mouseeventargsstylusdevice)]
 [!code-vb[mousesnippetsample#MouseEventArgsStylusDevice](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#mouseeventargsstylusdevice)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XButton1">
      <MemberSignature Language="C#" Value="public System.Windows.Input.MouseButtonState XButton1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.MouseButtonState XButton1" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseEventArgs.XButton1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最初の拡張のマウス ボタンの現在の状態を取得します。</summary>
        <value>いずれか 1 拡張ボタンの現在の状態<see cref="F:System.Windows.Input.MouseButtonState.Pressed" />または<see cref="F:System.Windows.Input.MouseButtonState.Released" />です。  既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Mouse>クラスには、追加のプロパティと、マウスの状態を判断するためのメソッドが用意されています。  
  
   
  
## Examples  
 場合、次の例は、メッセージを出力の状態、<xref:System.Windows.Input.MouseEventArgs.XButton1%2A>プロパティは<xref:System.Windows.Input.MouseButtonState.Pressed>します。  
  
 [!code-csharp[mousesnippetsample#MouseEventArgsXButton1ButtonDown](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#mouseeventargsxbutton1buttondown)]
 [!code-vb[mousesnippetsample#MouseEventArgsXButton1ButtonDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#mouseeventargsxbutton1buttondown)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XButton2">
      <MemberSignature Language="C#" Value="public System.Windows.Input.MouseButtonState XButton2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.MouseButtonState XButton2" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.MouseEventArgs.XButton2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.MouseButtonState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>2 番目の拡張のマウス ボタンの状態を取得します。</summary>
        <value>2 番目の拡張のマウス ボタンを次のいずれかの現在の状態<see cref="F:System.Windows.Input.MouseButtonState.Pressed" />または<see cref="F:System.Windows.Input.MouseButtonState.Released" />です。  既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Mouse>クラスには、追加のプロパティと、マウスの状態を判断するためのメソッドが用意されています。  
  
   
  
## Examples  
 場合、次の例は、メッセージを出力の状態、<xref:System.Windows.Input.MouseEventArgs.XButton2%2A>プロパティは<xref:System.Windows.Input.MouseButtonState.Pressed>します。  
  
 [!code-csharp[mousesnippetsample#MouseEventArgsXButton2ButtonDown](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#mouseeventargsxbutton2buttondown)]
 [!code-vb[mousesnippetsample#MouseEventArgsXButton2ButtonDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#mouseeventargsxbutton2buttondown)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
