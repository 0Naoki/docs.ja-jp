<Type Name="TransformPattern" FullName="System.Windows.Automation.TransformPattern">
  <TypeSignature Language="C#" Value="public class TransformPattern : System.Windows.Automation.BasePattern" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TransformPattern extends System.Windows.Automation.BasePattern" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.TransformPattern" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Automation.BasePattern</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>2 次元空間で移動、サイズ変更、または回転できるコントロールを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコントロール パターンのサポートは、デスクトップ上のオブジェクトに制限されません。 子の移動、サイズ変更、またはコンテナーの境界内で自由に回転でく限り、このコントロール パターンをコンテナー オブジェクトの子でサポートされてもする必要があります。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Cached">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TransformPattern.TransformPatternInformation Cached { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TransformPattern/TransformPatternInformation Cached" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.TransformPattern.Cached" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TransformPattern+TransformPatternInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Automation.TransformPattern" /> のキャッシュされた [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] プロパティ値を取得します。</summary>
        <value>コントロール パターンのキャッシュされた [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] プロパティ値を格納する構造体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 キャッシュされたプロパティ値必要がありますが要求されていない以前を使用して、<xref:System.Windows.Automation.CacheRequest>です。 使用して<xref:System.Windows.Automation.TransformPattern.Current%2A>プロパティの現在の値を取得します。  
  
 使用可能なプロパティおよびその使用方法については、次を参照してください。<xref:System.Windows.Automation.TransformPattern.TransformPatternInformation>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">要求されたプロパティがキャッシュ内にありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanMoveProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationProperty CanMoveProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationProperty CanMoveProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.TransformPattern.CanMoveProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanMove" /> プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この識別子は、UI オートメーション クライアント アプリケーションによって使用されます。 UI オートメーション プロバイダーの相当するフィールドを使用する必要があります<xref:System.Windows.Automation.TransformPatternIdentifiers>です。  
  
   
  
## Examples  
 次の例では、ルート要素がのコレクションを返す関数に渡される[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]ルートの子孫であり、一連のプロパティの条件を満たす要素。  
  
 [!code-csharp[UIATransformPattern_snip#100](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#100)]
 [!code-vb[UIATransformPattern_snip#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanResizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationProperty CanResizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationProperty CanResizeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.TransformPattern.CanResizeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanResize" /> プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この識別子は、UI オートメーション クライアント アプリケーションによって使用されます。 UI オートメーション プロバイダーの相当するフィールドを使用する必要があります<xref:System.Windows.Automation.TransformPatternIdentifiers>です。  
  
   
  
## Examples  
 次の例では、ルート要素がのコレクションを返す関数に渡される[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]ルートの子孫であり、一連のプロパティの条件を満たす要素。  
  
 [!code-csharp[UIATransformPattern_snip#100](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#100)]
 [!code-vb[UIATransformPattern_snip#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRotateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationProperty CanRotateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationProperty CanRotateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.TransformPattern.CanRotateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanRotate" /> プロパティを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この識別子は、UI オートメーション クライアント アプリケーションによって使用されます。 UI オートメーション プロバイダーの相当するフィールドを使用する必要があります<xref:System.Windows.Automation.TransformPatternIdentifiers>です。  
  
   
  
## Examples  
 次の例では、ルート要素がのコレクションを返す関数に渡される[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]ルートの子孫であり、一連のプロパティの条件を満たす要素。  
  
 [!code-csharp[UIATransformPattern_snip#100](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#100)]
 [!code-vb[UIATransformPattern_snip#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#100)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TransformPattern.TransformPatternInformation Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TransformPattern/TransformPatternInformation Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.TransformPattern.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TransformPattern+TransformPatternInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Automation.TransformPattern" /> の現在の [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] プロパティ値を取得します。</summary>
        <value>コントロール パターンの現在の [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] プロパティ値を格納する構造体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このパターンがあります、<xref:System.Windows.Automation.AutomationElement>で、<xref:System.Windows.Automation.AutomationElementMode.Full>の現在の値を取得するために参照します。 場合、<xref:System.Windows.Automation.AutomationElement>を使用して取得された<xref:System.Windows.Automation.AutomationElementMode.None>キャッシュされたデータのみが含まれている、および任意のプロパティの現在の値を取得しようとして例外を発生させます。 使用して<xref:System.Windows.Automation.TransformPattern.Cached%2A>を使用してあらかじめ指定されているプロパティのキャッシュされた値を取得する、<xref:System.Windows.Automation.CacheRequest>です。  
  
 使用可能なプロパティおよびその使用方法については、次を参照してください。<xref:System.Windows.Automation.TransformPattern.TransformPatternInformation>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public void Move (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Move(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.TransformPattern.Move(System.Double,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x">コントロールの左側の絶対画面座標。</param>
        <param name="y">コントロールの上部の絶対画面座標。</param>
        <summary>コントロールを移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトは、移動、サイズ変更、またはになるように後の画面位置が完全にキーボードまたはマウスへのアクセスし、そのコンテナーの座標外を回転することはできません。 たとえば、トップレベルのウィンドウが完全に画面外に移動や、子オブジェクトは、コンテナーのビューポートの境界の外移動されます。 このような場合、オブジェクトはコンテナーの境界内にオーバーライド上または左座標を使用して、できるだけ要求された画面座標近くに配置されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Windows.Automation.TransformPattern>からコントロール パターンを取得、 <xref:System.Windows.Automation.AutomationElement> 、後で移動するために使用して、<xref:System.Windows.Automation.AutomationElement>です。  
  
 [!code-csharp[UIATransformPattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#101)]
 [!code-vb[UIATransformPattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#101)]  
[!code-csharp[UIATransformPattern_snip#103](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#103)]
[!code-vb[UIATransformPattern_snip#103](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanMove" />プロパティは false。</exception>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.AutomationPattern Pattern;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.AutomationPattern Pattern" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.TransformPattern.Pattern" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Automation.TransformPattern" /> コントロール パターンを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この識別子は、UI オートメーション クライアント アプリケーションによって使用されます。 UI オートメーション プロバイダーの相当するフィールドを使用する必要があります<xref:System.Windows.Automation.TransformPatternIdentifiers>です。  
  
 パターン識別子がなどのメソッドに渡された<xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>から、指定した目的のコントロール パターンを取得する<xref:System.Windows.Automation.AutomationElement>です。  
  
   
  
## Examples  
 次の例で、<xref:System.Windows.Automation.TransformPattern>からコントロール パターンを取得、<xref:System.Windows.Automation.AutomationElement>です。  
  
 [!code-csharp[UIATransformPattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#101)]
 [!code-vb[UIATransformPattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public void Resize (double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resize(float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.TransformPattern.Resize(System.Double,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="width">ウィンドウの新しい幅 (ピクセル単位)。</param>
        <param name="height">ウィンドウの新しい高さ (ピクセル単位)。</param>
        <summary>コントロールのサイズを変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントロールで呼び出された場合は、分割ウィンドウをサポートする、このメソッドは、その他の連続したウィンドウのサイズ変更の副作用を持つことができます。  
  
 オブジェクトは、移動、サイズ変更、またはになるように後の画面位置が完全にキーボードまたはマウスへのアクセスし、そのコンテナーの座標外を回転することはできません。 たとえば、トップレベルのウィンドウが完全に画面外に移動や、子オブジェクトは、コンテナーのビューポートの境界の外移動されます。 このような場合、オブジェクトはコンテナーの境界内にオーバーライド上または左座標を使用して、できるだけ要求された画面座標近くに配置されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Windows.Automation.TransformPattern>からコントロール パターンを取得、 <xref:System.Windows.Automation.AutomationElement> 、その後のサイズを変更するために使用して、<xref:System.Windows.Automation.AutomationElement>です。  
  
 [!code-csharp[UIATransformPattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#101)]
 [!code-vb[UIATransformPattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#101)]  
[!code-csharp[UIATransformPattern_snip#104](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#104)]
[!code-vb[UIATransformPattern_snip#104](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanResize" />プロパティは false。</exception>
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public void Rotate (double degrees);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rotate(float64 degrees) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.TransformPattern.Rotate(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="degrees" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="degrees">要素を回転する角度の数値。 正の値は時計回りの回転、負の値は反時計回りの回転を表します。</param>
        <summary>コントロールを回転します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトは、移動、サイズ変更、またはになるように後の画面位置が完全にキーボードまたはマウスへのアクセスし、そのコンテナーの座標外を回転することはできません。 たとえば、トップレベルのウィンドウが完全に画面外に移動や、子オブジェクトは、コンテナーのビューポートの境界の外移動されます。 このような場合、オブジェクトはコンテナーの境界内にオーバーライド上または左座標を使用して、できるだけ要求された画面座標近くに配置されます。  
  
   
  
## Examples  
 次の例で、<xref:System.Windows.Automation.TransformPattern>からコントロール パターンを取得、<xref:System.Windows.Automation.AutomationElement>回転をその後使用、<xref:System.Windows.Automation.AutomationElement>です。  
  
 [!code-csharp[UIATransformPattern_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#101)]
 [!code-vb[UIATransformPattern_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#101)]  
[!code-csharp[UIATransformPattern_snip#102](~/samples/snippets/csharp/VS_Snippets_Wpf/UIATransformPattern_snip/CSharp/UIATransformPattern_snippets.cs#102)]
[!code-vb[UIATransformPattern_snip#102](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIATransformPattern_snip/VisualBasic/UIATransformPattern_snippets.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanRotate" />プロパティは false。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
