<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>スタンドアロンのアセンブリを正規表現のコンパイルに使用される正規表現について説明します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列<xref:System.Text.RegularExpressions.RegexCompilationInfo>にオブジェクトが渡される、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッド、アセンブリに含まれる各正規表現に関する情報を提供します。 アセンブリに含まれているコンパイル済みの各正規表現がから派生したクラスとして表される<xref:System.Text.RegularExpressions.Regex>です。 プロパティ、<xref:System.Text.RegularExpressions.RegexCompilationInfo>正規表現のクラス名、完全修飾名 (つまり、その名前空間とその型の名前)、正規表現パターン、(かどうか、正規表現が区別されません) などその他のオプションとタイムアウト間隔、正規表現エンジンは、一致を検索する期間を指定する型が定義されます。  
  
 インスタンス化することができます、<xref:System.Text.RegularExpressions.RegexCompilationInfo>クラスのオーバー ロードされたコンス トラクターを呼び出してオブジェクト。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">コンパイルする正規表現。</param>
        <param name="options">正規表現をコンパイルするときに使用する正規表現のオプションです。</param>
        <param name="name">コンパイルされた正規表現を表す型の名前です。</param>
        <param name="fullnamespace">新しい型が属する名前空間。</param>
        <param name="ispublic">
          <see langword="true" />コンパイル済みの正規表現をパブリックに表示されるようにするにはそれ以外の場合、<see langword="false" />です。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />アセンブリに含まれる正規表現に関する情報を格納するクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各パラメーター、<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>コンス トラクターは、のプロパティに直接対応、<xref:System.Text.RegularExpressions.RegexCompilationInfo>クラスです。 すべてのプロパティは読み取り/書き込みであるためは、その値が直接割り当てることもできます。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドは、コンパイルされた正規表現を格納するアセンブリを生成します。 そのため、指定しないでください<xref:System.Text.RegularExpressions.RegexOptions.Compiled>の値の 1 つとして`options`です。  
  
 場合`ispublic`は`true`、コンパイルされた正規表現クラスは、パブリック アクセシビリティを指定します。 つまり、任意のアセンブリで実行するコードからインスタンス化することができます。 場合`ispublic`は`false`、コンパイルされた正規表現クラスが指定された`internal`(C# の場合) または`Friend`(Visual Basic) のアクセシビリティ。 つまり、正規表現クラスと同じアセンブリで実行するコードからのみインスタンス化することができます。  
  
   
  
## Examples  
 次の例では、作成し、2 つのステップでコンパイルされた正規表現を使用します。  
  
 最初のステップでコンパイルし、次のコード例を実行します。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A>コード例ではコンス トラクターは、コンパイルされた正規表現を定義します。 コードの実行の結果は、コンパイルされた正規表現型という名前を含む FishRegex.dll をという名前のアセンブリ`FishRegex`です。  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 2 番目の手順で、FishRegex.dll への参照を使用して次のコード例をコンパイルして、結果として得られる実行可能ファイルを実行します。 実行可能ファイルを使用してターゲット文字列に一致する、`FishRegex`型、および対象の文字列に一致する、グループ、キャプチャ グループ、および一致項目のインデックス位置が表示されます。  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="name" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="fullnamespace" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>このコンス トラクターでは、作成元でのアプリケーション ドメインの既定のタイムアウト値を使用してコンパイル済みの正規表現を作成します。 タイムアウト値がアプリケーション ドメインに対して定義されている場合、コンパイルされた正規表現に値が使用<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />、パターン一致の操作がタイムアウトを防ぐことができます。コンパイルされた正規表現を作成するための推奨されるコンス トラクターは<see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />、タイムアウト間隔を設定することができます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="pattern">コンパイルする正規表現。</param>
        <param name="options">正規表現をコンパイルするときに使用する正規表現のオプションです。</param>
        <param name="name">コンパイルされた正規表現を表す型の名前です。</param>
        <param name="fullnamespace">新しい型が属する名前空間。</param>
        <param name="ispublic">
          <see langword="true" />コンパイル済みの正規表現をパブリックに表示されるようにするにはそれ以外の場合、<see langword="false" />です。</param>
        <param name="matchTimeout">正規表現の既定のタイムアウト間隔です。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />アセンブリに含まれる指定したタイムアウト値を持つ、正規表現に関する情報を格納するクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各パラメーター、<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29>コンス トラクターは、のプロパティに直接対応、<xref:System.Text.RegularExpressions.RegexCompilationInfo>クラスです。 すべてのプロパティは読み取り/書き込みであるためは、その値が直接割り当てることもできます。  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドは、コンパイルされた正規表現を格納するアセンブリを生成します。 そのため、指定しないでください<xref:System.Text.RegularExpressions.RegexOptions.Compiled>の値の 1 つとして`options`です。  
  
 場合`ispublic`は`true`、コンパイルされた正規表現クラスは、パブリック アクセシビリティを指定します。 つまり、任意のアセンブリで実行するコードからインスタンス化することができます。 場合`ispublic`は`false`、コンパイルされた正規表現クラスが指定された`internal`(C# の場合) または`Friend`(Visual Basic) のアクセシビリティ。 つまり、正規表現クラスと同じアセンブリで実行するコードからのみインスタンス化することができます。  
  
 `matchTimeout`パラメーターは、コンパイルされた正規表現の既定のタイムアウト間隔を定義します。 この値は概算の操作がタイムアウトになると、正規表現エンジンをスローする前に、コンパイルされた正規表現オブジェクトは 1 つの一致操作を実行する時間を表す、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>次のタイミング チェック中に例外です。 タイムアウト値の詳細については、次を参照してください。、<xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>プロパティです。  
  
> [!IMPORTANT]
>  常にコンパイルされる正規表現の既定のタイムアウト値を設定することをお勧めします。 渡すことによって、正規表現ライブラリのコンシューマーがそのタイムアウト値をオーバーライドできます、<xref:System.TimeSpan>をこのコンス トラクター オーバー ロードに新しいタイムアウト間隔を表す値です。  
  
   
  
## Examples  
 次の例では、という単一のコンパイルされた正規表現`DuplicateChars`入力文字列内の同じ文字の 2 つ以上の出現を識別します。 コンパイルされた正規表現は、2 秒の既定のタイムアウトがします。 例を実行するときに、コンパイルされた正規表現を含む RegexLib.dll をという名前のクラス ライブラリを作成します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 正規表現パターン `(\w)\1+` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`(\w)`|任意の単語文字に一致し、最初のキャプチャ グループに割り当てます。|  
|`\1+`|最初のキャプチャ グループの値の 1 つまたは複数回の出現に一致します。|  
  
 次の例では、`DuplicatedChars`文字列配列に重複する文字を識別する正規表現。 呼び出すとき、`DuplicatedChars`コンス トラクター、.5 秒間にタイムアウト間隔を変更します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pattern" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="name" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="fullnamespace" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="matchTimeout" />負の値、0、または約 24 日より大きい。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコンパイルされた正規表現がパブリックな可視性を持つかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" />場合は、正規表現があるパブリックな可視性です。それ以外の場合、<see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A>プロパティは`false`、現在のインスタンスで定義された正規表現クラスは、クラスが含まれているアセンブリで実行されているコードでのみインスタンス化できます。 ただし、ため、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType>コンパイルされる正規表現のみを含み、追加する追加のコードを許可しないアセンブリを生成するメソッド、通常、このプロパティの値を代入する必要はありません`false`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または正規表現の既定のタイムアウト間隔を設定します。</summary>
        <value>前に、のパターン マッチング操作で経過できる既定の最大時間間隔、<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />スローされると、または<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />タイムアウトが無効になっている場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A>プロパティは、コンパイルされた正規表現の既定のタイムアウト間隔を定義します。 この値は概算の操作がタイムアウトになると、正規表現エンジンをスローする前に、コンパイルされた正規表現は単一の一致操作を実行する時間を表す、<xref:System.Text.RegularExpressions.RegexMatchTimeoutException>次のタイミング チェック中に例外です。  
  
> [!IMPORTANT]
>  常にコンパイルされる正規表現の既定のタイムアウト値を設定することをお勧めします。 渡すことによって、正規表現ライブラリのコンシューマーがそのタイムアウト値をオーバーライドできます、<xref:System.TimeSpan>コンパイルされた正規表現のクラスのコンス トラクターへの新しいタイムアウト間隔を表す値です。  
  
 既定のタイムアウト値を割り当てることができます、<xref:System.Text.RegularExpressions.RegexCompilationInfo>で、次の方法のいずれかのオブジェクト。  
  
-   呼び出して、<xref:System.AppDomain.SetData%2A?displayProperty=nameWithType>メソッドとの文字列表現を提供する、 <xref:System.TimeSpan> "REGEX_DEFAULT_MATCH_TIMEOUT"プロパティの値。  
  
-   呼び出して、<xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29>コンス トラクターとの値を提供する、`matchTimeout`パラメーター。  
  
-   このプロパティの値を設定します。  
  
 妥当なタイムアウトの間隔を設定するには、次の要因を検討してください。  
  
-   長さと複雑な正規表現パターンです。 時間が長く、複雑な正規表現では、短くてわかりやすいものよりも時間が必要です。  
  
-   予期されるマシンの負荷。 処理では、CPU およびメモリ使用率が高いシステムでより多くの時間がかかります。  
  
   
  
## Examples  
 次の例では、という単一のコンパイルされた正規表現`DuplicateChars`入力文字列内の同じ文字の 2 つ以上の出現を識別します。 コンパイルされた正規表現は、2 秒の既定のタイムアウトがします。 例を実行するときに、コンパイルされた正規表現を含む RegexLib.dll をという名前のクラス ライブラリを作成します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 正規表現パターン `(\w)\1+` は、次の表に示すように定義されています。  
  
|パターン|説明|  
|-------------|-----------------|  
|`(\w)`|任意の単語文字に一致し、最初のキャプチャ グループに割り当てます。|  
|`\1+`|最初のキャプチャ グループの値の 1 つまたは複数回の出現に一致します。|  
  
 次の例では、`DuplicatedChars`文字列配列に重複する文字を識別する正規表現。 呼び出すとき、`DuplicatedChars`コンス トラクター、.5 秒間にタイムアウト間隔を変更します。  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコンパイルされた正規表現を表す型の名前を設定します。</summary>
        <value>新しい型の名前です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo>から派生したクラスとして表されるコンパイルされた正規表現を定義するクラスが使用される<xref:System.Text.RegularExpressions.Regex>です。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>プロパティは、正規表現型のクラス名を定義し、<xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>と<xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>プロパティが同時に、完全修飾名を定義します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティの値は<see langword="null" />します。</exception>
        <exception cref="T:System.ArgumentException">このプロパティの値は、空の文字列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または新しい型が属する名前空間を設定します。</summary>
        <value>新しい型の名前空間です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo>から派生したクラスとして表されるコンパイルされた正規表現を定義するクラスが使用される<xref:System.Text.RegularExpressions.Regex>です。 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>プロパティは、コンパイルされた正規表現の種類を含む名前空間を定義し、<xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A>と<xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A>プロパティが同時に、完全修飾名を定義します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティの値は<see langword="null" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または正規表現をコンパイルするときに使用するオプションを設定します。</summary>
        <value>列挙値のビットごとの組み合わせ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドは、コンパイルされた正規表現を格納するアセンブリを生成します。 そのためを指定する必要はいない<xref:System.Text.RegularExpressions.RegexOptions.Compiled>としてこのプロパティの値のいずれか。 これが存在する場合、<xref:System.Text.RegularExpressions.RegexOptions.Compiled>オプションは無視されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコンパイルする正規表現を設定します。</summary>
        <value>コンパイルする正規表現。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A>プロパティは、任意の有効な正規表現を含めることができます。 場合の値、<xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A>プロパティは構文的に正しい正規表現パターンへの呼び出しではありません、<xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A>メソッドがスローされます、<xref:System.ArgumentException>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティの値は<see langword="null" />します。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
