<Type Name="SmtpClient" FullName="System.Net.Mail.SmtpClient">
  <TypeSignature Language="C#" Value="public class SmtpClient : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SmtpClient extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Mail.SmtpClient" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.Mail</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("SmtpClient and its network of types are poorly designed, we strongly recommend you use https://github.com/jstedfast/MailKit and https://github.com/jstedfast/MimeKit instead")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アプリケーションで簡易メール転送プロトコル (SMTP) を使用して電子メールを送信できます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient>配信用の SMTP サーバーに電子メールを送信するクラスを使用します。 SMTP プロトコルが記載されている RFC 2821 で定義されている[http://www.ietf.org](http://www.ietf.org/)です。  
  
 次の表に示すようにクラスを使用して送信される電子メール メッセージを構築するため<xref:System.Net.Mail.SmtpClient>です。  
  
|クラス|説明|  
|-----------|-----------------|  
|<xref:System.Net.Mail.Attachment>|ファイルの添付ファイルを表します。 このクラスでは、ファイル、ストリーム、またはテキストを電子メール メッセージに添付することができます。|  
|<xref:System.Net.Mail.MailAddress>|送信者と受信者の電子メール アドレスを表します。|  
|<xref:System.Net.Mail.MailMessage>|電子メール メッセージを表します。|  
  
 構築し、を使用して電子メール メッセージを送信する<xref:System.Net.Mail.SmtpClient>、次の情報を指定する必要があります。  
  
-   使用する電子メールを送信する SMTP ホスト サーバー。 参照してください、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティです。  
  
-   SMTP サーバーで必要な場合、認証の資格情報。 <xref:System.Net.Mail.SmtpClient.Credentials%2A> プロパティを参照してください。  
  
-   送信者の電子メール アドレス。 参照してください、<xref:System.Net.Mail.SmtpClient.Send%2A>と<xref:System.Net.Mail.SmtpClient.SendAsync%2A>を受け取るメソッド、`from`パラメーター。 また、<xref:System.Net.Mail.MailMessage.From%2A?displayProperty=nameWithType>プロパティです。  
  
-   電子メール アドレスまたは受信者のアドレス。 参照してください、<xref:System.Net.Mail.SmtpClient.Send%2A>と<xref:System.Net.Mail.SmtpClient.SendAsync%2A>を受け取るメソッド、`recipient`パラメーター。 また、<xref:System.Net.Mail.MailMessage.To%2A?displayProperty=nameWithType>プロパティです。  
  
-   メッセージの内容。 参照してください、<xref:System.Net.Mail.SmtpClient.Send%2A>と<xref:System.Net.Mail.SmtpClient.SendAsync%2A>を受け取るメソッド、`body`パラメーター。 また、<xref:System.Net.Mail.MailMessage.Body%2A?displayProperty=nameWithType>プロパティです。  
  
 電子メール メッセージに添付ファイルを含めるには、まず、添付ファイルを使用して作成、<xref:System.Net.Mail.Attachment>クラス、しを使用してメッセージに追加し、<xref:System.Net.Mail.MailMessage.Attachments%2A?displayProperty=nameWithType>プロパティです。 添付ファイルのファイルの種類と受信者によって使用される電子メール リーダー、によって、一部の受信者は可能性があります、添付ファイルを読み取ることができません。 元の形式で添付ファイルを表示できないクライアントでは、使用して代替ビューを指定することができます、<xref:System.Net.Mail.MailMessage.AlternateViews%2A?displayProperty=nameWithType>プロパティです。  
  
 アプリケーションを使用することができますかを指定するマシンの構成ファイルの既定のホスト、ポート、および資格情報の値すべて<xref:System.Net.Mail.SmtpClient>オブジェクト。 詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)です。  
  
 SMTP サーバーに送信する電子メールの待機中に、電子メール メッセージとブロックを送信する、同期のいずれかを使用して<xref:System.Net.Mail.SmtpClient.Send%2A>メソッドです。 使用するように、電子メールの送信中の実行を続行する、プログラムのメイン スレッド、非同期のいずれかの<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドです。 <xref:System.Net.Mail.SmtpClient.SendCompleted>イベントが発生したときに、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作が完了します。 このイベントを受信するには、追加する必要があります、<xref:System.Net.Mail.SendCompletedEventHandler>に委任<xref:System.Net.Mail.SmtpClient.SendCompleted>です。 <xref:System.Net.Mail.SendCompletedEventHandler>デリゲートでの通知を処理するコールバック メソッドを参照する必要があります<xref:System.Net.Mail.SmtpClient.SendCompleted>イベント。 非同期の電子メール転送を取り消す場合にを使用して、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>メソッドです。  
  
> [!NOTE]
>  進行状況での電子メール送信が呼び出す場合<xref:System.Net.Mail.SmtpClient.SendAsync%2A>または<xref:System.Net.Mail.SmtpClient.Send%2A>もう一度、きます、<xref:System.InvalidOperationException>です。  
  
 現在のインスタンスによって確立された接続、<xref:System.Net.Mail.SmtpClient>アプリケーションが同じの SMTP サーバーに複数のメッセージを送信したい場合は、SMTP サーバーへのクラスを再利用可能性があります。 これは、認証や暗号化を使用する場合、SMTP サーバーへの接続を確立します。 認証および TLS セッションを確立するプロセスは、高コストな操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件は、パフォーマンスに大きな影響を与える可能性があります。 大量の電子メール アプリケーションを送信する電子メール ステータスの更新、ニュースレターの配布、または電子メールのアラートの数があります。 また多くの電子メール クライアント アプリケーション オフライン モードをサポート ユーザーが SMTP サーバーへの接続が確立されたときに後で送信される多くの電子メール メッセージを組み込むことができます。 特定の SMTP サーバー (インターネット サービス プロバイダーによって提供される) を他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントの一般的なであります。  
  
 <xref:System.Net.Mail.SmtpClient>クラスの実装は、すべてのメッセージを同じサーバーへの接続が再度確立のオーバーヘッドを回避できますに SMTP 接続をプールします。 アプリケーションで再利用と同じことがあります<xref:System.Net.Mail.SmtpClient>同じの SMTP サーバーと多くの異なる SMTP サーバーには、多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したときに決定する方法はありませんを使用して、<xref:System.Net.Mail.SmtpClient>をオブジェクトとそれをクリーンアップする必要があります。  
  
 SMTP セッションが終了し、クライアントが接続を終了する、ときにをサーバーに送信するメッセージがなくなったことを示す終了メッセージを送信にする必要があります。 これにより、クライアントからの接続に関連付けられているリソースを解放して、クライアントによって送信されたメッセージを処理するサーバー。  
  
 <xref:System.Net.Mail.SmtpClient>クラスには いいえ`Finalize`メソッド、アプリケーションを呼び出す必要がありますので<xref:System.Net.Mail.SmtpClient.Dispose%2A>を明示的にリソースを解放します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドがで指定された SMTP サーバーに確立されているすべての接続を反復処理、<xref:System.Net.Mail.SmtpClient.Host%2A>プロパティと、TCP 接続を正常に終了後に終了メッセージを送信します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドによって使用されるアンマネージ リソースも解放、<xref:System.Net.Sockets.Socket>オプションでマネージ リソースを破棄します。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> を使い終わったら <xref:System.Net.Mail.SmtpClient> を呼び出します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 呼び出した後<xref:System.Net.Mail.SmtpClient.Dispose%2A>へのすべての参照を解放する必要があります、<xref:System.Net.Mail.SmtpClient>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Net.Mail.SmtpClient>占有されていた。  
  
   
  
## Examples  
 次のコード例では、電子メール メッセージの非同期送信を示します。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Net.Mail.SmtpClient" />構成ファイルの設定を使用して、クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを初期化します、 <xref:System.Net.Mail.SmtpClient.Host%2A>、 <xref:System.Net.Mail.SmtpClient.Credentials%2A>、および<xref:System.Net.Mail.SmtpClient.Port%2A>、新しいプロパティ<xref:System.Net.Mail.SmtpClient>アプリケーションまたはマシン構成ファイルで設定を使用しています。 詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)です。  
  
   
  
## Examples  
 次のコード例では、電子メール メッセージの送信を示します。  
  
 [!code-cpp[NclMailSync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#4)]
 [!code-csharp[NclMailSync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#4)]  
  
 例については、 \<mailSettings > アプリケーションまたはマシン構成ファイル内のノードを参照してください[ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)です。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.Mail.SmtpPermission">構築するために、<see cref="T:System.Net.Mail.SmtpClient" />です。 関連する列挙値:<see cref="F:System.Net.Mail.SmtpAccess.Connect" />です。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient (string host);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string host) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="host">A<see cref="T:System.String" />名前または SMTP トランザクションで使用されるホスト コンピューターの IP アドレスを格納しています。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Net.Mail.SmtpClient" />指定された SMTP サーバーを使用して電子メールを送信するクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `host`パラメーターがの値を初期化するために使用される、<xref:System.Net.Mail.SmtpClient.Host%2A>プロパティです。 <xref:System.Net.Mail.SmtpClient.Credentials%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティは、アプリケーションまたはマシン構成ファイルで設定を使用して初期化されます。 場合`host`は`null`以上<xref:System.String.Empty?displayProperty=nameWithType>、<xref:System.Net.Mail.SmtpClient.Host%2A>アプリケーションまたはマシン構成ファイルの設定を使用して初期化します。  
  
 詳細については、アプリケーションとマシンの構成ファイルを使用して、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)です。 使用して情報を指定した場合<xref:System.Net.Mail.SmtpClient>コンス トラクターまたはプロパティでは、この情報は、構成ファイル設定をオーバーライドします。  
  
   
  
## Examples  
 次のコード例では、このコンス トラクターを呼び出すことを示します。  
  
 [!code-cpp[NclMailSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#3)]
 [!code-csharp[NclMailSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Net.Mail.SmtpPermission">構築するために、<see cref="T:System.Net.Mail.SmtpClient" />です。 関連する列挙値:<see cref="F:System.Net.Mail.SmtpAccess.Connect" />です。</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SmtpClient (string host, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string host, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.#ctor(System.String,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="host">A<see cref="T:System.String" />名前または SMTP トランザクションで使用されるホストの IP アドレスを格納しています。</param>
        <param name="port"><see cref="T:System.Int32" />で使用されるポートが含まれる 0 より大きい<c>ホスト</c>です。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Net.Mail.SmtpClient" />指定された SMTP サーバーとポートを使用して電子メールを送信するクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `host`と`port`パラメーターの値の設定、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティ、それぞれします。 場合`host`は`null`以上<xref:System.String.Empty?displayProperty=nameWithType>、<xref:System.Net.Mail.SmtpClient.Host%2A>アプリケーションまたはマシン構成ファイルの設定を使用して初期化します。 場合`port`ゼロ、<xref:System.Net.Mail.SmtpClient.Port%2A>アプリケーションまたはマシン構成ファイルの設定を使用して初期化します。 <xref:System.Net.Mail.SmtpClient.Credentials%2A>アプリケーションまたはマシン構成ファイルで設定を使用してプロパティを初期化します。  
  
 詳細については、アプリケーションとマシンの構成ファイルを使用して、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)です。 使用して情報を指定した場合<xref:System.Net.Mail.SmtpClient>コンス トラクターまたはプロパティでは、この情報は、構成ファイル設定をオーバーライドします。  
  
   
  
## Examples  
 次のコード例では、このコンス トラクターを呼び出すことを示します。  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> は 0 未満には設定できません。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">ポートを指定します。 関連する列挙値:<see cref="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort" />です。</permission>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificates">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.ClientCertificates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Client certificates not used")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509CertificateCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>どの証明書は、Secure Sockets Layer (SSL) 接続を確立するために使用する必要がありますを指定します。</summary>
        <value><see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />、1 つまたは複数のクライアント証明書を保持します。 既定値は、構成ファイルでメールの構成属性から派生します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアント証明書は、既定では省略可能です。ただし、サーバーの構成では、クライアントが最初の接続のネゴシエーションの一部として有効な証明書を提示することが必要です。  
  
> [!NOTE]
>  フレームワークでは、SSL セッションを作成するときはキャッシュ、可能であれば、新しい要求のキャッシュされているセッションを再利用しようとします。 フレームワークでの最初の要素を使用するときに、SSL セッションを再利用する、 <xref:System.Net.Mail.SmtpClient.ClientCertificates%2A> (かどうかがある 1 つ)、匿名のセッションを再利用を試みる<xref:System.Net.Mail.SmtpClient.ClientCertificates%2A>が空です。  
  
   
  
## Examples  
 次のコード例では、SMTP サーバーで SSL 接続を確立し、電子メールを送信する接続を使用します。  
  
 [!code-csharp[NclSSLMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSSLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentialsByHost Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentialsByHost Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentialsByHost</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または送信者の認証に使用する資格情報を設定します。</summary>
        <value><see cref="T:System.Net.ICredentialsByHost" /> ; 認証を使用する資格情報を表すまたは<see langword="null" />資格情報が指定されていない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一部の SMTP サーバーは、サーバーは自身の代わりに電子メールを送信する前にクライアントを認証することが必要です。 既定のネットワーク資格情報を使用するのに設定することができます、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>に`true`このプロパティを設定する代わりにします。 場合、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>プロパティに設定されている`false,`で値を設定し、<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティがサーバーに接続するときに資格情報に使用されます。 場合、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>プロパティに設定されている`false`と<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティが設定されていない、し、メールが匿名でのサーバーに送信されます。  
  
 アプリケーションとマシンの構成ファイルを使用して資格情報を指定することもできます。 詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)です。 使用して情報を指定した場合、<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティ、この情報は、構成ファイルの設定をオーバーライドします。  
  
> [!CAUTION]
>  基本認証の資格情報を指定する場合は、クリア テキストでサーバーに送信されます。 これは、ことは、資格情報を表示、または他のユーザーを使用しているためにセキュリティ上の問題にもたらします。  
  
   
  
## Examples  
 次のコード例では、電子メールを送信するために使用する資格情報の設定を示しています。  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">電子メールが送信されるときは、このプロパティの値を変更することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeliveryFormat">
      <MemberSignature Language="C#" Value="public System.Net.Mail.SmtpDeliveryFormat DeliveryFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.SmtpDeliveryFormat DeliveryFormat" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.DeliveryFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SmtpDeliveryFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定が使用する配信形式<see cref="T:System.Net.Mail.SmtpClient" />電子メールを送信します。</summary>
        <value><see cref="T:System.Net.Mail.SmtpDeliveryFormat" /> を返します。  
  
 使用される配信形式<see cref="T:System.Net.Mail.SmtpClient" />です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliveryMethod">
      <MemberSignature Language="C#" Value="public System.Net.Mail.SmtpDeliveryMethod DeliveryMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Mail.SmtpDeliveryMethod DeliveryMethod" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.DeliveryMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SmtpDeliveryMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>どのように送信する電子メール メッセージの処理を指定します。</summary>
        <value><see cref="T:System.Net.Mail.SmtpDeliveryMethod" />電子メール メッセージの配信方法を示すです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配信方法は次のとおりです。  
  
-   SMTP サーバー。  
  
-   IIS を電子メールをピックアップ ディレクトリに移動し、メッセージを提供します。  
  
-   指定されたディレクトリに電子メールを移す<xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A>別のアプリケーションによって後で配信します。  
  
 このプロパティの既定値は、マシン内でも設定できますまたはアプリケーション構成ファイル。 加えられた変更、<xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A>プロパティは、構成ファイルの設定をオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>SMTP サーバーに終了メッセージを送信、適切に TCP 接続を終了しの現在のインスタンスによって使用されるすべてのリソースを解放、<see cref="T:System.Net.Mail.SmtpClient" />クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスによって確立された接続、<xref:System.Net.Mail.SmtpClient>アプリケーションが同じの SMTP サーバーに複数のメッセージを送信したい場合は、SMTP サーバーへのクラスを再利用可能性があります。 これは、認証や暗号化を使用する場合、SMTP サーバーへの接続を確立します。 認証および TLS セッションを確立するプロセスは、高コストな操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件は、パフォーマンスに大きな影響を与える可能性があります。 大量の電子メール アプリケーションを送信する電子メール ステータスの更新、ニュースレターの配布、または電子メールのアラートの数があります。 また多くの電子メール クライアント アプリケーション オフライン モードをサポート ユーザーが SMTP サーバーへの接続が確立されたときに後で送信される多くの電子メール メッセージを組み込むことができます。 特定の SMTP サーバー (インターネット サービス プロバイダーによって提供される) を他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントの一般的なであります。  
  
 <xref:System.Net.Mail.SmtpClient>クラスの実装は、すべてのメッセージを同じサーバーへの接続が再度確立のオーバーヘッドを回避できますに SMTP 接続をプールします。 アプリケーションで再利用と同じことがあります<xref:System.Net.Mail.SmtpClient>同じの SMTP サーバーと多くの異なる SMTP サーバーには、多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したときに決定する方法はありませんを使用して、<xref:System.Net.Mail.SmtpClient>をオブジェクトとそれをクリーンアップする必要があります。  
  
 SMTP セッションが終了し、クライアントが接続を終了する、ときにをサーバーに送信するメッセージがなくなったことを示す終了メッセージを送信にする必要があります。 これにより、クライアントからの接続に関連付けられているリソースを解放して、クライアントによって送信されたメッセージを処理するサーバー。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> TCP 接続を正常に終了後にメソッドが確立されたすべての接続と各 SMTP サーバーに終了メッセージを送信を反復処理します。 これらのメソッドも、アンマネージ リソースを解放して使用される、<xref:System.Net.Sockets.Socket>し、必要に応じてマネージ リソースを破棄します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>SMTP サーバーに終了メッセージを送信、適切に TCP 接続を終了しの現在のインスタンスによって使用されるすべてのリソースを解放、<see cref="T:System.Net.Mail.SmtpClient" />クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスによって確立された接続、<xref:System.Net.Mail.SmtpClient>アプリケーションが同じの SMTP サーバーに複数のメッセージを送信したい場合は、SMTP サーバーへのクラスを再利用可能性があります。 これは、認証や暗号化を使用する場合、SMTP サーバーへの接続を確立します。 認証および TLS セッションを確立するプロセスは、高コストな操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件は、パフォーマンスに大きな影響を与える可能性があります。 大量の電子メール アプリケーションを送信する電子メール ステータスの更新、ニュースレターの配布、または電子メールのアラートの数があります。 また多くの電子メール クライアント アプリケーション オフライン モードをサポート ユーザーが SMTP サーバーへの接続が確立されたときに後で送信される多くの電子メール メッセージを組み込むことができます。 特定の SMTP サーバー (インターネット サービス プロバイダーによって提供される) を他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントの一般的なであります。  
  
 <xref:System.Net.Mail.SmtpClient>クラスの実装は、すべてのメッセージを同じサーバーへの接続が再度確立のオーバーヘッドを回避できますに SMTP 接続をプールします。 アプリケーションで再利用と同じことがあります<xref:System.Net.Mail.SmtpClient>同じの SMTP サーバーと多くの異なる SMTP サーバーには、多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したときに決定する方法はありませんを使用して、<xref:System.Net.Mail.SmtpClient>をオブジェクトとそれをクリーンアップする必要があります。  
  
 SMTP セッションが終了し、クライアントが接続を終了する、ときにをサーバーに送信するメッセージがなくなったことを示す終了メッセージを送信にする必要があります。 これにより、クライアントからの接続に関連付けられているリソースを解放して、クライアントによって送信されたメッセージを処理するサーバー。  
  
 呼び出す、<xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドを<xref:System.Net.Mail.SmtpClient>非同期で実行されているオブジェクト<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作には、送信操作は [キャンセル] かのよう、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>メソッドが呼び出されました。  
  
 <xref:System.Net.Mail.SmtpClient>クラスを持たない`Finalize`メソッドです。 したがって、アプリケーションを呼び出す必要があります<xref:System.Net.Mail.SmtpClient.Dispose%2A>を明示的にリソースを解放します。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドがで指定された SMTP サーバーに確立されているすべての接続を反復処理、<xref:System.Net.Mail.SmtpClient.Host%2A>プロパティと、TCP 接続を正常に終了後に終了メッセージを送信します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドは、基になるによって使用されるアンマネージ リソースも解放<xref:System.Net.Sockets.Socket>です。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> を使い終わったら <xref:System.Net.Mail.SmtpClient> を呼び出します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 呼び出した後<xref:System.Net.Mail.SmtpClient.Dispose%2A>へのすべての参照を解放する必要があります、<xref:System.Net.Mail.SmtpClient>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Net.Mail.SmtpClient>占有されていた。  
  
 詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。  
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient.Dispose%2A> への最後の参照を解放する前に、必ず <xref:System.Net.Mail.SmtpClient> を呼び出してください。 それ以外の場合、ガベージ コレクターがメモリを再利用できるように、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Does nothing at the moment.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>終了メッセージを SMTP サーバーに送信 TCP 接続を終了、正常の現在のインスタンスによって使用されるすべてのリソースを解放、<see cref="T:System.Net.Mail.SmtpClient" />クラス、および必要に応じてマネージ リソースを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスによって確立された接続、<xref:System.Net.Mail.SmtpClient>アプリケーションが同じの SMTP サーバーに複数のメッセージを送信したい場合は、SMTP サーバーへのクラスを再利用可能性があります。 これは、認証や暗号化を使用する場合、SMTP サーバーへの接続を確立します。 認証および TLS セッションを確立するプロセスは、高コストな操作を指定できます。 同じ SMTP サーバーに大量の電子メールを送信するときに、メッセージごとに接続を再確立するための要件は、パフォーマンスに大きな影響を与える可能性があります。 大量の電子メール アプリケーションを送信する電子メール ステータスの更新、ニュースレターの配布、または電子メールのアラートの数があります。 また多くの電子メール クライアント アプリケーション オフライン モードをサポート ユーザーが SMTP サーバーへの接続が確立されたときに後で送信される多くの電子メール メッセージを組み込むことができます。 特定の SMTP サーバー (インターネット サービス プロバイダーによって提供される) を他の SMTP サーバーにこの電子メールを転送するすべての SMTP メッセージを送信する電子メール クライアントの一般的なであります。  
  
 <xref:System.Net.Mail.SmtpClient>クラスの実装は、すべてのメッセージを同じサーバーへの接続が再度確立のオーバーヘッドを回避できますに SMTP 接続をプールします。 アプリケーションで再利用と同じことがあります<xref:System.Net.Mail.SmtpClient>同じの SMTP サーバーと多くの異なる SMTP サーバーには、多くのさまざまな電子メールを送信するオブジェクト。 その結果、アプリケーションが終了したときに決定する方法はありませんを使用して、<xref:System.Net.Mail.SmtpClient>をオブジェクトとそれをクリーンアップする必要があります。  
  
 SMTP セッションが終了し、クライアントが接続を終了する、ときにをサーバーに送信するメッセージがなくなったことを示す終了メッセージを送信にする必要があります。 これにより、クライアントからの接続に関連付けられているリソースを解放して、クライアントによって送信されたメッセージを処理するサーバー。  
  
 呼び出す、<xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドを<xref:System.Net.Mail.SmtpClient>非同期で実行されているオブジェクト<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作には、送信操作は [キャンセル] かのよう、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>メソッドが呼び出されました。  
  
 <xref:System.Net.Mail.SmtpClient>クラスを持たない`Finalize`メソッドです。 したがって、アプリケーションを呼び出す必要があります<xref:System.Net.Mail.SmtpClient.Dispose%2A>を明示的にリソースを解放します。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドがで指定された SMTP サーバーに確立されているすべての接続を反復処理、<xref:System.Net.Mail.SmtpClient.Host%2A>プロパティと、TCP 接続を正常に終了後に終了メッセージを送信します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A>メソッドによって使用されるアンマネージ リソースも解放、<xref:System.Net.Sockets.Socket>オプションでマネージ リソースを破棄します。  
  
 <xref:System.Net.Mail.SmtpClient.Dispose%2A> を使い終わったら <xref:System.Net.Mail.SmtpClient> を呼び出します。 <xref:System.Net.Mail.SmtpClient.Dispose%2A> メソッドによって、<xref:System.Net.Mail.SmtpClient> は使用不可の状態になります。 呼び出した後<xref:System.Net.Mail.SmtpClient.Dispose%2A>へのすべての参照を解放する必要があります、<xref:System.Net.Mail.SmtpClient>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Net.Mail.SmtpClient>占有されていた。  
  
 詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。  
  
> [!NOTE]
>  <xref:System.Net.Mail.SmtpClient.Dispose%2A> への最後の参照を解放する前に、必ず <xref:System.Net.Mail.SmtpClient> を呼び出してください。 それ以外の場合、ガベージ コレクターがメモリを再利用できるように、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableSsl">
      <MemberSignature Language="C#" Value="public bool EnableSsl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableSsl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.EnableSsl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定するかどうか、<see cref="T:System.Net.Mail.SmtpClient" />接続の暗号化に Secure Sockets Layer (SSL) を使用します。</summary>
        <value>
          <see langword="true" />場合、 <see cref="T:System.Net.Mail.SmtpClient" /> SSL を使用して、それ以外の<see langword="false" />します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティは、指定した SMTP メール サーバーへのアクセスに SSL が使用されるかどうかを指定します。  
  
 このプロパティの既定値は、マシン内でも設定できますまたはアプリケーション構成ファイル。 加えられた変更、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティは、構成ファイルの設定をオーバーライドします。  
  
 <xref:System.Net.Mail.SmtpClient>クラスのみがサポート SMTP サービス拡張 SMTP のセキュリティで保護されたトランスポート層セキュリティ経由での RFC 3207 で定義されています。 このモードでは、SMTP セッションが暗号化されていないチャネルで開始し、STARTTLS コマンドがクライアントで SSL を使用してセキュリティで保護された通信に切り替えるには、サーバーに発行します。 詳細についてはインターネット技術標準化委員会 (IETF) によって発行された RFC 3207 を参照してください。  
  
 代替の接続方法は、任意のプロトコル コマンドを送信する前の SSL セッションの前払いの確立です。 この接続方法は、SMTP と SSL と呼ばれることがあります、SMTP、SSL または SMTPS と既定では、ポート 465 を使用します。 SSL を使用してこの代替の接続方法は現在サポートされていません。  
  
 使用することができます<xref:System.Net.Mail.SmtpClient.ClientCertificates%2A>SSL 接続を確立するためにクライアント証明書を使用する必要がありますを指定します。 <xref:System.Net.ServicePointManager.ServerCertificateValidationCallback%2A> SMTP サーバーによって提供される証明書を拒否することができます。 <xref:System.Net.ServicePointManager.SecurityProtocol%2A>プロパティでは、使用する SSL プロトコルのバージョンを指定することができます。  
  
> [!NOTE]
>  場合、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティに設定されている`true`、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後への呼び出しをアドバタイズしていないと、<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドがスローされます、<xref:System.Net.Mail.SmtpException>です。  
  
   
  
## Examples  
 次のコード例では、SMTP サーバーで SSL 接続を確立し、電子メールを送信する接続を使用します。  
  
 [!code-csharp[NclSSLMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclSSLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public string Host { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Host" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または、名前または SMTP トランザクションで使用されるホストの IP アドレスを設定します。</summary>
        <value>A<see cref="T:System.String" />名または SMTP トランザクションで使用するコンピューターの IP アドレスを格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Net.Mail.SmtpClient.Host%2A>プロパティは、コンス トラクターまたは、アプリケーションまたはマシン構成ファイルを使用して設定することもできます。 詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)です。  
  
 このプロパティを使用して情報を指定すると、この情報は、構成ファイル設定を上書きします。  
  
   
  
## Examples  
 次のコード例では、ホストと、アプリケーション構成ファイルで指定されたポートを使用して電子メール メッセージの送信を示します。  
  
 [!code-cpp[NclMailSync#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#7)]
 [!code-csharp[NclMailSync#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作に指定された値は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">指定された設定操作と等しい値<see cref="F:System.String.Empty" />("") です。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信されるときは、このプロパティの値を変更することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="OnSendCompleted">
      <MemberSignature Language="C#" Value="protected void OnSendCompleted (System.ComponentModel.AsyncCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnSendCompleted(class System.ComponentModel.AsyncCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AsyncCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
        <summary><see cref="E:System.Net.Mail.SmtpClient.SendCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 継承するクラス、<xref:System.Net.Mail.SmtpClient>クラスをオーバーライドして、<xref:System.Net.Mail.SmtpClient.OnSendCompleted%2A>メソッドを追加するときの操作、<xref:System.Net.Mail.SmtpClient.SendCompleted>イベントが発生します。  
  
 <xref:System.Net.Mail.SmtpClient.OnSendCompleted%2A>派生クラスを処理することもできます<xref:System.Net.Mail.SmtpClient.SendCompleted>デリゲートを結び付けずにします。 これは、処理するための手法をお勧め<xref:System.Net.Mail.SmtpClient.SendCompleted>派生クラスでします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />メソッドのデリゲートを登録するための受信、<see cref="E:System.Net.Mail.SmtpClient.SendCompleted" />イベント。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PickupDirectoryLocation">
      <MemberSignature Language="C#" Value="public string PickupDirectoryLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PickupDirectoryLocation" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.PickupDirectoryLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはアプリケーションがローカルの SMTP サーバーによって処理されるメッセージを保存するフォルダーを設定します。</summary>
        <value>A<see cref="T:System.String" />メール メッセージ用のピックアップ ディレクトリを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メール メッセージをピックアップ ディレクトリには、ローカル SMTP サーバー (存在する場合)、IIS などによって自動的に送信されます。  
  
 このプロパティの既定値は、マシン内でも設定できますまたはアプリケーション構成ファイル。 加えられた変更、<xref:System.Net.Mail.SmtpClient.PickupDirectoryLocation%2A>プロパティは、構成ファイルの設定をオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Port">
      <MemberSignature Language="C#" Value="public int Port { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Port" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Port" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または SMTP トランザクションで使用するポートを設定します。</summary>
        <value><see cref="T:System.Int32" /> SMTP ホスト上のポート番号を格納しています。 既定値は 25 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティは、コンス トラクターまたは、アプリケーションまたはマシン構成ファイルを使用して設定することもできます。 構成ファイルの使用の詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)です。 このプロパティを使用して情報を指定すると、この情報は、構成ファイル設定を上書きします。  
  
   
  
## Examples  
 次のコード例では、ホストと、アプリケーション構成ファイルで指定されたポートを使用して電子メール メッセージの送信を示します。  
  
 [!code-cpp[NclMailSync#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#7)]
 [!code-csharp[NclMailSync#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">セット操作に対して指定された値を 0 に等しいまたはそれよりも小さいです。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信されるときは、このプロパティの値を変更することはできません。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">設定する、<see cref="P:System.Net.Mail.SmtpClient.Port" />プロパティです。 関連する列挙値:<see cref="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort" />です。</permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Send(System.Net.Mail.MailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
      </Parameters>
      <Docs>
        <param name="message">A<see cref="T:System.Net.Mail.MailMessage" />送信するメッセージを格納しています。</param>
        <summary>指定したメッセージを配信用の SMTP サーバーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、電子メールの送信中にブロックします。 使用してタイムアウト値を指定することができます、<xref:System.Net.Mail.SmtpClient.Timeout%2A>プロパティを指定された時間が経過した後、メソッドを返すことを確認します。  
  
 このメソッドを呼び出す前に、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティ設定する必要がいずれかの構成ファイルによって、関連するプロパティを設定するかにこの情報を渡すことによって、<xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29>コンス トラクターです。  
  
 非同期的に送信されるメッセージがある場合は、このメソッドを呼び出すことはできません。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>または<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティです。  
  
 表示された場合、<xref:System.Net.Mail.SmtpException>例外、チェック、<xref:System.Net.Mail.SmtpException.StatusCode%2A>理由を操作を確認するプロパティが失敗しました。 <xref:System.Net.Mail.SmtpException>操作失敗した理由を示す内部例外を含めることもできます。  
  
 使用して電子メールを送信するときに<xref:System.Net.Mail.SmtpClient.Send%2A>を複数の受信者および SMTP サーバーとして有効な一部の受信者を受け取り、他のユーザーを拒否<xref:System.Net.Mail.SmtpClient.Send%2A>受理された受信者に電子メールを送信し、<xref:System.Net.Mail.SmtpFailedRecipientsException>がスローされます。 例外は、拒否された受信者の一覧が含まれます。  
  
> [!NOTE]
>  場合、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティに設定されている`true`、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後への呼び出しをアドバタイズしていないと、<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドがスローされます、<xref:System.Net.Mail.SmtpException>です。  
  
   
  
## Examples  
 次のコード例では、このメソッドの使用方法を示します。  
  
 [!code-cpp[NclMailSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、<see cref="T:System.Net.Mail.SmtpClient" />が、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" />通話中です。  
  
 または  
  
 <see cref="P:System.Net.Mail.MailMessage.From" /> は <see langword="null" /> です。  
  
 または  
  
 指定された受信者がない<see cref="P:System.Net.Mail.MailMessage.To" />、 <see cref="P:System.Net.Mail.MailMessage.CC" />、および<see cref="P:System.Net.Mail.MailMessage.Bcc" />プロパティです。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Host" />は<see langword="null" />します。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Host" />は空の文字列 ("")。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Port" />は、数値、または 65,535 より大きい負の値は 0 です。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
 または  
  
 認証に失敗しました。  
  
 または  
  
 操作はタイムアウトしました。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" />設定されている<see langword="true" />ですが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" />または<see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" />設定されている<see langword="true," />SMTP メール サーバーが EHLO コマンドへの応答で STARTTLS をアドバタイズしてしませんが、します。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException"><paramref name="message" /> 1 つまたは複数の受信者に配信されませんでした<see cref="P:System.Net.Mail.MailMessage.To" />、 <see cref="P:System.Net.Mail.MailMessage.CC" />、または<see cref="P:System.Net.Mail.MailMessage.Bcc" />です。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連する列挙。<see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string from, string to, string subject, string body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string from, string to, string subject, string body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.Send(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="recipients" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="from">A<see cref="T:System.String" />メッセージ送信者のアドレス情報を格納します。</param>
        <param name="to">To be added.</param>
        <param name="subject">A<see cref="T:System.String" />メッセージの件名行を格納しています。</param>
        <param name="body">A<see cref="T:System.String" />メッセージの本文を格納しています。</param>
        <summary>指定した電子メール メッセージを配信用の SMTP サーバーに送信します。 メッセージの送信者、受信者、件名、およびメッセージ本文を使用して指定<see cref="T:System.String" />オブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、電子メールの送信中にブロックします。 使用してタイムアウト値を指定することができます、<xref:System.Net.Mail.SmtpClient.Timeout%2A>プロパティを指定された時間が経過した後、メソッドを返すことを確認します。  
  
 このメソッドを呼び出す前に、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>プロパティ設定する必要がいずれかの構成ファイルによって、関連するプロパティを設定するかにこの情報を渡すことによって、<xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29>コンス トラクターです。  
  
 非同期的に送信されるメッセージがある場合は、このメソッドを呼び出すことはできません。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>または<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティです。  
  
 表示された場合、<xref:System.Net.Mail.SmtpException>例外、チェック、<xref:System.Net.Mail.SmtpException.StatusCode%2A>理由を操作を確認するプロパティが失敗しました。 <xref:System.Net.Mail.SmtpException>操作失敗した理由を示す内部例外を含めることもできます。  
  
 使用して電子メールを送信するときに<xref:System.Net.Mail.SmtpClient.Send%2A>を複数の受信者および SMTP サーバーとして有効な一部の受信者を受け取り、他のユーザーを拒否<xref:System.Net.Mail.SmtpClient.Send%2A>受理された受信者に電子メールを送信し、<xref:System.Net.Mail.SmtpFailedRecipientsException>がスローされます。 例外は、拒否された受信者の一覧が含まれます。  
  
> [!NOTE]
>  場合、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティに設定されている`true`、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後への呼び出しをアドバタイズしていないと、<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドがスローされます、<xref:System.Net.Mail.SmtpException>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="recipients" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> は <see cref="F:System.String.Empty" /> です。  
  
 -または-  
  
 <paramref name="recipients" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、<see cref="T:System.Net.Mail.SmtpClient" />が、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" />通話中です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Host" />は<see langword="null" />します。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Host" />は空の文字列 ("")。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Port" />は、数値、または 65,535 より大きい負の値は 0 です。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
 または  
  
 認証に失敗しました。  
  
 または  
  
 操作はタイムアウトしました。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" />設定されている<see langword="true" />ですが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" />または<see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" />設定されている<see langword="true," />SMTP メール サーバーが EHLO コマンドへの応答で STARTTLS をアドバタイズしてしませんが、します。</exception>
        <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">メッセージは、1 つまたは複数の受信者に配信されませんでした<paramref name="recipients" />です。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連する列挙。<see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (System.Net.Mail.MailMessage message, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(class System.Net.Mail.MailMessage message, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsync(System.Net.Mail.MailMessage,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message">A<see cref="T:System.Net.Mail.MailMessage" />送信するメッセージを格納しています。</param>
        <param name="userToken">非同期操作の完了時に呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>指定した電子メール メッセージを配信用の SMTP サーバーに送信します。 このメソッドは、呼び出し元のスレッドをブロックしませんし、オブジェクトを渡し、操作が完了したときに呼び出されるメソッドを呼び出し元を許可します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 電子メールが送信されたか、操作が取り消されたときに通知を受信するイベント ハンドラーを追加、<xref:System.Net.Mail.SmtpClient.SendCompleted>イベント。 取り消すことができます、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作を呼び出して、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>メソッドです。  
  
 呼び出した後<xref:System.Net.Mail.SmtpClient.SendAsync%2A>、電子メール メッセージを使用して別の送信を試行する前に完了する電子メール送信を待つ必要があります<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>です。  
  
 このメソッドを呼び出す前に、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>関連のプロパティを設定してまたはこの情報を渡すことによって、構成ファイルによって設定する必要があります、<xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29>コンス トラクターです。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>または<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティです。  
  
 表示された場合、<xref:System.Net.Mail.SmtpException>例外、チェック、<xref:System.Net.Mail.SmtpException.StatusCode%2A>理由を操作を確認するプロパティが失敗しました。 <xref:System.Net.Mail.SmtpException>操作失敗した理由を示す内部例外を含めることもできます。  
  
 使用して電子メールを送信するときに<xref:System.Net.Mail.SmtpClient.SendAsync%2A>SMTP サーバーの一部の受信者として有効なを承諾して、他のユーザーを拒否する場合、複数の受信者に、<xref:System.Net.Mail.SmtpException>でがスローされます、<xref:System.NullReferenceException>は、内部例外をします。 この場合、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>受信者のいずれかに電子メールの送信に失敗します。  
  
 アプリケーションは、確認するには、サーバー証明書の検証エラーを検出できます、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>に渡されたプロパティ、<xref:System.Net.Mail.SendCompletedEventHandler>を委任します。  
  
 <xref:System.Net.Mail.SmtpClient.Timeout%2A>プロパティは、何も影響はありません、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>呼び出します。  
  
 SMTP サーバーに送信するときにメール、ブロックを送信するのいずれかの操作を使用して、<xref:System.Net.Mail.SmtpClient.Send%2A>メソッドです。  
  
> [!NOTE]
>  場合、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティに設定されている`true`、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後への呼び出しをアドバタイズしていないと、<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドがスローされます、<xref:System.Net.Mail.SmtpException>です。  
  
   
  
## Examples  
 次のコード例では、このメソッドを呼び出すことを示します。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> は <see langword="null" /> です。  
  
 -または-  
  
 <see cref="P:System.Net.Mail.MailMessage.From" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、<see cref="T:System.Net.Mail.SmtpClient" />が、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" />通話中です。  
  
 または  
  
 指定された受信者がない<see cref="P:System.Net.Mail.MailMessage.To" />、 <see cref="P:System.Net.Mail.MailMessage.CC" />、および<see cref="P:System.Net.Mail.MailMessage.Bcc" />プロパティです。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Host" />は<see langword="null" />します。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Host" />は空の文字列 ("")。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Port" />は、数値、または 65,535 より大きい負の値は 0 です。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
 または  
  
 認証に失敗しました。  
  
 または  
  
 操作はタイムアウトしました。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" />設定されている<see langword="true" />ですが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" />または<see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" />設定されている<see langword="true," />SMTP メール サーバーが EHLO コマンドへの応答で STARTTLS をアドバタイズしてしませんが、します。  
  
 または  
  
 <paramref name="message" /> 1 つまたは複数の受信者に配信されませんでした<see cref="P:System.Net.Mail.MailMessage.To" />、 <see cref="P:System.Net.Mail.MailMessage.CC" />、または<see cref="P:System.Net.Mail.MailMessage.Bcc" />です。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連する列挙。<see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public void SendAsync (string from, string to, string subject, string body, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsync(string from, string to, string subject, string body, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsync(System.String,System.String,System.String,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="recipients" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="from">A<see cref="T:System.String" />メッセージ送信者のアドレス情報を格納します。</param>
        <param name="to">To be added.</param>
        <param name="subject">A<see cref="T:System.String" />メッセージの件名行を格納しています。</param>
        <param name="body">A<see cref="T:System.String" />メッセージの本文を格納しています。</param>
        <param name="userToken">非同期操作の完了時に呼び出されるメソッドに渡されるユーザー定義のオブジェクト。</param>
        <summary>配信用の SMTP サーバーに電子メール メッセージを送信します。 メッセージの送信者、受信者、件名、およびメッセージ本文を使用して指定<see cref="T:System.String" />オブジェクト。 このメソッドは、呼び出し元のスレッドをブロックしませんし、オブジェクトを渡し、操作が完了したときに呼び出されるメソッドを呼び出し元を許可します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 電子メールが送信されたか、操作が取り消されたときに通知を受信するイベント ハンドラーを追加、<xref:System.Net.Mail.SmtpClient.SendCompleted>イベント。 取り消すことができます、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作を呼び出して、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>メソッドです。  
  
 呼び出した後<xref:System.Net.Mail.SmtpClient.SendAsync%2A>、電子メール メッセージを使用して別の送信を試行する前に完了する電子メール送信を待つ必要があります<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>です。  
  
 このメソッドを呼び出す前に、<xref:System.Net.Mail.SmtpClient.Host%2A>と<xref:System.Net.Mail.SmtpClient.Port%2A>構成ファイルを使用するか、プロパティを設定またはこの情報を渡すことによって、プロパティを設定する必要があります、<xref:System.Net.Mail.SmtpClient.%23ctor%28System.String%2CSystem.Int32%29>コンス トラクターです。  
  
 SMTP ホストには、資格情報が必要とする場合は、このメソッドを呼び出す前に設定する必要があります。 資格情報を指定するには、使用、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>または<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティです。  
  
 表示された場合、<xref:System.Net.Mail.SmtpException>例外、チェック、<xref:System.Net.Mail.SmtpException.StatusCode%2A>理由を操作を確認するプロパティが失敗しました。 <xref:System.Net.Mail.SmtpException>操作失敗した理由を示す内部例外を含めることもできます。  
  
 使用して電子メールを送信するときに<xref:System.Net.Mail.SmtpClient.SendAsync%2A>SMTP サーバーの一部の受信者として有効なを承諾して、他のユーザーを拒否する場合、複数の受信者に、<xref:System.Net.Mail.SmtpException>でがスローされます、<xref:System.NullReferenceException>は、内部例外をします。 この場合、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>受信者のいずれかに電子メールの送信に失敗します。  
  
 アプリケーションは、確認するには、サーバー証明書の検証エラーを検出できます、<xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A>に渡されたプロパティ、<xref:System.Net.Mail.SendCompletedEventHandler>を委任します。  
  
 <xref:System.Net.Mail.SmtpClient.Timeout%2A>プロパティは、何も影響はありません、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>呼び出します。  
  
 SMTP サーバーに送信するときにメール、ブロックを送信するのいずれかの操作を使用して、<xref:System.Net.Mail.SmtpClient.Send%2A>メソッドです。  
  
> [!NOTE]
>  場合、<xref:System.Net.Mail.SmtpClient.EnableSsl%2A>プロパティに設定されている`true`、SMTP メール サーバーが、EHLO への応答で STARTTLS コマンドは、その後への呼び出しをアドバタイズしていないと、<xref:System.Net.Mail.SmtpClient.Send%2A>または<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドがスローされます、<xref:System.Net.Mail.SmtpException>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="recipient" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> は <see cref="F:System.String.Empty" /> です。  
  
 -または-  
  
 <paramref name="recipient" /> は <see cref="F:System.String.Empty" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、<see cref="T:System.Net.Mail.SmtpClient" />が、<see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" />通話中です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Host" />は<see langword="null" />します。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Host" />は空の文字列 ("")。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />と<see cref="P:System.Net.Mail.SmtpClient.Port" />は、数値、または 65,535 より大きい負の値は 0 です。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
        <exception cref="T:System.Net.Mail.SmtpException">SMTP サーバーへの接続に失敗しました。  
  
 または  
  
 認証に失敗しました。  
  
 または  
  
 操作はタイムアウトしました。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" />設定されている<see langword="true" />ですが、<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" />プロパティに設定されている<see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" />または<see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" />設定されている<see langword="true," />SMTP メール サーバーが EHLO コマンドへの応答で STARTTLS をアドバタイズしてしませんが、します。  
  
 または  
  
 メッセージは、1 つまたは複数の受信者に配信されませんでした<paramref name="recipients" />です。</exception>
        <permission cref="T:System.Net.Mail.SmtpPermission">SMTP サーバーに接続します。 関連する列挙。<see cref="F:System.Net.Mail.SmtpAccess.Connect" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendAsyncCancel">
      <MemberSignature Language="C#" Value="public void SendAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendAsyncCancel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>電子メール メッセージを送信する非同期操作をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Net.Mail.SmtpClient.SendAsyncCancel%2A>をキャンセルする方法、保留中<xref:System.Net.Mail.SmtpClient.SendAsync%2A>操作します。 メールの送信を待機している場合は、このメソッドは、メールの格納に使用されているリソースを解放します。 メールの送信を待機しているがない場合は、このメソッドは何も行いません。  
  
   
  
## Examples  
 次のコード例では、電子メール メッセージの非同期送信を示します。 ユーザーには、送信されていない場合、メールをキャンセルするオプションがあります。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトは破棄されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.Mail.SendCompletedEventHandler SendCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.Mail.SendCompletedEventHandler SendCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.Mail.SmtpClient.SendCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Mail.SendCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期の電子メール送信操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.SendCompleted>イベントは電子メール メッセージは送信操作の完了時に非同期的に送信するたびに発生します。 電子メール メッセージを非同期的に送信するを使用して、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドです。  
  
 <xref:System.Net.Mail.SendCompletedEventHandler>デリゲートは、<xref:System.Net.Mail.SmtpClient.SendCompleted>です。 <xref:System.ComponentModel.AsyncCompletedEventArgs>クラスには、イベント データを持つイベント ハンドラーが用意されています。  
  
   
  
## Examples  
 次のコード例では、電子メール メッセージの非同期送信を示します。  
  
 [!code-cpp[NclMailAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclMailASync/cpp/mailasync.cpp#1)]
 [!code-csharp[NclMailAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclMailASync/CS/mailasync.cs#1)]
 [!code-vb[NclMailAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NclMailASync/vb/mailasync.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendMailAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendMailAsync (System.Net.Mail.MailMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendMailAsync(class System.Net.Mail.MailMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendMailAsync(System.Net.Mail.MailMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Net.Mail.MailMessage" />
      </Parameters>
      <Docs>
        <param name="message">A<see cref="T:System.Net.Mail.MailMessage" />送信するメッセージを格納しています。</param>
        <summary>非同期操作として配信用の SMTP サーバーを指定したメッセージを送信します。</summary>
        <returns><see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task>> オブジェクトは、メッセージが送信された後、完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendMailAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SendMailAsync (string from, string recipients, string subject, string body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SendMailAsync(string from, string recipients, string subject, string body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Mail.SmtpClient.SendMailAsync(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="from" Type="System.String" />
        <Parameter Name="recipients" Type="System.String" />
        <Parameter Name="subject" Type="System.String" />
        <Parameter Name="body" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="from">A<see cref="T:System.String" />メッセージ送信者のアドレス情報を格納します。</param>
        <param name="recipients">A<see cref="T:System.String" />にメッセージが送信されるアドレスを格納します。</param>
        <param name="subject">A<see cref="T:System.String" />メッセージの件名行を格納しています。</param>
        <param name="body">A<see cref="T:System.String" />メッセージの本文を格納しています。</param>
        <summary>非同期操作として配信用の SMTP サーバーを指定したメッセージを送信します。 」を参照してください。 メッセージの送信者、受信者、件名、およびメッセージ本文を使用して指定<see cref="T:System.String" />オブジェクト。</summary>
        <returns><see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この操作はブロックされません。 返された<xref:System.Threading.Tasks.Task>> オブジェクトは、メッセージが送信された後、完了します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="from" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="recipients" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="from" /> は <see cref="F:System.String.Empty" /> です。  
  
 -または-  
  
 <paramref name="recipients" /> は <see cref="F:System.String.Empty" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ServicePoint">
      <MemberSignature Language="C#" Value="public System.Net.ServicePoint ServicePoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ServicePoint ServicePoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.ServicePoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.ServicePoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>電子メール メッセージの送信に使用するネットワーク接続を取得します。</summary>
        <value>A<see cref="T:System.Net.ServicePoint" />に接続する、 <see cref="P:System.Net.Mail.SmtpClient.Host" /> SMTP に使用されるプロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定、<xref:System.Net.Mail.SmtpClient.ServicePoint%2A>プロパティは、アプリケーションまたはマシン構成ファイルで指定された既定値を使用して作成され、<xref:System.Net.ServicePointManager>クラスです。  
  
   
  
## Examples  
 次のコード例へのアクセスを示しています、<xref:System.Net.Mail.SmtpClient.ServicePoint%2A>プロパティです。  
  
 [!code-cpp[NclMailSync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#1)]
 [!code-csharp[NclMailSync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Net.Mail.SmtpClient.Host" /><see langword="null" />または空の文字列 ("") です。  
  
 または  
  
 <see cref="P:System.Net.Mail.SmtpClient.Port" /> が 0 です。</exception>
      </Docs>
    </Member>
    <Member MemberName="TargetName">
      <MemberSignature Language="C#" Value="public string TargetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetName" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.TargetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または拡張保護を使用する場合は、認証に使用するサービス プロバイダー名 (SPN) を設定します。</summary>
        <value>A<see cref="T:System.String" />拡張保護に使用する SPN を指定します。 この SPN を既定値は、の形式が"SMTPSVC/&lt;ホスト&gt;"場所&lt;ホスト&gt;が SMTP メール サーバーのホスト名です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Mail.SmtpClient.TargetName%2A>プロパティは拡張保護を使用しているとき、アプリケーションの統合 Windows 認証で使用します。 <xref:System.Net.Mail.SmtpClient>に資格情報のチャレンジ応答サービス固有の情報 (SPN) が含まれてし、必要に応じて、チャネル固有の拡張保護を提供できますし、チャネル バインディング トークン (CBT) の情報です。 資格情報の交換にこの情報は、サービスが不正に取得した資格情報のチャレンジ応答の悪用に対する保護を強化することです。  
  
 このプロパティの既定値は、マシン内でも設定できますまたはアプリケーション構成ファイル。 加えられた変更、<xref:System.Net.Mail.SmtpClient.TargetName%2A>プロパティは、構成ファイルの設定をオーバーライドします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これまでの時間を指定する値の設定を取得または同期<see cref="Overload:System.Net.Mail.SmtpClient.Send" />呼び出しがタイムアウトします。</summary>
        <value><see cref="T:System.Int32" />ミリ秒でタイムアウト値を指定します。 既定値は、100,000 (100 秒) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、呼び出し、<xref:System.Net.Mail.SmtpClient.Send%2A>操作が完了するまでブロックするメソッド。 設定した場合、<xref:System.Net.Mail.SmtpClient.Timeout%2A>正の値にプロパティと<xref:System.Net.Mail.SmtpClient.Send%2A>、割り当てられた時間で操作を完了できません、<xref:System.Net.Mail.SmtpClient>クラスがスローされます、<xref:System.Net.Mail.SmtpException>例外。  
  
 メッセージを送信し、アプリケーションのスレッドで実行を継続してを使用して、<xref:System.Net.Mail.SmtpClient.SendAsync%2A>メソッドです。  
  
   
  
## Examples  
 次のコード例は、取得とタイムアウト値の設定を示します。  
  
 [!code-cpp[NclMailSync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#3)]
 [!code-csharp[NclMailSync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">設定操作が指定された値が 0 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">電子メールが送信されるときは、このプロパティの値を変更することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.Mail.SmtpClient.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Mail</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.MonoNotSupported("no DefaultCredential support in Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、<see cref="T:System.Boolean" />値を制御するのかどうか、<see cref="P:System.Net.CredentialCache.DefaultCredentials" />要求と共に送信されます。</summary>
        <value>
          既定の資格情報を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一部の SMTP サーバーでは、サーバーが自身の代わりに電子メールを送信する前にクライアントを認証することが必要です。 このプロパティを設定`true`ときにこの<xref:System.Net.Mail.SmtpClient>オブジェクト認証するか、サーバーによって要求された場合、現在ログオンしているユーザーの既定の資格情報を使用しています。 クライアント アプリケーションでは、これはほとんどのシナリオでは、目的の動作です。  
  
 アプリケーションとマシンの構成ファイルを使用して資格情報を指定することもできます。 詳細については、次を参照してください。 [ &lt;mailSettings&gt;要素 (ネットワーク設定)](~/docs/framework/configure-apps/file-schema/network/mailsettings-element-network-settings.md)です。  
  
 場合、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>プロパティに設定されている`false,`で値を設定し、<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティがサーバーに接続するときに資格情報に使用されます。 場合、<xref:System.Net.Mail.SmtpClient.UseDefaultCredentials%2A>プロパティに設定されている`false`と<xref:System.Net.Mail.SmtpClient.Credentials%2A>プロパティが設定されていない、し、メールが匿名でのサーバーに送信されます。  
  
> [!CAUTION]
>  基本認証の資格情報を指定する場合は、クリア テキストでサーバーに送信されます。 これは、ことは、資格情報を表示、または他のユーザーを使用しているためにセキュリティ上の問題にもたらします。  
  
   
  
## Examples  
 次のコード例では、このプロパティの使用方法を示します。  
  
 [!code-cpp[NclMailSync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLMailSync/CPP/NclMailSync.cpp#2)]
 [!code-csharp[NclMailSync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLMailSync/CS/mail.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">電子メールが送信されるときは、このプロパティの値を変更することはできません。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
