<Type Name="HttpCookie" FullName="System.Web.HttpCookie">
  <TypeSignature Language="C#" Value="public sealed class HttpCookie" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpCookie extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpCookie" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>作成し、個々 の HTTP クッキーを操作するタイプ セーフな方法を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpCookie>クラスを取得し、個々 の cookie のプロパティを設定します。 <xref:System.Web.HttpCookieCollection>クラスは、格納、取得、および複数の cookie を管理するメソッドを提供します。  
  
 ASP.NET には、2 つの組み込みクッキー コレクションが含まれています。 使用してアクセスするコレクション、<xref:System.Web.HttpRequest.Cookies%2A>のコレクション、<xref:System.Web.HttpRequest>オブジェクトには内のサーバーにクライアントによって送信された cookie が含まれています、`Cookie`ヘッダー。 使用してアクセスするコレクション、<xref:System.Web.HttpResponse.Cookies%2A>のコレクション、<xref:System.Web.HttpResponse>オブジェクトには、サーバー上に作成され、クライアントに送信された cookie が含まれています、 `Set-Cookie` HTTP 応答ヘッダー。  
  
   
  
## Examples  
 次のコード例は、という名前の cookie を確認する方法を示します`DateCookieExample`で、<xref:System.Web.HttpRequest>オブジェクト。 Cookie が見つからない場合に作成されを追加、<xref:System.Web.HttpResponse>オブジェクト。 Cookie は、10 分後に期限切れに設定されます。  
  
 [!code-aspx-csharp[System.Web.HttpCookie#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpCookie/cs/HttpCookie.cs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpCookie#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpCookie/vb/HttpCookie.vb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpCookie (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpCookie.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">新しい cookie の名前。</param>
        <summary>作成し、新しい cookie の名前します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、作成し、新しい cookie の名前します。  
  
 [!code-csharp[Classic HttpCookie.HttpCookie Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.HttpCookie Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.HttpCookie Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.HttpCookie Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpCookie (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpCookie.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">新しい cookie の名前。</param>
        <param name="value">新しい cookie の値。</param>
        <summary>作成すると、名前、および新しい cookie に値を割り当てます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、名を作成し、新しい cookie の値を設定します。  
  
 [!code-csharp[Classic HttpCookie.HttpCookie1 Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.HttpCookie1 Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.HttpCookie1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.HttpCookie1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定する cookie を関連付けるドメイン。</summary>
        <value>Cookie を関連付けるドメインの名前。 既定値は、現在のドメインです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定、`Domain`属性は、そのドメインからリソースを要求するクライアントに cookie の転送を制限します。  
  
   
  
## Examples  
 次のコード例では、cookie のドメインを設定します。  
  
 [!code-csharp[Classic HttpCookie.Domain Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Domain Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Domain Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Domain Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Expires">
      <MemberSignature Language="C#" Value="public DateTime Expires { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Expires" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Expires" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または cookie の有効期限日時を設定します。</summary>
        <value>Cookie の有効期限が切れる 1 日 (クライアント) 上の時刻。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、現在の時刻から 10 分に、cookie の有効期限を設定します。  
  
 [!code-csharp[Classic HttpCookie.Expires Example#2](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Expires Example/CS/default.aspx#2)]
 [!code-vb[Classic HttpCookie.Expires Example#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Expires Example/VB/default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasKeys">
      <MemberSignature Language="C#" Value="public bool HasKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasKeys" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.HasKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Cookie にサブキーがあるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" />cookie がそれ以外の場合、サブキーに<see langword="false" />です。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、複数の値のクッキー コレクションの各メンバーを調べます。 Cookie の場合、<xref:System.Web.HttpCookie.HasKeys%2A>プロパティは`true`、複数の値がある、この例では、1 つの文字列の配列と別の文字列配列に対応する値に値の名前をコピーすることを示すです。 Cookie の値を複数作成する方法の例は、次を参照してください。<xref:System.Web.HttpCookie.Values%2A>です。  
  
 [!code-csharp[Classic HttpCookie.HasKeys Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.HasKeys Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.HasKeys Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.HasKeys Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpOnly">
      <MemberSignature Language="C#" Value="public bool HttpOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HttpOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.HttpOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または cookie がクライアント側スクリプトからアクセスできるかどうかを指定する値を設定します。</summary>
        <value>
          <see langword="true" />cookie がある場合、<see langword="HttpOnly" />属性があり、それ以外のクライアント側スクリプト経由ではアクセスすることはできません<see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Microsoft Internet Explorer バージョン 6 の Service Pack 1 以降を cookie のプロパティをサポートしている<xref:System.Web.HttpCookie.HttpOnly%2A>、盗難にあった cookie と、クロスサイト スクリプティングの脅威を軽減することができます。 盗難にあった cookie は、ASP.NET セッション ID またはフォーム認証チケットなど、サイトにユーザーを識別する機密情報を含めることができ、攻撃者がなりすまし、ユーザーまたは機密情報を取得するためには、再生できます。 ときに、`HttpOnly`準拠のブラウザーが cookie を受信したはクライアント側スクリプトにアクセスできません。  
  
> [!CAUTION]
>  設定、<xref:System.Web.HttpCookie.HttpOnly%2A>プロパティを`true`は防止しませんにアクセスできる攻撃者ネットワーク チャネルを cookie に直接アクセスします。 これを防ぐために Secure Sockets Layer (SSL) を使用してください。 ワークステーションのセキュリティも重要です、悪意のあるユーザーが正当なユーザーの id を持つ Web サイトへのアクセスを取得する、開いているブラウザー ウィンドウまたは永続的な cookie を格納しているコンピューターを使用でした。  
  
 起こりうる攻撃とどのようにこのプロパティを軽減できますそれらの詳細については、次を参照してください。 [Mitigating クロスサイト スクリプティング HTTP 専用のクッキーと](http://go.microsoft.com/fwlink/?LinkId=41580)です。  
  
   
  
## Examples  
 次のコード例を記述する方法を示しています、 `HttpOnly` cookie し方法は、アクセスできない、ECMAScript を使用してクライアントを示しています。  
  
 [!code-aspx-csharp[HttpOnlyCookie#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpOnlyCookie/CS/httponlycookiecs.aspx#1)]
 [!code-aspx-vb[HttpOnlyCookie#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpOnlyCookie/vb/httponlycookievb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[string key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Item(System.String)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Cookie の値のキー (インデックス)。</param>
        <summary>ショートカットを取得、<see cref="P:System.Web.HttpCookie.Values" />プロパティです。 このプロパティは、Active Server Pages (ASP) の以前のバージョンとの互換性を提供します。</summary>
        <value>Cookie の値。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または cookie の名前を設定します。</summary>
        <value>既定値は null 参照 (<see langword="Nothing" /> Visual Basic の) コンス トラクターがそれ以外の場合を指定しない限り、します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例でクライアントのクッキー コレクションを受け取る、`Cookie`ヘッダーと探している特定の名前を持つ cookie のコレクションをループします。  
  
 [!code-csharp[Classic HttpCookie.Name Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Name Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Name Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または現在の cookie で送信への仮想パスを設定します。</summary>
        <value>Cookie で送信する仮想パス。 既定値は<see langword="/" />、これは、サーバーのルートです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpCookie.Path%2A>プロパティの拡張、 <xref:System.Web.HttpCookie.Domain%2A> cookie が適用される特定の URL を完全に記述するプロパティです。 たとえば、URL http:/ www.microsoft.com/asp でドメイン www.microsoft.com、パスは/asp します。  
  
   
  
## Examples  
 次のコード例のセット、<xref:System.Web.HttpCookie.Path%2A>新しい cookie のプロパティです。  
  
 [!code-csharp[Classic HttpCookie.Path Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Path Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Path Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Path Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Secure">
      <MemberSignature Language="C#" Value="public bool Secure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Secure" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Secure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または HTTPS 経由のみ、つまり、Secure Sockets Layer (SSL)--を使用して cookie を送信するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" />SSL 接続 (HTTPS) 経由で cookie を送信するにはそれ以外の場合、<see langword="false" />です。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーション全体で SSL を使用して cookie の送信を設定するには、をアプリケーションの構成ファイル、アプリケーションのルート ディレクトリに配置され、web.config ファイルで有効にします。 詳細については、次を参照してください。 [httpCookies 要素 (ASP.NET 設定スキーマ)](http://msdn.microsoft.com/en-us/74790718-bfa3-4935-bc9a-59c88797e08f)です。 値の設定を使用したプログラム、<xref:System.Web.HttpCookie.Secure%2A>プロパティは、Web.config ファイルで設定された値をオーバーライドします。  
  
 機密情報を扱う場合は、SSL 暗号化では、HTTPS プロトコルを使用することを強くお勧めします。 SSL は、データが変更されている (データの整合性)、ユーザーの id (機密) を保護し、データが必要なクライアント (認証) から送信されたことを保証します。 暗号化の利点の詳細については、次を参照してください。 [Cryptographic Services](~/docs/standard/security/cryptographic-services.md)です。 インターネット インフォメーション サービス (IIS) Web サーバーで SSL を構成する方法の詳細については、次を参照してください。 [、Web サーバーまたは Web サイトで SSL を構成する](http://go.microsoft.com/fwlink/?LinkId=38553)です。  
  
   
  
## Examples  
 次のコード例は、SSL を使用して送信する、cookie が設定されている場合の措置を取ります。  
  
 [!code-csharp[Classic HttpCookie.Secure Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Secure Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Secure Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Secure Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shareable">
      <MemberSignature Language="C#" Value="public bool Shareable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Shareable" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Shareable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出力キャッシュに参加する cookie を許可するかどうかを判断します。</summary>
        <value>
          <see langword="true" />出力キャッシュがない抑制されることを組み込むのためを指定する<see cref="T:System.Web.HttpResponse" />を含む 1 つまたは複数の送信 cookie です。 それ以外の場合、<see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、指定された<xref:System.Web.HttpResponse>を含む 1 つまたは複数の送信 cookie が含まれています<xref:System.Web.HttpCookie.Shareable%2A>に設定されている`false`(既定値) の場合は、出力キャッシュは、応答の抑制されます。 これは、応答でキャッシュされ、複数のクライアントに送信される可能性がある機密情報が含まれている cookie を防ぎます。  キャッシュに保存する cookie を含む応答を許可するなどを使用して、応答の通常のキャッシュを構成、`OutputCache`ディレクティブまたは MVC [OutputCache] 属性があり、設定がすべて送信 cookie <xref:System.Web.HttpCookie.Shareable%2A> 'éý'`true`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または個々 のクッキー値を設定します。</summary>
        <value>Cookie の値です。 既定値は null 参照 (<see langword="Nothing" /> Visual Basic で)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、"abc123"を既存のクッキーの値を設定します。  
  
 [!code-csharp[Classic HttpCookie.Value Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Value Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Value Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Value Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection Values" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpCookie.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>1 つの cookie オブジェクト内に含まれるキー/値ペアのコレクションを取得します。</summary>
        <value>Cookie の値のコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、新しいクッキーを作成し、いくつかの値を追加します。 1 つの cookie から複数の値を抽出する方法の例は、次を参照してください。<xref:System.Web.HttpCookie.HasKeys%2A>です。  
  
 [!code-csharp[Classic HttpCookie.Values Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpCookie.Values Example/CS/source.cs#1)]
 [!code-vb[Classic HttpCookie.Values Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpCookie.Values Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
