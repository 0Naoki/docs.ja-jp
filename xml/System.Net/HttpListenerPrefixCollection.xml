<Type Name="HttpListenerPrefixCollection" FullName="System.Net.HttpListenerPrefixCollection">
  <TypeSignature Language="C#" Value="public class HttpListenerPrefixCollection : System.Collections.Generic.ICollection&lt;string&gt;, System.Collections.Generic.IEnumerable&lt;string&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HttpListenerPrefixCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;string&gt;, class System.Collections.Generic.IEnumerable`1&lt;string&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Net.HttpListenerPrefixCollection" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.HttpListener</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.String&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.String&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>用の (Uniform Resource Identifier) プレフィックスを格納するために使用するコレクションを表します<see cref="T:System.Net.HttpListener" />オブジェクト。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.HttpListener.Prefixes%2A>プロパティがこのコレクションのインスタンスを返します。  
  
   
  
## Examples  
 次のコード例を作成、<xref:System.Net.HttpListener>へのユーザーが指定したプレフィックスを追加し、その<xref:System.Net.HttpListenerPrefixCollection>です。  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string uriPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(string uriPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.Add(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">受信要求で比較される URI 情報を識別する <see cref="T:System.String" />。 プレフィックスは、スラッシュ (「/」) で終了する必要があります。</param>
        <summary>URI (Uniform Resource Identifier) プレフィックスをコレクションに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、関連付けられたによって管理されるプレフィックスのセットに URI プレフィックスを追加<xref:System.Net.HttpListener>オブジェクト。 チェックするときに`uriPrefix`に有効であることを確認するには、大文字と小文字を区別します。  
  
 URI のプレフィックス文字列がから成るスキーム (http または https)、ホスト、任意のポート、および省略可能なパスでは、たとえば、"`http://www.contoso.com:8080/customerData``/`"です。 プレフィックスは、スラッシュ (「/」) で終了する必要があります。 <xref:System.Net.HttpListener>要求 URI に最も一致するプレフィックスを持つ要求に応答します。 複数<xref:System.Net.HttpListener>オブジェクトが同一のプレフィックスを追加できません。 <xref:System.Net.HttpListenerException>例外がスローされます、<xref:System.Net.HttpListener>で使用されるプレフィックスは既にを追加します。  
  
 ホストの要素を置き換えることが、ポートを指定すると、"`*`"ことを示す、<xref:System.Net.HttpListener>要求された URI が他のプレフィックスと一致しない場合、ポートに送信された要求を受け入れます。 たとえば、すべての要求を受信するポート 8080 が要求された URI が、その他の処理されないときに送信<xref:System.Net.HttpListener>、プレフィックスは"`http://*:8080``/`"です。 同様に、ことを指定する、 <xref:System.Net.HttpListener> 、ポートに送信されたすべての要求を受け入れるを持つホスト要素を交換して、"`+`、"character"`https://+:8080`/"です。 "`*`「と」`+`"文字のパスを含むプレフィックスに使用できます。  
  
 .NET 4.5.3 および Windows 10 以降で管理されている URI プレフィックスでサブドメインをワイルドカードはサポートされて、<xref:System.Net.HttpListener>オブジェクト。 ワイルドカードのサブドメインを指定する、"*"URI プレフィックスのホスト名の一部として文字: たとえば、 `http://*.foo.com/`、HttpListenerPrefixCollection.Add メソッドを引数として渡すとします。 これは .NET 4.5.3 および Windows 10 の機能します。以前のバージョンでこの生成は、<xref:System.Net.HttpListenerException>  
  
   
  
## Examples  
 次のコード例を作成、<xref:System.Net.HttpListener>へのユーザーが指定したプレフィックスを追加し、その<xref:System.Net.HttpListenerPrefixCollection>です。  
  
 [!code-csharp[Net_Listener_Basic#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriPrefix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="uriPrefix" />http:// または https:// スキームを使用しません。 これらのサポートされている唯一のスキームは、<see cref="T:System.Net.HttpListener" />オブジェクト。  
  
 または  
  
 <paramref name="uriPrefix" />正しく書式設定された URI プレフィックスはありません。 確認文字列と終了、「/」です。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.HttpListener" />これに関連付けられているコレクションが終了します。</exception>
        <exception cref="T:System.Net.HttpListenerException">Windows の関数呼び出しが失敗しました。 例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。 この例外は、別の <see cref="T:System.Net.HttpListener" /> が既にプレフィックス <paramref name="uriPrefix" /> を追加している場合にスローされます。</exception>
        <permission cref="T:System.Net.WebPermission">ネットワーク接続を受け入れます。 関連する列挙。<see cref="F:System.Net.NetworkAccess.Accept" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションからすべての (Uniform Resource Identifier) プレフィックスを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出した後に起動できない場合、関連付けられている<xref:System.Net.HttpListener>; 新しいプレフィックスを追加することがなくしようとするためには、例外がスローされます。  
  
   
  
## Examples  
 次のコード例は、のすべてのプレフィックスを削除、<xref:System.Net.HttpListenerPrefixCollection>です。  
  
 [!code-csharp[Net_Listener_Basic#6](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.HttpListenerException">Windows の関数呼び出しが失敗しました。 例外の <see cref="P:System.Net.HttpListenerException.ErrorCode" /> プロパティを調べて、例外の原因を確認します。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.HttpListener" />これに関連付けられているコレクションが終了します。</exception>
        <block subset="none" type="usage">
          <para>このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string uriPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(string uriPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.Contains(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A<see cref="T:System.String" />をテストする (Uniform Resource Identifier) プレフィックスを格納しています。</param>
        <summary>返します、<see cref="T:System.Boolean" />を指定したプレフィックスがコレクションに含まれているかどうかを示す値。</summary>
        <returns>
          <see langword="true" />このコレクションで指定されたプレフィックスが含まれている場合<paramref name="uriPrefix" />、それ以外の<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定したプレフィックスでは、既存の値を正確に一致する必要があります。  
  
   
  
## Examples  
 次のコード例のチェックのプレフィックス コレクションにユーザーが指定したプレフィックスが含まれているかどうかを表示する、<xref:System.Net.HttpListener>です。  
  
 [!code-csharp[Net_Listener_Basic#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriPrefix" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>内容をコピー、<see cref="T:System.Net.HttpListenerPrefixCollection" />指定した配列にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列は、文字列を格納できる必要があり、多次元にすることはできません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(class System.Array array, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">1 次元<see cref="T:System.Array" />(Uniform Resource Identifier) プレフィックス文字列をこのコレクションを受け取る。</param>
        <param name="offset">内の 0 から始まるインデックス<c>配列</c>コピーの開始位置。</param>
        <summary>内容をコピー、<see cref="T:System.Net.HttpListenerPrefixCollection" />指定した配列にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列は、文字列を格納できる必要があり、多次元にすることはできません。  
  
   
  
## Examples  
 次のコード例をコピーのプレフィックス、<xref:System.Net.HttpListenerPrefixCollection>です。  
  
 [!code-csharp[Net_Listener_Basic#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" />1 つ以上のディメンションがあります。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">このコレクションに格納できる以上の要素が含まれています<paramref name="array" />開始位置として<paramref name="offset" />です。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.HttpListener" />これに関連付けられているコレクションが終了します。</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="array" />文字列の値を格納することはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (string[] array, int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(string[] array, int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.String[]" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">このコレクション内で (Uniform Resource Identifier) プレフィックス文字列を受信する 1 つの次元の文字列配列。</param>
        <param name="offset">内の 0 から始まるインデックス<c>配列</c>コピーの開始位置。</param>
        <summary>内容をコピー、<see cref="T:System.Net.HttpListenerPrefixCollection" />を指定した文字列配列にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 配列は、文字列を格納できる必要があり、多次元にすることはできません。  
  
   
  
## Examples  
 次のコード例をコピーのプレフィックス、<xref:System.Net.HttpListenerPrefixCollection>です。  
  
 [!code-csharp[Net_Listener_Basic#7](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" />1 つ以上のディメンションがあります。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">このコレクションに格納できる以上の要素が含まれています<paramref name="array" />開始位置として<paramref name="offset" />です。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.HttpListener" />これに関連付けられているコレクションが終了します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerPrefixCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションに含まれているプレフィックスの数を取得します。</summary>
        <value><see cref="T:System.Int32" />このコレクション内のプレフィックスの数を格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、コレクションの中に、プレフィックスが表示されます。  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;string&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;string&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理に使用できるオブジェクトを返します。</summary>
        <returns>実装するオブジェクト、<see cref="T:System.Collections.IEnumerator" />インターフェイスし、このコレクション内の文字列へのアクセスを提供します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって返されるオブジェクトは最初にこのコレクションの最初の要素の前に位置付けられます。 呼び出す必要があります、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドの最初の要素にアクセスできるようにします。 現在の位置にある要素にアクセスするには、呼び出し、<xref:System.Collections.IEnumerator.Current%2A>プロパティです。  
  
 列挙子の使用中にコレクションを変更しないでください。 列挙中にコレクションが変更された場合を使用して、呼び出すことで位置を設定しようとすると、<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>により、<xref:System.InvalidOperationException>です。  
  
 列挙子の詳細については、ドキュメントを参照して、<xref:System.Collections.IEnumerator>クラスおよび<xref:System.Collections.IEnumerable.GetEnumerator%2A>メソッドです。  
  
   
  
## Examples  
 次のコード例では、コレクションの列挙処理を示しています。 Visual Basic および c# の例で言語固有のステートメントを使用して、列挙子を取得する代わりに、コレクションを列挙することに注意してください。  
  
 [!code-csharp[Net_Listener_Basic#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Net_Listener_Basic/CS/test.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerPrefixCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションへのアクセスは読み取り専用であるかどうかを示す値を取得します。</summary>
        <value>常に <see langword="false" /> を返します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Net.HttpListenerPrefixCollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
        <value>このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コレクションの列挙は、本質的にスレッド セーフなプロシージャではありません。 コレクションの同期がとられている場合でも、別のスレッドによってそのコレクションを変更できるため、変更の結果として列挙子は例外をスローします。 列挙処理中には、スレッド セーフを確保するには、列挙中にコレクションをロックするか、他のスレッドによって行われた変更によってスローされる例外をキャッチします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (string uriPrefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(string uriPrefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.Remove(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uriPrefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uriPrefix">A<see cref="T:System.String" />を削除する URI プレフィックスを格納しています。</param>
        <summary>によって処理されるプレフィックスの一覧から、指定された Uniform Resource Identifier () を削除、<see cref="T:System.Net.HttpListener" />オブジェクト。</summary>
        <returns>
          <see langword="true" />場合、<paramref name="uriPrefix" />で見つかりました、<see cref="T:System.Net.HttpListenerPrefixCollection" />と削除です。 それ以外の場合<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合`uriPrefix`はこのメソッドでは、コレクションではなくは何も行われません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="uriPrefix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Net.HttpListenerException">Windows の関数呼び出しが失敗しました。 例外の原因を特定するのには、例外のエラー コードを確認します。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Net.HttpListener" />これに関連付けられているコレクションが終了します。</exception>
        <block subset="none" type="usage">
          <para>このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、次を参照してください。 [.NET Framework のネットワークのトレース](~/docs/framework/network-programming/network-tracing.md)です。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.HttpListener</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コレクションを反復処理に使用できるオブジェクトを返します。</summary>
        <returns>実装するオブジェクト、<see cref="T:System.Collections.IEnumerator" />インターフェイスし、このコレクション内の文字列へのアクセスを提供します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって返されるオブジェクトは最初にこのコレクションの最初の要素の前に位置付けられます。 呼び出す必要があります、<xref:System.Collections.IEnumerator.MoveNext%2A>メソッドの最初の要素にアクセスできるようにします。 現在の位置にある要素にアクセスするには、呼び出し、<xref:System.Collections.IEnumerator.Current%2A>プロパティです。  
  
 列挙子の使用中にコレクションを変更しないでください。 列挙中にコレクションが変更された場合を使用して、呼び出すことで位置を設定しようとすると、<xref:System.Collections.IEnumerator.MoveNext%2A>または<xref:System.Collections.IEnumerator.Reset%2A>により、<xref:System.InvalidOperationException>です。  
  
 列挙子の詳細については、ドキュメントを参照して、<xref:System.Collections.IEnumerator>クラスおよび<xref:System.Collections.IEnumerable.GetEnumerator%2A>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
