<Type Name="RegistrySecurity" FullName="System.Security.AccessControl.RegistrySecurity">
  <TypeSignature Language="C#" Value="public sealed class RegistrySecurity : System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistrySecurity extends System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistrySecurity" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.NativeObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>レジストリ キーの Windows アクセス制御セキュリティを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトが、レジストリ キーのアクセス権を指定しも アクセスの試行を監査する方法を指定します。 レジストリ キーへのアクセス権がによって表される各アクセス規則と、規則で表される、<xref:System.Security.AccessControl.RegistryAccessRule>オブジェクト。 によって表される各監査規則、<xref:System.Security.AccessControl.RegistryAuditRule>オブジェクト。  
  
 これには、セキュリティ保護可能なオブジェクトごとに最大で 1 つ随意アクセス制御リスト (DACL) に最大で 1 つシステム アクセス制御リスト (SACL) を指定するアクセス試行を監査する、セキュリティで保護されたオブジェクトとのアクセスを制御する、基になる Windows セキュリティ システムがミラー化します。 DACL および SACL は、アクセスおよび監査のユーザーとグループを指定するアクセス制御エントリ (ACE) の一覧を並べ替えられています。 A<xref:System.Security.AccessControl.RegistryAccessRule>または<xref:System.Security.AccessControl.RegistryAuditRule>オブジェクトは、1 つ以上の ACE を表す場合があります。  
  
> [!NOTE]
>  Windows のアクセス制御セキュリティは、レジストリ キーにのみ適用できます。 キーに格納されている個別のキー/値ペアを適用することはできません。  
  
 <xref:System.Security.AccessControl.RegistrySecurity>、 <xref:System.Security.AccessControl.RegistryAccessRule>、および<xref:System.Security.AccessControl.RegistryAuditRule>クラスは、Acl や Ace の実装の詳細を非表示にします。 これらによって、17 個の異なる ACE 型との継承とアクセス権の伝達を正しく維持するための複雑さの制約を無視できます。 これらのオブジェクトは、次の一般的なアクセス制御エラーを防ぐためにも設計されています。  
  
-   Null DACL のセキュリティ記述子を作成しています。 DACL を null 参照では、可能性のあるサービス拒否攻撃を作成する、オブジェクトへのアクセス ルールを追加するすべてのユーザーを許可します。 新しい<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトは常にすべてのユーザーのすべてのアクセスを拒否する空の DACL で起動します。  
  
-   Ace の正規の順序に違反します。 DACL の ACE リストが正規の順序で維持されない場合ユーザー誤ってを付与するアクセス セキュリティで保護されたオブジェクト。 たとえば、拒否されたアクセス権は必要があります許可されるアクセス権の前に常に表示されます。 <xref:System.Security.AccessControl.RegistrySecurity>オブジェクトは、内部的に正しい順序を維持します。  
  
-   操作に使用するセキュリティ記述子のフラグ、リソース マネージャーの制御だけである必要があります。  
  
-   ACE フラグの無効な組み合わせを作成します。  
  
-   継承された Ace を操作します。 継承と伝達は、アクセスおよび監査規則に対して行った変更への応答で、リソース マネージャーによって処理されます。  
  
-   Acl に無意味な Ace を挿入します。  
  
 .NET セキュリティ オブジェクトでサポートされていませんのみの機能は、次のようなアプリケーションの開発者の過半数によって避ける必要がある危険なアクティビティが。  
  
-   通常、リソース マネージャーで実行される低レベルのタスクです。  
  
-   追加または正規の順序を保持しない方法でアクセス制御エントリを削除します。  
  
 レジストリ キーの Windows アクセス制御セキュリティを変更するには、使用、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>取得するメソッド、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。 追加し、ルールを削除して、セキュリティ オブジェクトを変更し、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>に再接続します。  
  
> [!IMPORTANT]
>  変更を加える、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトには影響しません、レジストリ キーのアクセス レベルが呼び出されるまで、<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>レジストリ キーには、変更されたセキュリティ オブジェクトを割り当てる方法です。  
  
 1 つのレジストリ キーから別のアクセス制御セキュリティをコピーするには、使用、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>取得するメソッド、<xref:System.Security.AccessControl.RegistrySecurity>最初のレジストリ キーのアクセスおよび監査規則を表すオブジェクトをクリックして、 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 2 番目のレジストリ キーにこれらの規則を割り当てる方法です。 規則を 2 番目のレジストリ キーを割り当てることも、<xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A?displayProperty=nameWithType>または<xref:Microsoft.Win32.RegistryKey.CreateSubKey%2A?displayProperty=nameWithType>を受け取るメソッド、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト パラメーターです。  
  
 セキュリティ記述子定義言語 (SDDL) で、初期投資をユーザーが使用できる、<xref:System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm%2A>レジストリ キーのアクセス規則を設定するメソッドと<xref:System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm%2A>SDDL 形式でのアクセス規則を表す文字列を取得するメソッド。 これは、説明は、新規の開発は推奨されません。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初の例は追加、削除、ときに、互換性のあるルール マージし、2 番目に示すの追加と削除の規則の継承と伝達のフラグの影響します。  
  
 例 1  
  
 次のコード例に示す方法、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>メソッドは、互換性のある規則からの権利を削除方法、および<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>メソッドは、互換性のあるルールに権限をマージします。  
  
 例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトし、現在のユーザーを許可する規則を追加<xref:System.Security.AccessControl.RegistryRights?displayProperty=nameWithType>権限です。 ユーザーを許可するルールを作成し<xref:System.Security.AccessControl.RegistryRights?displayProperty=nameWithType>同じ継承および使用して最初のルールと伝達の権限を指定して、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>からこの新しいルールを削除する方法、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。 <xref:System.Security.AccessControl.RegistryRights.SetValue>構成要素は、<xref:System.Security.AccessControl.RegistryRights.ReadKey>のため、互換性のある規則から削除されます。 内のルール、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトが表示されの残りの構成要素を示す<xref:System.Security.AccessControl.RegistryRights.ReadKey>です。  
  
 コード例は、呼び出し、<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>にマージするメソッド、<xref:System.Security.AccessControl.RegistryRights.SetValue>内のルールに戻す右、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトはアタッチされません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。 このセクションでは、2 番目の例は、セキュリティ オブジェクトをアタッチし、例は<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>と<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>です。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 例 2  
  
 次のコード例では、継承や伝達を行うアクセス規則を示します。 例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトを作成し、持つ 2 つの規則を追加、、<xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit>フラグ。 最初の規則には伝達フラグがありません、2 つ目があるときに<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>と<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>です。  
  
 プログラムは、表示内のルール、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト、および、使用、<xref:System.Security.AccessControl.RegistrySecurity>サブキーを作成するオブジェクト。 プログラムは、子サブキーと孫サブキーを作成し、各サブキーのセキュリティを表示します。 最後に、プログラムは、テスト キーを削除します。  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistrySecurity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.AccessControl.RegistrySecurity" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しい<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトは常に空の随意アクセス リスト (DACL)、すべてのユーザーのすべてのアクセスを拒否するで起動します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRightType">
      <MemberSignature Language="C#" Value="public override Type AccessRightType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRightType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRightType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列挙型を取得、<see cref="T:System.Security.AccessControl.RegistrySecurity" />クラスのアクセス権を表現するために使用します。</summary>
        <value>A<see cref="T:System.Type" />オブジェクトを表す、<see cref="T:System.Security.AccessControl.RegistryRights" />列挙します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AccessRightType%2A>プロパティと戻り値のアクセス権を表すために使用する型。 配列または複数の種類のセキュリティ オブジェクトを格納するコレクションを操作するときは、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な列挙型を判断します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AccessRule AccessRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AccessRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identityReference"><see cref="T:System.Security.Principal.IdentityReference" />ユーザーを識別するまたはにグループのルールを適用します。</param>
        <param name="accessMask">ビットごとの組み合わせ<see cref="T:System.Security.AccessControl.RegistryRights" />、許可または拒否するアクセス権を指定する値が整数にキャストします。</param>
        <param name="isInherited">ルールを継承するかどうかを指定するブール値。</param>
        <param name="inheritanceFlags">ビットごとの組み合わせ<see cref="T:System.Security.AccessControl.InheritanceFlags" />サブキーによってルールを継承する方法を指定する値。</param>
        <param name="propagationFlags">ビットごとの組み合わせ<see cref="T:System.Security.AccessControl.PropagationFlags" />サブキーによってルールを継承する方法を変更する値。 意味のない場合の値<c>inheritanceFlags</c>は<see cref="F:System.Security.AccessControl.InheritanceFlags.None" />します。</param>
        <param name="type">1 つ、<see cref="T:System.Security.AccessControl.AccessControlType" />権限を許可または拒否するかどうかを指定する値。</param>
        <summary>指定したアクセス権、アクセス制御、およびフラグを指定したユーザーの新しいアクセス制御規則を作成します。</summary>
        <returns>A<see cref="T:System.Security.AccessControl.RegistryAccessRule" />を指定したユーザーの指定された権限を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アクセス制御規則を作成することをお勧めはのコンス トラクターを使用する、<xref:System.Security.AccessControl.RegistryAccessRule>クラスです。  
  
> [!NOTE]
>  指定できますが、<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=nameWithType>フラグは、これにはポイントがないです。 アクセス制御のため、サブキーの名前と値のペアは別個のオブジェクト 名前/値のペアにアクセス権は、サブキーの権限によって制御されます。 さらに、すべてのサブキーがコンテナーであるため (つまり、ことが含まれているその他のサブキーには) を受けない、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>フラグ。 最後に、指定する、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>互換性のあるルールの通常の組み合わせに支障があるためにフラグが、ルールのメンテナンスに不必要に複雑にできます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />、 <paramref name="inheritanceFlags" />、 <paramref name="propagationFlags" />、または<paramref name="type" />に無効な値を指定します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="accessMask" /> が 0 です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" />型のどちらも<see cref="T:System.Security.Principal.SecurityIdentifier" />、やなどの型の<see cref="T:System.Security.Principal.NTAccount" />型に変換できる<see cref="T:System.Security.Principal.SecurityIdentifier" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AccessRuleType">
      <MemberSignature Language="C#" Value="public override Type AccessRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AccessRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AccessRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型を取得、<see cref="T:System.Security.AccessControl.RegistrySecurity" />クラスのアクセス規則を表現するために使用します。</summary>
        <value>A<see cref="T:System.Type" />オブジェクトを表す、<see cref="T:System.Security.AccessControl.RegistryAccessRule" />クラスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AccessRuleType%2A>プロパティと戻り値のアクセス規則を表すために使用する型。 配列または複数の種類のセキュリティ オブジェクトを格納するコレクションを操作するときは、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切なアクセス ルールの種類を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessRule">
      <MemberSignature Language="C#" Value="public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">アクセス制御規則を追加します。</param>
        <summary>使用する新しい規則をマージできる一致するアクセス制御を検索します。 何も見つからない場合は、新しい規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>メソッドは、同じユーザーまたはグループと同じ規則を検索<xref:System.Security.AccessControl.AccessControlType>として`rule`です。 見つからない場合は、`rule`を追加します。 照合ルールが見つからないかどうかは、rights in`rule`既存の規則とマージされます。  
  
 別の継承フラグが設定されている場合は、ルールをマージすることはできません。 たとえば、ユーザーには、継承フラグなしで読み取りアクセスが許可された場合と<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>サブキーの継承を持つユーザーの書き込みアクセスを許可規則を追加するために使用 (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=nameWithType>)、2 つのルールをマージすることはできません。  
  
 異なるルール<xref:System.Security.AccessControl.AccessControlType>値はマージされません。  
  
 ルールは、最も経済的な方法で権限を高速です。 たとえば、ユーザーが持っている場合<xref:System.Security.AccessControl.RegistryRights.QueryValues>、<xref:System.Security.AccessControl.RegistryRights.Notify>と<xref:System.Security.AccessControl.RegistryRights.ReadPermissions>権限、および、許可する規則を追加<xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys>権限、ユーザーがすべてを構成する各部<xref:System.Security.AccessControl.RegistryRights.ReadKey>権限です。 ユーザーの権限をクエリする場合が表示されます、ルールを含む<xref:System.Security.AccessControl.RegistryRights.ReadKey>権限です。 同様に、削除する場合<xref:System.Security.AccessControl.RegistryRights.EnumerateSubKeys>rights、他の構成要素の<xref:System.Security.AccessControl.RegistryRights.ReadKey>権利が表示されます。  
  
   
  
## Examples  
 次のコード例は、レジストリのアクセス ルールを作成、追加して、<xref:System.Security.AccessControl.RegistrySecurity>許可し、権限を拒否する規則は、同じの互換性のあるルールの中には別方法の種類を表示、オブジェクトがマージされます。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトはアタッチされません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。 セキュリティ オブジェクトをアタッチする例は含まれて<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>と<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>です。  
  
 継承と伝達のフラグを示すコード例は含まれて、<xref:System.Security.AccessControl.RegistryAccessRule>クラスです。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAuditRule">
      <MemberSignature Language="C#" Value="public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する監査規則。 このルールで指定されたユーザーは、検索を決定します。</param>
        <summary>使用する新しい規則をマージできる監査規則を検索します。 何も見つからない場合は、新しい規則を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A>メソッド検索ルールと同じユーザーまたはグループとして`rule`です。 見つからない場合は、`rule`を追加します。 照合ルールが見つからないかどうかでフラグ`rule`既存のルールにマージされます。  
  
 別の継承フラグが設定されている場合は、ルールをマージすることはできません。 継承フラグなしでの特定のユーザーのキーへの書き込み試行が失敗した場合の監査などと<xref:System.Security.AccessControl.RegistrySecurity.AddAuditRule%2A>アクセス許可を変更する試行が失敗がサブキーの継承ですが、同じユーザーを監査することを指定するルールを追加するために使用 (<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=nameWithType>)、2 つのルールをマージすることはできません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleFactory">
      <MemberSignature Language="C#" Value="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Security.AccessControl.AuditRule AuditRuleFactory(class System.Security.Principal.IdentityReference identityReference, int32 accessMask, bool isInherited, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.AuditRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identityReference" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="accessMask" Type="System.Int32" />
        <Parameter Name="isInherited" Type="System.Boolean" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identityReference"><see cref="T:System.Security.Principal.IdentityReference" />ユーザーを識別するまたはにグループのルールを適用します。</param>
        <param name="accessMask">ビットごとの組み合わせ<see cref="T:System.Security.AccessControl.RegistryRights" />を監査するへのアクセス権を指定する値が整数にキャストします。</param>
        <param name="isInherited">ルールを継承するかどうかを指定するブール値。</param>
        <param name="inheritanceFlags">ビットごとの組み合わせ<see cref="T:System.Security.AccessControl.InheritanceFlags" />サブキーによってルールを継承する方法を指定する値。</param>
        <param name="propagationFlags">ビットごとの組み合わせ<see cref="T:System.Security.AccessControl.PropagationFlags" />サブキーによってルールを継承する方法を変更する値。 意味のない場合の値<c>inheritanceFlags</c>は<see cref="F:System.Security.AccessControl.InheritanceFlags.None" />します。</param>
        <param name="flags">ビットごとの組み合わせ<see cref="T:System.Security.AccessControl.AuditFlags" />アクセスが成功した、失敗したアクセス、またはその両方を監査するかどうかを指定する値。</param>
        <summary>規則、監査、継承、およびルールの伝達へのアクセス権を適用するユーザー、およびルールをトリガーする結果を指定して、新しい監査規則を作成します。</summary>
        <returns>A<see cref="T:System.Security.AccessControl.RegistryAuditRule" />指定したフラグを使って、指定したユーザーの指定された監査規則を表すオブジェクト。 メソッドの戻り値の型は、基本クラス<see cref="T:System.Security.AccessControl.AuditRule" />、派生クラスを戻り値を安全にキャストされることができますが、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コンス トラクターを使用するのには、監査規則を作成することをお勧め、<xref:System.Security.AccessControl.RegistryAuditRule>クラスです。  
  
> [!NOTE]
>  指定できますが、<xref:System.Security.AccessControl.InheritanceFlags?displayProperty=nameWithType>フラグは、これにはポイントがないです。 監査コントロールの目的で、サブキーの名前と値のペアは別個のオブジェクト 名前と値のペアに対する監査権限は、サブキーの権限によって制御されます。 さらに、すべてのサブキーがコンテナーであるため (つまり、ことが含まれているその他のサブキーには) を受けない、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>フラグ。 最後に、指定する、<xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit>互換性のあるルールの通常の組み合わせに支障があるためにフラグが、ルールのメンテナンスに不必要に複雑にできます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="accessMask" />、 <paramref name="inheritanceFlags" />、 <paramref name="propagationFlags" />、または<paramref name="flags" />に無効な値を指定します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identityReference" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="accessMask" /> が 0 です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identityReference" />型のどちらも<see cref="T:System.Security.Principal.SecurityIdentifier" />、やなどの型の<see cref="T:System.Security.Principal.NTAccount" />型に変換できる<see cref="T:System.Security.Principal.SecurityIdentifier" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuditRuleType">
      <MemberSignature Language="C#" Value="public override Type AuditRuleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type AuditRuleType" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistrySecurity.AuditRuleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>型を取得、<see cref="T:System.Security.AccessControl.RegistrySecurity" />監査規則を表すクラスします。</summary>
        <value>A<see cref="T:System.Type" />オブジェクトを表す、<see cref="T:System.Security.AccessControl.RegistryAuditRule" />クラスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生したクラス、<xref:System.Security.AccessControl.ObjectSecurity>クラスのオーバーライド、<xref:System.Security.AccessControl.ObjectSecurity.AuditRuleType%2A>プロパティと監査権限を表すために使用する型を戻り値。 配列または複数の種類のセキュリティ オブジェクトを格納するコレクションを操作するときは、このプロパティを使用して、各セキュリティ オブジェクトで使用する適切な監査規則の種類を決定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRule">
      <MemberSignature Language="C#" Value="public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A<see cref="T:System.Security.AccessControl.RegistryAccessRule" />ユーザーを指定し、<see cref="T:System.Security.AccessControl.AccessControlType" />を検索し、ルール、一致する場合の継承と伝達のフラグのセットが見つかりませんと互換性のある必要があります。 場合は、互換性のあるルールから削除する権限を指定します。</param>
        <summary>同じユーザーがアクセス制御規則を検索し、 <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否) ようなルールが見つかった場合、指定されたアクセス規則に含まれる権限がそのから削除されます互換性のある継承と伝達のフラグです。 使用して、指定されたアクセス規則として。</summary>
        <returns>
          <see langword="true" />互換性のある規則が見つかった場合それ以外の場合<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Security.AccessControl.RegistrySecurity>は同じユーザーと同じを持つルールの検索は<xref:System.Security.AccessControl.AccessControlType>として値`rule`です。 このような規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`です。 指定されたフラグと互換性のための継承との互換性フラグをチェック照合ルールが見つかった場合、`rule`です。 互換性のある規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`です。 権限がで指定された互換性フラグを含むルールが見つかった場合、 `rule` 、互換性のあるルールから削除されますが返されます`true`です。 場合`rule`互換性のあるルールに含まれていない権限を指定、それらの権利に関するアクションは実行されません。 現在の全体の規則が削除される場合は、すべての権限は、互換性のある規則から削除されます、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。  
  
   
  
## Examples  
 次のコード例に示す方法、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>メソッドは、互換性のある規則からの権利を削除方法、および<xref:System.Security.AccessControl.RegistrySecurity.AddAccessRule%2A>メソッドは、互換性のあるルールに権限をマージします。  
  
 例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトし、現在のユーザーを許可する規則を追加<xref:System.Security.AccessControl.RegistryRights?displayProperty=nameWithType>権限です。 ユーザーを許可するルールを作成し<xref:System.Security.AccessControl.RegistryRights?displayProperty=nameWithType>同じ継承および使用して最初のルールと伝達の権限を指定して、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>からこの新しいルールを削除する方法、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。 <xref:System.Security.AccessControl.RegistryRights.SetValue>構成要素は、<xref:System.Security.AccessControl.RegistryRights.ReadKey>のため、互換性のある規則から削除されます。 内のルール、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトが表示されの残りの構成要素を示す<xref:System.Security.AccessControl.RegistryRights.ReadKey>です。  
  
 コード例は、呼び出し、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>にマージするメソッド、<xref:System.Security.AccessControl.RegistryRights.SetValue>内のルールに戻す右、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトはアタッチされません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。 このセクションでは、2 番目の例は、セキュリティ オブジェクトをアタッチし、例は<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType><xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>です。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleAll(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">A<see cref="T:System.Security.AccessControl.RegistryAccessRule" />ユーザーを指定し、<see cref="T:System.Security.AccessControl.AccessControlType" />を検索します。 任意の権限、継承フラグ、またはこの規則によって指定された伝達フラグは無視されます。</param>
        <summary>同じユーザーが制御規則をアクセスするすべての検索と<see cref="T:System.Security.AccessControl.AccessControlType" />(許可または拒否)、指定されたルールし、見つかった場合は、削除にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Security.AccessControl.RegistrySecurity>は同じユーザーと同じであるルールの検索は<xref:System.Security.AccessControl.AccessControlType>として値`rule`です。 すべての権利、継承フラグ、または伝達フラグで指定された`rule`この検索を実行する場合は無視されます。 照合ルールが見つからない場合、処理は行われません。  
  
 たとえば、ユーザーは、別の継承と伝達フラグのさまざまな権限を許可する複数のルールは、削除できますそれらすべてのルールを作成して、<xref:System.Security.AccessControl.RegistryAccessRule>ユーザーを指定するオブジェクトと<xref:System.Security.AccessControl.AccessControlType?displayProperty=nameWithType>では、任意の権限とフラグ、および受け渡しするルールを、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A>メソッドです。  
  
   
  
## Examples  
 次のコード例はことを示しています、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A>メソッドは、ユーザーに一致するすべての規則を削除および<xref:System.Security.AccessControl.AccessControlType>権限とフラグは無視されます。  
  
 例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトを許可して、別の継承と伝達のフラグを使って、現在のユーザーのさまざまな権限を拒否する規則を追加します。 所有権を取得する現在のユーザーを許可し、その規則を渡す新しいルールを作成し、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll%2A>アクセスを許可する 2 つの規則を削除する方法です。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトはアタッチされません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。 参照してください、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>メソッドおよび<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>メソッドです。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAccessRuleSpecific(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">削除する <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。</param>
        <summary>完全に一致する、指定したアクセス制御規則を検索し、削除を見つかった場合は、そのです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルールが削除されるは、完全に一致する場合にのみ`rule`フラグを含むすべての詳細。 同じユーザーがその他の規則と<xref:System.Security.AccessControl.AccessControlType>には影響しません。  
  
> [!IMPORTANT]
>  以上基になるアクセス制御エントリ (ACE) およびこれらのエントリが分割またはユーザーのアクセスのセキュリティ ルールを変更する場合に、必要に応じて、結合またはルールが 1 つを表します。 このため、ルールがあります存在しなくおよびそのケースがあったが追加されると、特定のフォームで、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>方法はそれを削除することはできません。  
  
   
  
## Examples  
 次のコード例はことを示しています、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>メソッドが正確に一致した場合にのみ、ルールを削除します。  
  
 この例では、異なる権限を許可する 2 つのルールを作成します。 ルールが互換性の継承と伝達のフラグであるため、最初と 2 番目のルールが追加されたときにマージします。 呼び出しの例、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>最初の規則を指定して、メソッドと一致するルールがないため、ルールがマージされます。 この例では、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRule%2A>結合ルール、および最後に呼び出しから 2 番目のルールの削除にするメソッド、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific%2A>最初の規則を削除する方法です。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトはアタッチされません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。 参照してください、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>メソッドおよび<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>メソッドです。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRule">
      <MemberSignature Language="C#" Value="public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A<see cref="T:System.Security.AccessControl.RegistryAuditRule" />を検索して、ユーザーと一致するルールは、継承と伝達のフラグのセットを指定する場合は、互換性がある必要があります。 場合は、互換性のあるルールから削除する権限を指定します。</param>
        <summary>指定した規則と同じユーザーと互換性のある継承および伝達フラグ; 監査制御規則を検索互換性のある規則が見つかった場合、指定されたルールに含まれる権限はそこから削除されます。</summary>
        <returns>
          <see langword="true" />互換性のある規則が見つかった場合それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Security.AccessControl.RegistrySecurity>を同一のユーザーを持つ監査規則の検索`rule`です。 このような規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`です。 指定されたフラグと互換性のための継承との互換性フラグをチェック照合ルールが見つかった場合、`rule`です。 互換性のある規則が見つからないかどうか、アクションは実行されませんし、メソッドを返します`false`です。 権限がで指定された互換性フラグを含むルールが見つかった場合、 `rule` 、互換性のあるルールから削除されますが返されます`true`です。 場合`rule`互換性のあるルールに含まれていない権限を指定、それらの権利に関するアクションは実行されません。 現在の全体の規則が削除される場合は、すべての権限は、互換性のある規則から削除されます、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクト。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleAll">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleAll(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">A<see cref="T:System.Security.AccessControl.RegistryAuditRule" />を検索するユーザーを指定します。 任意の権限、継承フラグ、またはこの規則によって指定された伝達フラグは無視されます。</param>
        <summary>場合とすべての監査規則を指定した規則と同じユーザーの検索を発見し、それらを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Security.AccessControl.RegistrySecurity>監査規則を持つと同じユーザーが検索`rule`です。 すべての権利、継承フラグ、または伝達フラグで指定された`rule`この検索を実行する場合は無視されます。 照合ルールが見つからない場合、処理は行われません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveAuditRuleSpecific">
      <MemberSignature Language="C#" Value="public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAuditRuleSpecific(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">削除する <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。</param>
        <summary>完全に一致する、指定された監査規則の検索と削除、見つかった場合は、そのします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ルールが削除されるは、完全に一致する場合にのみ`rule`フラグを含むすべての詳細。 同じユーザーの場合は、その他の監査規則には影響しません。  
  
> [!IMPORTANT]
>  以上基になるアクセス制御エントリ (ACE) およびこれらのエントリが分割またはユーザーの監査のセキュリティ ルールを変更する場合に、必要に応じて、結合またはルールが 1 つを表します。 このため、ルールがあります存在しなくおよびそのケースがあったが追加されると、特定のフォームで、<xref:System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific%2A>方法はそれを削除することはできません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResetAccessRule">
      <MemberSignature Language="C#" Value="public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。 このルールで指定されたユーザーは、この規則を追加する前に削除する規則を決定します。</param>
        <summary>関係なく、指定した規則と同じユーザーを持つすべてのアクセス制御規則を削除<see cref="T:System.Security.AccessControl.AccessControlType" />、指定されたルールを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが、指定されたルールに一致するアクセス規則がない場合`rule`を追加します。  
  
   
  
## Examples  
 次のコード例に示す方法、<xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A>メソッドは、一致する指定された規則に一致するユーザーのすべての規則を置き換えます。  
  
 例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトを許可して、別の継承と伝達のフラグを使って、現在のユーザーのさまざまな権限を拒否する規則を追加します。 使用して、キーを読み取る場合にのみ、現在のユーザーは、新しいルールを作成し、<xref:System.Security.AccessControl.RegistrySecurity.ResetAccessRule%2A>メソッドをユーザーのすべての規則を削除して、新しいルールに置き換えます。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトはアタッチされません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。 参照してください、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>メソッドおよび<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>メソッドです。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.ResetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.ResetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAccessRule">
      <MemberSignature Language="C#" Value="public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAccessRule(class System.Security.AccessControl.RegistryAccessRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAccessRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.RegistryAccessRule" />。 ユーザーと<see cref="T:System.Security.AccessControl.AccessControlType" />この規則には、この規則を追加する前に削除の規則を決定します。</param>
        <summary>同じユーザーを持つすべてのアクセス制御規則を削除し、 <see cref="T:System.Security.AccessControl.AccessControlType" /> (許可または拒否)、指定されたルールとしてし、指定されたルールを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合は、指定されたルール<xref:System.Security.AccessControl.AccessControlType.Allow>をすべて削除するのには、このメソッドの効果<xref:System.Security.AccessControl.AccessControlType.Allow>指定されたルールに置き換える、指定したユーザーのルール。 指定されたルールがある場合<xref:System.Security.AccessControl.AccessControlType.Deny>すべて、<xref:System.Security.AccessControl.AccessControlType.Deny>指定したユーザーのルールは、指定されたルールに置き換えられます。  
  
 規則がないユーザーの場合と<xref:System.Security.AccessControl.AccessControlType>指定の規則に一致`rule`を追加します。  
  
   
  
## Examples  
 次のコード例はことを示しています、<xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A>メソッドは、ユーザーの両方に一致するすべての規則を削除、<xref:System.Security.AccessControl.AccessControlType>の`rule`権限と、フラグは無視されます、およびそれらに置き換えます`rule`です。  
  
 例は、作成、<xref:System.Security.AccessControl.RegistrySecurity>オブジェクトを許可して、別の継承と伝達のフラグを使って、現在のユーザーのさまざまな権限を拒否する規則を追加します。 使用して、キーを読み取る場合にのみ、現在のユーザーは、新しいルールを作成し、<xref:System.Security.AccessControl.RegistrySecurity.SetAccessRule%2A>メソッド アクセスを許可する 2 つの規則を削除して、新しいルールに置き換えます。 アクセスを拒否する規則が影響を受けません。  
  
> [!NOTE]
>  この例では、セキュリティ オブジェクトはアタッチされません、<xref:Microsoft.Win32.RegistryKey>オブジェクト。 参照してください、<xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType>メソッドおよび<xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType>メソッドです。  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.SetAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.SetAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAuditRule">
      <MemberSignature Language="C#" Value="public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAuditRule(class System.Security.AccessControl.RegistryAuditRule rule) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rule" Type="System.Security.AccessControl.RegistryAuditRule" />
      </Parameters>
      <Docs>
        <param name="rule">追加する <see cref="T:System.Security.AccessControl.RegistryAuditRule" />。 このルールで指定されたユーザーは、この規則を追加する前に削除する規則を決定します。</param>
        <summary>関係なくすべての監査規則、指定されたルールと同じユーザーを削除、<see cref="T:System.Security.AccessControl.AuditFlags" />値に設定して、指定されたルールを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが、指定されたルールに一致する監査規則がない場合`rule`を追加します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="rule" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
