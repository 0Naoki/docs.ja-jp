<Type Name="AspNetWebSocket" FullName="System.Web.WebSockets.AspNetWebSocket">
  <TypeSignature Language="C#" Value="public sealed class AspNetWebSocket : System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AspNetWebSocket extends System.Net.WebSockets.WebSocket" />
  <TypeSignature Language="DocId" Value="T:System.Web.WebSockets.AspNetWebSocket" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.WebSockets.WebSocket</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Web サーバーと ASP.NET アプリケーション内のクライアントの間でリアルタイムの全二重接続を表します。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public override void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Abort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中の I/O 操作のキャンセル、<see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクトし、その他の I/O 操作を開始するために使用できないように、オブジェクトの状態を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後に、<xref:System.Web.WebSockets.AspNetWebSocket.Abort%2A>メソッドが呼び出されて、プロパティとメソッドの I/O 操作は含まれませんがアクセスできます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">オブジェクトは、以前に廃棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">クローズ操作のステータス コード。</param>
        <param name="statusDescription">クローズ操作のステータス メッセージ。</param>
        <param name="cancellationToken">保留中の操作をキャンセルするオブジェクト。</param>
        <summary>クライアント接続を閉じるには、非同期メッセージを送信します。 サーバーは、接続を閉じる要求を開始する場合は、クライアントに返す前に、要求を確認するメソッドが待機します。</summary>
        <returns>操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>と<xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>クライアントによって開始され、サーバーによって開始される両方の要求を閉じるためのメソッド、<xref:System.Web.WebSockets.AspNetWebSocket>接続します。 2 つの方法は、同じ方法でクライアントによって開始される要求を処理します。 クライアントは、接続を閉じ、サーバーにメッセージを送信し、サーバーがこれらのメソッドの 1 つを呼び出すと、クライアントに受信確認を送信してとメソッドを返します。  
  
 サーバーによって開始される要求の 2 つのメソッドに動作が異なります。 <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>メソッド接続を閉じる、クライアントにメッセージを送信、応答を待って、を返します。 サーバーは、クライアントによって送信されるその他のデータには待機しません。 これに対し、<xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>メソッドは、接続を閉じる、クライアントにメッセージを送信し、応答を待機することがなくを返します。 このメソッドが戻る呼び出すことができます、<xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>メソッドおよび追加のデータまたはクライアントが送信する受信確認を処理します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクトが以前に廃棄されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクトが中止された状態にします。  
  
 または  
  
 送信側の操作は、ご利用いただけません。  
  
 または  
  
 受信側の操作は、ご利用いただけません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseOutputAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task CloseOutputAsync(valuetype System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="closeStatus" Type="System.Net.WebSockets.WebSocketCloseStatus" />
        <Parameter Name="statusDescription" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="closeStatus">クローズ操作のステータス コード。</param>
        <param name="statusDescription">クローズ操作のステータス メッセージ。</param>
        <param name="cancellationToken">保留中の操作をキャンセルするオブジェクト。</param>
        <summary>クライアント接続を閉じるには、非同期メッセージを送信します。 サーバーは、接続を閉じる要求を開始する場合は、応答を待機することがなく返します。</summary>
        <returns>操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>と<xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>クライアントによって開始され、サーバーによって開始される両方の要求を閉じるためのメソッド、<xref:System.Web.WebSockets.AspNetWebSocket>接続します。 2 つの方法は、同じ方法でクライアントによって開始される要求を処理します。 クライアントは、接続を閉じ、サーバーにメッセージを送信し、サーバーがこれらのメソッドの 1 つを呼び出すと、クライアントに受信確認を送信してとメソッドを返します。  
  
 サーバーによって開始される要求の 2 つのメソッドに動作が異なります。 <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>メソッド接続を閉じる、クライアントにメッセージを送信、応答を待って、を返します。 サーバーは、クライアントによって送信されるその他のデータには待機しません。 これに対し、<xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>メソッドは、接続を閉じる、クライアントにメッセージを送信し、応答を待機することがなくを返します。 このメソッドが戻る呼び出すことができます、<xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>メソッドおよび追加のデータまたはクライアントが送信する受信確認を処理します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">オブジェクトは、以前に廃棄されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクトが中止された状態にします。  
  
 または  
  
 送信側の操作は、ご利用いただけません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatus">
      <MemberSignature Language="C#" Value="public override Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.Net.WebSockets.WebSocketCloseStatus&gt; CloseStatus" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Net.WebSockets.WebSocketCloseStatus&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>その理由を示すステータス コードを取得、<see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクトが閉じられました。</summary>
        <value>ステータス コード。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">オブジェクトは、以前に廃棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CloseStatusDescription">
      <MemberSignature Language="C#" Value="public override string CloseStatusDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CloseStatusDescription" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>その理由を説明するステータス メッセージを取得、<see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクトが閉じられました。</summary>
        <value>ステータス メッセージ。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">オブジェクトは、以前に廃棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>によって使用されるすべてのリソースを解放する<see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET を自動的に呼び出して、<xref:System.Web.WebSockets.AspNetWebSocket.Dispose%2A>メソッドを<xref:System.Web.WebSockets.AspNetWebSocket>まま、コードが完了した後に実行されているリソースを解放するオブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync (ArraySegment&lt;byte&gt; buffer, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class System.Net.WebSockets.WebSocketReceiveResult&gt; ReceiveAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.WebSockets.WebSocketReceiveResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">メッセージ データを格納する配列。</param>
        <param name="cancellationToken">保留中の操作をキャンセルするオブジェクト。</param>
        <summary>リモート クライアントから 1 つのメッセージ フラグメントを受信します。</summary>
        <returns>メッセージを受信するタスクへの参照。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクトが以前に廃棄されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクトが中止された状態にします。  
  
 または  
  
 受信側の操作は、ご利用いただけません。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task SendAsync (ArraySegment&lt;byte&gt; buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task SendAsync(valuetype System.ArraySegment`1&lt;unsigned int8&gt; buffer, valuetype System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.ArraySegment&lt;System.Byte&gt;" />
        <Parameter Name="messageType" Type="System.Net.WebSockets.WebSocketMessageType" />
        <Parameter Name="endOfMessage" Type="System.Boolean" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">メッセージ データを格納する配列。</param>
        <param name="messageType">メッセージの型。</param>
        <param name="endOfMessage">
          <see langword="true" />フラグメントが完全なメッセージの最後であることを示しますそれ以外の場合、<see langword="false" />です。</param>
        <param name="cancellationToken">保留中の操作をキャンセルするオブジェクト。</param>
        <summary>1 つのメッセージ フラグメントをリモート クライアントに送信します。</summary>
        <returns>メッセージを送信するタスクへの参照。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクトを破棄します。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクトが中止された状態にします。  
  
 または  
  
 送信側の操作は、ご利用いただけません。</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Net.WebSockets.WebSocketState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.WebSockets.WebSocketState State" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebSockets.WebSocketState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オープンかクローズ状態を示す値を取得、<see cref="T:System.Web.WebSockets.AspNetWebSocket" />オブジェクト。</summary>
        <value>現在の状態。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">オブジェクトは、以前に廃棄されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SubProtocol">
      <MemberSignature Language="C#" Value="public override string SubProtocol { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SubProtocol" />
      <MemberSignature Language="DocId" Value="P:System.Web.WebSockets.AspNetWebSocket.SubProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リモート クライアントとサーバーを使用して経由でデータを交換するアプリケーション固有のプロトコルの名前を取得、<see cref="T:System.Web.WebSockets.AspNetWebSocket" />接続します。</summary>
        <value>プロトコルの名前。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">オブジェクトは、以前に廃棄されています。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
