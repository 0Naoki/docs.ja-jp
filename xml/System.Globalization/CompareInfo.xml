<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>カルチャごとに異なる文字列比較を行うための一連のメソッドを実装します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 比較して、データの並べ替えに関する規則には、カルチャが異なります。 たとえば、並べ替え順序は、表音または文字のビジュアル表現に基づいて可能性があります。 東アジア圏の言語では、文字が表意文字の画数と部首によって並べ替えられます。 また、並べ替えは、言語やカルチャで使用されているアルファベットの順序によっても異なります。 たとえば、デンマーク語の文字 "Æ" は、アルファベットでは "Z" の後に位置します。 また、または区別しない、比較可能性があり、大文字小文字の規則はカルチャによっても異なる場合があります。 <xref:System.Globalization.CompareInfo>クラスはこのカルチャに依存した文字列比較データを維持するため、およびカルチャに依存した文字列の操作を実行します。  
  
 通常がありませんをインスタンス化、<xref:System.Globalization.CompareInfo>はすべての非序数の文字列比較操作で暗黙的に使用されるため、直接オブジェクトへの呼び出しなど、<xref:System.String.Compare%2A?displayProperty=nameWithType>メソッドです。 ただし、取得する場合、<xref:System.Globalization.CompareInfo>オブジェクト、以下の方法のいずれかで行うことができます。  
  
-   値を取得することによって、<xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType>特定のカルチャのプロパティです。  
  
-   呼び出して、静的な<xref:System.Globalization.CompareInfo.GetCompareInfo%2A>カルチャ名を持つメソッドです。 これにより、遅延バインディングへのアクセス、<xref:System.Globalization.CompareInfo>オブジェクト。  
  
## <a name="ignored-search-values"></a>検索値は無視されます。  
 文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 などの比較メソッド<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>カルチャに依存した比較を実行するときにこのような文字は考えない。 無視できる文字は次のとおりです。  
  
-   <xref:System.String.Empty?displayProperty=nameWithType>。 カルチャに依存した比較メソッドは検索対象の文字列の先頭 (インデックス 0) に常に空の文字列を検索します。  
  
-   文字または文字列がコード ポイントは、特に、比較オプションのため、操作は考慮されませんが文字のうち、<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>と<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>オプション生成検索シンボルと非スペーシング組み合わせ文字が無視されます。  
  
-   言語的な意味を持たないコード ポイントを持つ文字列です。 たとえば、ソフト ハイフン (U +0 00AD) はカルチャに依存した文字列比較では常に無視されます。  
  
## <a name="security-considerations"></a>セキュリティの考慮事項  
 使用する必要があります、セキュリティ上の決定は、文字列の比較や大文字に依存する場合、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく、一貫した動作であることを確認します。  
  
> [!NOTE]
>  型のパラメーターが文字列比較メソッドを使用する必要があります可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 例を次にどのように<xref:System.Globalization.CompareInfo>オブジェクトに関連付けられている、<xref:System.Globalization.CultureInfo>オブジェクトが文字列比較に影響します。  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <summary>2 つの文字列を比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term>値  
  
 </term><description>条件  
  
 </description></listheader><item><term>0  
  
 </term><description>2 つの文字列が等しいです。  
  
 </description></item><item><term>0 より小さい値  
  
 </term><description><paramref name="string1" /> は <paramref name="string2" /> より小さい値です。  
  
 </description></item><item><term>0 より大きい値  
  
 </term><description><paramref name="string1" /> が <paramref name="string2" /> より大きくなっています。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、比較を使用して実行<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>です。 使用する必要があります、セキュリティ上の決定は、文字列の比較や大文字に依存する場合、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、さまざまなを使用して 2 つの文字列の一部を比較<xref:System.Globalization.CompareInfo>オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo>国際対応の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo>従来の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo>オブジェクトに関連付けられている、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 次の例では、<xref:System.Globalization.CompareInfo.Compare%2A> メソッドを呼び出す方法を示しています。  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。 インスタンス「動物」と「ani-正しくない」(ソフト ハイフン、または U +0 00AD 使用) のカルチャに依存した比較では、2 つの文字列が次の例のように、同等であることを示します。  
  
 [!code-vb[System.Globalization.CompareInfo.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)]  
  
 文字列比較で無視できる文字を認識するように呼び出す、<see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />メソッドといずれかの値を供給<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="options">値を定義する方法<c>string1</c>と<c>string2</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、および<see cref="F:System.Globalization.CompareOptions.StringSort" />です。</param>
        <summary>指定された 2 つの文字列を比較<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term>値  
  
 </term><description>条件  
  
 </description></listheader><item><term>0  
  
 </term><description>2 つの文字列が等しいです。  
  
 </description></item><item><term>0 より小さい値  
  
 </term><description><paramref name="string1" /> は <paramref name="string2" /> より小さい値です。  
  
 </description></item><item><term>0 より大きい値  
  
 </term><description><paramref name="string1" /> が <paramref name="string2" /> より大きくなっています。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する必要があります、セキュリティ上の決定は、文字列の比較や大文字に依存する場合、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、異なる 2 つの文字列を比較<xref:System.Globalization.CompareOptions>設定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]  
  
 次の例では、<xref:System.Globalization.CompareInfo.Compare%2A> メソッドを呼び出す方法を示しています。  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。 比較で無視できる文字を認識するには、値を指定<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">内の文字の 0 から始まるインデックス<c>string1</c>比較を開始する位置を示すです。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">内の文字の 0 から始まるインデックス<c>string2</c>比較を開始する位置を示すです。</param>
        <summary>文字列の末尾部分と別の文字列の末尾部分とを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term>値  
  
 </term><description>条件  
  
 </description></listheader><item><term>0  
  
 </term><description>2 つの文字列が等しいです。  
  
 </description></item><item><term>0 より小さい値  
  
 </term><description>指定したセクション<paramref name="string1" />が指定されたセクションのより小さい<paramref name="string2" />です。  
  
 </description></item><item><term>0 より大きい値  
  
 </term><description>指定したセクション<paramref name="string1" />が指定されたセクションのより大きい<paramref name="string2" />です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する必要があります、セキュリティ上の決定は、文字列の比較や大文字に依存する場合、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、さまざまなを使用して 2 つの文字列の一部を比較<xref:System.Globalization.CompareInfo>オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo>国際対応の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo>従来の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo>オブジェクトに関連付けられている、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> または <paramref name="offset2" /> が 0 未満です。  
  
 または  
  
 <paramref name="offset1" />文字数以上<paramref name="string1" />です。  
  
 または  
  
 <paramref name="offset2" />文字数以上<paramref name="string2" />です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />言語またはカルチャに依存した比較を実行するときに、メソッドでこれらの文字が考慮されません。 比較で無視できる文字を認識するように呼び出して、<see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />メソッドの値を指定<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">内の文字の 0 から始まるインデックス<c>string1</c>比較を開始する位置を示すです。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">内の文字の 0 から始まるインデックス<c>string2</c>比較を開始する位置を示すです。</param>
        <param name="options">値を定義する方法<c>string1</c>と<c>string2</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、および<see cref="F:System.Globalization.CompareOptions.StringSort" />です。</param>
        <summary>指定を使用して別の文字列の末尾部分文字列の末尾部分を比較して<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term>値  
  
 </term><description>条件  
  
 </description></listheader><item><term>0  
  
 </term><description>2 つの文字列が等しいです。  
  
 </description></item><item><term>0 より小さい値  
  
 </term><description>指定したセクション<paramref name="string1" />が指定されたセクションのより小さい<paramref name="string2" />です。  
  
 </description></item><item><term>0 より大きい値  
  
 </term><description>指定したセクション<paramref name="string1" />が指定されたセクションのより大きい<paramref name="string2" />です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する必要があります、セキュリティ上の決定は、文字列の比較や大文字に依存する場合、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、異なる 2 つの文字列の一部を比較<xref:System.Globalization.CompareOptions>設定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> または <paramref name="offset2" /> が 0 未満です。  
  
 または  
  
 <paramref name="offset1" />文字数以上<paramref name="string1" />です。  
  
 または  
  
 <paramref name="offset2" />文字数以上<paramref name="string2" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。これらの文字は、言語またはカルチャに依存した比較を実行する際には考慮されません。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />カルチャに依存した比較を実行するときに、メソッドでこのような文字が考慮されません。 比較で無視できる文字を認識するには、値を指定<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">内の文字の 0 から始まるインデックス<c>string1</c>比較を開始する位置を示すです。</param>
        <param name="length1">連続した文字数<c>string1</c>を比較します。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">内の文字の 0 から始まるインデックス<c>string2</c>比較を開始する位置を示すです。</param>
        <param name="length2">連続した文字数<c>string2</c>を比較します。</param>
        <summary>文字列のセクションと別の文字列のセクションとを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term>値  
  
 </term><description>条件  
  
 </description></listheader><item><term>0  
  
 </term><description>2 つの文字列が等しいです。  
  
 </description></item><item><term>0 より小さい値  
  
 </term><description>指定したセクション<paramref name="string1" />が指定されたセクションのより小さい<paramref name="string2" />です。  
  
 </description></item><item><term>0 より大きい値  
  
 </term><description>指定したセクション<paramref name="string1" />が指定されたセクションのより大きい<paramref name="string2" />です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する必要があります、セキュリティ上の決定は、文字列の比較や大文字に依存する場合、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  型のパラメーターが文字列比較メソッドを使用する必要があります可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、さまざまなを使用して 2 つの文字列の一部を比較<xref:System.Globalization.CompareInfo>オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo>国際対応の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo>従来の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo>オブジェクトに関連付けられている、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" />または<paramref name="length1" />または<paramref name="offset2" />または<paramref name="length2" />が 0 未満です。  
  
 または  
  
 <paramref name="offset1" />文字数以上<paramref name="string1" />です。  
  
 または  
  
 <paramref name="offset2" />文字数以上<paramref name="string2" />です。  
  
 または  
  
 <paramref name="length1" />文字の数よりも大きい<paramref name="offset1" />の末尾に<paramref name="string1" />です。  
  
 または  
  
 <paramref name="length2" />文字の数よりも大きい<paramref name="offset2" />の末尾に<paramref name="string2" />です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />言語またはカルチャに依存した比較を実行するときに、メソッドでこれらの文字が考慮されません。 比較で無視できる文字を認識するように呼び出して、<see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドの値を指定<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">内の文字の 0 から始まるインデックス<c>string1</c>比較を開始する位置を示すです。</param>
        <param name="length1">連続した文字数<c>string1</c>を比較します。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">内の文字の 0 から始まるインデックス<c>string2</c>比較を開始する位置を示すです。</param>
        <param name="length2">連続した文字数<c>string2</c>を比較します。</param>
        <param name="options">値を定義する方法<c>string1</c>と<c>string2</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、および<see cref="F:System.Globalization.CompareOptions.StringSort" />です。</param>
        <summary>1 つの文字列のセクションを指定して別の文字列のセクションでの比較<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table"><listheader><term>値  
  
 </term><description>条件  
  
 </description></listheader><item><term>0  
  
 </term><description>2 つの文字列が等しいです。  
  
 </description></item><item><term>0 より小さい値  
  
 </term><description>指定したセクション<paramref name="string1" />が指定されたセクションのより小さい<paramref name="string2" />です。  
  
 </description></item><item><term>0 より大きい値  
  
 </term><description>指定したセクション<paramref name="string1" />が指定されたセクションのより大きい<paramref name="string2" />です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する必要があります、セキュリティ上の決定は、文字列の比較や大文字に依存する場合、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions.Ordinal>または<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、異なる 2 つの文字列の一部を比較<xref:System.Globalization.CompareOptions>設定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" />または<paramref name="length1" />または<paramref name="offset2" />または<paramref name="length2" />が 0 未満です。  
  
 または  
  
 <paramref name="offset1" />文字数以上<paramref name="string1" />です。  
  
 または  
  
 <paramref name="offset2" />文字数以上<paramref name="string2" />です。  
  
 または  
  
 <paramref name="length1" />文字の数よりも大きい<paramref name="offset1" />の末尾に<paramref name="string1" />です。  
  
 または  
  
 <paramref name="length2" />文字の数よりも大きい<paramref name="offset2" />の末尾に<paramref name="string2" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには無視できる文字が含まれています。 <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />カルチャに依存した比較を実行するときに、メソッドでこれらの文字が考慮されません。 比較で無視できる文字を認識するには、値を指定<see cref="F:System.Globalization.CompareOptions.Ordinal" />または<see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />の<paramref name="options" />パラメーター。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">現在の <see cref="T:System.Globalization.CompareInfo" /> と比較するオブジェクト。</param>
        <summary>指定したオブジェクトが、現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトと等しいかどうかを判断します。</summary>
        <returns>
          <see langword="true" />指定したオブジェクトが現在に等しい場合<see cref="T:System.Globalization.CompareInfo" />、それ以外の<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 つ<xref:System.Globalization.CompareInfo>オブジェクトが等しい場合は、<xref:System.Globalization.CompareInfo.LCID%2A>と<xref:System.Globalization.CompareInfo.Name%2A>プロパティが等しい。  
  
 このメソッドは<xref:System.Object.Equals%2A?displayProperty=nameWithType>します。  
  
 使用する必要があります、セキュリティ上の決定は、文字列の比較や大文字に依存する場合、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">カルチャ識別子を表す整数。</param>
        <summary>新しい初期化<see cref="T:System.Globalization.CompareInfo" />指定した識別子のカルチャに関連付けられているオブジェクト。</summary>
        <returns>新しい<see cref="T:System.Globalization.CompareInfo" />オブジェクトが、指定した識別子と文字列比較メソッドを使用して、現在のカルチャに関連付けられている<see cref="T:System.Reflection.Assembly" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、さまざまなを使用して 2 つの文字列の一部を比較<xref:System.Globalization.CompareInfo>オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo>国際対応の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo>従来の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo>オブジェクトに関連付けられている、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">カルチャ名を表す文字列。</param>
        <summary>新しい初期化<see cref="T:System.Globalization.CompareInfo" />指定された名前、カルチャに関連付けられているオブジェクト。</summary>
        <returns>新しい<see cref="T:System.Globalization.CompareInfo" />オブジェクトが、指定した識別子と文字列比較メソッドを使用して、現在のカルチャに関連付けられている<see cref="T:System.Reflection.Assembly" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、さまざまなを使用して 2 つの文字列の一部を比較<xref:System.Globalization.CompareInfo>オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo>国際対応の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo>従来の並べ替えのスペイン語 (スペイン) カルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo>オブジェクトに関連付けられている、<xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" />無効なカルチャ名。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="culture">カルチャ識別子を表す整数。</param>
        <param name="assembly"><see cref="T:System.Reflection.Assembly" />を含む文字列比較メソッドを使用します。</param>
        <summary>新しい初期化<see cref="T:System.Globalization.CompareInfo" />オブジェクト、指定したカルチャに関連付けられていると、指定した文字列比較メソッドを使用する<see cref="T:System.Reflection.Assembly" />です。</summary>
        <returns>新しい<see cref="T:System.Globalization.CompareInfo" />オブジェクトが、指定した識別子と文字列比較メソッドを使用して、現在のカルチャに関連付けられている<see cref="T:System.Reflection.Assembly" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドの動作は予測できません。 このアセンブリの入力を受け取らないメソッドのバージョンを使用するアプリケーションのことをお勧めします。  
  
 `assembly`パラメーターと同じ型でなければなりません<xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assembly" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assembly" />無効な型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="name">カルチャ名を表す文字列。</param>
        <param name="assembly"><see cref="T:System.Reflection.Assembly" />を含む文字列比較メソッドを使用します。</param>
        <summary>新しい初期化<see cref="T:System.Globalization.CompareInfo" />オブジェクト、指定したカルチャに関連付けられていると、指定した文字列比較メソッドを使用する<see cref="T:System.Reflection.Assembly" />です。</summary>
        <returns>新しい<see cref="T:System.Globalization.CompareInfo" />オブジェクトが、指定した識別子と文字列比較メソッドを使用して、現在のカルチャに関連付けられている<see cref="T:System.Reflection.Assembly" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドの動作は予測できません。 このアセンブリの入力を受け取らないメソッドのバージョンを使用することをお勧めします。  
  
 `assembly`パラメーターと同じ型でなければなりません<xref:System.Reflection.Module.Assembly%2A?displayProperty=nameWithType>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="assembly" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" />無効なカルチャ名。  
  
 または  
  
 <paramref name="assembly" />無効な型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のハッシュ関数として機能<see cref="T:System.Globalization.CompareInfo" />ハッシュ テーブルなど、アルゴリズムとデータ構造体のハッシュ。</summary>
        <returns>現在の <see cref="T:System.Globalization.CompareInfo" /> のハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは<xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>します。  
  
 このメソッドは、<xref:System.Globalization.CompareInfo.Equals%2A> メソッドによって等しいと評価された 2 つのオブジェクトに対して同じハッシュ コードを生成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">ハッシュ コードが返される文字列。</param>
        <param name="options">文字列の比較方法を決定する値。</param>
        <summary>指定した比較オプションに基づいて、文字列のハッシュ コードを取得します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 動作<xref:System.Globalization.CompareInfo.GetHashCode%2A>はその実装は、別に、共通言語ランタイムの 1 つのバージョンから、または 1 つの .NET Framework プラットフォームからを変更する可能性がありますに依存します。  
  
> [!IMPORTANT]
>  2 つの文字列オブジェクトが等しい場合は、<xref:System.Globalization.CompareInfo.GetHashCode%2A>メソッドと同じ値を返します。 ただし、一意の文字列値ごとに一意のハッシュ コード値はありません。 異なる文字列は、同じハッシュ コードを返すことができます。  
>   
>  ハッシュ コード自体は、安定しているは保証されません。 .NET Framework のバージョンとプラットフォーム (32 ビットおよび 64 ビット) など、.NET Framework の 1 つのバージョンを全体と同じ文字列のハッシュ コードは異なることができます。 場合によっては、アプリケーション ドメインによっても異なることができます。  
>   
>  その結果、ハッシュが作成された、アプリケーション ドメインの外部のコードを使用しないで、コレクション内のキー フィールドとして使用する必要がありますしないと、永続化することはありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">対象の文字列、<see cref="T:System.Globalization.SortKey" />オブジェクトを取得します。</param>
        <summary>指定した文字列の並べ替えキーを取得します。</summary>
        <returns><see cref="T:System.Globalization.SortKey" />を指定した文字列の並べ替えキーを含むオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列内の各文字には、いくつかのカテゴリの並べ替えウェイト、スクリプト、アルファベット順、大文字、および発音の区別の重みが与えられます。 並べ替えキーは、特定の文字列をこれらの規則のリポジトリです。 たとえば、並べ替えキーにはアルファベット順ウェイトの文字列、大文字小文字のウェイトの文字列などが特定の順序で格納されています。 <xref:System.Globalization.CompareInfo.GetSortKey%2A>メソッドは、Windows API メソッドに相当`LCMapString`LCMAP_SORTKEY フラグを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">対象の文字列、<see cref="T:System.Globalization.SortKey" />オブジェクトを取得します。</param>
        <param name="options">並べ替えキーの計算方法を定義する次の列挙値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />、および<see cref="F:System.Globalization.CompareOptions.StringSort" />です。</param>
        <summary>取得、<see cref="T:System.Globalization.SortKey" />オブジェクトを指定して、指定した文字列<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns><see cref="T:System.Globalization.SortKey" />を指定した文字列の並べ替えキーを含むオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列内の各文字には、いくつかのカテゴリの並べ替えウェイト、スクリプト、アルファベット順、大文字、および発音の区別の重みが与えられます。 並べ替えキーは、特定の文字列をこれらの規則のリポジトリです。 たとえば、並べ替えキーにはアルファベット順ウェイトの文字列、大文字小文字のウェイトの文字列などが特定の順序で格納されています。 <xref:System.Globalization.CompareInfo.GetSortKey%2A>メソッドは、Windows API メソッドに相当`LCMapString`LCMAP_SORTKEY フラグを使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <summary>指定した文字を検索し、検索対象文字列全体内で最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、見つかった内<paramref name="source" />以外の場合、-1。 0 (ゼロ) を返します<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、文字列の末尾に文字列の先頭から、ソース文字列を検索します。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 場合`value`Unicode 文字で合字の「Æ」など (U + 00 C 6)、これと見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じを表します (u+0041、u+0045) に、カルチャに依存します。 序数に基づく (カルチャに依存しない) 検索を実行する型のパラメーターを持ち、文字専用と見なされます別の文字と等価の Unicode コード ポイントが同じ場合は、する必要があります、オーバー ロードを呼び出すこと<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値。 異なり<xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=nameWithType>のオーバー ロードにより、カルチャに依存した比較を実行する、<xref:System.String.IndexOf%2A?displayProperty=nameWithType>を検索する文字は、序数に基づく比較を実行し、文字列を検索するオーバー ロードは、カルチャに依存した比較を実行するメソッド。  
  
> [!NOTE]
>  型のパラメーターが文字列比較メソッドを使用する必要があります可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 ここで、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />メソッドは 0 (ゼロ) の先頭に一致が見つかったことを示すために常に返します<paramref name="source" />です。 次の例で、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />メソッドはソフト ハイフン (U +0 00AD) を 2 つの文字列で検索に使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合はソフト ハイフンに無視できる文字であるため、メソッドを返します 0 (ゼロ) の一致を発見したを示すために、文字列の先頭にします。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列全体内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、見つかった内<paramref name="source" />以外の場合、-1。 0 (ゼロ) を返します<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列は、転送、文字列の先頭から開始し、文字列の末尾で終了が検索されます。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 Unicode 値が比較されます、序数に基づく (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを使用する必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />メソッドは 0 (ゼロ) の先頭に一致が見つかったことを示すために常に返します<paramref name="source" />です。 次の例で、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />を 2 つの文字列 (ソフト ハイフン (U +0 00AD)、"n"で後にソフト ハイフンおよびにソフト ハイフンの後に"m") の 3 つの部分文字列を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 各ケースではソフト ハイフンに無視できる文字であるため、結果は、場合と同じにソフト ハイフンが含まれていない必要がある<paramref name="value" />です。 ソフト ハイフンのみを検索するときに、このメソッドは、文字列の先頭に一致するものを発見したを示すために 0 (ゼロ) を返します。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <param name="options">文字列の比較方法を定義する値。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、指定されたを使用して、全体のソース文字列内で最初に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、見つかった内<paramref name="source" />、; 指定した比較オプションを使用してそれ以外の場合、-1。 0 (ゼロ) を返します<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列は、転送、文字列の先頭から開始し、文字列の末尾で終了が検索されます。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値である場合は、合字の「Æ」(U + 00 C 6) と見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じ (u+0041、u+0045)、カルチャに依存します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数に基づく (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、他の文字を同等と見なされます。 オーバー ロードが<xref:System.String.IndexOf%2A?displayProperty=nameWithType>その文字の検索をカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  型のパラメーターが文字列比較メソッドを使用する必要があります可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 ここで、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />メソッドは 0 (ゼロ) の先頭に一致が見つかったことを示すために常に返します<paramref name="source" />です。 次の例で、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />にソフト ハイフン (U +0 00AD) 2 つの文字列を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合はソフト ハイフンに無視できる文字であるため、カルチャに依存した検索を返します 0 (ゼロ) の一致を発見したを示すために文字列の先頭にします。 ただし、序数に基づく検索を正常に 1 つの文字列ではソフト ハイフンを検索してが存在しないことをレポート 2 番目の文字列から。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスから文字列の末尾までの範囲内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />から自身を拡張する<paramref name="startIndex" />の末尾に<paramref name="source" />以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、ソース文字列が検索`startIndex`と文字列の末尾で終了します。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値である場合は、合字の「Æ」(U + 00 C 6) と見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じ (u+0041、u+0045)、カルチャに依存します。 序数に基づく (カルチャに依存しない) 検索を実行する、場所、文字と見なされます別一文字に相当する Unicode 値が同じ場合にのみ、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。 オーバー ロードが<xref:System.String.IndexOf%2A?displayProperty=nameWithType>その文字の検索をカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>で同じでも、文字列の異なる部分検索を実行`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。 次の例で、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />を 2 つの文字列で"n"の後にソフト ハイフン (U +0 00AD) を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合はソフト ハイフンに無視できる文字であるために、メソッドは、"n"の位置にある一致を発見したを示すために 1 を返します。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>値</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定された部分文字列を検索し、指定されたを使用して、全体のソース文字列内で最初に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、見つかった内<paramref name="source" />、; 指定した比較オプションを使用してそれ以外の場合、-1。 0 (ゼロ) を返します<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列は、転送、文字列の先頭から開始し、文字列の末尾で終了が検索されます。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロード、序数に基づく (カルチャに依存しない) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />メソッドは 0 (ゼロ) の先頭に一致が見つかったことを示すために常に返します<paramref name="source" />です。 次の例で、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />を 2 つの文字列 (ソフト ハイフン (U +0 00AD)、"n"で後にソフト ハイフンおよびにソフト ハイフンの後に"m") の 3 つの部分文字列を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 ソフト ハイフンは無視できる文字であるため、カルチャに依存した検索は、検索文字列にソフト ハイフンが含まれていないかどうかには返されますものと同じ値を返します。 ただし、序数に基づく検索を正常に 1 つの文字列ではソフト ハイフンを検索してが存在しないことをレポート 2 番目の文字列から。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスから文字列の末尾までの範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />から自身を拡張する<paramref name="startIndex" />の末尾に<paramref name="source" />以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、ソース文字列が検索`startIndex`と文字列の末尾で終了します。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 Unicode 値が比較されます、序数に基づく (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>で同じでも、文字列の異なる部分検索を実行`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。  
  
 次の例で、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />で 2 つの文字列に"m"の後にソフト ハイフン (U +0 00AD) の位置を検索するメソッドを使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合はソフト ハイフンに無視できる文字であるために、メソッドは、文字列に"m"のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>値</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、使用して、指定した文字列の末尾に指定したインデックスから拡張するソース文字列の範囲内で最初に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />から自身を拡張する<paramref name="startIndex" />の末尾に<paramref name="source" />、; 指定した比較オプションを使用してそれ以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、ソース文字列が検索`startIndex`と文字列の末尾で終了します。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値である場合は、合字の「Æ」(U + 00 C 6) と見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じ (u+0041、u+0045)、カルチャに依存します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数に基づく (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、他の文字を同等と見なされます。 オーバー ロードが<xref:System.String.IndexOf%2A?displayProperty=nameWithType>その文字の検索をカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>で同じでも、文字列の異なる部分検索を実行`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 ここで、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />検索の最初の開始位置の文字の位置。 次の例で、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />を 2 つの文字列で"n"の後にソフト ハイフン (U +0 00AD) を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合はソフト ハイフンに無視できる文字であるために、カルチャに依存した検索は、"n"の位置にある一致を発見したを示すために 1 を返します。 ただし、序数に基づく検索を正常に 1 つの文字列ではソフト ハイフンを検索してが存在しないことをレポート 2 番目の文字列から。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />位置<paramref name="startIndex" />によって指定された要素数が含まれる<paramref name="count" />以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、ソース文字列が検索`startIndex`で終わる`startIndex`  +  `count` - 1。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値である場合は、合字の「Æ」(U + 00 C 6) と見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じ (u+0041、u+0045)、カルチャに依存します。 序数に基づく (カルチャに依存しない) 検索を実行する、場所、文字と見なされます別一文字に相当する Unicode 値が同じ場合にのみ、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。 オーバー ロードが<xref:System.String.IndexOf%2A?displayProperty=nameWithType>その文字の検索をカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 ここでは、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始最初の文字の位置。 次の例で、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />を 2 つの文字列で"n"の後にソフト ハイフン (U +0 00AD) を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合はソフト ハイフンに無視できる文字であるために、メソッドは、"n"の位置にある一致を発見したを示すために 1 を返します。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>値</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定された部分文字列を検索し、使用して、指定した文字列の末尾に指定したインデックスから拡張するソース文字列の範囲内で最初に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />から自身を拡張する<paramref name="startIndex" />の末尾に<paramref name="source" />、; 指定した比較オプションを使用してそれ以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、ソース文字列が検索`startIndex`と文字列の末尾で終了します。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロード、序数に基づく (カルチャに依存しない) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>で同じでも、文字列の異なる部分検索を実行`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。  
  
 次の例で、 <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> "m"2 つの文字列の 3 番目の文字位置から開始後にソフト ハイフン (U +0 00AD) の位置を検索するメソッドを使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />位置<paramref name="startIndex" />によって指定された要素数が含まれる<paramref name="count" />以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、ソース文字列が検索`startIndex`で終わる`startIndex`  +  `count` - 1。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 Unicode 値が比較されます、序数に基づく (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。  
  
 次の例で、 <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> "m"の 3 番目の 2 つの文字列の 6 番目の文字位置からの起動後にソフト ハイフン (U +0 00AD) の位置を検索するメソッドを使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>値</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、指定したインデックスから始まり、指定した数の要素を指定してを格納するソース文字列の範囲内で最初に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />位置<paramref name="startIndex" />によって指定された要素数が含まれる<paramref name="count" />、; 指定した比較オプションを使用してそれ以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、ソース文字列が検索`startIndex`で終わる`startIndex`  +  `count` - 1。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値である場合は、合字の「Æ」(U + 00 C 6) と見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じ (u+0041、u+0045)、カルチャに依存します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数に基づく (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、他の文字を同等と見なされます。 オーバー ロードが<xref:System.String.IndexOf%2A?displayProperty=nameWithType>その文字の検索をカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 ここでは、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始最初の文字の位置。 次の例で、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />を 2 つの文字列で"n"の後にソフト ハイフン (U +0 00AD) を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合はソフト ハイフンに無視できる文字であるために、カルチャに依存した検索は、"n"の位置にある一致を発見したを示すために 1 を返します。 ただし、序数に基づく検索を正常に 1 つの文字列ではソフト ハイフンを検索してが存在しないことをレポート 2 番目の文字列から。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>値</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定された部分文字列を検索し、指定したインデックスから始まり、指定した数の要素を指定してを格納するソース文字列の範囲内で最初に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />位置<paramref name="startIndex" />によって指定された要素数が含まれる<paramref name="count" />、; 指定した比較オプションを使用してそれ以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 転送を開始位置として、ソース文字列が検索`startIndex`で終わる`startIndex`  +  `count` - 1。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロード、序数に基づく (カルチャに依存しない) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。  
  
 次の例で、 <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> "m"の 3 番目の 2 つの文字列の 6 番目の文字位置からの起動後にソフト ハイフン (U +0 00AD) の位置を検索するメソッドを使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 序数に基づく比較を実行するときにただし、その部分文字列のみで検索最初の文字列します。 で、"m"の後にソフト ハイフンが含まれている最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すが失敗したが、代わりに、カルチャに依存した比較を実行するときに"m"のインデックスを返しますに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="prefix">先頭と比較する文字列<c>ソース</c>です。</param>
        <summary>指定した検索対象文字列が指定したプリフィックスで始まるかどうかを判断します。</summary>
        <returns>
          <see langword="true" />場合の長さ<paramref name="prefix" />がの長さ未満<paramref name="source" />と<paramref name="source" />で始まる<paramref name="prefix" />、それ以外の<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 空の部分文字列で終わりますしたすべての文字列 ("") です。したがって場合、 `prefix` 、空の文字列は、このメソッドが返される`true`です。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、文字列が、プレフィックスまたはサフィックスを別の文字列であるかどうかを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="prefix" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="prefix">先頭と比較する文字列<c>ソース</c>です。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>プレフィックス</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定したソース文字列が指定して、指定したプレフィックスで始まるかどうかを判断<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>
          <see langword="true" />場合の長さ<paramref name="prefix" />がの長さ未満<paramref name="source" />と<paramref name="source" />で始まる<paramref name="prefix" />、それ以外の<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 空の部分文字列で終わりますしたすべての文字列 ("") です。したがって場合、 `prefix` 、空の文字列は、このメソッドが返される`true`です。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、文字列が、プレフィックスまたはサフィックスを別の文字列を使用するかどうかを判断<xref:System.Globalization.CompareOptions>です。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="prefix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Unicode 文字。</param>
        <summary>指定した Unicode 文字の並べ替えが可能かどうかを示します。</summary>
        <returns>
          <see langword="true" />場合、<paramref name="ch" />パラメーターは、それ以外の並べ替え可能な<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ch`パラメーターの内部で定義されている Unicode 文字である場合は、並べ替えが<xref:System.Globalization.CompareInfo>クラスの並べ替えテーブル、およびプライベートの使用または対になっていない高いまたは低いサロゲート文字ではありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">0 個以上の Unicode 文字から構成される文字列。</param>
        <summary>指定した Unicode 文字列の並べ替えが可能かどうかを示します。</summary>
        <returns>
          <see langword="true" />場合、<paramref name="str" />パラメーターが空の文字列 ("") ですべての Unicode 文字<paramref name="str" />は並べ替え可能なです。それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の各 Unicode 文字、`str`パラメーターは 1 つまたは複数の utf-16 でエンコードされた<xref:System.Char>オブジェクト。 `str`パラメーターのそれぞれの Unicode 文字が内部で定義されている場合は、並べ替えが<xref:System.Globalization.CompareInfo>クラスの並べ替えテーブル、およびプライベートの使用または対になっていない高いまたは低いサロゲート文字ではありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="suffix">末尾と比較する文字列<c>ソース</c>です。</param>
        <summary>指定した検索対象文字列が指定したサフィックスで終わるかどうかを判断します。</summary>
        <returns>
          <see langword="true" />場合の長さ<paramref name="suffix" />がの長さ未満<paramref name="source" />と<paramref name="source" />で終わる<paramref name="suffix" />、それ以外の<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 空の部分文字列で終わりますしたすべての文字列 ("") です。したがって場合、 `suffix` 、空の文字列は、このメソッドが返される`true`です。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例は、文字列が、プレフィックスまたはサフィックスを別の文字列であるかどうかを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="suffix" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="suffix">末尾と比較する文字列<c>ソース</c>です。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>サフィックス</c>比較する必要があります。 <c>オプション</c>列挙値は、<see cref="F:System.Globalization.CompareOptions.Ordinal" />自体、または次の値の 1 つ以上のビットごとの組み合わせで使用される: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定したソース文字列が指定して、指定したサフィックスで終わるかどうかを判断<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>
          <see langword="true" />場合の長さ<paramref name="suffix" />がの長さ未満<paramref name="source" />と<paramref name="source" />で終わる<paramref name="suffix" />、それ以外の<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 空の部分文字列で終わりますしたすべての文字列 ("") です。したがって場合、 `suffix` 、空の文字列は、このメソッドが返される`true`です。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、文字列が、プレフィックスまたはサフィックスを別の文字列を使用するかどうかを判断<xref:System.Globalization.CompareOptions>です。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="suffix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <summary>指定した文字を検索し、検索対象文字列全体内でその文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、見つかった内<paramref name="source" />以外の場合、-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後方文字列の末尾から開始日と終了の文字列の先頭には、ソース文字列が検索されます。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値である場合は、合字の「Æ」(U + 00 C 6) と見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じ (u+0041、u+0045)、カルチャに依存します。 序数に基づく (カルチャに依存しない) 検索を実行する、場所、文字と見なされます別一文字に相当する Unicode 値が同じ場合にのみ、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。 オーバー ロードが<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>その文字の検索をカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 ここで、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />メソッドは常に最後のインデックス位置<paramref name="source" />の最後に、一致が見つかったことを示すために<paramref name="source" />です。 次の例で、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />メソッドはソフト ハイフン (U +0 00AD) を 2 つの文字列で検索に使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合はソフト ハイフンに無視できる文字であるために、メソッドは文字列の末尾で照合を発見したを示すために、文字列の最後のインデックス位置を返します。  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列全体内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、見つかった内<paramref name="source" />以外の場合、-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後方文字列の末尾から開始日と終了の文字列の先頭には、ソース文字列が検索されます。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 Unicode 値が比較されます、序数に基づく (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />メソッドは常に返します<paramref name="source" />です。<see cref="P:System.String.Length" /> – 最後のインデックス位置を表す 1、<paramref name="source" />です。 次の例で、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />を 2 つの文字列 (ソフト ハイフン (U +0 00AD)、"n"で後にソフト ハイフンおよびにソフト ハイフンの後に"m") の 3 つの部分文字列を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 各ケースではソフト ハイフンに無視できる文字であるため、結果は、場合と同じにソフト ハイフンが含まれていない必要がある<paramref name="value" />です。 ソフト ハイフンのみを検索するときに、このメソッドは、6 および 5 を返します。 これらの値は、2 つの文字列の最後の文字のインデックスに対応します。  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>値</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、指定されたを使用して、全体のソース文字列内で最後に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、見つかった内<paramref name="source" />、; 指定した比較オプションを使用してそれ以外の場合、-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後方文字列の末尾から開始日と終了の文字列の先頭には、ソース文字列が検索されます。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値である場合は、合字の「Æ」(U + 00 C 6) と見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じ (u+0041、u+0045)、カルチャに依存します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数に基づく (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、他の文字を同等と見なされます。 オーバー ロードが<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>その文字の検索をカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 ここで、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />メソッドは常に最後の文字位置<paramref name="source" />の最後に、一致が見つかったことを示すために<paramref name="source" />です。 次の例で、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />にソフト ハイフン (U +0 00AD) 2 つの文字列を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合はソフト ハイフンに無視できる文字であるために、カルチャに依存した検索は、ソース文字列内の最後のインデックス位置を返します。 これに対し、序数に基づく検索が正常にソフト ハイフンと内の検索 1 つの文字列が存在しないことをレポート 2 番目の文字列から。  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した文字を検索し、検索対象文字列の先頭から指定したインデックスまでの範囲内で、その文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />の先頭から自身を拡張する<paramref name="source" />に<paramref name="startIndex" />以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンとを開始位置として`startIndex`と文字列の先頭に終了します。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値である場合は、合字の「Æ」(U + 00 C 6) と見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じ (u+0041、u+0045)、カルチャに依存します。 序数に基づく (カルチャに依存しない) 検索を実行する、場所、文字と見なされます別一文字に相当する Unicode 値が同じ場合にのみ、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。 オーバー ロードが<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>その文字の検索をカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>で同じでも、文字列の異なる部分検索を実行`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。 次の例で、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />を 2 つの文字列で最後の"m"の前にソフト ハイフン (U +0 00AD) を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフト ハイフンに無視できる文字であるため、メソッドを返します、"m"、これは、値のインデックス位置の<paramref name="startIndex" />します。  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>値</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定された部分文字列を検索し、指定されたを使用して、全体のソース文字列内で最後に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、見つかった内<paramref name="source" />、; 指定した比較オプションを使用してそれ以外の場合、-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後方文字列の末尾から開始日と終了の文字列の先頭には、ソース文字列が検索されます。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロード、序数に基づく (カルチャに依存しない) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="source" />です。<see cref="P:System.String.Length" /> – 最後のインデックス位置を表す 1、<paramref name="source" />です。 次の例で、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />を 2 つの文字列 (ソフト ハイフン (U +0 00AD)、"n"で後にソフト ハイフンおよびにソフト ハイフンの後に"m") の 3 つの部分文字列を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 ソフト ハイフンは無視できる文字であるため、カルチャに依存した検索は、検索文字列にソフト ハイフンが含まれていないかどうかには返されますものと同じ値を返します。 ただし、序数に基づく検索を正常に 1 つの文字列ではソフト ハイフンを検索してが存在しないことをレポート 2 番目の文字列から。  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の先頭から指定したインデックスまでの範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />の先頭から自身を拡張する<paramref name="source" />に<paramref name="startIndex" />以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンとを開始位置として`startIndex`と文字列の先頭に終了します。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 Unicode 値が比較されます、序数に基づく (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>で同じでも、文字列の異なる部分検索を実行`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。 次の例で、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />メソッドはソフト ハイフン (U +0 00AD) が含まれているしよりも前または最後の"m"を文字列に含まれます部分文字列を検索に使用します。 ソフト ハイフンで構成される部分文字列を検索する呼び出しはソフト ハイフンと"m"で構成される部分文字列が文字列で、"m"の位置を返し、"n"を返しますを検索するメソッドを呼び出すと、検索文字列にソフト ハイフンが無視されるため、 "n"の位置。 メソッドが、"m"の値を表すのインデックスを返します、検索文字列には、ソフト ハイフンのみが含まれている、<paramref name="startIndex" />です。  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>値</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、文字列の先頭から指定して、指定されたインデックスを拡張するソース文字列の範囲内で最後に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />の先頭から自身を拡張する<paramref name="source" />に<paramref name="startIndex" />、; 指定した比較オプションを使用してそれ以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンとを開始位置として`startIndex`と文字列の先頭に終了します。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値である場合は、合字の「Æ」(U + 00 C 6) と見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じ (u+0041、u+0045)、カルチャに依存します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数に基づく (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、他の文字を同等と見なされます。 オーバー ロードが<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>その文字の検索をカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>で同じでも、文字列の異なる部分検索を実行`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。 次の例で、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />を 2 つの文字列で最後の"m"の前にソフト ハイフン (U +0 00AD) を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合はソフト ハイフンに無視できる文字であるために、カルチャに依存した検索は、"m"のインデックス位置を返します。 ただし、序数に基づく検索を正常に 1 つの文字列ではソフト ハイフンを検索してが存在しないことをレポート 2 番目の文字列から。  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />で指定された要素の数を格納している<paramref name="count" />で終わると<paramref name="startIndex" />以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンとを開始位置として`startIndex`で終わる`startIndex`  -  `count` + 1 です。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値である場合は、合字の「Æ」(U + 00 C 6) と見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じ (u+0041、u+0045)、カルチャに依存します。 序数に基づく (カルチャに依存しない) 検索を実行する、場所、文字と見なされます別一文字に相当する Unicode 値が同じ場合にのみ、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。 オーバー ロードが<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>その文字の検索をカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。 次の例で、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />を 2 つの文字列で最後の"m"の前にソフト ハイフン (U +0 00AD) を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合も、ソフト ハイフンに無視できる文字であるため、メソッドを返します、"m"、これは、値のインデックス位置の<paramref name="startIndex" />します。  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>値</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定された部分文字列を検索し、文字列の先頭から指定して、指定されたインデックスを拡張するソース文字列の範囲内で最後に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />の先頭から自身を拡張する<paramref name="source" />に<paramref name="startIndex" />、; 指定した比較オプションを使用してそれ以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンとを開始位置として`startIndex`と文字列の先頭に終了します。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロード、序数に基づく (カルチャに依存しない) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。 なお<xref:System.Globalization.CompareInfo.IndexOf%2A>と<xref:System.Globalization.CompareInfo.LastIndexOf%2A>で同じでも、文字列の異なる部分検索を実行`startIndex`パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。  
  
 次の例で、 <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> "m"、"m"で 2 つの文字列の最後の開始後にソフト ハイフン (U +0 00AD) の位置を検索するメソッドを使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />で指定された要素の数を格納している<paramref name="count" />で終わると<paramref name="startIndex" />以外の場合、-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンとを開始位置として`startIndex`で終わる`startIndex`  -  `count` + 1 です。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 Unicode 値が比較されます、序数に基づく (カルチャに依存しない) 検索を実行する、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります<xref:System.Globalization.CompareOptions>を使用して、<xref:System.Globalization.CompareOptions.Ordinal>値。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では、<paramref name="value" /> に無視できる文字が含まれている場合、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。  
  
 次の例で、 <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> 3 つ前の文字が 2 つの文字列の最後の"m"で"m"の後にソフト ハイフン (U +0 00AD) の位置を検索する方法を使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 "m" の後にソフト ハイフンが含まれる最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すことができず、代わりに "m" のインデックスを返すことに注意してください。  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字<c>ソース</c>です。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>値</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、要素と指定して、指定したインデックスで終わり、指定した数が含まれるソース文字列の範囲内で最後に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />で指定された要素の数を格納している<paramref name="count" />で終わると<paramref name="startIndex" />、; 指定した比較オプションを使用してそれ以外の場合-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンとを開始位置として`startIndex`で終わる`startIndex`  -  `count` + 1 です。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値である場合は、合字の「Æ」(U + 00 C 6) と見なすことが出現するすべてのコンポーネントが正しい順序で"AE"などのと同じ (u+0041、u+0045)、カルチャに依存します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、序数に基づく (カルチャに依存しない) 検索を実行します。 文字は Unicode 値が同じ場合にのみ、他の文字を同等と見なされます。 オーバー ロードが<xref:System.String.LastIndexOf%2A?displayProperty=nameWithType>その文字の検索をカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存した検索では場合、<paramref name="value" />に無視できる文字は、結果は検索その文字を削除したのと同じです。 この場合、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。 次の例で、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />を 2 つの文字列で最後の"m"の前にソフト ハイフン (U +0 00AD) を検索するメソッドを使用します。 文字列の 1 つのみにソフト ハイフンが含まれます。 どちらの場合もあるためソフト ハイフンは無視できる文字では、カルチャに依存した検索を返します、"m"、これは、値のインデックス位置の<paramref name="startIndex" />します。 ただし、序数に基づく検索を正常に 1 つの文字列ではソフト ハイフンを検索してが存在しないことをレポート 2 番目の文字列から。  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列<c>ソース</c>です。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options">値を定義する方法<c>ソース</c>と<c>値</c>比較する必要があります。 <c>オプション</c>列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />、または次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、および<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定された部分文字列を検索し、要素と指定して、指定したインデックスで終わり、指定した数が含まれるソース文字列の範囲内で最後に見つかった位置の 0 から始まるインデックスを返します<see cref="T:System.Globalization.CompareOptions" />値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス<paramref name="value" />場合は、範囲内で見つかった<paramref name="source" />で指定された要素の数を格納している<paramref name="count" />で終わると<paramref name="startIndex" />、; 指定した比較オプションを使用してそれ以外の場合-1。 返します<paramref name="startIndex" />場合<paramref name="value" />に無視できる文字は、します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソース文字列が検索された旧バージョンとを開始位置として`startIndex`で終わる`startIndex`  -  `count` + 1 です。  
  
 <xref:System.Globalization.CompareOptions?displayProperty=nameWithType>値がこのメソッドは無効です。  
  
 場合`options`を含まない、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 (U + 00 C 6) を表す Unicode 値と見なすことが正しい順序で"AE"などの文字のコンポーネントの検索 (u+0041、u+0045) のカルチャに応じて、します。 場合`options`が含まれています、<xref:System.Globalization.CompareOptions.Ordinal>値、このオーバー ロード、序数に基づく (カルチャに依存しない) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  文字列の型のパラメーターのある比較メソッドを呼び出す必要があります、可能であれば、<xref:System.Globalization.CompareOptions>予想比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較 (現在のカルチャを使用して) 言語のオプションを使用し、指定<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>または<xref:System.Globalization.CompareOptions?displayProperty=nameWithType>セキュリティ比較します。  
  
   
  
## Examples  
 次の例では、最初と最後に出現する文字または文字列の一部内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 -または-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> および <paramref name="count" /> は <paramref name="source" /> 内の有効なセクションを指定していません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" />無効なを含む<see cref="T:System.Globalization.CompareOptions" />値。</exception>
        <block subset="none" type="usage">
          <para>文字セットには、無視できる文字には、言語またはカルチャに依存した並べ替えを実行するときにないと見なされる文字が含まれます。 カルチャに依存する検索の場合 (つまり、<paramref name="options" /> が <see cref="F:System.Globalization.CompareOptions.Ordinal" /> または <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> でない場合)、<paramref name="value" /> に無視できる文字が含まれていると、その文字を削除して検索した場合と同じ結果になります。 場合<paramref name="value" />1 つまたは複数の無視できる文字のみで構成されて、<see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />メソッドは常に返します<paramref name="startIndex" />、これは、検索を開始する文字位置。  
  
 次の例で、 <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> 2 つの文字列内のすべてのページで、"m"を続けてにソフト ハイフン (U +0 00AD) の位置が、最終的な"m"の前に、最初の文字位置を検索するメソッドを使用します。 文字列の 1 つのみに必要な部分文字列が含まれます。 どちらの場合も、ソフト ハイフンは無視可能な文字であるため、メソッドは、カルチャに依存した比較を実行すると、文字列に含まれる "m" のインデックスを返します。 序数に基づく比較を実行するときにただし、その部分文字列のみで検索最初の文字列します。 で、"m"の後にソフト ハイフンが含まれている最初の文字列の場合、メソッドはソフト ハイフンのインデックスを返すが失敗したが、代わりに、カルチャに依存した比較を実行するときに"m"のインデックスを返しますに注意してください。 このメソッドは、序数に基づく比較を実行したときのみ、最初の文字列に含まれるソフト ハイフンのインデックスを返します。  
  
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の適切な形式のカルチャ識別子を取得<see cref="T:System.Globalization.CompareInfo" />です。</summary>
        <value>現在の適切な形式のカルチャ識別子<see cref="T:System.Globalization.CompareInfo" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例で、<xref:System.Globalization.CompareInfo.LCID%2A>プロパティです。  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これによって並べ替え操作用に使用されるカルチャの名前を取得<see cref="T:System.Globalization.CompareInfo" />オブジェクト。</summary>
        <value>カルチャの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CompareInfo.Name%2A>と<xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType>プロパティが異なる値を持つことができます。 たとえば、 <xref:System.Globalization.CompareInfo.LCID%2A> 0x10407 の 16 進数のプロパティの値をドイツ語の電話帳に表示される可能性がありますに名前を 代替の並べ替え順序カルチャを識別します。 <xref:System.Globalization.CompareInfo.Name%2A>一方、プロパティが"de-de_phoneb"の値を持つ、 <xref:System.Globalization.CultureInfo.Name?displayProperty=nameWithType> "DE-DE"の値を持つ、関連するドイツ語 (ドイツ) のカルチャのプロパティです。  
  
   
  
## Examples  
 次の例では、FR-FR、JA-JP カルチャを使用して 3 つの文字列を比較します。 <xref:System.Globalization.CultureInfo.Name%2A>プロパティの使用に各カルチャの名前を表示します。  
  
 [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">コールバックを開始したオブジェクト。</param>
        <summary>オブジェクト グラフ全体が逆シリアル化された時点で実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装の 使用できる場合にのみ、現在<xref:System.Globalization.CompareInfo>オブジェクトにキャスト、<xref:System.Runtime.Serialization.IDeserializationCallback>インターフェイスです。 詳細については、<xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A> メソッドを参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを表す文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、<xref:System.Object.ToString%2A?displayProperty=nameWithType>メソッドです。 クラス名とインスタンスの値で構成される文字列を返します<xref:System.Globalization.CompareInfo.Name%2A>をハイフンで区切ってプロパティです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>.NET Framework 4 から直接、<see cref="M:System.Globalization.CompareInfo.ToString" />メソッドがクラス名の後に、スペース、ハイフン、スペース、およびの値を返します、<see cref="P:System.Globalization.CompareInfo.Name" />プロパティです。 たとえば、 <see cref="T:System.Globalization.CompareInfo" /> EN-US カルチャを表すオブジェクト、 <see cref="M:System.Globalization.CompareInfo.ToString" /> "CompareInfo - EN-US"を返します。 .NET Framework の以前のバージョンで、クラス名の後に、スペース、ハイフン、スペース、およびの値を返します、<see cref="P:System.Globalization.CompareInfo.LCID" />プロパティです。 たとえば、 <see cref="T:System.Globalization.CompareInfo" /> EN-US カルチャを表すオブジェクト、 <see cref="M:System.Globalization.CompareInfo.ToString" /> "CompareInfo - 1033"を返します。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文字列の比較および並べ替えに使用される Unicode のバージョンに関する情報を取得します。</summary>
        <value>文字列を比較および並べ替えるために使用される Unicode のバージョンに関する情報を含むオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 個々 の文字の重みとそのための特定の文字列を比較または並べ替え、方法は、.NET Framework の特定のバージョンを実装する Unicode 仕様のバージョンによって異なります。 [!INCLUDE[net_v45](~/includes/net-v45-md.md)]、次の表に示すよう、ホスト オペレーティング システムにも依存します。 サポートされている Unicode バージョンの一覧は、文字の比較と並べ替えに対してのみ適用されます。カテゴリ別での Unicode 文字の分類には適用されません。  
  
|.NET Framework のバージョン|オペレーティング システム|Unicode バージョン|  
|----------------------------|----------------------|---------------------|  
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|すべてのオペレーティング システム|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以降のバージョン|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以降のバージョン|[!INCLUDE[win8](~/includes/win8-md.md)]以降の Windows オペレーティング システム バージョン|Unicode 6.3|  
  
 <xref:System.Globalization.SortVersion>によって返されるオブジェクト、<xref:System.Globalization.CompareInfo.Version%2A>プロパティが文字列の比較に使用される正確な Unicode バージョンを識別します。 2 つを比較するときにのみ便利です<xref:System.Globalization.SortVersion>同じ Unicode バージョン、カルチャを使用する文字列を比較するかどうかを決定するオブジェクト。 例および詳細については、次を参照してください。、<xref:System.Globalization.SortVersion>リファレンス ページ。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
