<Type Name="HtmlInputFile" FullName="System.Web.UI.HtmlControls.HtmlInputFile">
  <TypeSignature Language="C#" Value="public class HtmlInputFile : System.Web.UI.HtmlControls.HtmlInputControl, System.Web.UI.IPostBackDataHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HtmlInputFile extends System.Web.UI.HtmlControls.HtmlInputControl implements class System.Web.UI.IPostBackDataHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.HtmlControls.HtmlInputFile" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.HtmlControls.HtmlInputControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Web.UI.ValidationProperty("Value")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>サーバーの HTML <see langword="&lt;input type= file&gt;" /> 要素へのプログラムによるアクセスを可能にします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.HtmlControls.HtmlInputFile>バイナリまたはテキスト ファイルのアップロード、ブラウザー クライアントからサーバーを処理するサーバー コントロールです。 ファイルのアップロードは、Microsoft Internet Explorer 3.02 またはそれ以降のバージョンで動作します。  
  
> [!NOTE]
>  <xref:System.Web.UI.HtmlControls.HtmlInputFile>コントロールが部分ページ レンダリング中に、非同期ポストバックのシナリオではなくポストバックのシナリオでのみ使用するように設計されています。 使用する場合、<xref:System.Web.UI.HtmlControls.HtmlInputFile>内の制御、<xref:System.Web.UI.UpdatePanel>コントロールにあるコントロールを使用して、ファイルをアップロードする必要があります、<xref:System.Web.UI.PostBackTrigger>パネルのオブジェクト。 <xref:System.Web.UI.UpdatePanel>コントロールはポストバック時にページ全体が更新ではなく、ページの選択した領域の更新に使用されます。 詳細については、次を参照してください。 [UpdatePanel コントロールの概要](http://msdn.microsoft.com/library/29a2265d-9674-4c19-b70e-e5560ee9689a)と[部分ページ レンダリング概要](http://msdn.microsoft.com/library/5c12736d-d9e9-464a-9388-3fe0f9f49e49)です。  
  
 アップロードするファイルを指定するには、コントロールのテキスト ボックスにファイル (たとえば、"C:\MyFiles\Test.txt") に完全なパスを入力します。 クリックして、ファイルを選択することも、**参照**ボタンとでの検索をする、**ファイルの選択** ダイアログ ボックス。  
  
> [!NOTE]
>  <xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A>のプロパティ、 <xref:System.Web.UI.HtmlControls.HtmlForm> "マルチパート/フォーム-data"に正常に動作するには、このコントロールのコントロールを設定する必要があります。  
  
 <xref:System.Web.UI.HtmlControls.HtmlInputFile>コントロールには、サーバーへのポストバックに組み込みの方法はありません。 サーバーにファイルをアップロードするには、使用、<xref:System.Web.HttpPostedFile.SaveAs%2A>のメソッド、<xref:System.Web.HttpPostedFile?displayProperty=nameWithType>に含まれているオブジェクト、<xref:System.Web.UI.HtmlControls.HtmlInputFile.PostedFile%2A>プロパティです。 イベント処理メソッドでこの操作を実行して通常、ボタンなどをクリックします。  
  
> [!NOTE]
>  使用すると、<xref:System.Web.HttpPostedFile.SaveAs%2A>のメソッド、<xref:System.Web.HttpPostedFile>クラス、ルート化されたパス (たとえば、"C:\MyFiles\Test.txt") を指定することを確認します。 動作、<xref:System.Web.HttpPostedFile.SaveAs%2A>でメソッドを指定することができます、 [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369)構成セクションで、`requireRootedSaveAsPath`属性。 この属性の既定値は `true` です。 この属性を設定する場合`false`を使用して、<xref:System.Web.HttpPostedFile.SaveAs%2A>でファイルを配置しようとしてが指定されたパスを含まないメソッド、 `systemroot` \system32\inetsrv ディレクトリ。 既定では、このディレクトリは書き込み禁止です。そのため、ファイルは保存できませんがあります。 ASP.NET で使用されるディレクトリのファイルを格納するアカウントに対する書き込みアクセス許可を提供することを確認してください。  
  
 大きなファイルをアップロードする際に使用して、`maxRequestLength`の属性、 [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369)最大許容ファイル サイズを大きく要素。 ファイルが指定したサイズを超える場合、ブラウザーで、DNS エラーが生成されます。 サイズの大きなファイルをアップロードするときにも、次のエラー メッセージを受け取る可能性があります。  
  
 aspnet_wp.exe (PID: 1520) のメモリ消費量が 460 MB (使用可能なメモリの 60%) を超えたため繰り返されました。  
  
 このエラー メッセージが発生した場合の値を大きく、`memoryLimit`属性、 [processModel 要素 (ASP.NET 設定スキーマ)](http://msdn.microsoft.com/en-us/4b8fe20e-74c8-4566-b72c-ce5f83c8e32d) Machine.config ファイルの要素。  
  
 インスタンスの初期プロパティ値の一覧については<xref:System.Web.UI.HtmlControls.HtmlInputFile>を参照してください、<xref:System.Web.UI.HtmlControls.HtmlInputFile.%23ctor%2A>コンス トラクターです。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.HtmlControls.HtmlInputFile>単純なファイル アップロードのシナリオを作成するコントロール。 この例を正しく動作するというディレクトリを作成する必要があります。`Temp`コンピューターのドライブ c です。  
  
 [!code-aspx-csharp[Classic HtmlInputFile Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HtmlInputFile Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HtmlInputFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HtmlInputFile Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HtmlInputFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlInputFile.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.HtmlControls.HtmlInputFile" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを使用して作成しの新しいインスタンスを初期化、<xref:System.Web.UI.HtmlControls.HtmlInputFile>クラスです。  
  
 次の表は、のインスタンスの初期プロパティ値を示しています。<xref:System.Web.UI.HtmlControls.HtmlInputFile>です。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Web.UI.HtmlControls.HtmlInputControl.Type%2A>|"File"のリテラル文字列です。|  
  
   
  
## Examples  
 次のコード例は、<xref:System.Web.UI.HtmlControls.HtmlInputFile> クラスの新しいインスタンスを作成する方法を示しています。 この例を正しく動作するというディレクトリを作成する必要があります。`Temp`コンピューターのドライブ c です。  
  
 [!code-aspx-csharp[HtmlInputFileCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlInputFileCtor/CS/htmlinputfilectorcs.aspx#1)]
 [!code-aspx-vb[HtmlInputFileCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlInputFileCtor/VB/htmlinputfilectorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public string Accept { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Accept" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlInputFile.Accept" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはユーザーが選択できるファイルの種類を制限するために使用する MIME エンコードのコンマ区切りの一覧を設定します。</summary>
        <value>MIME エンコードのコンマ区切り一覧。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、サーバーにアップロードできるファイルの種類を指定できます。 たとえば、イメージの選択を制限するには、このプロパティを設定"イメージ/*"です。  
  
> [!NOTE]
>  このプロパティのサポートは、ブラウザーによって異なります。 ブラウザーに、このプロパティをサポートしているかどうかを確認してください。 サーバー側のコードを使用して、ファイルが、予期された型であることを確認することをお勧めします。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.HtmlControls.HtmlInputFile.Accept%2A>イメージ ファイル以外のファイルを選択してから、ユーザーを制限するプロパティです。 この例を正しく動作するというディレクトリを作成する必要があります。`Temp`コンピューターのドライブ c です。のサポート、<xref:System.Web.UI.HtmlControls.HtmlInputFile.Accept%2A>プロパティは、ブラウザーに依存するため、イメージのみをアップロードすることを確認するサーバー側のチェックが実行されます。 としてアップロードされたファイルを読み取ることができませんが、例外がスローされますが、<xref:System.Drawing.Image>型です。  
  
 [!code-aspx-csharp[Classic HtmlInputFile.Accept Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HtmlInputFile.Accept Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HtmlInputFile.Accept Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HtmlInputFile.Accept Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlInputFile.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">コントロールのキー識別子。</param>
        <param name="postCollection">すべての着信名前値のコレクション。</param>
        <summary><see cref="T:System.Web.UI.HtmlControls.HtmlInputFile" /> コントロールのポストバック データを処理します。</summary>
        <returns>このメソッドは常に <see langword="false" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlControls.HtmlInputFile>制御を実装して、<xref:System.Web.UI.IPostBackDataHandler>インターフェイスで、次の 2 つの方法があります:<xref:System.Web.UI.IPostBackDataHandler.LoadPostData%2A?displayProperty=nameWithType>と<xref:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent%2A?displayProperty=nameWithType>です。 <xref:System.Web.UI.HtmlControls.HtmlInputFile.LoadPostData%2A>メソッドによって呼び出されます、<xref:System.Web.UI.HtmlControls.HtmlInputFile.System%23Web%23UI%23IPostBackDataHandler%23RaisePostDataChangedEvent%2A>メソッドを常に返す`false`ことを示すこと、<xref:System.Web.UI.HtmlControls.HtmlInputFile>コントロールの状態は、ASP.NET ページ フレームワークによって管理されていません。  
  
 <xref:System.Web.UI.HtmlControls.HtmlInputFile.LoadPostData%2A>メソッドが、主の機能を拡張するコントロールの開発者によって使用される、<xref:System.Web.UI.HtmlControls.HtmlInputFile>コントロール。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlInputFile.MaxLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはクライアント コンピューターからアップロードするファイルのファイル パスの最大長を設定します。</summary>
        <value>ファイルのパスの最大長。 既定値は-1 をプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、アップロードするファイルのパスを入力できる文字数の制限を指定します。  
  
> [!NOTE]
>  このプロパティのサポートは、ブラウザーによって異なります。 ブラウザーに、このプロパティをサポートしているかどうかを確認してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlInputFile.OnPreRender(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="T:System.Web.UI.HtmlControls.HtmlInputFile" /> コントロールの <see cref="E:System.Web.UI.Control.PreRender" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 エンコードを指定しないかどうか、Web ページの<xref:System.Web.UI.HtmlControls.HtmlForm>コントロール、<xref:System.Web.UI.HtmlControls.HtmlForm.Enctype%2A>プロパティが「マルチパート フォーム データ」に設定します。  
  
   
  
## Examples  
 次のコード例をオーバーライドする方法を示しています、<xref:System.Web.UI.HtmlControls.HtmlInputFile.OnPreRender%2A>メソッドできるように、`Title`属性は常に各ユーザーに追加<xref:System.Web.UI.HtmlControls.HtmlInputFile>コントロール。 この例を正しく動作するというディレクトリを作成する必要があります。`Temp`コンピューターのドライブ c です。  
  
 [!code-aspx-csharp[CustomHtmlInputFileOnPreRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomHtmlInputFileOnPreRender/CS/custom_htmlinputfile_onprerendercs.aspx#1)]
 [!code-aspx-vb[CustomHtmlInputFileOnPreRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomHtmlInputFileOnPreRender/VB/custom_htmlinputfile_onprerendervb.aspx#1)]  
  
 [!code-csharp[CustomHtmlInputFileOnPreRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomHtmlInputFileOnPreRender/CS/custom_htmlinputfile_onprerender.cs#2)]
 [!code-vb[CustomHtmlInputFileOnPreRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomHtmlInputFileOnPreRender/VB/custom_htmlinputfile_onprerender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostedFile">
      <MemberSignature Language="C#" Value="public System.Web.HttpPostedFile PostedFile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpPostedFile PostedFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlInputFile.PostedFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpPostedFile</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントによって指定されたアップロードされたファイルへのアクセスを取得します。</summary>
        <value>A<see cref="T:System.Web.HttpPostedFile" />アップロードするファイルにアクセスします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ブラウザーのセキュリティ制限により、この値は、複数の要求まで保持されています。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.HtmlControls.HtmlInputFile.PostedFile%2A>プロパティをサーバーにファイルを転送するユーティリティを開始します。 バイト単位でアップロードされたファイルのサイズの値を超える場合、<xref:System.Web.HttpPostedFile.ContentLength%2A>プロパティ、ファイルがアップロードされていません。 この例を正しく動作するというディレクトリを作成する必要があります。`Temp`コンピューターのドライブ c です。  
  
 [!code-aspx-csharp[Classic HtmlInputFile.PostedFile Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HtmlInputFile.PostedFile Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HtmlInputFile.PostedFile Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HtmlInputFile.PostedFile Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlInputFile.RaisePostDataChangedEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.HtmlControls.HtmlInputFile" /> コントロールの状態が変化したことをコントロールに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlControls.HtmlInputFile>制御を実装して、<xref:System.Web.UI.IPostBackDataHandler>インターフェイスで、次の 2 つの方法があります:<xref:System.Web.UI.IPostBackDataHandler.LoadPostData%2A?displayProperty=nameWithType>と<xref:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent%2A?displayProperty=nameWithType>です。 <xref:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent%2A?displayProperty=nameWithType>メソッドがの処理に関与しません、<xref:System.Web.UI.HtmlControls.HtmlInputFile>コントロールに含まれ、インターフェイスの実装を完了します。  
  
 <xref:System.Web.UI.HtmlControls.HtmlInputFile.RaisePostDataChangedEvent%2A>の機能を拡張するメソッドが、主にコントロールの開発者によって使用される、<xref:System.Web.UI.HtmlControls.HtmlInputFile>コントロール。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlInputFile.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはファイル パスが入力されるテキスト ボックスの幅を設定します。</summary>
        <value>ファイル パス ボックスの幅。 既定値は-1 をプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、ファイルのパスを入力するためのテキスト ボックスの幅を指定します。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.HtmlControls.HtmlInputFile.Size%2A>プロパティをユーザーがファイルのパスを入力したテキスト ボックスの幅を指定します。 この例を正しく動作するというディレクトリを作成する必要があります。`Temp`コンピューターのドライブ c です。  
  
 [!code-aspx-csharp[Classic HtmlInputFile.Size Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HtmlInputFile.Size Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic HtmlInputFile.Size Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HtmlInputFile.Size Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlInputFile.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">コントロールのキー識別子。</param>
        <param name="postCollection">すべての着信名前値のコレクション。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IPostBackDataHandler.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />」をご覧ください。</summary>
        <returns>
          ポストバックの結果、<see cref="T:System.Web.UI.HtmlControls.HtmlInputFile" /> コントロールの状態が変化した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.HtmlControls.HtmlInputFile> のインスタンスが <xref:System.Web.UI.IPostBackDataHandler> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.HtmlControls.HtmlInputFile.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent" />」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.HtmlControls.HtmlInputFile> のインスタンスが <xref:System.Web.UI.IPostBackDataHandler> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.HtmlControls.HtmlInputFile.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クライアントのコンピューター上のファイルの完全なパスを取得します。</summary>
        <value>クライアントのファイルの完全パス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.HtmlControls.HtmlInputFile.Value%2A>プロパティは、クライアントのコンピューター (たとえば"C:\MyFiles\Test.txt") 上のファイルの完全なパスを取得します。 これは、ファイルを送信しているコンピューター上のファイルの格納場所を知る必要がある場合に便利です。 元のファイル名を指定するのには、このプロパティは使用はまた、一般。 元のファイル名を取得するには、このプロパティの値を解析します。  
  
> [!NOTE]
>  <xref:System.Web.UI.HtmlControls.HtmlInputFile.Value%2A>プロパティは読み取り専用です。 このプロパティに値を代入しようとする場合、<xref:System.NotSupportedException?displayProperty=nameWithType>がスローされます。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.HtmlControls.HtmlInputFile.Value%2A>クライアントのコンピューター上のファイルの完全なパスを表示するプロパティです。 この例を正しく動作するというディレクトリを作成する必要があります。`Temp`コンピューターのドライブ c です。  
  
 [!code-aspx-csharp[HtmlInputFileValue#1](~/samples/snippets/csharp/VS_Snippets_WebNet/HtmlInputFileValue/CS/htmlinputfilevaluecs.aspx#1)]
 [!code-aspx-vb[HtmlInputFileValue#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HtmlInputFileValue/VB/htmlinputfilevaluevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このプロパティに値を代入しようとしました。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
