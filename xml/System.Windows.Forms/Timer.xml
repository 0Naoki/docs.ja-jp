<Type Name="Timer" FullName="System.Windows.Forms.Timer">
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Timer" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Tick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ユーザー定義の間隔でイベントを発生させるタイマーを実装します。 このタイマーは、Windows フォーム アプリケーションで使用できるように最適化されていて、ウィンドウで使用する必要があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.Timer>ユーザー定義の間隔でイベントを発生させるために使用します。 この Windows タイマーは、処理を実行する UI スレッドが使用されているシングル スレッドの環境に適しています。 これには、ユーザー コードが使用可能な UI メッセージ ポンプと常に、同じスレッドから動作かいるを別のスレッドの呼び出しをマーシャ リングが必要です。  
  
 このタイマーを使用してを使用して、<xref:System.Windows.Forms.Timer.Tick>ポーリング操作を実行する場合、または一定の時間のスプラッシュ画面を表示するイベントです。 たびに、<xref:System.Windows.Forms.Timer.Enabled%2A>プロパティに設定されている`true`と<xref:System.Windows.Forms.Timer.Interval%2A>プロパティは、ゼロより大きく、<xref:System.Windows.Forms.Timer.Tick>に基づいた間隔でイベントが発生、<xref:System.Windows.Forms.Timer.Interval%2A>プロパティの設定。  
  
 このクラスは、間隔を設定および開始し、タイマーを停止するメソッドを提供します。  
  
> [!NOTE]
>  Windows フォームの Timer コンポーネントはシングル スレッドおよび 55 ミリ秒の精度に制限されます。 精度の向上でマルチ スレッド タイマーを必要とする場合を使用して、<xref:System.Timers.Timer>クラス内で、<xref:System.Timers>名前空間。  
  
   
  
## Examples  
 次の例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox>アラームが開始されを実行するタイマーを続行するかどうかについてユーザー要求の回数のカウントを表示します。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.Timer" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しいタイマーの作成時に無効です。つまり、<xref:System.Windows.Forms.Timer.Enabled%2A>に設定されている`false`です。 タイマーを有効にするを呼び出して、<xref:System.Windows.Forms.Timer.Start%2A>メソッドまたはセット<xref:System.Windows.Forms.Timer.Enabled%2A>に`true`です。  
  
 場合は、タイマーが無効になり、タイマーがスコープ外には、ガベージ コレクションが発生すると、タイマーが破棄されます。 タイマーが有効な場合、スコープ外である場合でも、これはガベージ コレクションの対象とします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container"><see cref="T:System.ComponentModel.IContainer" />タイマーのコンテナーを表すです。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Windows.Forms.Timer" />と共に、指定されたコンテナー クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer>コンス トラクターは、関連付けることができます、<xref:System.Windows.Forms.Timer>いずれかを持つ<xref:System.ComponentModel.Container>オブジェクト。 関連付けることにより、<xref:System.Windows.Forms.Timer>の有効期間の制御を渡す、次のように、<xref:System.Windows.Forms.Timer>を<xref:System.ComponentModel.Container>です。 これはする、アプリケーションでは多くのコンポーネントを使用していて、それらのすべてを同時に破棄する場合に役立ちます。 関連付ける場合など、 <xref:System.Windows.Forms.ToolTip>、 <xref:System.Windows.Forms.ImageList>、および<xref:System.Windows.Forms.Timer>で、 <xref:System.ComponentModel.Container>、呼び出し元<xref:System.ComponentModel.Container.Dispose%2A>上、<xref:System.ComponentModel.Container>もこれらのコンポーネントのすべての処理が強制されます。  
  
 新しいタイマーの作成時に無効です。つまり、<xref:System.Windows.Forms.Timer.Enabled%2A>に設定されている`false`です。 タイマーを有効にするを呼び出して、<xref:System.Windows.Forms.Timer.Start%2A>メソッドまたはセット<xref:System.Windows.Forms.Timer.Enabled%2A>に`true`です。  
  
 このインスタンスは、そのコンテナーがガベージ コレクションを解放するまでは存在します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" />マネージ コードとアンマネージ リソースを解放します。 <see langword="false" />アンマネージ リソースだけを解放します。</param>
        <summary>タイマーによって使用されていたリソース (メモリを除く) を破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す<xref:System.Windows.Forms.Timer.Dispose%2A>タイマーの使用が終了したときにします。 <xref:System.Windows.Forms.Timer.Dispose%2A>メソッドを使用できない状態で、タイマーのままにします。 呼び出した後<xref:System.Windows.Forms.Timer.Dispose%2A>が使用していたメモリをガベージ コレクションによって再要求できるように、このタイマーへのすべての参照を解放する必要があります。  
  
> [!NOTE]
>  常に呼び出す<xref:System.Windows.Forms.Timer.Dispose%2A>このタイマーへの最後の参照を解放する前にします。 それ以外の場合、ガベージ コレクションが、タイマー オブジェクトのデストラクターを呼び出すまで、タイマーが使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイマーが実行されているかどうかを取得または設定します。</summary>
        <value>
          <see langword="true" />タイマーが現在有効である場合それ以外の場合、<see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 タイマーがガベージ コレクションの対象と値が`true`です。  
  
 呼び出す、<xref:System.Windows.Forms.Timer.Start%2A>メソッドは、設定と同じ<xref:System.Windows.Forms.Timer.Enabled%2A>に`true`です。 同様に、呼び出し、<xref:System.Windows.Forms.Timer.Stop%2A>メソッドは、設定と同じ<xref:System.Windows.Forms.Timer.Enabled%2A>に`false`です。  
  
   
  
## Examples  
 次の例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox>アラームが開始され、タイマー実行を継続するかどうかを求める回数のカウントを表示します。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public int Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の時間 (ミリ秒単位) 前に、<see cref="E:System.Windows.Forms.Timer.Tick" />イベントは、最後に見つかった位置の基準とした、<see cref="E:System.Windows.Forms.Timer.Tick" />イベント。</summary>
        <value><see cref="T:System.Int32" />までのミリ秒数を指定する、<see cref="E:System.Windows.Forms.Timer.Tick" />イベントは、最後に見つかった位置の基準とした、<see cref="E:System.Windows.Forms.Timer.Tick" />イベント。 値は 1 未満には設定できません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 間隔の秒数を取得するには、1,000 でこの数値を除算します。  
  
   
  
## Examples  
 次のコード例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox>アラームが開始され、タイマー実行を継続するかどうかを求める回数のカウントを表示します。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTick">
      <MemberSignature Language="C#" Value="protected virtual void OnTick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。 これは常に<see cref="F:System.EventArgs.Empty" />です。</param>
        <summary><see cref="E:System.Windows.Forms.Timer.Tick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、タイマー刻みごとに呼び出されます。 によって追加されたすべてのメソッドを呼び出して<xref:System.Windows.Forms.Timer.Tick>です。 継承している場合<xref:System.Windows.Forms.Timer>、このメソッドをオーバーライドすることができます。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />派生クラスで、基本クラスを呼び出すことを確認します<see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />メソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>タイマーを起動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定して、タイマーを開始することもできます、<xref:System.Windows.Forms.Timer.Enabled%2A>プロパティを`true`です。  
  
   
  
## Examples  
 次のコード例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox>アラームが開始され、タイマー実行を継続するかどうかを求める回数のカウントを表示します。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>タイマーを停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定して、タイマーを停止することも、<xref:System.Windows.Forms.Timer.Enabled%2A>プロパティを`false`です。 A<xref:System.Windows.Forms.Timer>オブジェクトを有効になっているし、同じアプリケーションのセッション内で複数回無効になっている可能性があります。  
  
 呼び出す<xref:System.Windows.Forms.Timer.Start%2A>を無効にした後、<xref:System.Windows.Forms.Timer>を呼び出して<xref:System.Windows.Forms.Timer.Stop%2A>により、<xref:System.Windows.Forms.Timer>中断の間隔を再起動します。 場合、 <xref:System.Windows.Forms.Timer> 5000 ミリ秒に設定されているを呼び出す<xref:System.Windows.Forms.Timer.Stop%2A>約 3000 (ミリ秒単位) の呼び出しで<xref:System.Windows.Forms.Timer.Start%2A>により、 <xref:System.Windows.Forms.Timer> 5000 ミリ秒を発生させる前に待機する、<xref:System.Windows.Forms.Timer.Tick>イベント。  
  
> [!NOTE]
>  いずれかで Stop を呼び出す<xref:System.Windows.Forms.Timer>Windows フォーム内でアプリケーションを与えるメッセージを他の<xref:System.Windows.Forms.Timer>ので、すぐに処理するアプリケーションのコンポーネントすべて<xref:System.Windows.Forms.Timer>コンポーネントがメイン アプリケーション スレッドで動作します。 2 つある<xref:System.Windows.Forms.Timer>コンポーネント、700 ミリ秒、500 (ミリ秒単位) を 1 つのセットを 1 つ設定および呼び出す<xref:System.Windows.Forms.Timer.Stop%2A>を最初に<xref:System.Windows.Forms.Timer>アプリケーションが最初の 2 番目のコンポーネントのイベント コールバックを受信する可能性があります。 問題があることを証明している場合は、使用を検討して、<xref:System.Threading.Timer>クラス内で、<xref:System.Threading>名前空間代わりにします。  
  
   
  
## Examples  
 次のコード例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox>アラームが開始され、タイマー実行を継続するかどうかを求める回数のカウントを表示します。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>なんらかの種類のユーザー状態を表す任意の文字列を取得または設定します。</summary>
        <value>なんらかの種類のユーザー状態を表す任意の文字列。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Timer.Tick" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定したタイマーの間隔が経過し、タイマーが有効である場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す、<xref:System.Diagnostics.Debug.Assert%2A>メソッドを<xref:System.Diagnostics.Debug>内からのクラス、<xref:System.Windows.Forms.Timer.Tick>イベントが想定どおりに動作しない可能性があります、アサーションのダイアログを表示するボックスさせる Windows が発生する可能性があります、<xref:System.Windows.Forms.Timer.Tick>イベント繰り返しです。 このイベントの中でアサーションをテストしないようにして、使用することをお勧め、 <xref:System.Diagnostics.Debug.Write%2A>、 <xref:System.Diagnostics.Debug.WriteIf%2A>、 <xref:System.Diagnostics.Debug.WriteLine%2A>、または<xref:System.Diagnostics.Debug.WriteLineIf%2A>メソッド代わりにします。  
  
 イベント処理の詳細については、次を参照してください。[処理とイベントの発生](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)です。  
  
   
  
## Examples  
 次のコード例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。 アラームが発生すると、<xref:System.Windows.Forms.MessageBox>アラームが開始され、タイマー実行を継続するかどうかを求める回数のカウントを表示します。  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>表す文字列を返します、<see cref="T:System.Windows.Forms.Timer" />です。</summary>
        <returns>現在の <see cref="T:System.Windows.Forms.Timer" /> を表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer.ToString%2A>メソッドの値を含む文字列を返します、<xref:System.Windows.Forms.Timer.Interval%2A>プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
