<Type Name="TransactionScope" FullName="System.Transactions.TransactionScope">
  <TypeSignature Language="C#" Value="public sealed class TransactionScope : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TransactionScope extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.TransactionScope" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>コード ブロックがトランザクションになります。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Transactions>インフラストラクチャでは明示的なプログラミング モデルに基づく、<xref:System.Transactions.Transaction>クラスだけでなく、暗黙的なプログラミング モデルを使用して、<xref:System.Transactions.TransactionScope>トランザクションを自動的にインフラストラクチャを管理するクラス。  
  
> [!IMPORTANT]
>  使用して暗黙のトランザクションを作成することをお勧め、<xref:System.Transactions.TransactionScope>クラスのアンビエント トランザクションのコンテキストが自動的に管理できるようにします。 使用する必要も、<xref:System.Transactions.TransactionScope>と<xref:System.Transactions.DependentTransaction>複数の関数呼び出しまたは複数のスレッド呼び出しの間で同じトランザクションの使用を必要とするアプリケーションのクラスです。 このモデルの詳細については、次を参照してください。、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)トピックです。 トランザクション アプリケーションの作成の詳細については、次を参照してください。 [A トランザクション アプリケーションの記述](~/docs/framework/data/transactions/writing-a-transactional-application.md)です。  
  
 インスタンス化時に、<xref:System.Transactions.TransactionScope>によって、`new`ステートメントでは、トランザクション マネージャーは、どのトランザクションに参加するを決定します。 いったん決定されると、このスコープは常にそのトランザクションに参加します。 この決定は 2 つの要因に基づいて行われます。1 つはアンビエント トランザクションが存在するかどうか、もう 1 つはコンストラクターの `TransactionScopeOption` パラメーターの値です。  アンビエント トランザクションで、コードが実行されるトランザクションです。 <xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType> クラスの静的 <xref:System.Transactions.Transaction> プロパティを呼び出すことによってアンビエント トランザクションへの参照を取得できます。 このパラメーターの使用方法の詳細については、の「トランザクション フローの管理」セクションを参照して、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)トピックです。  
  
 トランザクション スコープ内で例外が発生しない場合 (つまりの初期化の間、<xref:System.Transactions.TransactionScope>オブジェクトと、呼び出し元の<xref:System.Transactions.TransactionScope.Dispose%2A>メソッド)、スコープが参加しているトランザクションの実行を許可し、します。 トランザクション スコープ内で例外が発生、参加しているトランザクションはロールバックされます。  
  
 アプリケーションには、すべての作業が完了すると、トランザクションで実行する、呼び出す必要があります、<xref:System.Transactions.TransactionScope.Complete%2A>トランザクション マネージャーがトランザクションをコミットする許容であることを通知するために、メソッドを 1 回だけです。 このメソッドの呼び出しに失敗すると、トランザクションが中止されます。  
  
 呼び出し、<xref:System.Transactions.TransactionScope.Dispose%2A>メソッドは、トランザクション スコープの終了を示します。 このメソッドの呼び出し後に発生した例外は、トランザクションに影響しない場合があります。  
  
 値を変更する場合<xref:System.Transactions.Transaction.Current%2A>、スコープ内で、例外がスロー<xref:System.Transactions.TransactionScope.Dispose%2A>と呼びます。 ただし、スコープの最後に、前の値に戻されます。 さらに、呼び出した場合<xref:System.Transactions.TransactionScope.Dispose%2A>で<xref:System.Transactions.Transaction.Current%2A>スコープの最後に、トランザクションを作成したトランザクション スコープ内部トランザクションが中止されました。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Transactions.TransactionScope>をトランザクションに参加するためのコードのブロックを定義するクラス。  
  
 [!code-csharp[TransactionScope#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TransactionScope/cs/ScopeWithSQL.cs#1)]
 [!code-vb[TransactionScope#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TransactionScope/vb/ScopeWithSQL.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターを作成新しいトランザクション スコープのトランザクション スコープのオプションと等しい<xref:System.Transactions.TransactionScopeOption.Required>です。 つまり、新しいスコープでトランザクションが必要な 1 つが既に存在する場合、そのアンビエント トランザクションが使用します。 それ以外の場合、スコープに入る前に新しいトランザクションを作成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transactionToUse" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">To be added.</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />クラスし、スコープ内で実行されたトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクション、として指定されたトランザクションを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeAsyncFlowOption asyncFlow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="asyncFlow">To be added.</param>
        <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />クラス、非同期フローを指定したオプションを使用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption option);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
      </Parameters>
      <Docs>
        <param name="option">To be added.</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />指定した要件を持つクラス。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.Transaction transaction, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Transactions.Transaction transaction, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transactionToUse" Type="System.Transactions.Transaction" />
        <Parameter Name="scopeTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="transaction">To be added.</param>
        <param name="timeout">To be added.</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />指定したタイムアウト値を持つクラスし、スコープ内で実行されたトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクション、として指定されたトランザクションを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.Transaction transactionToUse, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Transactions.Transaction transactionToUse, valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transactionToUse" Type="System.Transactions.Transaction" />
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="transactionToUse">スコープ内で行うトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクションとして設定するトランザクションです。</param>
        <param name="asyncFlowOption">インスタンス、<see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" />タスクまたは async と await の .NET 非同期プログラミング パターンを使用する場合スレッド継続間、トランザクション スコープに関連付けられているアンビエント トランザクションをフローかどうかを表す列挙体です。</param>
        <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />クラスし、スコープ内で実行されたトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクション、として指定されたトランザクションを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption option, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption option, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="scopeTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="option">To be added.</param>
        <param name="timeout">To be added.</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />要件と指定したタイムアウト値を持つクラス。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption scopeOption, valuetype System.Transactions.TransactionOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="transactionOptions" Type="System.Transactions.TransactionOptions" />
      </Parameters>
      <Docs>
        <param name="scopeOption">インスタンス、<see cref="T:System.Transactions.TransactionScopeOption" />このトランザクションのスコープに関連付けられているトランザクションの要件を記述する列挙です。</param>
        <param name="options">To be added.</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />指定した要件を持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する場合、`transactionOptions`パラメーターを指定、<xref:System.Transactions.IsolationLevel>スコープ後でトランザクションを作成して、新しいトランザクションが、指定された分離レベルに関連付けられています。 分離レベルがトランザクションと共に渡された場合は、トランザクションは、同じ分離レベルが必要または、例外がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption option, System.Transactions.TransactionScopeAsyncFlowOption asyncFlow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption option, valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="option">To be added.</param>
        <param name="asyncFlow">To be added.</param>
        <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />指定した要件と非同期のフローのオプションを持つクラス。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.Transaction transaction, TimeSpan timeout, System.Transactions.EnterpriseServicesInteropOption opt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Transactions.Transaction transaction, valuetype System.TimeSpan timeout, valuetype System.Transactions.EnterpriseServicesInteropOption opt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transactionToUse" Type="System.Transactions.Transaction" />
        <Parameter Name="scopeTimeout" Type="System.TimeSpan" />
        <Parameter Name="interopOption" Type="System.Transactions.EnterpriseServicesInteropOption" />
      </Parameters>
      <Docs>
        <param name="transaction">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="opt">To be added.</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />指定したタイムアウト値と COM + 相互運用性要件を持つクラスし、スコープ内で実行されたトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクション、として指定されたトランザクションを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **注**このメソッドを使用して<xref:System.Security.Permissions.SecurityAction.LinkDemand>されないようにするで、信頼されていないコードから呼び出されます。 ただし、直前の呼び出し元だけが所有する必要が、`FullTrust`権限セットです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Transactions.Transaction transactionToUse, valuetype System.TimeSpan scopeTimeout, valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transactionToUse" Type="System.Transactions.Transaction" />
        <Parameter Name="scopeTimeout" Type="System.TimeSpan" />
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="transactionToUse">スコープ内で行うトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクションとして設定するトランザクションです。</param>
        <param name="scopeTimeout"><see cref="T:System.TimeSpan" />するまで、トランザクション スコープがタイムアウトになると、トランザクションを中止します。</param>
        <param name="asyncFlowOption">インスタンス、<see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" />タスクまたは async と await の .NET 非同期プログラミング パターンを使用する場合スレッド継続間、トランザクション スコープに関連付けられているアンビエント トランザクションをフローかどうかを表す列挙体です。</param>
        <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />指定したタイムアウト値を持つクラスし、スコープ内で実行されたトランザクションの作業でこのトランザクションを使用するように、アンビエント トランザクション、として指定されたトランザクションを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption option, TimeSpan timeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption option, valuetype System.TimeSpan timeout, valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="scopeTimeout" Type="System.TimeSpan" />
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="option">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="asyncFlow">To be added.</param>
        <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />クラスを指定したタイムアウト値、要件、および非同期フロー オプションを使用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions options, System.Transactions.EnterpriseServicesInteropOption opt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption scopeOption, valuetype System.Transactions.TransactionOptions options, valuetype System.Transactions.EnterpriseServicesInteropOption opt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="transactionOptions" Type="System.Transactions.TransactionOptions" />
        <Parameter Name="interopOption" Type="System.Transactions.EnterpriseServicesInteropOption" />
      </Parameters>
      <Docs>
        <param name="scopeOption">インスタンス、<see cref="T:System.Transactions.TransactionScopeOption" />このトランザクションのスコープに関連付けられているトランザクションの要件を記述する列挙です。</param>
        <param name="options">To be added.</param>
        <param name="opt">To be added.</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />指定したスコープと COM + 相互運用性の要件、およびトランザクション オプションを持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する場合、`transactionOptions`パラメーターを指定、<xref:System.Transactions.IsolationLevel>スコープ後でトランザクションを作成して、新しいトランザクションが、指定された分離レベルに関連付けられています。 分離レベルがトランザクションと共に渡された場合は、トランザクションは、同じ分離レベルが必要または、例外がスローされます。  
  
 **注**このメソッドを使用して<xref:System.Security.Permissions.SecurityAction.LinkDemand>されないようにするで、信頼されていないコードから呼び出されます。 ただし、直前の呼び出し元だけが所有する必要が、`FullTrust`権限セットです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption scopeOption, valuetype System.Transactions.TransactionOptions transactionOptions, valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="transactionOptions" Type="System.Transactions.TransactionOptions" />
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="scopeOption">インスタンス、<see cref="T:System.Transactions.TransactionScopeOption" />このトランザクションのスコープに関連付けられているトランザクションの要件を記述する列挙です。</param>
        <param name="transactionOptions">A<see cref="T:System.Transactions.TransactionOptions" />構造体の新しいトランザクションが作成された場合に使用するトランザクションのオプションについて説明します。 既存のトランザクションを使用すると、このパラメーターのタイムアウト値は、トランザクション スコープに適用されます。 その時点では、スコープが破棄される前に期限が切れると、トランザクションは中止されます。</param>
        <param name="asyncFlowOption">インスタンス、<see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" />タスクまたは async と await の .NET 非同期プログラミング パターンを使用する場合スレッド継続間、トランザクション スコープに関連付けられているアンビエント トランザクションをフローかどうかを表す列挙体です。</param>
        <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
  
 新しいインスタンスを初期化、<see cref="T:System.Transactions.TransactionScope" />指定した要件と非同期のフローのオプションを持つクラス。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.Complete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>スコープ内のすべての操作が正常に完了したことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 問題がなければ、スコープ内のすべての操作が正常に完了した、すべてのリソースの状態に一貫性があり、トランザクションをコミットすることは、そのトランザクション マネージャーを通知するために 1 回だけ、このメソッドを呼び出す必要があります。 最後のステートメントとして呼び出しを配置することを非常に良好である、`using`ブロックします。  
  
 このメソッドの使用方法の詳細については、次を参照してください。、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)トピックです。  
  
 このメソッドの呼び出しに失敗すると、トランザクション マネージャー、システム障害として解釈するため、またはトランザクションのスコープ内でスローされる例外に、トランザクションが中止します。 ただし、このメソッドを呼び出すことも、トランザクションのコミットは保証されませんを注意する必要があります。 これはトランザクション マネージャーにステータスを通知する手段にすぎません。 このメソッドを呼び出した後、アクセスできなくなります経由でのアンビエント トランザクション、<xref:System.Transactions.Transaction.Current%2A>プロパティ、および例外がスローされるは結果を実行しようとします。  
  
 リソース マネージャー間のコミットの実際の作業のように、`End Using`ステートメント場合、<xref:System.Transactions.TransactionScope>オブジェクトは、トランザクションを作成します。 このオブジェクトによってトランザクションが作成されていない場合、<xref:System.Transactions.CommittableTransaction.Commit%2A> オブジェクトの所有者によって <xref:System.Transactions.CommittableTransaction> が呼び出されるたびにコミットが発生します。 その時点でトランザクション マネージャーのリソース マネージャーを呼び出してし、commit または rollback をでこのメソッドが呼び出されたかどうかに基づいてのいずれかを知らせる、<xref:System.Transactions.TransactionScope>オブジェクト。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Transactions.TransactionScope>をトランザクションに参加するためのコードのブロックを定義するクラス。  
  
 [!code-csharp[TransactionScope#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TransactionScope/cs/ScopeWithSQL.cs#1)]
 [!code-vb[TransactionScope#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TransactionScope/vb/ScopeWithSQL.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このメソッドは既に 1 回呼び出されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トランザクション スコープを終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出すと、トランザクション スコープの末尾をマークします。 場合、<xref:System.Transactions.TransactionScope>オブジェクトは、トランザクションを作成し、 <xref:System.Transactions.TransactionScope.Complete%2A> 、スコープで呼び出されましたが、<xref:System.Transactions.TransactionScope>オブジェクトが、このメソッドが呼び出されたときに、トランザクションをコミットしようとしています。 します。  
  
 C# を使用して`using`構築により、例外が発生した場合でもこのメソッドを呼び出すことです。 このメソッドの呼び出し後に発生した例外は、トランザクションに影響しない場合があります。 このメソッドも、アンビエント トランザクションを元の状態を復元します。 A<xref:System.Transactions.TransactionAbortedException>が、トランザクションが実際にコミットされていない場合にスローされます。  
  
 このメソッドは、同期トランザクションをコミットまたは中止するまでブロックします。 このため、Windows フォーム (WinForm) のアプリケーションでこのメソッドを使用する場合に非常に注意が必要またはデッドロックが発生することができます。 (たとえば、ボタンをクリックすると)、1 つの WinForm コントロール イベント内でこのメソッドを呼び出すし、同期を使用する場合<xref:System.Windows.Forms.Control.Invoke%2A>デッドロックが発生するトランザクションの処理中のいくつかの UI タスク (たとえば、変化する色) を実行するコントロールを送信するためのメソッドです。 これは、ため、<xref:System.Windows.Forms.Control.Invoke%2A>メソッドは同期であり、UI スレッドには、そのジョブが完了するまで、ワーカー スレッドをブロックします。 ただし、このシナリオでは、UI スレッドも待機しているワーカー スレッドがトランザクションをコミットします。 結果とは、[なし] を続行できませんされ、スコープは、コミットの終了を無期限に待機です。 使用する必要があります<xref:System.Windows.Forms.Control.BeginInvoke%2A>なく<xref:System.Windows.Forms.Control.Invoke%2A>可能な限り、非同期、したがってにくくなりました。 デッドロックになっているためです。  
  
 このメソッドの使用方法の詳細については、次を参照してください。、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)トピックです。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Transactions.TransactionScope>をトランザクションに参加するためのコードのブロックを定義するクラス。  
  
 [!code-csharp[TransactionScope#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TransactionScope/cs/ScopeWithSQL.cs#1)]
 [!code-vb[TransactionScope#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TransactionScope/vb/ScopeWithSQL.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
