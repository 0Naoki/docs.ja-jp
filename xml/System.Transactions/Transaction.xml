<Type Name="Transaction" FullName="System.Transactions.Transaction">
  <TypeSignature Language="C#" Value="public class Transaction : IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Transaction extends System.Object implements class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.Transaction" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>トランザクションを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Transactions> 名前空間は、<xref:System.Transactions.Transaction> クラスに基づく明示的なプログラミング モデルだけでなく、インフラストラクチャがトランザクションを自動的に管理する、<xref:System.Transactions.TransactionScope> クラスを使用した暗黙的なプログラミング モデルも提供します。 お勧め高の開発が容易になりますの暗黙的なモデルを使用することです。 最初に、次を参照してください。、[を実装する、暗黙的なトランザクションを使用してトランザクション スコープ](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)トピックです。 トランザクション アプリケーションの作成の詳細については、次を参照してください。 [A トランザクション アプリケーションの記述](~/docs/framework/data/transactions/writing-a-transactional-application.md)です。  
  
 <xref:System.Transactions.Transaction>クラスには、リソース マネージャーの参加を実装している開発者によって使用されるメソッドが含まれています。 トランザクションを複製および現在のトランザクション コンテキストを制御するための機能も提供します。 現在のトランザクションを取得するには、1 つ設定されている場合、静的<xref:System.Transactions.Transaction.Current%2A>プロパティです。  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="BeginCommitInternal">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginCommitInternal (AsyncCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginCommitInternal(class System.AsyncCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.BeginCommitInternal(System.AsyncCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Transactions.Transaction Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Transaction Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Transaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トランザクションの複製を作成します。</summary>
        <returns>A<see cref="T:System.Transactions.Transaction" />現在のトランザクション オブジェクトのコピーであります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 トランザクションを渡すには、複製が作成されます。  たとえば、たくないに渡す、<xref:System.Transactions.CommittableTransaction>他のアプリケーションに対するたくない、トランザクションをコミットするためです。  マーシャ リングやトランザクションをシリアル化しようとする場合、複製する自動的に作成されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Transactions.Transaction Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Transactions.Transaction Current" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.Transaction.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Transaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アンビエント トランザクションを取得または設定します。</summary>
        <value>現在のトランザクションを説明する <see cref="T:System.Transactions.Transaction" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アンビエント トランザクションの詳細については、「TransactionScopeOption を使用してトランザクション フローを管理する」セクションを参照してください、[トランザクション スコープを使用して、暗黙的なトランザクションを実装する](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md)トピックです。  
  
 使用する必要がありますが、このプロパティを使用してアンビエント トランザクションを設定することができます、<xref:System.Transactions.TransactionScope>可能な場合は、アンビエント トランザクションを操作するオブジェクト。  
  
 このプロパティは、静的なスレッドです。 内には、このプロパティを使用してアンビエント トランザクションを変更するかどうか、 <xref:System.Transactions.TransactionScope> 、<xref:System.InvalidOperationException>場合にスローされる<xref:System.Transactions.TransactionScope.Dispose%2A>が呼び出されると、アンビエント トランザクションの前の値を復元します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DependentClone">
      <MemberSignature Language="C#" Value="public System.Transactions.DependentTransaction DependentClone (System.Transactions.DependentCloneOption option);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.DependentTransaction DependentClone(valuetype System.Transactions.DependentCloneOption option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.DependentTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cloneOption" Type="System.Transactions.DependentCloneOption" />
      </Parameters>
      <Docs>
        <param name="option">To be added.</param>
        <summary>トランザクションの依存する複製を作成します。</summary>
        <returns>A<see cref="T:System.Transactions.DependentTransaction" />を表す依存クローンします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 従属トランザクションは、トランザクションの結果が複製元となるトランザクションの結果によって異なります。  
  
 `cloneoption`パラメーターが作成する従属トランザクションの種類を制御します。 依存するトランザクションが作成された場合<xref:System.Transactions.DependentCloneOption.BlockCommitUntilComplete>、トランザクションがタイムアウトするまでは、トランザクションのコミット処理をブロックまたは<xref:System.Transactions.DependentTransaction.Complete%2A>で呼び出されると、<xref:System.Transactions.DependentTransaction>です。 使用して作成された場合<xref:System.Transactions.DependentCloneOption.RollbackIfNotComplete>場合、トランザクションは自動的に中止<xref:System.Transactions.CommittableTransaction.Commit%2A>前に呼び出されます<xref:System.Transactions.DependentTransaction.Complete%2A>で呼び出されると、<xref:System.Transactions.DependentTransaction>です。  
  
   
  
## Examples  
 次の例では、依存するトランザクションを作成する方法を示します。  
  
 [!code-csharp[Tx_DependentTx#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_dependenttx/cs/dependenttx.cs#1)]
 [!code-vb[Tx_DependentTx#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_dependenttx/vb/dependenttx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトによって保持されているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定して、アンビエント トランザクションを変更した場合<xref:System.Transactions.Transaction.Current%2A>内、 <xref:System.Transactions.TransactionScope> 、<xref:System.InvalidOperationException>場合にスローされる<xref:System.Transactions.TransactionScope.Dispose%2A>が呼び出されると、アンビエント トランザクションの前の値を復元します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCommitInternal">
      <MemberSignature Language="C#" Value="protected void EndCommitInternal (IAsyncResult ar);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void EndCommitInternal(class System.IAsyncResult ar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EndCommitInternal(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ar" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="ar">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnlistDurable">
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>トランザクションに参加する永続的なリソース マネージャーを参加させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **注**このメソッドを使用して<xref:System.Security.Permissions.SecurityAction.LinkDemand>されないようにするで、信頼されていないコードから呼び出されます。 ただし、直前の呼び出し元だけが所有する必要が、`FullTrust`権限セットです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnlistDurable">
      <MemberSignature Language="C#" Value="public System.Transactions.Enlistment EnlistDurable (Guid manager, System.Transactions.IEnlistmentNotification notification, System.Transactions.EnlistmentOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Enlistment EnlistDurable(valuetype System.Guid manager, class System.Transactions.IEnlistmentNotification notification, valuetype System.Transactions.EnlistmentOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Enlistment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceManagerIdentifier" Type="System.Guid" />
        <Parameter Name="enlistmentNotification" Type="System.Transactions.IEnlistmentNotification" />
        <Parameter Name="enlistmentOptions" Type="System.Transactions.EnlistmentOptions" />
      </Parameters>
      <Docs>
        <param name="manager">To be added.</param>
        <param name="notification">To be added.</param>
        <param name="options">To be added.</param>
        <summary>トランザクションに参加する 2 フェーズ コミットをサポートする永続的なリソース マネージャーを参加させます。</summary>
        <returns>参加リストについて記述している <see cref="T:System.Transactions.Enlistment" />オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 永続参加リストを持つリソース マネージャーは、エラーが発生した場合、回復を実行できる必要があります。 回復の詳細については、次を参照してください。[を実行する回復](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)です。 揮発性および持続性のあるリソースだけでなく、リソースを参加させる方法の詳細については、次を参照してください。 [A リソース マネージャーの実装](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)です。  リソース マネージャーが通知をコミットし、2 フェーズ コミットのコミットの準備にどのように応答する方法の詳細については、次を参照してください。 [Single-Phase で、トランザクションのコミットとマルチ フェーズ](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)です。  
  
 このメソッドをトランザクションに参加するために参加しているリソース マネージャーで定義されたメソッドに対応する 2 つのフェーズ コミットの通知を受信する、<xref:System.Transactions.IEnlistmentNotification>インターフェイスです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistDurable">
      <MemberSignature Language="C#" Value="public System.Transactions.Enlistment EnlistDurable (Guid manager, System.Transactions.ISinglePhaseNotification notification, System.Transactions.EnlistmentOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Enlistment EnlistDurable(valuetype System.Guid manager, class System.Transactions.ISinglePhaseNotification notification, valuetype System.Transactions.EnlistmentOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Enlistment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceManagerIdentifier" Type="System.Guid" />
        <Parameter Name="singlePhaseNotification" Type="System.Transactions.ISinglePhaseNotification" />
        <Parameter Name="enlistmentOptions" Type="System.Transactions.EnlistmentOptions" />
      </Parameters>
      <Docs>
        <param name="manager">To be added.</param>
        <param name="notification">To be added.</param>
        <param name="options">To be added.</param>
        <summary>トランザクションに参加する 1 つのフェーズのコミットの最適化をサポートする永続的なリソース マネージャーを参加させます。</summary>
        <returns>参加リストについて記述している <see cref="T:System.Transactions.Enlistment" />オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 永続参加リストを持つリソース マネージャーは、エラーが発生した場合、回復を実行できる必要があります。 回復の詳細については、次を参照してください。[を実行する回復](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)です。 揮発性および持続性のあるリソースだけでなく、リソースを参加させる方法の詳細については、次を参照してください。 [A リソース マネージャーの実装](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)です。  
  
 このメソッド、リソース マネージャーの実装に参加させた場合でもは保証されません単一フェーズのコミットを受け取ることに注意してください。 トランザクション マネージャーは、2 フェーズ コミットの通知を代わりに送信することができますも。 単一フェーズのコミットの最適化の詳細については、次を参照してください。[最適化を使用して単一フェーズのコミットが、昇格可能な 1 つのフェーズ通知](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistPromotableSinglePhase">
      <MemberSignature Language="C#" Value="public bool EnlistPromotableSinglePhase (System.Transactions.IPromotableSinglePhaseNotification notification);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EnlistPromotableSinglePhase(class System.Transactions.IPromotableSinglePhaseNotification notification) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promotableSinglePhaseNotification" Type="System.Transactions.IPromotableSinglePhaseNotification" />
      </Parameters>
      <Docs>
        <param name="notification">To be added.</param>
        <summary>昇格可能な単一フェーズの参加リスト (PSPE) を使用して内部トランザクションを持つリソース マネージャーを参加させます。</summary>
        <returns>参加リストを記述する <see cref="T:System.Transactions.SinglePhaseEnlistment" /> インターフェイスの実装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 トランザクションの参加リストは揮発性です。つまり、参加者の障害は保持されません。 さらに、このメソッドは、のみ制御をエスカレートするトランザクション マネージャーを提示は、エスカレーション自体とは限りません。 エスカレーションが失敗した場合、ユーザーは通知されず、トランザクションがロールバックします。  
  
 パラメーター`promotableSinglePhaseNotification`リソース マネージャーの内部トランザクションをコミットしようとしての結果、トランザクション マネージャーと通信するために使用します。  データの矛盾が報告された場合、トランザクション マネージャーは、例外をスローします。 場合、<xref:System.Transactions.TransactionStatus.InDoubt>結果が報告された、トランザクション マネージャーが、独自の社内参加リストの結果の通知を検索し、報告された応答を無視します。  
  
 参加リストと、トランザクションの昇格の詳細についてを参照してください[トランザクション管理のエスカレーション](http://msdn.microsoft.com/en-us/5b87ae58-8ccf-4b9b-9715-41e4aade89b7)です。 PSPE の詳細については、次を参照してください。[最適化を使用して 1 つのフェーズをコミットし、昇格可能な 1 つのフェーズ通知](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)です。  
  
 **注**このメソッドを使用して<xref:System.Security.Permissions.SecurityAction.LinkDemand>されないようにするで、信頼されていないコードから呼び出されます。 ただし、直前の呼び出し元だけが所有する必要が、`FullTrust`権限セットです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistPromotableSinglePhase">
      <MemberSignature Language="C#" Value="public bool EnlistPromotableSinglePhase (System.Transactions.IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Guid promoterType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EnlistPromotableSinglePhase(class System.Transactions.IPromotableSinglePhaseNotification promotableSinglePhaseNotification, valuetype System.Guid promoterType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promotableSinglePhaseNotification" Type="System.Transactions.IPromotableSinglePhaseNotification" />
        <Parameter Name="promoterType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="promotableSinglePhaseNotification">参加者によって実装された <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> インターフェイス。</param>
        <param name="promoterType">分散トランザクション プロセッサの種類。</param>
        <summary>昇格可能な単一フェーズの参加リスト (PSPE) を使用して内部トランザクションを持つリソース マネージャーを参加させます。</summary>
        <returns>参加リストを記述する <see cref="T:System.Transactions.SinglePhaseEnlistment" /> インターフェイスの実装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値が指定されている場合、`promoterType`パラメーターは`TransactionInterop.PromoterTypeDtc`、トランザクション**必要があります**MSDTC によって昇格され、`byte[]`から返される、`IPromotableSinglePhaseNotification.Promote`メソッド**必要があります**MSDTC トランザクション伝達トークンであります。  
  
 値が指定されている場合、`promoterType`パラメーターは**いない**`TransactionInterop.PromoterTypeDTC`、MSDTC によりがの呼び出し元の実装ではなく、トランザクションは昇格されません`IPromotableSinglePhaseNotification`です。 返すトランザクションの後続の処理のセットがある場合、この呼び出しが成功すると、`TransactionPromotionException`です。 これらの操作は次のとおりです。  
  
-   `Transaction.EnlistDurable`  
  
-   `TransactionInterop.GetDtcTransaction`  
  
-   `TransactionInterop.GetExportCookie`  
  
-   `TransctionInterop.GetTransmitterPropagationToken`  
  
-   トランザクション オブジェクトのシリアル化  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnlistVolatile">
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>トランザクションに参加する揮発性リソース マネージャーを参加させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 揮発性リソース マネージャーでは、関与してトランザクションを完了する障害からの復旧はできません。 揮発性および持続性のあるリソースだけでなく、リソースを参加させる方法の詳細については、次を参照してください。 [A リソース マネージャーの実装](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)です。 リソース マネージャーが通知をコミットし、コミットの準備にどのように応答する方法の詳細については、次を参照してください。 [Single-Phase で、トランザクションのコミットとマルチ フェーズ](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnlistVolatile">
      <MemberSignature Language="C#" Value="public System.Transactions.Enlistment EnlistVolatile (System.Transactions.IEnlistmentNotification notification, System.Transactions.EnlistmentOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Enlistment EnlistVolatile(class System.Transactions.IEnlistmentNotification notification, valuetype System.Transactions.EnlistmentOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Enlistment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistmentNotification" Type="System.Transactions.IEnlistmentNotification" />
        <Parameter Name="enlistmentOptions" Type="System.Transactions.EnlistmentOptions" />
      </Parameters>
      <Docs>
        <param name="notification">To be added.</param>
        <param name="options">To be added.</param>
        <summary>トランザクションに参加する 2 フェーズ コミットをサポートしている揮発性リソース マネージャーを参加させます。</summary>
        <returns>参加リストについて記述している <see cref="T:System.Transactions.Enlistment" />オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 揮発性リソース マネージャーでは、関与してトランザクションを完了する障害からの復旧はできません。 トランザクションで永続参加リストを取得するを使用して、<xref:System.Transactions.Transaction.EnlistDurable%2A>メソッドです。  
  
 このメソッドをトランザクションに参加するために参加しているリソース マネージャーで定義されたメソッドに対応する 2 つのフェーズ コミットの通知を受信する、<xref:System.Transactions.IEnlistmentNotification>インターフェイスです。  
  
   
  
## Examples  
 次の例は、の実装を示しています。<xref:System.Transactions.IEnlistmentNotification>インターフェイスだけでなくを使用して、トランザクションの参加者としてオブジェクトを参加させる、<xref:System.Transactions.Transaction.EnlistVolatile%2A>メソッドです。  
  
 [!code-csharp[Tx_Enlist#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#1)]
 [!code-vb[Tx_Enlist#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistVolatile">
      <MemberSignature Language="C#" Value="public System.Transactions.Enlistment EnlistVolatile (System.Transactions.ISinglePhaseNotification notification, System.Transactions.EnlistmentOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Enlistment EnlistVolatile(class System.Transactions.ISinglePhaseNotification notification, valuetype System.Transactions.EnlistmentOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Enlistment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="singlePhaseNotification" Type="System.Transactions.ISinglePhaseNotification" />
        <Parameter Name="enlistmentOptions" Type="System.Transactions.EnlistmentOptions" />
      </Parameters>
      <Docs>
        <param name="notification">To be added.</param>
        <param name="options">To be added.</param>
        <summary>トランザクションに参加する 1 つのフェーズのコミットの最適化をサポートする揮発性リソース マネージャーを参加させます。</summary>
        <returns>参加リストについて記述している <see cref="T:System.Transactions.Enlistment" />オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 揮発性リソース マネージャーでは、関与してトランザクションを完了する障害からの復旧はできません。 トランザクションで永続参加リストを取得するを使用して、<xref:System.Transactions.Transaction.EnlistDurable%2A>メソッドです。 揮発性および持続性のあるリソースだけでなく、リソースを参加させる方法の詳細については、次を参照してください。 [A リソース マネージャーの実装](http://msdn.microsoft.com/en-us/81509719-d579-4530-831e-42e1acdef63e)です。 リソース マネージャーが通知をコミットし、コミットの準備にどのように応答する方法の詳細については、次を参照してください。 [Single-Phase で、トランザクションのコミットとマルチ フェーズ](http://msdn.microsoft.com/en-us/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)です。  
  
 このメソッド、リソース マネージャーの実装に参加させた場合でもは保証されません単一フェーズのコミットを受け取ることに注意してください。 トランザクション マネージャーは、2 フェーズ コミットの通知を代わりに送信することができますも。 単一フェーズのコミットの最適化の詳細については、次を参照してください。[最適化を使用して単一フェーズのコミットが、昇格可能な 1 つのフェーズ通知](http://msdn.microsoft.com/en-us/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>このトランザクションと、指定したオブジェクトが等しいかどうかを判断します。</summary>
        <returns>
          <see langword="true" />場合<paramref name="obj" />このトランザクションが同じである、それ以外の場合と<see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPromotedToken">
      <MemberSignature Language="C#" Value="public byte[] GetPromotedToken ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetPromotedToken() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.GetPromotedToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得、 <c>byte[]</c>によって返される、<c>昇格</c>メソッド、トランザクションを昇格するときにします。</summary>
        <returns><c>Byte[]</c>によって返される、<c>昇格</c>メソッド、トランザクションを昇格するときにします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、既に昇格していない場合は、トランザクションの昇格の原因の副作用が発生します。  
  
 返されたの形式`byte[]`の値によって定義された、`Transation.PromoterType`プロパティです。 場合の値、`Transaction.PromoterType`プロパティは`TransactionInterop.PromoterTypeDtc`または`Guid.Empty`、 `byte[]` MSDTC トランスミッター伝達トークンは、このメソッドによって返されます。 その他の値を`Transaction.PromoterType`プロパティの呼び出し元が定義されている形式を指定する`Transaction.EnlistPromotableSinglePhase`プロパティ型の値を指定します。 昇格を解釈するためにトークンをこの後者の場合にする必要が行われたコードのマニュアルを参照、`EnlistPromotableSinglePhase`呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsolationLevel">
      <MemberSignature Language="C#" Value="public System.Transactions.IsolationLevel IsolationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Transactions.IsolationLevel IsolationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.Transaction.IsolationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.IsolationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トランザクションの分離レベルを取得します。</summary>
        <value>1 つ、<see cref="T:System.Transactions.IsolationLevel" />をトランザクションの分離レベルを示す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 トランザクションの分離レベルは、完了の他のトランザクションがトランザクションの前に揮発性のデータに対して持つアクセス レベルを決定します。 分離レベルの詳細については、のドキュメントを参照して、<xref:System.Transactions.IsolationLevel>列挙します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Transactions.Transaction x, System.Transactions.Transaction y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Transactions.Transaction x, class System.Transactions.Transaction y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Transactions.Transaction" />
        <Parameter Name="y" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="x"><see cref="T:System.Transactions.Transaction" />等値演算子の左側にあるインスタンスです。</param>
        <param name="y"><see cref="T:System.Transactions.Transaction" />等値演算子の右側にあるインスタンスです。</param>
        <summary>指定した 2 つあるかどうかをテスト<see cref="T:System.Transactions.Transaction" />が等価です。</summary>
        <returns>
          <see langword="true" /> と <paramref name="x" /> が等しい場合は <paramref name="y" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[この演算子を同等の方法は<xref:System.Transactions.Transaction.Equals%2A?displayProperty=nameWithType>します。]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Transactions.Transaction x, System.Transactions.Transaction y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Transactions.Transaction x, class System.Transactions.Transaction y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Transactions.Transaction" />
        <Parameter Name="y" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="x"><see cref="T:System.Transactions.Transaction" />非等値演算子の左側にあるインスタンスです。</param>
        <param name="y"><see cref="T:System.Transactions.Transaction" />非等値演算子の右側にあるインスタンスです。</param>
        <summary>2 つの <see cref="T:System.Transactions.Transaction" /> インスタンスが等しくないかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="x" /> と <paramref name="y" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[この演算子を同等の方法は<xref:System.Transactions.Transaction.Equals%2A?displayProperty=nameWithType>します。]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromoteAndEnlistDurable">
      <MemberSignature Language="C#" Value="public System.Transactions.Enlistment PromoteAndEnlistDurable (Guid manager, System.Transactions.IPromotableSinglePhaseNotification promotableNotification, System.Transactions.ISinglePhaseNotification notification, System.Transactions.EnlistmentOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Enlistment PromoteAndEnlistDurable(valuetype System.Guid manager, class System.Transactions.IPromotableSinglePhaseNotification promotableNotification, class System.Transactions.ISinglePhaseNotification notification, valuetype System.Transactions.EnlistmentOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Enlistment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceManagerIdentifier" Type="System.Guid" />
        <Parameter Name="promotableNotification" Type="System.Transactions.IPromotableSinglePhaseNotification" />
        <Parameter Name="enlistmentNotification" Type="System.Transactions.ISinglePhaseNotification" />
        <Parameter Name="enlistmentOptions" Type="System.Transactions.EnlistmentOptions" />
      </Parameters>
      <Docs>
        <param name="manager">To be added.</param>
        <param name="promotableNotification">リソース マネージャーの内部非分散トランザクションのコミット代理として機能するオブジェクト。</param>
        <param name="notification">To be added.</param>
        <param name="options">To be added.</param>
        <summary>[.NET Framework 4.5.2 以降のバージョンでのみでサポート]  
  
 昇格し、トランザクションに参加する 2 フェーズ コミットをサポートする永続的なリソース マネージャーを参加させます。</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PromoterType">
      <MemberSignature Language="C#" Value="public Guid PromoterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid PromoterType" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.Transaction.PromoterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>形式を一意に識別、 <c>byte[]</c>トランザクションを昇格するときに、Promote メソッドで返されます。</summary>
        <value>形式を一意に識別する guid、 <c>byte[]</c>トランザクションを昇格するときに、Promote メソッドで返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 トランザクションがまだ昇格されていない、昇格可能な単一フェーズの参加リストがない場合は、このプロパティの値になります`Guid.Empty`です。 かどうか、トランザクションを超えたかは、MSDTC に昇格し、このプロパティの値になります`TransactionInterop.PromoterTypeDtc`です。 このプロパティの値が、以前の呼び出しに指定された値になりますかトランザクションが MSDTC でないプロモーターによって昇格されます、`Transaction.EnlistPromotableSinglePhase`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rollback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.Rollback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ロールバック (中止) トランザクション。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 トランザクション オブジェクトのすべてのコピーは、このメソッドを呼び出すことによって、トランザクションのロールバックを開始できます。 元のトランザクション オブジェクトのみ、これは、<xref:System.Transactions.CommittableTransaction>オブジェクト、トランザクションのコミットを開始するために使用できます。 トランザクションの結果が既に決定した後、このメソッドが呼び出されたときに、例外がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rollback(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.Rollback(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">To be added.</param>
        <summary>ロールバック (中止) トランザクション。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDistributedTransactionIdentifier">
      <MemberSignature Language="C#" Value="public void SetDistributedTransactionIdentifier (System.Transactions.IPromotableSinglePhaseNotification promotableNotification, Guid distributedTransactionIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDistributedTransactionIdentifier(class System.Transactions.IPromotableSinglePhaseNotification promotableNotification, valuetype System.Guid distributedTransactionIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promotableNotification" Type="System.Transactions.IPromotableSinglePhaseNotification" />
        <Parameter Name="distributedTransactionIdentifier" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="promotableNotification">参加者によって実装された <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> インターフェイス。</param>
        <param name="distributedTransactionIdentifier">分散トランザクション マネージャーによって使用されるトランザクションの識別子です。</param>
        <summary>MSDTC でないプロモーターによって生成される分散トランザクションの識別子を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、正常にのみ呼び出すことができます中に、`IPromotableSinglePhaseNotification.Promote`メソッドを処理しています。 その他の任意の時にこのメソッドが呼び出された場合、`TransactionException`がスローされます。  
  
 指定された値、`promotableNotification`パラメーターが指定されていたものを同じオブジェクトにする必要があります、`Transaction.EnlistPromotableSinglePhase`呼び出しです。 この場合、これがない場合、`InvalidOperationException`がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">宛先 (を参照してください<see cref="T:System.Runtime.Serialization.StreamingContext" />) このシリアル化します。</param>
        <summary>取得、<see cref="T:System.Runtime.Serialization.SerializationInfo" />このトランザクションをシリアル化するために必要なデータを使用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransactionCompleted">
      <MemberSignature Language="C#" Value="public event System.Transactions.TransactionCompletedEventHandler TransactionCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Transactions.TransactionCompletedEventHandler TransactionCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Transactions.Transaction.TransactionCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.TransactionCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トランザクションが完了したことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 揮発性参加リストを使用して、トランザクションの結果情報を取得する代わりにこのイベントを登録することができます。 渡されたパラメーター、<xref:System.Transactions.TransactionCompletedEventHandler>デリゲートは、<xref:System.Transactions.Transaction>インスタンス。 クエリを実行できます、<xref:System.Transactions.Transaction.TransactionInformation%2A>のインスタンスを取得する特定のインスタンスのプロパティを<xref:System.Transactions.TransactionInformation>が<xref:System.Transactions.TransactionInformation.Status%2A>プロパティがいずれかでトランザクションの状態を表す、<xref:System.Transactions.TransactionStatus.Committed>または<xref:System.Transactions.TransactionStatus.Aborted>値。  
  
 **注意**にアタッチされているトランザクションのパフォーマンスに影響を与える悪影響このイベントにサインアップします。  
  
   
  
## Examples  
 次の例は、購読することにより、アプリケーションが、トランザクションの結果を取得する方法を示しています、<xref:System.Transactions.Transaction.TransactionCompleted>イベント。  
  
 [!code-csharp[Tx_Outcome#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_outcome/cs/txoutcome.cs#1)]
 [!code-vb[Tx_Outcome#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_outcome/vb/txoutcome.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">このイベントは破棄されているトランザクションにサブスクライブしようとしました。</exception>
      </Docs>
    </Member>
    <Member MemberName="TransactionInformation">
      <MemberSignature Language="C#" Value="public System.Transactions.TransactionInformation TransactionInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Transactions.TransactionInformation TransactionInformation" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.Transaction.TransactionInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.TransactionInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トランザクションに関する追加情報を取得します。</summary>
        <value>A<see cref="T:System.Transactions.TransactionInformation" />トランザクションに関する追加情報を格納します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
