<Type Name="DateTime" FullName="System.DateTime">
  <TypeSignature Language="C#" Value="public struct DateTime : IComparable, IComparable&lt;DateTime&gt;, IConvertible, IEquatable&lt;DateTime&gt;, IFormattable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTime extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTime&gt;, class System.IConvertible, class System.IEquatable`1&lt;valuetype System.DateTime&gt;, class System.IFormattable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.DateTime" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IConvertible</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTime&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>通常、日付や時刻として表現される瞬間を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  この型の .NET Framework ソース コードを表示するを参照してください。、[参照ソース](http://referencesource-beta.microsoft.com/#mscorlib/system/datetime.cs#df6b1eba7461813b)です。 ソース コードをオンラインで参照、オフラインで表示、リファレンスをダウンロードおよび; デバッグ中にソース (パッチや更新を含む) をステップ参照してください[指示](http://referencesource.microsoft.com/)です。  
  
 <xref:System.DateTime>値の型が日付を表すし、西暦 9999 年 12 月 31 日までの値で 00時 00分: 00 (午前 0 時)、1 月 1 日から 0001 西暦 (一般的な時代 (年号)) を通じて 11時 59分: 59 PM、タイムアウト (西暦)グレゴリオ暦です。  
  
 時刻の値はタイマー刻み、100 ナノ秒単位で測定されます、特定の日付は西暦 0001 年 1 月 1 日深夜 12時 00分されてからのタイマー刻みの数 (西暦)<xref:System.Globalization.GregorianCalendar>カレンダー (うるう秒は追加ティックを除く)。 たとえば、31241376000000000l のタイマー刻みの値は、日付、0100 年 1 月 01日金曜日、午前 12時 00分: 00 時を表します。 A<xref:System.DateTime>値が常に明確なコンテキストまたは既定の暦で表されます。  
  
> [!NOTE]
>  分または秒などの他の時間間隔に変換することは、使用する必要がありますタイマー刻みの値を使用している場合、 <xref:System.TimeSpan.TicksPerDay?displayProperty=nameWithType>、 <xref:System.TimeSpan.TicksPerHour?displayProperty=nameWithType>、 <xref:System.TimeSpan.TicksPerMinute?displayProperty=nameWithType>、 <xref:System.TimeSpan.TicksPerSecond?displayProperty=nameWithType>、または<xref:System.TimeSpan.TicksPerMillisecond?displayProperty=nameWithType>が変換を実行する定数。 たとえば、秒数を追加するによって表されるをタイマー刻み数が指定された、<xref:System.DateTime.Second%2A>のコンポーネント、<xref:System.DateTime>値、式を使用することができます`dateValue.Second + nTicks/Timespan.TicksPerSecond`です。  
  
 このセクションの内容:  
  
 [DateTime オブジェクトをインスタンス化します。](#instantiating_datetime)   
 [DateTime 値と、それぞれの文字列表現](#datetime_values_strings)   
 [文字列を DateTime 値に変換します。](#parsing)   
 [バージョンの考慮事項](#datetime_versions)   
 [DateTime 値](#datetime_values)   
 [DateTime の操作](#datetime_ops)   
 [DateTime の解決](#Resolution)   
 [DateTime とします。TimeSpan](#datetime_timespan)   
 [DateTime 値、およびカレンダー](#Calendars)   
 [DateTime 値の永続化](#Persisting)   
 [COM 相互運用の考慮事項](#com_interop)  
  
<a name="instantiating_datetime"></a>   
## <a name="instantiating-a-datetime-object"></a>DateTime オブジェクトをインスタンス化します。  
 新規に作成することができます<xref:System.DateTime>次の方法のいずれかの値。  
  
-   オーバー ロードのいずれかを呼び出すことによって、<xref:System.DateTime>コンス トラクターを日付と時刻の値 (年、月、および日、またはタイマー刻みの数) などの特定の要素を指定することです。 次のステートメントのいずれかへの呼び出しを示しています、<xref:System.DateTime>コンス トラクターを特定の年、月、日、時、分、および秒で日付を作成します。  
  
     [!code-csharp[System.DateTime.Instantiation#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Instantiation/cs/Instantiation1.cs#1)]
     [!code-vb[System.DateTime.Instantiation#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Instantiation/vb/Instantiation1.vb#1)]  
  
-   日付と時刻の値を宣言するため、コンパイラ固有の構文を使用します。 たとえば、次の Visual Basic ステートメント初期化新しい<xref:System.DateTime>値。  
  
     [!code-vb[System.DateTime.Instantiation#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Instantiation/vb/Instantiation1.vb#2)]  
  
-   割り当てることによって、<xref:System.DateTime>オブジェクトのプロパティまたはメソッドによって返される日付と時刻の値。 次の例を割り当てます、現在の日付と時間、現在世界協定時刻 (UTC) 日付と時刻、および、現在の日付に 3 つの新しい<xref:System.DateTime>変数。  
  
     [!code-csharp[System.DateTime.Instantiation#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Instantiation/cs/Instantiation1.cs#3)]
     [!code-vb[System.DateTime.Instantiation#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Instantiation/vb/Instantiation1.vb#3)]  
  
-   日付と時刻の値の文字列形式を解析します。 <xref:System.DateTime.Parse%2A>、 <xref:System.DateTime.ParseExact%2A>、 <xref:System.DateTime.TryParse%2A>、および<xref:System.DateTime.TryParseExact%2A>メソッドはすべて、文字列を等価の日付と時刻の値に変換します。 次の例では、<xref:System.DateTime.Parse%2A>メソッドは、文字列解析に変換、<xref:System.DateTime>値。  
  
     [!code-csharp[System.DateTime.Instantiation#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Instantiation/cs/Instantiation1.cs#4)]
     [!code-vb[System.DateTime.Instantiation#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Instantiation/vb/Instantiation1.vb#4)]  
  
     注意してください、<xref:System.DateTime.TryParse%2A>と<xref:System.DateTime.TryParseExact%2A>メソッドは、特定の文字列での有効な表現を含むかどうかを示すため、<xref:System.DateTime>値だけでなく、変換を実行します。  
  
-   呼び出して、<xref:System.DateTime>構造体の暗黙的な既定のコンス トラクターです。 (値型の暗黙的な既定のコンス トラクターの詳細については、「[値型](~/docs/csharp/language-reference/keywords/value-types.md))。コンパイラ サポートしているため、ほぼ同等のものを宣言する、<xref:System.DateTime>明示的に日付と時刻を割り当てずの値。 次の例への呼び出し、 <xref:System.DateTime> c# および Visual Basic での暗黙的な既定のコンス トラクターと同様に、 <xref:System.DateTime> Visual Basic ではない割り当てが指定された変数の宣言。  
  
     [!code-csharp[System.DateTime.Instantiation#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Instantiation/cs/Instantiation1.cs#5)]
     [!code-vb[System.DateTime.Instantiation#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Instantiation/vb/Instantiation1.vb#5)]  
  
<a name="datetime_values_strings"></a>   
## <a name="datetime-values-and-their-string-representations"></a>DateTime 値と、それぞれの文字列表現  
 内部的には、すべて<xref:System.DateTime>値は 0001 年 1 月 1 日の午前 12時 00分: 00 からの経過時間 (100 ナノ秒間隔の数) タイマー刻みの数として表されます。 実際、<xref:System.DateTime>値は、ユーザー インターフェイス要素またはファイルに書き込まれたときに表示されるときにその値を表示する方法に依存しません。 外観、<xref:System.DateTime>値は、書式設定操作の結果。 書式設定は、値を文字列形式に変換するプロセスです。  
  
 日付と時刻の値の外観は、カルチャ、国際標準、アプリケーションの要件、および個人用設定は、このような要因に依存しているため、<xref:System.DateTime>構造体のオーバー ロードを使用して日付と時刻値を書式設定で柔軟性が大幅に向上を提供するその<xref:System.DateTime.ToString%2A>メソッドです。 既定値<xref:System.DateTime.ToString?displayProperty=nameWithType>メソッドは、現在のカルチャの短い形式の日付と長い形式の時刻パターンを使用して日付と時刻の値の文字列形式を返します。 次の例では、既定値<xref:System.DateTime.ToString?displayProperty=nameWithType>カルチャの日付を表示し、EN-US の短い日付パターンと長い時刻パターンを使用して、例が実行されたコンピューター上の現在のカルチャ。  
  
 [!code-csharp[System.DateTime.Formatting#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Formatting/cs/Formatting1.cs#1)]
 [!code-vb[System.DateTime.Formatting#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Formatting/vb/Formatting1.vb#1)]  
  
 <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>メソッド短い形式の日付と、特定のカルチャの長い形式の時刻パターンを使用して日付と時刻の値の文字列表現を返します。 次の例では、<xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=nameWithType>日付し、時刻の FR-FR カルチャの短い日付パターンと長い時刻パターンを使用するメソッド。  
  
 [!code-csharp[System.DateTime.Formatting#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Formatting/cs/Formatting1.cs#2)]
 [!code-vb[System.DateTime.Formatting#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Formatting/vb/Formatting1.vb#2)]  
  
 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>メソッドは、標準またはカスタムの書式指定子によって定義され、現在のカルチャの書式指定規則を使用する形式で日付と時刻の文字列表現を返します。 次の例では、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>カルチャは EN-US の時刻のパターンと完全な日付を表示するメソッドを例が実行されたコンピューター上の現在のカルチャ。  
  
 [!code-csharp[System.DateTime.Formatting#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Formatting/cs/Formatting1.cs#3)]
 [!code-vb[System.DateTime.Formatting#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Formatting/vb/Formatting1.vb#3)]  
  
 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドは、特定の形式指定子によって定義され、特定のカルチャの書式指定規則を使用する形式で日付と時刻の文字列形式を返します。 次の例では、<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>完全な日付と時刻のパターンの FR-FR カルチャを表示するメソッド。  
  
 [!code-csharp[System.DateTime.Formatting#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Formatting/cs/Formatting1.cs#4)]
 [!code-vb[System.DateTime.Formatting#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Formatting/vb/Formatting1.vb#4)]  
  
 書式設定の詳細については<xref:System.DateTime>値を参照してください[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)と[カスタムの日付と時刻の書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)です。  
  
<a name="parsing"></a>   
## <a name="converting-strings-to-datetime-values"></a>文字列を DateTime 値に変換します。  
 日付と時刻を文字列形式に変換する解析では、<xref:System.DateTime>値。 通常、日付と時刻の文字列では、アプリケーションで 2 つの異なる用法があります。  
  
-   これらは、さまざまな形式を取得できるし、現在のカルチャまたは特定のカルチャの規則を反映する日時を表します。 など、アプリケーションは、現在のカルチャが EN-US で「12/15/2013」または「2013 年 12 月 15 日」、として、日付の値を入力するユーザーを許可する可能性があり、現在のカルチャが EN-GB「2013 年 15 月 12 日」または「2013 年 12 月 15日」として、日付の値を入力するユーザーを許可します。  
  
-   日付と時刻を定義済みの形式で表します。 たとえば、アプリケーションには、カルチャ、アプリが実行されている、または現在のカルチャの短い日付形式で日付を入力することが必要とは無関係に「20130103」としての日付がシリアル化する可能性があります。  
  
 使用することができます、<xref:System.DateTime.Parse%2A>または<xref:System.DateTime.TryParse%2A>するカルチャで使用される共通の日付と時刻の形式のいずれかを反映する場合、文字列を変換する方法、<xref:System.DateTime>値。 次の例は、使用する方法を示しています。<xref:System.DateTime.TryParse%2A>数に別のカルチャに固有の形式で日付文字列に変換する、<xref:System.DateTime>値。 英語 (英国) を呼び出し、現在のカルチャを変更、<xref:System.DateTime.GetDateTimeFormats>日付と時刻の文字列の配列を生成する方法です。 これは、後、配列内の各要素を渡します、<xref:System.DateTime.TryParse%2A>メソッドです。 この例から出力は、解析メソッドが正常に変換する、カルチャ固有の日付と時刻の文字列の各できたことを示しています。  
  
 [!code-csharp[System.DateTime.Parsing#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.parsing/cs/parsingex1.cs#1)]
 [!code-vb[System.DateTime.Parsing#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.parsing/vb/parsingex1.vb#1)]  
  
 使用することができます、<xref:System.DateTime.TryParse%2A>と<xref:System.DateTime.TryParseExact%2A>特定の形式または形式と一致する必要がある日付と時刻の文字列に変換する方法、<xref:System.DateTime>値。 解析を行って methodby を使用して 1 つまたは複数または日付と時刻の書式指定文字列をパラメーターとして必要な形式または形式を指定します。 次の例では、 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29> "yyyyMMdd"形式または"HHmmss"形式のいずれかにする必要がある文字列を変換する方法の<xref:System.DateTime>値。  
  
 [!code-csharp[System.DateTime.Parsing#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.parsing/cs/parsingex2.cs#2)]
 [!code-vb[System.DateTime.Parsing#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.parsing/vb/parsingex2.vb#2)]  
  
 <xref:System.DateTime.Parse%2A>と<xref:System.DateTime.ParseExact%2A>場合、メソッドが例外をスローに変換する文字列、<xref:System.DateTime>値を解析できません。 <xref:System.DateTime.TryParse%2A>と<xref:System.DateTime.TryParseExact%2A>を返し、<xref:System.Boolean>変換が成功したか失敗したかどうかを示す値。 日付と時刻の文字列の解析操作の文字列は、ユーザーが入力される場合に特に傾向が高いエラー率があるし、例外処理は高価なため、必要がありますを使用するため、<xref:System.DateTime.TryParse%2A>または<xref:System.DateTime.TryParseExact%2A>シナリオでパフォーマンスが重要なまたは障害発生率が高いの対象は、変換は内のメソッドです。  
  
 日付と時刻の値を解析の詳細については、次を参照してください。[解析の日付と時刻文字列](~/docs/standard/base-types/parsing-datetime.md)です。  
  
<a name="datetime_versions"></a>   
## <a name="version-considerations"></a>バージョンの考慮事項  
 .NET Framework version 2.0 では、前に、<xref:System.DateTime>構造体には、プライベートを連結した未使用の 2 ビット フィールドから成る、64 ビット フィールドが含まれています。`Ticks`を日付と時刻を表すタイマー刻みの数を表す符号なしフィールドは 62 ビット フィールドです。 値、`Ticks`でフィールドを取得できる、<xref:System.DateTime.Ticks%2A>プロパティです。  
  
 .NET Framework 2.0 以降で、<xref:System.DateTime>構造には、タイマー刻みのフィールドを連結したプライベート Kind フィールドから成る、64 ビット フィールドが含まれています。 Kind のフィールドを示す 2 ビット フィールドは、かどうか、<xref:System.DateTime>構造体は、現地時刻、世界協定時刻 (UTC)、または、不特定のタイム ゾーンの時刻を表します。 Kind フィールドは、時刻のタイム ゾーン間でのではなく時刻の比較または算術演算の変換を実行するときに使用されます。 種類のフィールドの値を取得できます、<xref:System.DateTime.Kind%2A>プロパティです。  
  
> [!NOTE]
>  代わりに、<xref:System.DateTime>は具体的にはタイム ゾーンの日付と時刻の値を操作の構造体、<xref:System.DateTimeOffset>構造体。 <xref:System.DateTimeOffset>構造体がプライベートで日付と時刻の情報を格納<xref:System.DateTime>フィールドおよびこれによって、日付し、時刻の分単位の時間 (utc) で異なりますプライベート<xref:System.Int16>フィールドです。 できるようになります、<xref:System.DateTimeOffset>値は、特定のタイム ゾーンの時刻を反映するように、<xref:System.DateTime>値のみ UTC とローカルのタイム ゾーンの時刻を明確に反映できます。 使用する場合の詳細については、<xref:System.DateTime>構造体、または<xref:System.DateTimeOffset>構造体の日付と時刻の値を使用する場合は、「[選択の間で DateTime DateTimeOffset TimeSpan、および TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md)です。  
  
<a name="datetime_values"></a>   
## <a name="datetime-values"></a>DateTime 値  
 時刻値の説明については、<xref:System.DateTime>型は、世界協定時刻 (UTC) の標準である国際的な識別できる名前グリニッジ標準時 (GMT) を使用して表されます。 協定世界時は、経度 0 °、UTC の原点測定される時間です。 夏時間から標準時では、UTC に適用されません。  
  
 現地時刻では、特定のタイム ゾーンを基準とします。 タイム ゾーンは UTC の原点からの時間単位で測定タイム ゾーンのずれがタイム ゾーン オフセットに関連付けられます。 さらに、ローカル時刻は必要に応じて受けます夏時間を追加するか、1 日の長さを 1 時間を減算します。 その結果、ローカル時刻は UTC と必要な場合の夏時間の調整にタイム ゾーン オフセットを追加することによって計算されます。 UTC の原点のタイム ゾーン オフセットは 0 です。  
  
 UTC 時刻は、ファイル内の計算、比較、およびファイルを格納する日付と時刻に適しています。 現地時刻では、デスクトップ アプリケーションのユーザー インターフェイスでの表示に適しています。 (多くの Web アプリケーション) などのタイム ゾーン対応のアプリケーションも、他のタイム ゾーンの数を使用する必要があります。  
  
 場合、<xref:System.DateTime.Kind%2A>のプロパティ、<xref:System.DateTime>オブジェクトが<xref:System.DateTimeKind?displayProperty=nameWithType>、表された時間は、現地時刻、UTC 時刻、またはその他のいくつかのタイム ゾーンの時刻かどうか指定ではありません。  
  
<a name="datetime_ops"></a>   
## <a name="datetime-operations"></a>DateTime の操作  
 使用して、計算、<xref:System.DateTime>構造体など<xref:System.DateTime.Add%2A>または<xref:System.DateTime.Subtract%2A>、構造体の値を変更しません。 代わりに、計算は、新しい返します<xref:System.DateTime>計算の結果を値構造体。  
  
 (たとえば、UTC と現地時刻、間またはと、1 つのタイム ゾーン間) のタイム ゾーン間で変換操作を考慮夏時間しますが、算術演算子および比較の操作がありません。  
  
 <xref:System.DateTime>構造体自体を変換する 1 つのタイム ゾーンの制限付きサポートを提供しています。 使用することができます、<xref:System.DateTime.ToLocalTime%2A>ローカル時刻または UTC に変換する方法を使用することができます、<xref:System.DateTime.ToUniversalTime%2A>現地時刻から UTC に変換するメソッド。 ただし、変換メソッドはタイム ゾーンの完全なセットは利用で、<xref:System.TimeZoneInfo>クラスです。 これらのメソッドを使用して、他のタイム ゾーンの時刻を世界中のタイム ゾーンのいずれかで時間を変換できます。  
  
 計算および比較<xref:System.DateTime>オブジェクトは、オブジェクトが同じタイム ゾーンの時刻を表す場合にのみ意味のあります。 使用することができます、<xref:System.TimeZoneInfo>を表すオブジェクト、<xref:System.DateTime>値のタイム ゾーン、疎結合された 2 つがします。 (つまり、<xref:System.DateTime>オブジェクトには、その日付と時刻の値のタイム ゾーンを表す以外のオブジェクトを返すプロパティはありません、<xref:System.DateTime.Kind%2A>プロパティです)。このため、タイム ゾーン対応のアプリケーションでするタイム ゾーンを決定するいくつかの外部メカニズムに依存する必要があります、<xref:System.DateTime>オブジェクトが作成されました。 たとえば、両方をラップする構造体を使用する可能性があります、<xref:System.DateTime>値、および<xref:System.TimeZoneInfo>を表すオブジェクト、<xref:System.DateTime>値のタイム ゾーン。 UTC を計算およびとの比較の使用の詳細について<xref:System.DateTime>値を参照してください[日付と時刻の算術演算操作の実行](~/docs/standard/datetime/performing-arithmetic-operations.md)です。  
  
 各<xref:System.DateTime>メンバーは、カレンダーを指定するコンス トラクターを除く、その操作を実行する構成のグレゴリオ暦カレンダーを暗黙的に使用してから派生するパラメーターを持つメソッド<xref:System.IFormatProvider>など<xref:System.Globalization.DateTimeFormatInfo?displayProperty=nameWithType>カレンダーを暗黙的に指定します。  
  
 操作のメンバーによって、<xref:System.DateTime>型がうるう年と月の日数などのアカウントの詳細を考慮します。  
  
 その他の一般的な操作が 2 つ<xref:System.DateTime>値では、その文字列形式と日付/時刻値の変換が関係します。 変換するプロセス、<xref:System.DateTime>値の文字列形式に書式設定操作です。 書式設定に関する詳細については、次を参照してください。 [DateTime 値と、それぞれの文字列表現](#datetime_values_strings)です。 日付と時刻を文字列形式を変換するプロセス、<xref:System.DateTime>値は解析操作です。 解析の詳細については、次を参照してください。[文字列を DateTime 値に変換する](#parsing)です。  
  
<a name="Resolution"></a>   
## <a name="datetime-resolution"></a>DateTime の解決  
  
> [!NOTE]
>  日付と時刻の算術演算を実行する代わりに<xref:System.DateTime>経過時間の測定値を使用することができます、<xref:System.Diagnostics.Stopwatch>クラスです。  
  
 <xref:System.DateTime.Ticks%2A>プロパティは、2 つ目の 10-100万分の 1 つの単位で日付と時刻の値を表します、<xref:System.DateTime.Millisecond%2A>プロパティは、日付と時刻の値の秒部分の 1/1000 を返します。 ただし、繰り返しの呼び出しを使用している場合、<xref:System.DateTime.Now%2A?displayProperty=nameWithType>プロパティを経過時間の測定、100 ミリ秒未満の小さな間隔で問題があると、値がによって返されることに注意してください、<xref:System.DateTime.Now%2A?displayProperty=nameWithType>プロパティを Windows 7 および Windows 8 のシステムで約 15 ミリ秒単位の解像度を持つシステム クロックに依存します。  
  
 次の例は、現在の日付と時刻の値のシステム クロックの分解能に依存関係を示しています。 例では、外側のループが 20 回を繰り返され、内側のループは外側のループを遅延する機能します。 かどうか、外側のループ カウンターの値は 10 への呼び出し、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>メソッドには 5 ミリ秒の遅延が導入されています。 によって返される、ミリ秒単位の数に、出力の例に示す、`DateTime.Now.Milliseconds`プロパティへの呼び出し後にのみ変更<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>です。  
  
 [!code-cpp[System.DateTime.Now#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/resolution2.cpp#1)]
 [!code-csharp[System.DateTime.Now#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/resolution2.cs#1)]
 [!code-vb[System.DateTime.Now#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/resolution2.vb#1)]  
  
<a name="datetime_timespan"></a>   
## <a name="datetime-vs-timespan"></a>DateTime とします。TimeSpan  
 <xref:System.DateTime>と<xref:System.TimeSpan>値の型が異なること、<xref:System.DateTime>時間が瞬間を表します、<xref:System.TimeSpan>時間間隔を表します。 つまり、たとえば、1 つのインスタンスを減算することができます<xref:System.DateTime>を取得する別の<xref:System.TimeSpan>時間間隔を表すオブジェクト。 正の値を追加することも、または<xref:System.TimeSpan>現在<xref:System.DateTime>を取得する、<xref:System.DateTime>を将来の日付を表す値です。  
  
 追加するかの時間間隔を減算する<xref:System.DateTime>オブジェクト。 正数または負数を指定できます、タイマー刻み数や、秒単位で表現できるまたはとして表現できます時間間隔、<xref:System.TimeSpan>オブジェクト。  
  
<a name="Calendars"></a>   
## <a name="datetime-values-and-calendars"></a>DateTime 値、およびカレンダー  
 .NET Framework クラス ライブラリにはから派生するすべての calendar クラスの数が含まれています、<xref:System.Globalization.Calendar>クラスです。  それらは次のとおりです。  
  
-   <xref:System.Globalization.ChineseLunisolarCalendar> クラス  
  
-   <xref:System.Globalization.EastAsianLunisolarCalendar> クラス  
  
-   <xref:System.Globalization.GregorianCalendar> クラス  
  
-   <xref:System.Globalization.HebrewCalendar> クラス  
  
-   <xref:System.Globalization.HijriCalendar> クラス  
  
-   <xref:System.Globalization.JapaneseCalendar> クラス  
  
-   <xref:System.Globalization.JapaneseLunisolarCalendar> クラス  
  
-   <xref:System.Globalization.JulianCalendar> クラス  
  
-   <xref:System.Globalization.KoreanCalendar> クラス  
  
-   <xref:System.Globalization.KoreanLunisolarCalendar> クラス  
  
-   <xref:System.Globalization.PersianCalendar> クラス  
  
-   <xref:System.Globalization.TaiwanCalendar> クラス  
  
-   <xref:System.Globalization.TaiwanLunisolarCalendar> クラス  
  
-   <xref:System.Globalization.ThaiBuddhistCalendar> クラス  
  
-   <xref:System.Globalization.UmAlQuraCalendar> クラス  
  
 各カルチャの読み取り専用で定義された既定の暦を使用して<xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType>プロパティを読み取り専用で定義されている 1 つまたは複数のカレンダーをサポートしており<xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>プロパティです。 現在特定で使用する暦<xref:System.Globalization.CultureInfo>によってオブジェクトが定義されているその<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>プロパティについては、予定表のいずれかにする必要があります、<xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>配列。  
  
 カルチャの現在の暦は、そのカルチャのすべての書式設定操作で使用されます。 たとえば、ペルシア語 (イラン) のカルチャの既定の暦は、um で表されるウムアルクラ暦、<xref:System.Globalization.UmAlQuraCalendar>クラスです。  ときに、<xref:System.Globalization.CultureInfo>ペルシア語 (イラン) のカルチャを表すオブジェクトを使用して日付と時刻の書式設定操作で、um ウムアルクラ暦が既定では、使用して、場合にのみ、構成のグレゴリオ暦カレンダーが使用されるカルチャの<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>プロパティが変更された、次の例のようにします。  
  
 [!code-csharp[System.DateTime.Calendar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.DateTime.Calendar/cs/UmAlQuraCalendar1.cs#1)]
 [!code-vb[System.DateTime.Calendar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.DateTime.Calendar/vb/UmAlQuraCalendar1.vb#1)]  
  
 カルチャの現在の暦は、次の例のように、そのカルチャのすべて解析操作でも使用されます。  
  
 [!code-csharp[System.DateTime.Calendar#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.DateTime.Calendar/cs/UmAlQuraParse1.cs#2)]
 [!code-vb[System.DateTime.Calendar#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.DateTime.Calendar/vb/UmAlQuraParse1.vb#2)]  
  
 インスタンス化することも、<xref:System.DateTime>要素を使用して、日付と時刻 (年、月、および日の数) などの特定のカレンダーを呼び出して値、 [DateTime コンス トラクター](../Topic/DateTime%20Constructor.md)が含まれている、`calendar`パラメーターを渡すこと、<xref:System.Globalization.CultureInfo.Calendar%2A>暦を表すオブジェクト。 次の例から日付と時刻の要素を使用して、<xref:System.Globalization.UmAlQuraCalendar>カレンダーです。  
  
 [!code-csharp[System.DateTime.Calendar#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.DateTime.Calendar/cs/Ctor1.cs#3)]
 [!code-vb[System.DateTime.Calendar#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.DateTime.Calendar/vb/Ctor1.vb#3)]  
  
 <xref:System.DateTime>コンス トラクターを含まない、`calendar`パラメーターは、日付と時刻の要素が構成のグレゴリオ暦カレンダーの単位として表されることを想定します。  
  
 他のすべての<xref:System.DateTime>プロパティとメソッドは、構成のグレゴリオ暦カレンダーを使用します。 たとえば、<xref:System.DateTime.Year%2A?displayProperty=nameWithType>プロパティは、構成のグレゴリオ暦カレンダーにおける年を返しますと<xref:System.DateTime.IsLeapYear%28System.Int32%29?displayProperty=nameWithType>メソッドを想定する、`year`パラメーターは、構成のグレゴリオ暦カレンダーにおける年です。  各<xref:System.DateTime>構成のグレゴリオ暦カレンダーを使用するメンバーの対応するメンバーがある、<xref:System.Globalization.CultureInfo.Calendar%2A>を特定のカレンダーを使用するクラス。 たとえば、<xref:System.Globalization.Calendar.GetYear%2A?displayProperty=nameWithType>メソッドは、特定のカレンダーの年を返しますと<xref:System.Globalization.Calendar.IsLeapYear%2A?displayProperty=nameWithType>メソッドでは、解釈、`year`パラメーターとして特定のカレンダーにおける年の数。 次の例では、両方を使用、<xref:System.DateTime>との対応するメンバー、<xref:System.Globalization.UmAlQuraCalendar>クラスです。  
  
 [!code-csharp[System.DateTime.Calendar#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.DateTime.Calendar/cs/DateTimesAndCalendars1.cs#4)]
 [!code-vb[System.DateTime.Calendar#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.DateTime.Calendar/vb/DateTimesAndCalendars1.vb#4)]  
  
 ただし、<xref:System.DateTime>構造が含まれます<xref:System.DateTime.DayOfWeek%2A>構成のグレゴリオ暦カレンダーにおける週の曜日を表すプロパティを使用すると、その年の週番号を取得するメンバーは含まれません。 年間の週を取得する呼び出し、予定表の個別の<xref:System.Globalization.Calendar.GetWeekOfYear%2A?displayProperty=nameWithType>メソッドです。 具体的な例を次に示します。  
  
 [!code-csharp[System.DateTime.Calendar#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.DateTime.Calendar/cs/Weeks1.cs#5)]
 [!code-vb[System.DateTime.Calendar#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.DateTime.Calendar/vb/Weeks1.vb#5)]  
  
 日付と暦の詳細については、次を参照してください。[カレンダーの使用](~/docs/standard/datetime/working-with-calendars.md)です。  
  
<a name="Persisting"></a>   
## <a name="persisting-datetime-values"></a>DateTime 値の永続化  
 永続化できる<xref:System.DateTime>4 つの方法で値。  
  
-   ことができます[文字列への乗り換え](#Strings)して、文字列を保持します。  
  
-   ことができます[64 ビット整数値に変換](#Integers)(の値、<xref:System.DateTime.Ticks%2A>プロパティ) との整数を保持します。  
  
-   実行できます[DateTime 値をシリアル化](#Serialized)です。  
  
-   実行できます[タイム ゾーン情報と共に、DateTime 値をシリアル化](#TimeZone)です。  
  
 どの手法を選択して、関係なくことを確認を復元するルーチン、<xref:System.DateTime>値のデータが失われるまたは例外をスローしません。 <xref:System.DateTime>値には、ラウンド トリップの必要があります。 つまり、元の値と、復元された値は同じはずです。 場合に、元の<xref:System.DateTime>値が 1 つの時間の時点を表す、復元されたときの同じ時点を識別する必要があります。  
  
<a name="Strings"></a>   
### <a name="persisting-values-as-strings"></a>文字列として値の永続化  
 正常に復元する<xref:System.DateTime>文字列として保存される値はこれらの規則に従います。  
  
-   に関するカルチャ固有の書式指定文字列として保存されるときを復元するときに同じ前提をください。 文字列を現在のカルチャが上に保存されたシステムのカルチャからさまざまなシステムに復元できることを呼び出して、<xref:System.DateTime.ToString%2A>のオーバー ロードを呼び出し、インバリアント カルチャの規則を使用して文字列を保存、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>または<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>インバリアント カルチャの規則を使用して、文字列を復元するオーバー ロードします。 使用しないで、 <xref:System.DateTime.ToString>、 <xref:System.DateTime.Parse%28System.String%29>、または<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29>オーバー ロードは、現在のスレッド カルチャの規則を使用します。  
  
-   データは、1 つの時点を表している場合は、場合でも、別のタイム ゾーンを使用するシステムではその復元が復元されたときの同じ時点を表すことを確認します。 これを行うには、変換する、<xref:System.DateTime>保存する前に値を世界協定時刻 (UTC)。 タイム ゾーン情報と共に値をシリアル化することができますもこの方法の詳細については、次を参照してください。 [DateTime のシリアル化とタイム ゾーン データ](#TimeZone)です。  
  
 永続化するときに作成される最も一般的なエラー<xref:System.DateTime>値を文字列としては、既定値または現在のカルチャの書式指定規則に依存します。 問題は、現在のカルチャが保存および復元の文字列とは異なる場合に発生します。 次の例は、これらの問題を示しています。 英語 (米国) をここでは、現在のカルチャの書式指定規則を使用して 5 つの日付を保存します。 英語 (英国) をここでは、現在のカルチャの書式指定規則を使用して日付が復元されます。 2 つのカルチャの書式指定規則が異なるため、2 つの日付を復元できないし、残りの 3 つの日付が正しく解釈されずです。 また、元の日付と時刻の値が 1 つの時点で、復元されたを表している場合は時間が正しくないタイム ゾーン情報が失われるためです。  
  
 [!code-csharp[System.DateTime.Persist#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.persist/cs/persist1.cs#1)]
 [!code-vb[System.DateTime.Persist#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.persist/vb/persist1.vb#1)]  
  
 ラウンドト リップする<xref:System.DateTime>値が正常には、次の手順します。  
  
1.  値は、時間の 1 つの瞬間を表している場合に変換現地時刻から UTC に呼び出すことによって、<xref:System.DateTime.ToUniversalTime%2A>メソッドです。  
  
2.  呼び出して、日付をそれぞれの文字列表現に変換、<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29>または<xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>オーバー ロードします。 指定して、インバリアント カルチャの書式指定規則を使用して<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>として、`provider`引数。 "O"または"R"を使用して、値のラウンドト リップはことを指定します。  
  
3.  呼び出すと、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>または<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>メソッドです。  
  
 永続化を復元する<xref:System.DateTime>データ損失なし、値、次の操作します。  
  
1.  呼び出すことによって、データの解析、<xref:System.DateTime.ParseExact%2A>または<xref:System.DateTime.TryParseExact%2A>オーバー ロードします。 指定<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>として、`provider`引数、および使用して、同じ標準書式指定文字列に使用した、`format`引数の変換中にします。 含める、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>値で、`styles`引数。  
  
2.  場合、<xref:System.DateTime>値の呼び出しに単一時点を表す、<xref:System.DateTime.ToLocalTime%2A>を現地時刻 (utc) から解析した日付に変換します。  
  
 次の例、インバリアント カルチャと、"O"標準書式指定文字列を使用していることを確認<xref:System.DateTime>保存および復元される値は、システム、カルチャ、またはソースとターゲット システムのタイム ゾーンに関係なく同じ瞬間を表します。  
  
 [!code-csharp[System.DateTime.Persist#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.persist/cs/persist2.cs#2)]
 [!code-vb[System.DateTime.Persist#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.persist/vb/persist2.vb#2)]  
  
<a name="Integers"></a>   
### <a name="persisting-values-as-integers"></a>整数値として値の永続化  
 永続化ではなく、<xref:System.DateTime>値を文字列としてする永続化できるように、<xref:System.Int64>タイマー刻みの数を表す値です。 この場合、システムのカルチャを考慮する必要がない、<xref:System.DateTime>値が永続化し、上に復元します。  
  
 永続化する、<xref:System.DateTime>値を整数として。  
  
-   場合、<xref:System.DateTime>の値の 1 つの時点を表す、呼び出すことによってを UTC に変換して、<xref:System.DateTime.ToUniversalTime%2A>メソッドです。  
  
-   によって表されたタイマー刻みの数を取得、<xref:System.DateTime>値からその<xref:System.DateTime.Ticks%2A>プロパティです。  
  
 復元する、<xref:System.DateTime>整数として永続化された値。  
  
1.  新しいインスタンスを作成<xref:System.DateTime>オブジェクトを渡すことによって、<xref:System.Int64>値を<xref:System.DateTime.%23ctor%28System.Int64%29>コンス トラクターです。  
  
2.  場合、<xref:System.DateTime>値は、特定の時点を表すからに変換する (utc) のローカル時刻を呼び出して、<xref:System.DateTime.ToLocalTime%2A>メソッドです。  
  
 次の例の配列が引き続き発生する<xref:System.DateTime>システム上で、米国の整数値として値表示します。 UTC ゾーンのシステムで、これを復元します。 整数を格納しているファイルが含まれています、<xref:System.Int32>の合計数を示す値<xref:System.Int64>直後にその値。  
  
 [!code-csharp[System.DateTime.Persist#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.persist/cs/persist4.cs#4)]
 [!code-vb[System.DateTime.Persist#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.persist/vb/persist4.vb#4)]  
  
<a name="Serialized"></a>   
### <a name="serializing-datetime-values"></a>DateTime 値をシリアル化します。  
 保存ではなく<xref:System.DateTime>として文字列または整数に変換することが、値にバックアップ<xref:System.DateTime>永続化できる値、<xref:System.DateTime>値をストリームまたはファイルと、復元にシリアル化を使用して逆シリアル化を通じてします。 この場合、<xref:System.DateTime>データは、いくつかの指定したオブジェクト形式でシリアル化して、オブジェクトが復元され、逆シリアル化します。 シリアライザーは、フォーマッタなど<xref:System.Xml.Serialization.XmlSerializer>または<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>、シリアル化および逆シリアル化のプロセスを処理します。 シリアル化と、.NET Framework でサポートされているシリアル化の種類の詳細については、次を参照してください。[シリアル化](http://msdn.microsoft.com/library/4d1111c0-9447-4231-a997-96a2b74b3453)です。  
  
 次の例では、<xref:System.Xml.Serialization.XmlSerializer>クラスをシリアル化および逆シリアル化<xref:System.DateTime>すべてを表す値 leap、21 世紀の年の日数。 出力は、現在のカルチャが英語 (英国) システムでこの例を実行している場合、結果を表します。 私たちを逆シリアル化したため、<xref:System.DateTime>オブジェクト自体のコードは、日付と時刻の形式のカルチャの違いを処理する必要はありません。  
  
 [!code-csharp[System.DateTime.Persist#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.persist/cs/persist5.cs#5)]
 [!code-vb[System.DateTime.Persist#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.persist/vb/persist5.vb#5)]  
  
 前の例には、時間の情報が含まれていません。 ただし場合、<xref:System.DateTime>必要がありますに変換する現地時刻から UTC を呼び出してシリアル化する前に、値は特定の時点を表し、現地時刻で表される、<xref:System.DateTime.ToUniversalTime%2A>メソッドです。 後に、この逆シリアル化する必要がありますに変換する (utc) から現地時刻を呼び出して、<xref:System.DateTime.ToLocalTime%2A>メソッドです。 次の例では、<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>をシリアル化するクラス<xref:System.DateTime>米国でのシステム上のデータ太平洋標準時ゾーンと (utc) ゾーンのシステムでのシリアル化を解除します。  
  
 [!code-csharp[System.DateTime.Persist#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.persist/cs/persist3.cs#3)]
 [!code-vb[System.DateTime.Persist#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.persist/vb/persist3.vb#3)]  
  
<a name="TimeZone"></a>   
### <a name="serializing-datetime-and-time-zone-data"></a>DateTime およびタイム ゾーンのデータをシリアル化します。  
 前の例がすべてのように仮定<xref:System.DateTime>値がローカル時刻で表され、ソースとターゲット システム上の同じ時点が反映されるように、UTC と現地時刻までの値を変換します。 <xref:System.DateTime>値は、local 以外のタイム ゾーンと UTC の時間の時点も反映可能性があります。 この場合、ため、<xref:System.DateTime>タイム ゾーンに対応する構造体は、両方のシリアル化する必要がある、<xref:System.DateTime>値、および<xref:System.TimeZoneInfo>そのタイム ゾーンを表すオブジェクト。 これを行うには、その結果、フィールドは、両方を含める種類を作成、<xref:System.DateTime>値とそのタイム ゾーン。 次の例では定義、`DateWithTimeZone`構造を行う方法を示しています。  
  
 [!code-csharp[System.DateTime.Persist#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.persist/cs/persist6.cs#6)]
 [!code-vb[System.DateTime.Persist#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.persist/vb/persist6.vb#6)]  
  
> [!IMPORTANT]
>  `DateWithTimeZone`およびの配列を逆シリアル化する次の 2 つの例についてで構造体が使用される`DateWithTimeZone`オブジェクト。 コード例を実行するには、まずを含むクラス ライブラリを作成、`DateWithTimeZone`構造、およびそれぞれの例をコンパイルするときにへの参照を追加します。  
  
 使用して、`DateWithTimeZone`構造体、日付と時刻とタイム ゾーン情報を次に保持することができます。 次の例では、<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>の配列をシリアル化するクラス`DateWithTimeZone`オブジェクト。  
  
 [!code-csharp[System.DateTime.Persist#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.persist/cs/persist7.cs#7)]
 [!code-vb[System.DateTime.Persist#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.persist/vb/persist7.vb#7)]  
  
 次の例は、呼び出し、<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=nameWithType>メソッドを逆シリアル化します。  
  
 [!code-csharp[System.DateTime.Persist#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.persist/cs/persist8.cs#8)]
 [!code-vb[System.DateTime.Persist#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.persist/vb/persist8.vb#8)]  
  
<a name="com_interop"></a>   
## <a name="com-interop-considerations"></a>COM 相互運用の考慮事項  
 A<xref:System.DateTime>ラウンドト リップさせるには、COM アプリケーションに転送し、次が管理対象のアプリケーションに戻される値といいます。 ただし、<xref:System.DateTime>時刻のみを指定する値は変わりません期待どおりに往復します。  
  
 ラウンドト リップする午後 3 時、最後の日付と時刻など、時刻だけが西暦 1899 年 12 月 30 日の場合 午後 3 時、年 1 月 1 日ではなく西暦 0001 午後 3時 00分 これは、.NET Framework や COM は、既定の日付、時刻のみが指定されている場合を引き継ぐために発生します。 ただし、COM システムは 1899 年 12 月 30 日西暦基準日を想定しています .NET Framework には、西暦 0001 年 1 月 1 日の基本日付が前提としています、  
  
 COM に .NET Framework から時刻のみが渡されると、特別な処理は実行時間を COM で使用される形式に変換します。 .NET Framework に COM から時刻のみが渡されるは、正当な日付と時刻、1899 年 12 月 30 日までが破損しているために特別な処理が実行されません。 これは、.NET Framework や COM が日付を維持する日付は、COM からのラウンドト リップを起動する場合にも意味します。  
  
 .NET Framework や COM の動作はことを意味する場合、アプリケーションのラウンドト リップ、<xref:System.DateTime>だけ時間を指定する、アプリケーションを変更または最後から誤った日付を無視することを忘れないでください<xref:System.DateTime>オブジェクト。  
  
   
  
## Examples  
 次の例では、ほぼを比較する方法と同じ<xref:System.DateTime>と等しいことを宣言するときの差の小さな余白の受け入れ値。  
  
 [!code-cpp[DateTime Equivalency Example#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Equivalency Example/CPP/datetimesample.cpp#1)]
 [!code-csharp[DateTime Equivalency Example#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Equivalency Example/CS/datetimesample.cs#1)]
 [!code-vb[DateTime Equivalency Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Equivalency Example/VB/datetimesample.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この種類のすべてのメンバーでは、スレッド セーフです。 インスタンスの状態を変更する表示されるメンバーは、新しい値で初期化された新しいインスタンスを実際に返します。 として、他の種類と読み取りと書き込みをこの型のインスタンスを含む共有変数を保護する必要があるスレッド セーフを確保するロックによってです。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">日時をグレゴリオ暦の 0001 年 1 月 1 日の 00:00:00.000 以降の経過時間 (100 ナノ秒単位) で表した値。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定したタイマー刻み数に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 日付と時刻のデータまたはタイム ゾーンの程度の制限の移植性の認識は重要では、アプリケーションを使用できます、対応する<xref:System.DateTimeOffset>コンス トラクターです。  
  
   
  
## Examples  
 次の例では、いずれかを示しています、<xref:System.DateTime>コンス トラクターです。  
  
 [!code-cpp[datetime.ctor_Int64#1](~/samples/snippets/cpp/VS_Snippets_CLR/datetime.ctor_Int64/CPP/ticks.cpp#1)]
 [!code-csharp[datetime.ctor_Int64#1](~/samples/snippets/csharp/VS_Snippets_CLR/datetime.ctor_Int64/CS/ticks.cs#1)]
 [!code-vb[datetime.ctor_Int64#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/datetime.ctor_Int64/VB/ticks.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> は <see cref="F:System.DateTime.MinValue" /> 未満か、または <see cref="F:System.DateTime.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (long ticks, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="ticks">日時をグレゴリオ暦の 0001 年 1 月 1 日の 00:00:00.000 以降の経過時間 (100 ナノ秒単位) で表した値。</param>
        <param name="kind">示す列挙値の 1 つかどうか<c>タイマー刻み</c>現地時刻、世界協定時刻 (UTC)、またはそのどちらも指定します。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定したタイマー刻み数と世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 日付と時刻のデータまたはタイム ゾーンの程度の制限の移植性の認識は重要では、アプリケーションを使用できます、対応する<xref:System.DateTimeOffset>コンス トラクターです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="ticks" /> は <see cref="F:System.DateTime.MinValue" /> 未満か、または <see cref="F:System.DateTime.MaxValue" /> を超えています。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">1 日 (1 からの日数まで<c>月</c>)。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、および日に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターでは、解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンスを作成、<xref:System.DateTime>呼び出し、他のカレンダーの年、月、および日を使用して、値、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>コンス トラクターです。  
  
 結果の日の時刻<xref:System.DateTime>は午前 0 時 (00: 00:00)。 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind?displayProperty=nameWithType> に初期化されます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%29>をインスタンス化するコンス トラクター、<xref:System.DateTime>値。 例に示すもこのオーバー ロードが作成される、<xref:System.DateTime>の時刻部分が午前 0 時を等しい値 (0:00)。  
  
 [!code-csharp[System.DateTime.Constructor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#1)]
 [!code-vb[System.DateTime.Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
 または  
  
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ~ の年数<c>カレンダー</c>)。</param>
        <param name="month">月 (1 ~ の月数<c>カレンダー</c>)。</param>
        <param name="day">1 日 (1 からの日数まで<c>月</c>)。</param>
        <param name="calendar">解釈に使用される暦<c>年</c>、<c>月</c>、および<c>日</c>です。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、および日に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 結果の日の時刻<xref:System.DateTime>は午前 0 時 (00: 00:00)。 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 使用できる値`year`、 `month`、および`day`依存`calendar`です。 使用して、指定した日付と時刻を表現できない場合、例外がスローされます`calendar`です。  
  
 <xref:System.Globalization>名前空間を含めたいくつかのカレンダーを提供する<xref:System.Globalization.GregorianCalendar>と<xref:System.Globalization.JulianCalendar>です。  
  
   
  
## Examples  
 次の例では、 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 2 つのインスタンスを作成するには、2 回コンス トラクター<xref:System.DateTime>値。 最初の呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.PersianCalendar>オブジェクト。 ペルシャ暦の日付を表示する個々 の呼び出しが必要です、カルチャの既定の暦としてペルシャ暦を指定することはできません、ためその<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>メソッドです。 2 番目のコンス トラクター呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.HijriCalendar>オブジェクト。 この例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦を回教暦に変更します。 イスラム暦が現在のカルチャの既定の暦があるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドは、日付の書式設定を使用します。 (この場合は、英語 (米国)) を前の現在のカルチャを復元するとき、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドでは、現在のカルチャの既定の構成のグレゴリオ暦カレンダーを使用して、日付の書式設定します。  
  
 [!code-csharp[System.DateTime.Constructor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample2.cs#2)]
 [!code-vb[System.DateTime.Constructor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> は <paramref name="calendar" /> でサポートされる範囲にありません。  
  
 または  
  
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">1 日 (1 からの日数まで<c>月</c>)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、および秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 このコンス トラクターでは、解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンスを作成、<xref:System.DateTime>呼び出し、他のカレンダーの年、月、および日を使用して、値、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>コンス トラクターです。  
  
 日付と時刻のデータまたはタイム ゾーンの程度の制限の移植性の認識は重要では、アプリケーションを使用できます、対応する<xref:System.DateTimeOffset>コンス トラクターです。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%2A>をインスタンス化するコンス トラクター、<xref:System.DateTime>値。  
  
 [!code-csharp[System.DateTime.Constructor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#3)]
 [!code-vb[System.DateTime.Constructor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
 または  
  
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
 または  
  
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
 または  
  
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">1 日 (1 からの日数まで<c>月</c>)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="kind">示す列挙値の 1 つかどうか<c>年</c>、<c>月</c>、<c>日</c>、<c>時間</c>、<c>分</c>と<c>2 番目</c>現地時刻、世界協定時刻 (UTC)、またはそのどちらも指定します。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、および世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターでは、解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンスを作成、<xref:System.DateTime>呼び出し、他のカレンダーの年、月、および日を使用して、値、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>コンス トラクターです。  
  
 日付と時刻のデータまたはタイム ゾーンの程度の制限の移植性の認識は重要では、アプリケーションを使用できます、対応する<xref:System.DateTimeOffset>コンス トラクターです。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29>をインスタンス化するコンス トラクター、<xref:System.DateTime>値。  
  
 [!code-csharp[System.DateTime.Constructor#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#7)]
 [!code-vb[System.DateTime.Constructor#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
 または  
  
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
 または  
  
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
 または  
  
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ~ の年数<c>カレンダー</c>)。</param>
        <param name="month">月 (1 ~ の月数<c>カレンダー</c>)。</param>
        <param name="day">1 日 (1 からの日数まで<c>月</c>)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="calendar">解釈に使用される暦<c>年</c>、<c>月</c>、および<c>日</c>です。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、日、時、分、および秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 使用できる値`year`、 `month`、および`day`依存`calendar`です。 使用して、指定した日付と時刻を表現できない場合、例外がスローされます`calendar`です。  
  
 <xref:System.Globalization>名前空間を含めたいくつかのカレンダーを提供する<xref:System.Globalization.GregorianCalendar>と<xref:System.Globalization.JulianCalendar>です。  
  
   
  
## Examples  
 次の例では、 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 2 つのインスタンスを作成するには、2 回コンス トラクター<xref:System.DateTime>値。 最初の呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.PersianCalendar>オブジェクト。 ペルシャ暦の日付を表示する個々 の呼び出しが必要です、カルチャの既定の暦としてペルシャ暦を指定することはできません、ためその<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>メソッドです。 2 番目のコンス トラクター呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.HijriCalendar>オブジェクト。 この例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦を回教暦に変更します。 イスラム暦が現在のカルチャの既定の暦があるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドは、日付の書式設定を使用します。 (この場合は、英語 (米国)) を前の現在のカルチャを復元するとき、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドでは、現在のカルチャの既定の構成のグレゴリオ暦カレンダーを使用して、日付の書式設定します。  
  
 [!code-csharp[System.DateTime.Constructor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample4.cs#4)]
 [!code-vb[System.DateTime.Constructor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> は <paramref name="calendar" /> でサポートされる範囲にありません。  
  
 または  
  
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
 または  
  
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
 または  
  
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">1 日 (1 からの日数まで<c>月</c>)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、およびミリ秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターでは、解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンスを作成、<xref:System.DateTime>呼び出し、他のカレンダーの年、月、および日を使用して、値、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29>コンス トラクターです。  
  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 日付と時刻のデータまたはタイム ゾーンの程度の制限の移植性の認識は重要では、アプリケーションを使用できます、対応する<xref:System.DateTimeOffset>コンス トラクターです。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%29>をインスタンス化するコンス トラクター、<xref:System.DateTime>値。  
  
 [!code-csharp[System.DateTime.Constructor#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#5)]
 [!code-vb[System.DateTime.Constructor#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
 または  
  
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
 または  
  
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
 または  
  
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ～ 9999)。</param>
        <param name="month">月 (1 ～ 12)。</param>
        <param name="day">1 日 (1 からの日数まで<c>月</c>)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="kind">示す列挙値の 1 つかどうか<c>年</c>、<c>月</c>、<c>日</c>、<c>時間</c>、<c>分</c>、 <c>2 番目</c>、および<c>ミリ秒</c>現地時刻、世界協定時刻 (UTC)、またはそのどちらも指定します。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した年、月、日、時、分、秒、ミリ秒、および世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターでは、解釈`year`、 `month`、および`day`年、月、および構成のグレゴリオ暦カレンダーにおける日として。 インスタンスを作成、<xref:System.DateTime>呼び出し、他のカレンダーの年、月、および日を使用して、値、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29>コンス トラクターです。  
  
 日付と時刻のデータまたはタイム ゾーンの程度の制限の移植性の認識は重要では、アプリケーションを使用できます、対応する<xref:System.DateTimeOffset>コンス トラクターです。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.DateTimeKind%29>をインスタンス化するコンス トラクター、<xref:System.DateTime>値。  
  
 [!code-csharp[System.DateTime.Constructor#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample1.cs#8)]
 [!code-vb[System.DateTime.Constructor#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。  
  
 または  
  
 <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
 または  
  
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
 または  
  
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ~ の年数<c>カレンダー</c>)。</param>
        <param name="month">月 (1 ~ の月数<c>カレンダー</c>)。</param>
        <param name="day">1 日 (1 からの日数まで<c>月</c>)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="calendar">解釈に使用される暦<c>年</c>、<c>月</c>、および<c>日</c>です。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、日、時、分、秒、およびミリ秒に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Kind%2A> プロパティは <xref:System.DateTimeKind.Unspecified> に初期化されます。  
  
 使用できる値`year`、 `month`、および`day`依存`calendar`です。 使用して、指定した日付と時刻を表現できない場合、例外がスローされます`calendar`です。  
  
 日付と時刻のデータまたはタイム ゾーンの程度の制限の移植性の認識は重要では、アプリケーションを使用できます、対応する<xref:System.DateTimeOffset>コンス トラクターです。  
  
 <xref:System.Globalization>名前空間を含めたいくつかのカレンダーを提供する<xref:System.Globalization.GregorianCalendar>と<xref:System.Globalization.JulianCalendar>です。  
  
   
  
## Examples  
 次の例では、 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%29> 2 つのインスタンスを作成するには、2 回コンス トラクター<xref:System.DateTime>値。 最初の呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.PersianCalendar>オブジェクト。 ペルシャ暦の日付を表示する個々 の呼び出しが必要です、カルチャの既定の暦としてペルシャ暦を指定することはできません、ためその<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>メソッドです。 2 番目のコンス トラクター呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.HijriCalendar>オブジェクト。 この例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦を回教暦に変更します。 イスラム暦が現在のカルチャの既定の暦があるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドは、日付の書式設定を使用します。 (この場合は、英語 (米国)) を前の現在のカルチャを復元するとき、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドでは、現在のカルチャの既定の構成のグレゴリオ暦カレンダーを使用して、日付の書式設定します。  
  
 [!code-csharp[System.DateTime.Constructor#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample6.cs#6)]
 [!code-vb[System.DateTime.Constructor#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample6.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> は <paramref name="calendar" /> でサポートされる範囲にありません。  
  
 または  
  
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
 または  
  
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
 または  
  
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="year">年 (1 ~ の年数<c>カレンダー</c>)。</param>
        <param name="month">月 (1 ~ の月数<c>カレンダー</c>)。</param>
        <param name="day">1 日 (1 からの日数まで<c>月</c>)。</param>
        <param name="hour">時間 (0 から 23)。</param>
        <param name="minute">分 (0 から 59)。</param>
        <param name="second">秒 (0 から 59)。</param>
        <param name="millisecond">ミリ秒 (0 から 999)。</param>
        <param name="calendar">解釈に使用される暦<c>年</c>、<c>月</c>、および<c>日</c>です。</param>
        <param name="kind">示す列挙値の 1 つかどうか<c>年</c>、<c>月</c>、<c>日</c>、<c>時間</c>、<c>分</c>、 <c>2 番目</c>、および<c>ミリ秒</c>現地時刻、世界協定時刻 (UTC)、またはそのどちらも指定します。</param>
        <summary><see cref="T:System.DateTime" /> 構造体の新しいインスタンスを、指定した暦の指定した年、月、日、時、分、秒、ミリ秒、および世界協定時刻 (UTC) または現地時刻に初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用できる値`year`、 `month`、および`day`パラメーターによって異なります、`calendar`パラメーター。 使用して、指定した日付と時刻を表現できない場合、例外がスローされます`calendar`です。  
  
 日付と時刻のデータまたはタイム ゾーンの程度の制限の移植性の認識は重要では、アプリケーションを使用できます、対応する<xref:System.DateTimeOffset>コンス トラクターです。  
  
 <xref:System.Globalization>名前空間を含めたいくつかのカレンダーを提供する<xref:System.Globalization.GregorianCalendar>と<xref:System.Globalization.JulianCalendar>です。  
  
   
  
## Examples  
 次の例では、 <xref:System.DateTime.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.DateTimeKind%29> 2 つのインスタンスを作成するには、2 回コンス トラクター<xref:System.DateTime>値。 最初の呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.PersianCalendar>オブジェクト。 ペルシャ暦の日付を表示する個々 の呼び出しが必要です、カルチャの既定の暦としてペルシャ暦を指定することはできません、ためその<xref:System.Globalization.PersianCalendar.GetMonth%2A?displayProperty=nameWithType>、 <xref:System.Globalization.PersianCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>、および<xref:System.Globalization.PersianCalendar.GetYear%2A?displayProperty=nameWithType>メソッドです。 2 番目のコンス トラクター呼び出しをインスタンス化、<xref:System.DateTime>値を使用して、<xref:System.Globalization.HijriCalendar>オブジェクト。 この例では、現在のカルチャをアラビア語 (シリア) に変更し、現在のカルチャの既定の暦を回教暦に変更します。 イスラム暦が現在のカルチャの既定の暦があるため、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドは、日付の書式設定を使用します。 (この場合は、英語 (米国)) を前の現在のカルチャを復元するとき、<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>メソッドでは、現在のカルチャの既定の構成のグレゴリオ暦カレンダーを使用して、日付の書式設定します。  
  
 [!code-csharp[System.DateTime.Constructor#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.constructor/cs/ctorexample9.cs#9)]
 [!code-vb[System.DateTime.Constructor#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.constructor/vb/ctorexample9.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> は <paramref name="calendar" /> でサポートされる範囲にありません。  
  
 または  
  
 <paramref name="month" /> は 1 未満か、<paramref name="calendar" /> の月数を超えています。  
  
 または  
  
 <paramref name="day" /> が 1 未満であるか、または <paramref name="month" /> の日数を超えています。  
  
 または  
  
 <paramref name="hour" /> が 0 未満であるか、または 23 を超えています。  
  
 または  
  
 <paramref name="minute" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="second" /> が 0 未満であるか、または 59 を超えています。  
  
 または  
  
 <paramref name="millisecond" /> が 0 未満であるか、または 999 を超えています。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="kind" /> は <see cref="T:System.DateTimeKind" /> 値のいずれでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTime Add (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Add(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Add(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">正または負の時間間隔。</param>
        <summary>このインスタンスの値に、指定された <see cref="T:System.TimeSpan" /> の値を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された時間間隔を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.DateTime.Add%2A>を単一の操作で時間間隔 (日、時、分、秒またはミリ秒) の複数の種類を追加するメソッド。 このメソッドの動作は、加算演算子の場合と同じです。 <xref:System.DateTime>構造体には、特殊な追加のメソッドもサポートしています (など<xref:System.DateTime.AddDays%2A>、 <xref:System.DateTime.AddHours%2A>、および<xref:System.DateTime.AddMinutes%2A>) 時間間隔。  
  
 <xref:System.DateTime.Add%2A>メソッドはアカウントうるう年と算術演算の日付を実行するときに、月の日数を考慮します。  
  
 このメソッドはこの値を変更しない<xref:System.DateTime>です。 代わりに、新しい返します<xref:System.DateTime>をこの操作の結果の値。 <xref:System.DateTime.Kind%2A>新しいプロパティ<xref:System.DateTime>インスタンスが、現在のインスタンスと同じです。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Add%2A>メソッドです。 この時点から 36 日 (864 時間) である週の曜日を計算します。  
  
 [!code-cpp[DateTime.Add#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Add/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Add/CS/class1.cs#1)]
 [!code-vb[DateTime.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Add/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTime AddDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddDays(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る日数。 <c>値</c>パラメーターは正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された日数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された日数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはこの値を変更しない<xref:System.DateTime>です。 代わりに、新しい返します<xref:System.DateTime>をこの操作の結果の値。  
  
 小数部`value`1 日の小数部の一部であります。 たとえば、4.5 は 4 日、12 時間、0 分 0 秒、0 ミリ秒、および 0 ティックと等価です。  
  
 `value`パラメーターはミリ秒単位に丸められます。  
  
 <xref:System.DateTime.AddDays%2A>メソッドはアカウントうるう年と算術演算の日付を実行するときに、月の日数を考慮します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddDays%2A>曜日、現在の日付以降後の 36 の日数を調べます。  
  
 [!code-cpp[DateTime.AddDays#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.AddDays/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.AddDays#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.AddDays/CS/class1.cs#1)]
 [!code-vb[DateTime.AddDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.AddDays/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTime AddHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddHours(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る時間数。 <c>値</c>パラメーターは正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された時間数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された時間数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはこの値を変更しない<xref:System.DateTime>です。 代わりに、新しい返します<xref:System.DateTime>をこの操作の結果の値。 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>のと同じオブジェクトが`value`です。  
  
 小数部`value`1 時間の小数部の一部であります。 たとえば、4.5 は 4 時間、30 分 0 秒、0 ミリ秒、および 0 ティックと等価です。  
  
 `value`パラメーターはミリ秒単位に丸められます。  
  
 1 時間未満の時間間隔を小数に変換すると、結果が終了しない繰り返し 10 進数である場合に精度の損失を実行できます。 (たとえば、1 分間は 0.016667 時間) です。問題がある場合を使えば、<xref:System.DateTime.Add%2A>メソッドは、1 つのメソッドの呼び出しで複数の時間間隔の種類を指定することができますを小数部は 1 時間の時間間隔に変換する必要があります。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddHours%2A>日付と時刻に、数の整数部と小数部の値を追加します。 また、小数部を含む値をメソッドに渡すことによって生じた誤差の損失を示しています。  
  
 [!code-csharp[System.DateTime.AddHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.AddHours/cs/AddHours1.cs#1)]
 [!code-vb[System.DateTime.AddHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.AddHours/vb/AddHours1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTime AddMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMilliseconds(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成るミリ秒数。 <c>値</c>パラメーターは正数または負数を指定できます。 この値は、近似値の整数に丸められます。</param>
        <summary>このインスタンスの値に、指定されたミリ秒数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表されたミリ秒数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはこの値を変更しない<xref:System.DateTime>です。 代わりに、新しい返します<xref:System.DateTime>をこの操作の結果の値。  
  
 小数部`value`ミリ秒の小数部の一部であります。 たとえば、4.5 は 4 ミリ秒および 5000 のタイマー刻み 1 ミリ秒 10000 ティックを = です。  
  
 `value`パラメーターは、最も近い整数に丸められます。  
  
   
  
## Examples  
 次の例では、 <xref:System.DateTime.AddMilliseconds%2A> 1 ミリ秒、1.5 時間 (ミリ秒) を追加するメソッドを<xref:System.DateTime>値。 それぞれの新しい値を表示し、元の値との間の違いを表示します。 違いには、時間間隔とタイマー刻みの数の両方が表示されます。 この例では、ミリ秒 equals 10,000 のタイマー刻みはいずれかをオフになります。 小数ミリ秒に加算; を実行する前に丸められることも示しています<xref:System.DateTime> 1.5 (ミリ秒) を元の日付に追加することによって生成される値は、元の日付よりも大きい 2 ミリ秒です。  
  
 [!code-csharp[System.DateTime.AddMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmilliseconds/cs/addmilliseconds2.cs#1)]
 [!code-vb[System.DateTime.AddMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmilliseconds/vb/addmilliseconds2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTime AddMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMinutes(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る分数。 <c>値</c>パラメーターは正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された分数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された分数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはこの値を変更しない<xref:System.DateTime>です。 代わりに、新しい返します<xref:System.DateTime>をこの操作の結果の値。  
  
 小数部`value`1 分間の小数部の部分です。 たとえば、4.5 は 4 分、30 秒、0 ミリ秒、および 0 ティックと等価です。  
  
 `value`パラメーターはミリ秒単位に丸められます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddMinutes%2A>日付と時刻に、数の整数部と小数部の値を追加します。  
  
 [!code-cpp[System.DateTime.AddMinutes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.addminutes/cpp/addminutes1.cpp#1)]
 [!code-csharp[System.DateTime.AddMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addminutes/cs/addminutes1.cs#1)]
 [!code-vb[System.DateTime.AddMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addminutes/vb/addminutes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTime AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddMonths(int32 months) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddMonths(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">月数。 <c>月</c>パラメーターは正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された月数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻と <paramref name="months" /> の合計を値とするオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはこの値を変更しない<xref:System.DateTime>オブジェクト。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果オブジェクト。  
  
 <xref:System.DateTime.AddMonths%2A>メソッドは、計算結果の月と年、閏年のアカウントと、1 か月の日数を考慮して、結果の日の部分を調整する<xref:System.DateTime>オブジェクト。 結果として得られる日付が月の有効な日でない場合は、その月の最後の有効日が使用されます。 例では、3 月 31 日 + 1 か月 = 年 4 月 30 日と 3 月 31 日に 1 か月 = 2 月 28 日のうるう年以外とうるう年の 2 月 29 日。  
  
 結果の時刻の部分<xref:System.DateTime>オブジェクトは、このインスタンスと同じになります。  
  
   
  
## Examples  
 次の例では、2015 年 12 月の最終日を 0 と 15 月を追加します。 ここでは、AddMonths メソッドは、各月の最終日の日付を返し、うるう年を正常に処理します。  
  
 [!code-csharp[System.DateTime.AddMonths#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addmonths/cs/addmonths1.cs#1)]
 [!code-vb[System.DateTime.AddMonths#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addmonths/vb/addmonths1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。  
  
 または  
  
 <paramref name="months" /> が -120,000 未満であるか、120,000 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTime AddSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddSeconds(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">整数部と小数部から成る秒数。 <c>値</c>パラメーターは正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された秒数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された秒数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはこの値を変更しない<xref:System.DateTime>です。 代わりに、新しい返します<xref:System.DateTime>をこの操作の結果の値。  
  
 小数部`value`秒の小数部がします。 たとえば、4.5 は 4 秒、500 ミリ秒、および 0 ティックと等価です。  
  
 `value`パラメーターはミリ秒単位に丸められます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.AddSeconds%2A>を 1 日に 30 秒と秒の数を追加するメソッドを<xref:System.DateTime>値。 それぞれの新しい値を表示し、元の値との間の違いを表示します。 違いには、時間間隔とタイマー刻みの数の両方が表示されます。  
  
 [!code-csharp[System.DateTime.AddSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addseconds/cs/addseconds1.cs#1)]
 [!code-vb[System.DateTime.AddSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addseconds/vb/addseconds1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTime AddTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddTicks(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">100 ナノ秒タイマー刻み数。 <c>値</c>パラメーターには、正または負の値を指定できます。</param>
        <summary>このインスタンスの値に、指定されたタイマー刻みの数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された時間数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはこの値を変更しない<xref:System.DateTime>です。 代わりに、新しい返します<xref:System.DateTime>をこの操作の結果の値。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTime AddYears (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime AddYears(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.AddYears(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">年数。 <c>値</c>パラメーターは正数または負数を指定できます。</param>
        <summary>このインスタンスの値に、指定された年数を加算した新しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>このインスタンスで表された日付と時刻に <paramref name="value" /> で表された年数を加算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドはこの値を変更しない<xref:System.DateTime>オブジェクト。 代わりに、新しい返します<xref:System.DateTime>値がこの操作の結果オブジェクト。  
  
 <xref:System.DateTime.AddYears%2A>メソッドは、結果の年がうるう年を考慮に入れてを計算します。 結果の月と時刻の部分を<xref:System.DateTime>オブジェクトは、このインスタンスと同じになります。  
  
 現在のインスタンスがうるう年に閏日である場合は、戻り値は、対象の日付に依存します。  
  
-   場合`value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType>うるう年、戻り値には、その年に閏日もです。 たとえば、4 年が 2012 年 2 月 29 日に追加された場合、日付が返されるは 2016 年 2 月 29 日です。  
  
-   場合`value`  +  <xref:System.DateTime.Year%2A?displayProperty=nameWithType>うるう年、戻り値には、その年に閏日より前に、の日付ではありません。 たとえば、2012 年 2 月 29 日に 1 つの年が追加された場合返される日付は 2013 年 2 月 28 日です。  
  
 次の例を使用して、<xref:System.DateTime.AddYears%2A>メソッドを<xref:System.DateTime>うるう年日を表す値です。 15 年前および後に続く 15 年の日付が表示されますが、2000 年 2 月 29 日。  
  
 [!code-csharp[System.DateTime.AddYears#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.addyears/cs/addyears1.cs#1)]
 [!code-vb[System.DateTime.AddYears#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.addyears/vb/addyears1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" />結果または<see cref="T:System.DateTime" />はより小さい<see cref="F:System.DateTime.MinValue" />以上<see cref="F:System.DateTime.MaxValue" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Compare(System.DateTime,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> の 2 つのインスタンスを比較し、第 1 のインスタンスが第 2 のインスタンスよりも前か、同じか、それとも後かを示す整数を返します。</summary>
        <returns><paramref name="t1" /> と <paramref name="t2" /> の相対値を示す符号付き数値。  
  
 <list type="table"><listheader><term>値の型  
  
 </term><description>条件  
  
 </description></listheader><item><term>0 より小さい値  
  
 </term><description><paramref name="t1" />も前か<paramref name="t2" />です。  
  
 </description></item><item><term>0  
  
 </term><description><paramref name="t1" />同じ<paramref name="t2" />です。  
  
 </description></item><item><term>0 より大きい値  
  
 </term><description><paramref name="t1" />後<paramref name="t2" />です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 関係を判断する`t1`に`t2`、<xref:System.DateTime.Compare%2A>メソッドを比較、<xref:System.DateTime.Ticks%2A>のプロパティ`t1`と`t2`は無視されますが、その<xref:System.DateTime.Kind%2A>プロパティです。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンの時刻を表すことを確認してください。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Compare%2A>メソッドです。  
  
 [!code-csharp[System.DateTime.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.compare/cs/compare1.cs#1)]
 [!code-vb[System.DateTime.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの値と指定した <see cref="T:System.DateTime" /> の値を比較し、このインスタンスの値が指定した <see cref="T:System.DateTime" /> の値よりも前か、同じか、または後かを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 つのオーバー ロード、<xref:System.DateTime.CompareTo%2A>メソッドは、このインスタンスの相対値を示す符号付き数値を返すと、`value`引数は、次の表に示すようにします。  
  
|値|説明|  
|-----------|-----------------|  
|0 より小さい値|このインスタンスは、`value` よりも前の日時です。|  
|0|このインスタンスは `value` と同じです。|  
|0 より大きい値|このインスタンスは、`value` よりも後の日時です。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">現在のインスタンスと比較する対象のオブジェクト。</param>
        <summary>このインスタンスの値と指定した <see cref="T:System.DateTime" /> の値を比較し、このインスタンスの値が指定した <see cref="T:System.DateTime" /> の値よりも前か、同じか、または後かを示す整数を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> パラメーターの相対値を示す符号付き数値。  
  
 <list type="table"><listheader><term>値  
  
 </term><description>説明  
  
 </description></listheader><item><term>0 より小さい値  
  
 </term><description>このインスタンスがよりも前か<paramref name="value" />です。  
  
 </description></item><item><term>0  
  
 </term><description>このインスタンスが同じ<paramref name="value" />です。  
  
 </description></item><item><term>0 より大きい値  
  
 </term><description>このインスタンスがそれより遅い<paramref name="value" />です。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスの関係を判断する`value`、<xref:System.DateTime.CompareTo%2A>メソッドを比較、<xref:System.DateTime.Ticks%2A>現在のインスタンスのプロパティと`value`は無視されますが、その<xref:System.DateTime.Kind%2A>プロパティです。  比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンの時刻を表すことを確認します。 値を比較することによってこれを行う、<xref:System.DateTime.Kind%2A>プロパティです。  
  
 このメソッドを実装する、<xref:System.IComparable%601?displayProperty=nameWithType>インターフェイスし、実行よりもわずかに向上、<xref:System.DateTime.CompareTo%28System.Object%29?displayProperty=nameWithType>メソッド オーバー ロードを変換する必要はありませんので、`value`オブジェクトへのパラメーターです。  
  
   
  
## Examples  
 次の例では、3 つをインスタンス化<xref:System.DateTime>今日を表す 1 つの日付、1 年前の日を表す、1 つの年、将来の日付を表すオブジェクトします。 呼び出して、<xref:System.DateTime.CompareTo%28System.DateTime%29>メソッドし、比較の結果を表示します。  
  
 [!code-csharp[DateTime.CompareTo.2#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo.2/CS/CompareTo_CS1_24564.cs#1)]
 [!code-vb[DateTime.CompareTo.2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo.2/VB/CompareTo_VB1_24564.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">比較対象のボックス化されたオブジェクト、または <see langword="null" />。</param>
        <summary>このインスタンスの値と指定した <see cref="T:System.DateTime" /> の値を含む指定したオブジェクトを比較し、このインスタンスの値が指定した <see cref="T:System.DateTime" /> の値よりも前か、同じか、または後かを示す整数を返します。</summary>
        <returns>このインスタンスと <paramref name="value" /> の相対値を示す符号付き数値。  
  
 <list type="table"><listheader><term>値  
  
 </term><description>説明  
  
 </description></listheader><item><term>0 より小さい値  
  
 </term><description>このインスタンスがよりも前か<paramref name="value" />です。  
  
 </description></item><item><term>0  
  
 </term><description>このインスタンスが同じ<paramref name="value" />です。  
  
 </description></item><item><term>0 より大きい値  
  
 </term><description>このインスタンスがそれより遅い<paramref name="value" />、または<paramref name="value" />は<see langword="null" />します。  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスの関係を判断する`value`、<xref:System.DateTime.CompareTo%2A>メソッドを比較、<xref:System.DateTime.Ticks%2A>現在のインスタンスのプロパティと`value`は無視されますが、その<xref:System.DateTime.Kind%2A>プロパティです。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンの時刻を表すことを確認します。 値を比較することによってこれを行う、<xref:System.DateTime.Kind%2A>プロパティです。  
  
 任意のインスタンス<xref:System.DateTime>、その値に関係なくが大きいと見なされますより`null`です。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.CompareTo%2A>メソッドです。  
  
 [!code-cpp[DateTime.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.CompareTo/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.CompareTo/CS/class1.cs#1)]
 [!code-vb[DateTime.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.CompareTo/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> が <see cref="T:System.DateTime" /> ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスの日付の部分を取得します。</summary>
        <value>このインスタンスと日付が同じで、時刻値が深夜の 12 時 (00:00:00) に設定された新しいオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は、現在のインスタンスと同じです。  
  
 <xref:System.DateTime>型を表す両方の日付と時間、1 つの型にすることが重要で返される日付を誤って解釈されない、<xref:System.DateTime.Date%2A>プロパティとして、日付と時刻。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.Date%2A>の日付の部分を抽出するプロパティ、<xref:System.DateTime>時刻部分が 0 に設定値 (または 0:00:00、または午前 0 時)。 これは、方法についても説明、表示するときに使用される書式指定文字列によって、<xref:System.DateTime>値、書式設定された出力に表示される、時刻部分が続行ことができます。  
  
 [!code-cpp[System.DateTime.Date#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Date/cpp/date1.cpp#1)]
 [!code-csharp[System.DateTime.Date#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Date/cs/Date1.cs#1)]
 [!code-vb[System.DateTime.Date#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Date/vb/Date1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される月の日付を取得します。</summary>
        <value>DateTime の日付部分 (1 ～ 31)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Day%2A>プロパティは常にグレゴリオ暦カレンダーにおける月の日を返す場合でも、現在<xref:System.DateTime>値では、他のカレンダーを使用してインスタンス化されたまたは場合は、現在のスレッド カルチャの既定の暦はグレゴリオ暦のカレンダーではありません。 他のカレンダーを使用して、特定の日付の月の日を取得する呼び出し暦の<xref:System.Globalization.Calendar.GetDayOfMonth%2A?displayProperty=nameWithType>メソッドです。 次の例では、両方は使用して、<xref:System.DateTime.Day%2A>プロパティおよび<xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>の月の日を取得する方法を<xref:System.DateTime>イスラム暦カレンダーを使用してインスタンス化される値。  
  
 [!code-csharp[System.DateTime.Day#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day1.cs#1)]
 [!code-vb[System.DateTime.Day#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day1.vb#1)]  
  
 同様に、次の例では両方とも、<xref:System.DateTime.Day%2A>プロパティおよび<xref:System.Globalization.HijriCalendar.GetDayOfMonth%2A?displayProperty=nameWithType>イスラム暦を使用して、既定の暦として AR-SA が現在のスレッド カルチャの場合、月の日を取得する方法です。  
  
 [!code-csharp[System.DateTime.Day#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Day/cs/Day2.cs#2)]
 [!code-vb[System.DateTime.Day#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Day/vb/Day2.vb#2)]  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Day%2A>プロパティです。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される曜日を取得します。</summary>
        <value>この <see cref="T:System.DateTime" /> 値の曜日を示す列挙型定数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 内の定数の値、<xref:System.DayOfWeek>列挙型の範囲から<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>に<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>です。 かどうか整数にキャストすると、その値の範囲は 0 から (ことを示します<xref:System.DayOfWeek.Sunday?displayProperty=nameWithType>) を 6 (示します<xref:System.DayOfWeek.Saturday?displayProperty=nameWithType>)。  
  
 <xref:System.DateTime.DayOfWeek%2A>プロパティには、列挙定数が返されます。 システムの地域と言語の設定は反映されません。 特定の日付のローカライズされた曜日名を表す文字列を取得する呼び出しのオーバー ロードのいずれか、<xref:System.DateTime.ToString%2A>を含むメソッド、`format`パラメーターを渡しますか、`ddd`または`dddd`カスタム書式指定文字列。 詳細については、「[する方法: 特定の日付から週曜日の抽出](~/docs/standard/base-types/how-to-extract-the-day-of-the-week-from-a-specific-date.md)です。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.DayOfWeek%2A>プロパティおよび<xref:System.DayOfWeek?displayProperty=nameWithType>列挙します。  
  
 [!code-cpp[DateTime.DayOfWeek#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DayOfWeek/CPP/dow.cpp#1)]
 [!code-csharp[DateTime.DayOfWeek#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DayOfWeek/CS/dow.cs#1)]
 [!code-vb[DateTime.DayOfWeek#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DayOfWeek/VB/dow.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される年間積算日を取得します。</summary>
        <value>1 から 366 までの間の積算日。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DayOfYear%2A>プロパティうるう年は考慮に入れて、年の日付を計算するとき。 プロパティの値には、常に、現在のスレッド カルチャの現在の暦に関係なく、グレゴリオ暦の年の日が反映されます。 さまざまなカレンダーにおける年の日を取得する、<xref:System.Globalization.Calendar.GetDayOfYear%2A?displayProperty=nameWithType>暦のメソッドです。  
  
   
  
## Examples  
 次の例では、グレゴリオ暦で 2010 2020 年 12 月 31 日の年の日を表示します。 12 月 31 日が 366 日うるう年の年の例を示して ことに注意してください。  
  
 [!code-csharp[System.DateTime.DayOfYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.dayofyear/cs/dayofyear2.cs#1)]
 [!code-vb[System.DateTime.DayOfYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.dayofyear/vb/dayofyear2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DaysInMonth">
      <MemberSignature Language="C#" Value="public static int DaysInMonth (int year, int month);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 DaysInMonth(int32 year, int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">年。</param>
        <param name="month">月 (1 から 12 までの範囲の数)。</param>
        <summary>指定した月および年の日数を返します。</summary>
        <returns>指定した <paramref name="year" /> の <paramref name="month" /> の日数。  
  
 たとえば、<paramref name="month" /> が 2 月を表す 2 に等しい場合、戻り値には、<paramref name="year" /> が閏年かどうかによって 28 または 29 を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.DaysInMonth%2A>メソッドは常に解釈`month`と`year`グレゴリオ暦が現在のカルチャの現在の暦ではない場合でも、グレゴリオ暦の年と月に予定表とします。 特定の暦の指定された月の日数を取得する呼び出し暦の<xref:System.Globalization.Calendar.GetDaysInMonth%2A>メソッドです。  
  
   
  
## Examples  
 次の例で使用する方法、 <xref:System.DateTime.DaysInMonth%2A> 2001 年 7 月、年 2 月の日数を調べます 1998 (、うるう年以外)、および 1996 年 2 月 (うるう年)。  
  
 [!code-cpp[DateTime.DaysInMonth#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.DaysInMonth/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.DaysInMonth/CS/class1.cs#1)]
 [!code-vb[DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.DaysInMonth/VB/class1.vb#1)]  
  
 次の例では、整数の配列で指定された年の各月に日数を表示します。  
  
 [!code-csharp[System.DateTime.DaysInMonth#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.daysinmonth/cs/daysinmonth3.cs#1)]
 [!code-vb[System.DateTime.DaysInMonth#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.daysinmonth/vb/daysinmonth3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> が 1 未満であるか、または 12 を超えています。  
  
 または  
  
 <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスの値が、指定した <see cref="T:System.DateTime" /> インスタンスの値と等しいかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> パラメーターがこのインスタンスの値と等しい場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスと`value`が等しい場合は、<xref:System.DateTime.Ticks%2A>プロパティの値が等しい。 その<xref:System.DateTime.Kind%2A>プロパティの値は等しいかどうかテストでは考慮されません。  
  
 このメソッドを実装する、<xref:System.IEquatable%601?displayProperty=nameWithType>インターフェイス、および実行よりもわずかに向上、<xref:System.DateTime.Equals%2A>メソッドのため、`value`パラメーターは、オブジェクトに変換する必要はありません。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Equals%2A>メソッドです。  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">このインスタンスと比較するオブジェクト。</param>
        <summary>このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="value" /> のインスタンスで、このインスタンスの値に等しい場合は <see cref="T:System.DateTime" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在のインスタンスと`value`が等しい場合は、<xref:System.DateTime.Ticks%2A>プロパティの値が等しい。 その<xref:System.DateTime.Kind%2A>プロパティの値は等しいかどうかテストでは考慮されません。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Equals%2A>メソッドです。  
  
 [!code-csharp[System.DateTime.Equals-Instance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/cs/sample.cs#1)]
 [!code-vb[System.DateTime.Equals-Instance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Equals-Instance/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Equals(System.DateTime,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" />  の 2 つのインスタンスが同じ日付/時刻値を持っているかどうかを示す値を返します。</summary>
        <returns>
          2 つの値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `t1`および`t2`が等しい場合は、<xref:System.DateTime.Ticks%2A>プロパティの値が等しい。 その<xref:System.DateTime.Kind%2A>プロパティの値は等しいかどうかテストでは考慮されません。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Equals%2A>メソッドです。  
  
 [!code-cpp[DateTime.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Equals/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Equals/CS/class1.cs#1)]
 [!code-vb[DateTime.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Equals/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromBinary">
      <MemberSignature Language="C#" Value="public static DateTime FromBinary (long dateData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromBinary(int64 dateData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromBinary(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateData" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="dateData">2 ビット フィールドの <see cref="P:System.DateTime.Kind" /> プロパティおよび 62 ビット フィールドの <see cref="P:System.DateTime.Ticks" /> プロパティをエンコードする 64 ビット符号付き整数。</param>
        <summary>64 ビットのバイナリ値を逆シリアル化し、元のシリアル化 <see cref="T:System.DateTime" /> オブジェクトを再構築します。</summary>
        <returns><see cref="T:System.DateTime" /> メソッドによってシリアル化された <see cref="M:System.DateTime.ToBinary" /> オブジェクトと等価なオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、 <xref:System.DateTime.ToBinary%2A> 、現在の値を変換する方法の<xref:System.DateTime>オブジェクトをバイナリ値にします。 バイナリ値を使用して、その後、および<xref:System.DateTime.FromBinary%2A>メソッドを元の再作成する<xref:System.DateTime>オブジェクト。  
  
> [!IMPORTANT]
>  場合によっては、<xref:System.DateTime>によって返される値、<xref:System.DateTime.FromBinary%2A>メソッドは、元と同じではありません<xref:System.DateTime>に指定された値、<xref:System.DateTime.ToBinary%2A>メソッドです。 詳細については、次のセクションでは、「ローカル時刻の調整」を参照してください。  
  
## <a name="local-time-adjustment"></a>現地時刻の調整  
 ローカル タイム ゾーンを調整して、世界協定時刻である、ローカル時刻として表されます、<xref:System.DateTime>構造体が<xref:System.DateTime.Kind%2A>プロパティの値を<xref:System.DateTimeKind.Local>です。 ローカルを復元するときに<xref:System.DateTime>によって生成されるバイナリ表現からの値、 <xref:System.DateTime.ToBinary%2A> 、メソッド、<xref:System.DateTime.FromBinary%2A>メソッドは、元の値に等しいしないように再作成された値を調整できます。 これは、次のような条件で発生します。  
  
-   ローカル<xref:System.DateTime>オブジェクトは、1 つのタイム ゾーンでシリアル化、<xref:System.DateTime.ToBinary%2A>メソッドによって別のタイム ゾーンで、逆シリアル化と、<xref:System.DateTime.FromBinary%2A>メソッドを結果として得られるによって表されるローカル時間<xref:System.DateTime>オブジェクトが 2 番目のタイム ゾーンに自動的に調整します。  
  
     たとえば、<xref:System.DateTime>午後 3 時のローカル時刻を表すオブジェクト 米国内で実行されているアプリケーション太平洋標準時ゾーンを使用して、<xref:System.DateTime.ToBinary%2A>を変換する方法の<xref:System.DateTime>オブジェクトをバイナリ値にします。 米国で実行されている別のアプリケーション米国東部標準時が使用して、<xref:System.DateTime.FromBinary%2A>を新しいバイナリ値を変換する方法の<xref:System.DateTime>オブジェクト。 新しい値<xref:System.DateTime>オブジェクトは、午後 6 時、元の午後 3 として同じ時点を表します ただし、東部標準時ゾーンのローカル時刻に調整されます。  
  
-   場合、ローカルのバイナリ表現<xref:System.DateTime>値が対象のシステムのローカル タイム ゾーンで無効な時刻を表して<xref:System.DateTime.FromBinary%2A>が呼び出されると、時間の調整が無効です。  
  
     たとえば、標準時から夏時間への移行が発生米国太平洋標準時ゾーンの 2010 年 3 月 14 日の午前 2時 00分に時間は午前 3 時に、1 時間に進み この間隔の時間は、このタイム ゾーンに存在しません、時間間隔は、無効な時刻です。 時間内にあるを場合にこの範囲に変換される、バイナリ値によって次の例を示しています、<xref:System.DateTime.ToBinary%2A>メソッドでは、復元し、<xref:System.DateTime.FromBinary%2A>メソッド、元の値を調整して、有効な時刻になります。 特定の日付と時刻の値に渡すことによっての変更される可能性がありますする可能性があるかどうかを確認することができます、<xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>メソッドの例とを示しています。  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>バージョンの考慮事項  
 .NET Framework バージョン 2.0 以降の<xref:System.DateTime>構造から成るプライベートなフィールドがかどうか指定した時刻は現地時刻、世界協定時刻 (UTC)、またはそのどちらも、連結され、プライベート タイマー刻みフィールドに日付と時刻の指定を 100 ナノ秒タイマー刻みの数を格納することを示します。 タイマー刻みの数をアクセスするのには、<xref:System.DateTime.Ticks%2A>プロパティおよび theKind フィールドをアクセスするのには、<xref:System.DateTime.Kind%2A>プロパティです。  
  
 シリアル化する場合、.NET Framework 2.0 の前に、<xref:System.DateTime>などを使用してシリアル化インターフェイスではなく、手動でオブジェクト<xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>、タイマー刻みのデータのみをシリアル化に必要な<xref:System.DateTime>です。 以降、.NET Framework 2.0 では、種類のデータもシリアルする必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateData" /> は <see cref="F:System.DateTime.MinValue" /> 未満か、または <see cref="F:System.DateTime.MaxValue" /> を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTime(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTime(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
        <summary>指定された Windows ファイル時刻を同等の現地時刻に変換します。</summary>
        <returns><paramref name="fileTime" /> パラメーターによって表された日時に相当する現地時刻を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻は、西暦 1601 年 1 月 1 日深夜 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値 (西暦)世界協定時刻 (UTC)。 Windows では、アプリケーションの作成、アクセスすると、またはファイルに書き込むときを記録するファイルの時刻を使用します。  
  
 `fileTime`パラメーターは 100 ナノ秒タイマー刻み単位で表したファイルの時刻を指定します。  
  
 以降、.NET Framework version 2.0 では、戻り値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.FromFileTime%2A>メソッドです。  
  
 [!code-cpp[DateTime.FromFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.FromFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.FromFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.FromFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" />0 未満か、超える時刻を表して<see cref="F:System.DateTime.MaxValue" />です。</exception>
        <block subset="none" type="usage">
          <para>通常、<see cref="M:System.DateTime.FromFileTime(System.Int64)" />メソッド復元、<see cref="T:System.DateTime" />によって保存された値、<see cref="M:System.DateTime.ToFileTime" />メソッドです。 ただし、2 つの値は、次の条件下で異なる場合があります。  
  
-   場合、シリアル化と逆シリアル化、<see cref="T:System.DateTime" />値が異なるタイム ゾーンで発生します。 たとえば場合、<see cref="T:System.DateTime" />時刻は午後 12 時 30 分の値 米国の米国東部標準時がシリアル化され、米国でし、逆シリアル化太平洋標準時ゾーン、午後 12 時 30 分の元の値 午前 9 時 30 分に調整されます。 2 つのタイム ゾーンの違いを反映します。  
  
-   場合、<see cref="T:System.DateTime" />シリアル化される値は、ローカル タイム ゾーンで無効な時刻を表します。 ここで、<see cref="M:System.DateTime.ToFileTime" />メソッドは、調整、復元された<see cref="T:System.DateTime" />をローカル タイム ゾーンで有効な時刻を表すように値します。  
  
     たとえば、米国で標準時から夏時間への移行が発生します太平洋標準時ゾーン、2010 年 3 月 14 日、午前 2時 00分に時間が進み午前 3 時に、1 時間 この間隔の時間は、このタイム ゾーンに存在しません、時間間隔は、無効な時刻です。 次の例は、時間内にあるを場合はこの範囲は、長整数値に変換を示しています、<see cref="M:System.DateTime.ToFileTime" />メソッドによってを復元し、<see cref="M:System.DateTime.FromFileTime(System.Int64)" />メソッド、元の値を調整して、有効な時刻になります。 特定の日付と時刻の値に渡すことによっての変更される可能性がありますする可能性があるかどうかを確認することができます、<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />メソッドの例とを示しています。  
  
     [!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)]
     [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FromFileTimeUtc">
      <MemberSignature Language="C#" Value="public static DateTime FromFileTimeUtc (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromFileTimeUtc(int64 fileTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromFileTimeUtc(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">タイマー刻み単位で表した Windows ファイルの時刻。</param>
        <summary>指定された Windows ファイル時刻を同等の UTC 時刻に変換します。</summary>
        <returns><paramref name="fileTime" /> パラメーターによって表された日時に相当する UTC 時刻を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻は、西暦 1601 年 1 月 1 日深夜 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値 (西暦)世界協定時刻 (UTC)。 Windows では、アプリケーションの作成、アクセスすると、またはファイルに書き込むときを記録するファイルの時刻を使用します。  
  
 `fileTime`パラメーターは 100 ナノ秒タイマー刻み単位で表したファイルの時刻を指定します。  
  
 以降、.NET Framework version 2.0 では、戻り値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind.Utc>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="fileTime" />0 未満か、超える時刻を表して<see cref="F:System.DateTime.MaxValue" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FromOADate">
      <MemberSignature Language="C#" Value="public static DateTime FromOADate (double d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime FromOADate(float64 d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.FromOADate(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="d">OLE オートメーション日付値。</param>
        <summary>指定した OLE オートメーション日付と等しい <see cref="T:System.DateTime" /> を返します。</summary>
        <returns><paramref name="d" /> と同じ日付と時刻を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `d`パラメーターは前に、または後、基本日午前 0 時、1899 年 12 月 30 日間の数値として日付を表す倍精度浮動小数点数。 符号と整数型の一部`d`1899 年 12 月 30日から正または負の値の 1 日転置およびの小数部の絶対値として日付をエンコード`d`午前 0 時から 1 日変位の割合としての時刻をエンコードします。 `d`正 2958465.99999999 までの間の値にする必要があります。  
  
 日付をエンコードする方法、原因があること 1899 年 12 月 30 日の時刻を表す 2 つの方法に注意してください。 たとえば、-0.5、0.5 は 1899 年 12 月 30日正午を意味プラスまたは基準日から 0 日を差し引いた日転置は基本の日付のままで、午前 0 時から半日変位正午のためです。  
  
 参照してください<xref:System.DateTime.ToOADate%2A>OLE オートメーションについての詳細。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">日付が有効な OLE オートメーション日付の値ではありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDateTimeFormats">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスの値を、標準の日時形式指定子によってサポートされるすべての文字列形式に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  複数回呼び出すを想定しないでください、<xref:System.DateTime.GetDateTimeFormats%2A>オーバー ロードは同一のデータを返します。 特定のオーバー ロードによって、現在のカルチャの変更、ユーザーは、個々 のカルチャ設定をオーバーライドするか、システムのカルチャのデータに更新が発生する場合、このメソッドによって返されるデータは変更できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値を、標準の日時形式指定子によってサポートされるすべての文字列形式に変換します。</summary>
        <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたインスタンスの値を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって返される文字列の配列、<xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType>メソッドは別個の呼び出しによって返される文字列の配列に結合する、 <xref:System.DateTime.GetDateTimeFormats%28System.Char%29?displayProperty=nameWithType> "d"、"D"、"f"、"F"、"g"、"G"、"m"、"o"、"r"、"s"、"t"、"T"、"u"、"U"および"y"標準書式指定文字列を持つメソッドです。 標準書式指定子の詳細については、次を参照してください。[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)です。  
  
 戻り値の各要素は、現在のカルチャ情報を使用してフォーマットされます。 現在のカルチャのカルチャに固有の書式設定情報の詳細については、次を参照してください。<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>です。  
  
> [!IMPORTANT]
>  このメソッドは、カルチャに依存するデータを使用するため、メソッドに複数の呼び出しが同一のデータを返すことを想定する必要がありますされません。 カルチャの現在の変更、ユーザーが個々 のカルチャ設定をオーバーライドするか、システムのカルチャのデータに更新が発生する場合、このメソッドによって返されるデータは変更できます。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.GetDateTimeFormats?displayProperty=nameWithType>メソッドです。 コンピューターの現在のカルチャ、ここでは EN-US ですべての可能な標準の日付と時刻の形式を使用して日付の文字列形式を表示します。  
  
 [!code-cpp[DateTime.GetDateTimeFormats#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.GetDateTimeFormats#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#1)]
 [!code-vb[DateTime.GetDateTimeFormats#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#1)]  
  
 この例には、次の出力が表示されます。  
  
```  
7/28/2009  
7/28/09  
07/28/09  
07/28/2009  
09/07/28  
2009-07-28  
28-Jul-09  
Tuesday, July 28, 2009  
July 28, 2009  
Tuesday, 28 July, 2009  
28 July, 2009  
Tuesday, July 28, 2009 5:23 AM  
Tuesday, July 28, 2009 05:23 AM  
Tuesday, July 28, 2009 5:23  
Tuesday, July 28, 2009 05:23  
July 28, 2009 5:23 AM  
July 28, 2009 05:23 AM  
July 28, 2009 5:23  
July 28, 2009 05:23  
Tuesday, 28 July, 2009 5:23 AM  
Tuesday, 28 July, 2009 05:23 AM  
Tuesday, 28 July, 2009 5:23  
Tuesday, 28 July, 2009 05:23  
28 July, 2009 5:23 AM  
28 July, 2009 05:23 AM  
28 July, 2009 5:23  
28 July, 2009 05:23  
Tuesday, July 28, 2009 5:23:15 AM  
Tuesday, July 28, 2009 05:23:15 AM  
Tuesday, July 28, 2009 5:23:15  
Tuesday, July 28, 2009 05:23:15  
July 28, 2009 5:23:15 AM  
July 28, 2009 05:23:15 AM  
July 28, 2009 5:23:15  
July 28, 2009 05:23:15  
Tuesday, 28 July, 2009 5:23:15 AM  
Tuesday, 28 July, 2009 05:23:15 AM  
Tuesday, 28 July, 2009 5:23:15  
Tuesday, 28 July, 2009 05:23:15  
28 July, 2009 5:23:15 AM  
28 July, 2009 05:23:15 AM  
28 July, 2009 5:23:15  
28 July, 2009 05:23:15  
7/28/2009 5:23 AM  
7/28/2009 05:23 AM  
7/28/2009 5:23  
7/28/2009 05:23  
7/28/09 5:23 AM  
7/28/09 05:23 AM  
7/28/09 5:23  
7/28/09 05:23  
07/28/09 5:23 AM  
07/28/09 05:23 AM  
07/28/09 5:23  
07/28/09 05:23  
07/28/2009 5:23 AM  
07/28/2009 05:23 AM  
07/28/2009 5:23  
07/28/2009 05:23  
09/07/28 5:23 AM  
09/07/28 05:23 AM  
09/07/28 5:23  
09/07/28 05:23  
2009-07-28 5:23 AM  
2009-07-28 05:23 AM  
2009-07-28 5:23  
2009-07-28 05:23  
28-Jul-09 5:23 AM  
28-Jul-09 05:23 AM  
28-Jul-09 5:23  
28-Jul-09 05:23  
7/28/2009 5:23:15 AM  
7/28/2009 05:23:15 AM  
7/28/2009 5:23:15  
7/28/2009 05:23:15  
7/28/09 5:23:15 AM  
7/28/09 05:23:15 AM  
7/28/09 5:23:15  
7/28/09 05:23:15  
07/28/09 5:23:15 AM  
07/28/09 05:23:15 AM  
07/28/09 5:23:15  
07/28/09 05:23:15  
07/28/2009 5:23:15 AM  
07/28/2009 05:23:15 AM  
07/28/2009 5:23:15  
07/28/2009 05:23:15  
09/07/28 5:23:15 AM  
09/07/28 05:23:15 AM  
09/07/28 5:23:15  
09/07/28 05:23:15  
2009-07-28 5:23:15 AM  
2009-07-28 05:23:15 AM  
2009-07-28 5:23:15  
2009-07-28 05:23:15  
28-Jul-09 5:23:15 AM  
28-Jul-09 05:23:15 AM  
28-Jul-09 5:23:15  
28-Jul-09 05:23:15  
July 28  
July 28  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
5:23 AM  
05:23 AM  
5:23  
05:23  
5:23:15 AM  
05:23:15 AM  
5:23:15  
05:23:15  
2009-07-28 05:23:15Z  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15 PM  
Tuesday, July 28, 2009 12:23:15  
Tuesday, July 28, 2009 12:23:15  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15 PM  
July 28, 2009 12:23:15  
July 28, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15 PM  
Tuesday, 28 July, 2009 12:23:15  
Tuesday, 28 July, 2009 12:23:15  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15 PM  
28 July, 2009 12:23:15  
28 July, 2009 12:23:15  
July, 2009  
July, 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">標準の日時書式指定文字列。</param>
        <summary>このインスタンスの値を、指定した標準の日時形式指定子によってサポートされるすべての文字列表記に変換します。</summary>
        <returns>要素を格納した文字列配列。要素は、<paramref name="format" /> 標準日時形式指定子で書式指定されたインスタンスの値を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`パラメーターには、標準日時形式指定子のいずれかを指定できます。 D、D、f、F、g、G、M (m)、O (または o) R (r)、s、t、T、u、U、および Y (または y) が含まれます。 詳細については、次を参照してください。[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)です。  
  
 戻り値の各要素は、現在のカルチャ情報を使用してフォーマットされます。 現在のカルチャのカルチャに固有の書式設定情報の詳細については、次を参照してください。<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>です。  
  
> [!IMPORTANT]
>  このメソッドは、カルチャに依存するデータを使用するため、メソッドに複数の呼び出しが同一のデータを返すことを想定する必要がありますされません。 カルチャの現在の変更、ユーザーが個々 のカルチャ設定をオーバーライドするか、システムのカルチャのデータに更新が発生する場合、このメソッドによって返されるデータは変更できます。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.GetDateTimeFormats%28System.Char%29>メソッドです。 現在のカルチャの長い形式の日付の書式指定子 ("D") を使用して日付の文字列形式を表示します。  
  
 [!code-csharp[DateTime.GetDateTimeFormats#3](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#3)]
 [!code-vb[DateTime.GetDateTimeFormats#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" />有効な標準日時形式指定子の文字ではないです。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの値を、標準日時形式指定子および指定したカルチャ固有の書式情報によってサポートされる、すべての文字列形式に変換します。</summary>
        <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたこのインスタンスの値を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって返される文字列の配列、<xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドは別個の呼び出しによって返される文字列の配列に結合する、 <xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29?displayProperty=nameWithType> "d"、"D"、"f"、"F"、"g"、"G"、"m"、"o"、"r"、"s"、"t"、"T"、"u"、"U"および"y"標準書式指定文字列を持つメソッドです。 標準書式指定子の詳細については、次を参照してください。[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)です。  
  
 指定されたカルチャに固有の情報を使用して、戻り値の各要素の形式が`provider`です。  
  
> [!IMPORTANT]
>  しない限り、メソッドに複数の呼び出しが同一のデータを返すことを想定しないでくださいため、このメソッドは、カルチャに依存するデータを使用して、`provider`は、<xref:System.Globalization.CultureInfo>インバリアント カルチャを表すオブジェクト。 ユーザーの個々 のカルチャ設定を上書きする場合、このメソッドによって返されるデータは変更できます`provider`システムのカルチャのデータの更新が発生する場合または`provider`です。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.GetDateTimeFormats%28System.IFormatProvider%29?displayProperty=nameWithType>メソッドです。 FR-FR カルチャのすべての可能な標準の日付と時刻の形式を使用して日付の文字列表現が表示されます。  
  
 [!code-cpp[DateTime.GetDateTimeFormats#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CPP/class1.cpp#2)]
 [!code-csharp[DateTime.GetDateTimeFormats#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#2)]
 [!code-vb[DateTime.GetDateTimeFormats#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#2)]  
  
 この例には、次の出力が表示されます。  
  
```  
28/07/2009  
28/07/09  
28.07.09  
28-07-09  
2009-07-28  
mardi 28 juillet 2009  
28 juil. 09  
28 juillet 2009  
mardi 28 juillet 2009 05:23  
mardi 28 juillet 2009 5:23  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23  
28 juil. 09 5:23  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23  
28 juillet 2009 5:23  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
mardi 28 juillet 2009 05:23:15  
mardi 28 juillet 2009 5:23:15  
mardi 28 juillet 2009 05.23  
mardi 28 juillet 2009 05 h 23  
28 juil. 09 05:23:15  
28 juil. 09 5:23:15  
28 juil. 09 05.23  
28 juil. 09 05 h 23  
28 juillet 2009 05:23:15  
28 juillet 2009 5:23:15  
28 juillet 2009 05.23  
28 juillet 2009 05 h 23  
28/07/2009 05:23  
28/07/2009 5:23  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23  
28/07/09 5:23  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23  
28.07.09 5:23  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23  
28-07-09 5:23  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23  
2009-07-28 5:23  
2009-07-28 05.23  
2009-07-28 05 h 23  
28/07/2009 05:23:15  
28/07/2009 5:23:15  
28/07/2009 05.23  
28/07/2009 05 h 23  
28/07/09 05:23:15  
28/07/09 5:23:15  
28/07/09 05.23  
28/07/09 05 h 23  
28.07.09 05:23:15  
28.07.09 5:23:15  
28.07.09 05.23  
28.07.09 05 h 23  
28-07-09 05:23:15  
28-07-09 5:23:15  
28-07-09 05.23  
28-07-09 05 h 23  
2009-07-28 05:23:15  
2009-07-28 5:23:15  
2009-07-28 05.23  
2009-07-28 05 h 23  
28 juillet  
28 juillet  
2009-07-28T05:23:15.0160000  
2009-07-28T05:23:15.0160000  
Tue, 28 Jul 2009 05:23:15 GMT  
Tue, 28 Jul 2009 05:23:15 GMT  
2009-07-28T05:23:15  
05:23  
5:23  
05.23  
05 h 23  
05:23:15  
5:23:15  
05.23  
05 h 23  
2009-07-28 05:23:15Z  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12:23:15  
mardi 28 juillet 2009 12.23  
mardi 28 juillet 2009 12 h 23  
28 juil. 09 12:23:15  
28 juil. 09 12:23:15  
28 juil. 09 12.23  
28 juil. 09 12 h 23  
28 juillet 2009 12:23:15  
28 juillet 2009 12:23:15  
28 juillet 2009 12.23  
28 juillet 2009 12 h 23  
juillet 2009  
juillet 2009  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDateTimeFormats">
      <MemberSignature Language="C#" Value="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetDateTimeFormats(char format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">日付と時刻の書式指定文字列。</param>
        <param name="provider">このインスタンスに関するカルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>このインスタンスの値を、指定した標準日時形式指定子およびカルチャ固有の書式情報によってサポートされる、すべての文字列表記に変換します。</summary>
        <returns>要素を格納した文字列配列。要素は、標準日時形式指定子のいずれかで書式指定されたこのインスタンスの値を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 フォーマット パラメーターには、標準日時形式指定子のいずれかを指定できます。 D、D、f、F、g、G、M (m)、O (または o) R (r)、s、t、T、u、U、および Y (または y) が含まれます。 詳細については、次を参照してください。[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)です。  
  
 指定されたカルチャに固有の情報を使用して、戻り値の各要素の形式が`provider`です。  
  
> [!IMPORTANT]
>  しない限り、メソッドに複数の呼び出しが同一のデータを返すことを想定しないでくださいため、このメソッドは、カルチャに依存するデータを使用して、`provider`は、<xref:System.Globalization.CultureInfo>インバリアント カルチャを表すオブジェクト。 ユーザーの個々 のカルチャ設定を上書きする場合、このメソッドによって返されるデータは変更できます`provider`システムのカルチャのデータの更新が発生する場合または`provider`です。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.GetDateTimeFormats%28System.Char%2CSystem.IFormatProvider%29>メソッドです。 FR-FR カルチャの短い形式の日付の書式指定子 ("d") を使用して日付の文字列表現が表示されます。  
  
 [!code-csharp[DateTime.GetDateTimeFormats#4](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.GetDateTimeFormats/CS/class1.cs#4)]
 [!code-vb[DateTime.GetDateTimeFormats#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.GetDateTimeFormats/VB/class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="format" />有効な標準日時形式指定子の文字ではないです。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public TypeCode GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TypeCode GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.GetTypeCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.TypeCode" /> 値型の <see cref="T:System.DateTime" /> を返します。</summary>
        <returns>列挙型定数 <see cref="F:System.TypeCode.DateTime" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の時間の部分を取得します。</summary>
        <value>DateTime の時間部分 (0 ～ 23)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値、 <xref:System.DateTime.Hour%2A> 24 時間制を使用してプロパティが常に表現します。 日付と時刻を 12 時間形式の時間を表す文字列を取得する、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>または<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>"h"カスタム書式指定子を持つメソッドです。 例:  
  
 [!code-csharp[System.DateTime.Hour#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Hour/cs/Hour1.cs#1)]
 [!code-vb[System.DateTime.Hour#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Hour/vb/Hour1.vb#1)]  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Hour%2A>プロパティです。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsDaylightSavingTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.DateTime" /> のインスタンスが、現在のタイム ゾーンの夏時間の期間内であるかどうかを示します。</summary>
        <returns>
          <see langword="true" /> プロパティの値が <see cref="P:System.DateTime.Kind" /> または <see cref="F:System.DateTimeKind.Local" /> で、この <see cref="F:System.DateTimeKind.Unspecified" /> インスタンスの値がローカル タイム ゾーンの夏時間の期間内にある場合は <see cref="T:System.DateTime" />。<see langword="false" /> が <see cref="P:System.DateTime.Kind" /> の場合は <see cref="F:System.DateTimeKind.Utc" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを判断するかどうか、現在<xref:System.DateTime>値がによって返されるローカル タイム ゾーンの夏時間の範囲に収まる、<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>プロパティです。 値を取得することで、タイム ゾーンが夏時間をサポートするかどうかを決定できます、<xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A?displayProperty=nameWithType>プロパティです。 夏時間のタイム ゾーンの夏時間との切り替えが取得することによって発生したときを判断できます、<xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType>タイム ゾーンのによって返される配列<xref:System.TimeZoneInfo.GetAdjustmentRules%2A?displayProperty=nameWithType>プロパティです。  
  
 場合、現在<xref:System.DateTime>メソッドを返しますの値は、ローカル タイム ゾーンで、あいまいであるか無効な時刻のいずれかを表す、`false`です。  
  
 [!INCLUDE[winxp](~/includes/winxp-md.md)] 、システム、<xref:System.DateTime.IsDaylightSavingTime%2A>メソッドは、現在のインスタンスに、夏時間があるかどうかを決定するときに現在の調整規則のみを認識します。 その結果、メソッド可能性がありますいない正確に報告、現在のインスタンスが、現在の調整規則を有効にされる前に、の期間が夏時間をするかどうか。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLeapYear">
      <MemberSignature Language="C#" Value="public static bool IsLeapYear (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsLeapYear(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.IsLeapYear(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">4 桁の年。</param>
        <summary>指定された年が閏年かどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> が閏年である場合は <paramref name="year" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `year`4 桁の数字 10 進; として指定されます。たとえば、1996 です。  
  
 `year`常に、構成のグレゴリオ暦カレンダーにおける年として解釈されます。 を他のカレンダーで特定の年が閏年であるをしたかどうかを判断するには、そのカレンダー オブジェクトを呼び出す`IsLeapYear`メソッドです。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.IsLeapYear%2A>メソッド 1994 と 2014 の間でどの年がうるう年かを判断します。 結果も示すときに、<xref:System.DateTime.AddYears%2A>閏日に年を追加するメソッドを使用します。  
  
 [!code-csharp[System.DateTime.IsLeapYear#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/cs/IsLeapYear1.cs#1)]
 [!code-vb[System.DateTime.IsLeapYear#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.IsLeapYear/vb/IsLeapYear1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> が 1 未満であるか、または 9999 を超えています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public DateTimeKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeKind Kind" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスが表す時刻の種類 (現地時刻、世界協定時刻 (UTC)、または、そのどちらでもない) を示す値を取得します。</summary>
        <value>現在の時刻が表すものを示す列挙値の 1 つ。 既定値は、<see cref="F:System.DateTimeKind.Unspecified" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 明示的に設定することができます、<xref:System.DateTime.Kind%2A>プロパティの新しい<xref:System.DateTime>を特定の値<xref:System.DateTimeKind>値を呼び出して、<xref:System.DateTime.SpecifyKind%2A>メソッドです。  
  
 <xref:System.DateTime.Kind%2A>プロパティでは、<xref:System.DateTime>世界協定時刻 (UTC) または現地時刻のいずれかを明確に反映するように値。 これに対し、<xref:System.DateTimeOffset>構造体は時間で 1 つのポイントとして任意のタイム ゾーンでいつでもを明確に反映できます。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.SpecifyKind%2A>メソッドを示すために、<xref:System.DateTime.Kind%2A>プロパティに影響、<xref:System.DateTime.ToLocalTime%2A>と<xref:System.DateTime.ToUniversalTime%2A>変換メソッド。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTime" /> の最大有効値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値は等価 23:59:59.9999999 (utc)、12 月 31 日、グレゴリオ暦の 00時 00分: 00 (utc)、10000 年 1 月 1 日の前に 1 つだけの 100 ナノ秒タイマー刻みで 9999 です。  
  
 などのいくつかのカレンダー、<xref:System.Globalization.UmAlQuraCalendar>より前である日付範囲をサポートして<xref:System.DateTime.MaxValue>です。 このような場合は、アクセスしようと<xref:System.DateTime.MaxValue>変数の代入または書式設定および解析操作でスローできます、<xref:System.ArgumentOutOfRangeException>です。 値を取得するのではなく<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、特定のカルチャの最新の有効な日付値からの値を取得することができます、`System.Globalization.CultureInfo.DateTimeFormat.Calendar.MaxSupportedDateTime`プロパティです。  
  
   
  
## Examples  
 次の例のインスタンスを作成、<xref:System.DateTime>コンス トラクターに渡して、オブジェクト、<xref:System.Int64>タイマー刻みの数を表す値です。 コンス トラクターを呼び出す前に、例によりこの値がより大きいまたは等しい`DateTime.MinValue.Ticks`以下と等しい`DateTime.MaxValue.Ticks`です。 スローしない場合、<xref:System.ArgumentOutOfRangeException>です。  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付のミリ秒の部分を取得します。</summary>
        <value>DateTime のミリ秒部分 (0 ～ 999)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 文字列形式を表示することができます、 <xref:System.DateTime.Millisecond%2A> "fff"書式指定子を使用してプロパティです。 たとえば、次のコードは、コンソールに日時 (ミリ秒) の数を表す文字列を表示します。  
  
 [!code-csharp[System.DateTime.Millisecond#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#1)]
 [!code-vb[System.DateTime.Millisecond#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#1)]  
  
 "O"標準書式指定子を使用して、日付と時刻の値の他のコンポーネントと共にミリ秒の部分を表示することもできます。 例:  
  
 [!code-csharp[System.DateTime.Millisecond#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#2)]
 [!code-vb[System.DateTime.Millisecond#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#2)]  
  
 ただし、"o"書式指定子は、小さいよりもラウンド トリップを格納するを表示するため、<xref:System.DateTime>値。 次の例のように、カスタム書式指定文字列を使用して、他の日付と時刻のコンポーネントと共に (ミリ秒) を表示することもできます。  
  
 [!code-csharp[System.DateTime.Millisecond#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Millisecond/cs/Millisecond.cs#3)]
 [!code-vb[System.DateTime.Millisecond#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Millisecond/vb/Millisecond.vb#3)]  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Millisecond%2A>プロパティです。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の分の部分を取得します。</summary>
        <value>DateTime の分の部分 (0 ～ 59)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例で、<xref:System.DateTime.Minute%2A>プロパティです。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTime MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTime MinValue" />
      <MemberSignature Language="DocId" Value="F:System.DateTime.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.DateTime" /> の最小有効値を表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数の値は、グレゴリオ暦の 0001 00:00:00.0000000 (utc)、1 月 1 日に相当します。  
  
 <xref:System.DateTime.MinValue>日付と時刻が割り当てられている定義に、初期化されていない<xref:System.DateTime>変数。 次に例を示します。  
  
 [!code-csharp[System.DateTime.MinValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#1)]
 [!code-vb[System.DateTime.MinValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#1)]  
  
 <xref:System.DateTime.MinValue>と<xref:System.DateTime.MaxValue>プロパティを使用して、値に渡す前に、サポートされている範囲内にあることを確認、<xref:System.DateTime>コンス トラクターです。 コード例」のセクションでは、この使用法を示しています。  
  
   
  
## Examples  
 次の例のインスタンスを作成、<xref:System.DateTime>コンス トラクターに渡して、オブジェクト、<xref:System.Int64>タイマー刻みの数を表す値です。 コンス トラクターを呼び出す前に、例によりこの値がより大きいまたは等しい`DateTime.MinValue.Ticks`以下と等しい`DateTime.MaxValue.Ticks`です。 スローしない場合、<xref:System.ArgumentOutOfRangeException>です。  
  
 [!code-csharp[System.DateTime.MinValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.MinValue/cs/MinValue.cs#2)]
 [!code-vb[System.DateTime.MinValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.MinValue/vb/MinValue.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の月の部分を取得します。</summary>
        <value>DateTime の月部分 (1 ～ 12)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例で、<xref:System.DateTime.Month%2A>プロパティです。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンピューター上の現在の日時を現地時刻で表した <see cref="T:System.DateTime" /> オブジェクトを取得します。</summary>
        <value>現在の現地日時を値として保持するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Now%2A>プロパティから返される、<xref:System.DateTime>を現在の日付とローカル コンピューターの時刻を表す値です。 違いがあることに注意してください、<xref:System.DateTime>を 0001 年 1 月 1 日の午前 0 時から経過したタイマー刻みの数を表す値の文字列表現と<xref:System.DateTime>値で、カルチャに固有の仕様に固有の書式で日付と時刻の値を表します。 日付と時刻の書式設定の値については、次を参照してください。、<xref:System.DateTime.ToString%2A>メソッドです。 次の例では、さまざまなカルチャ固有の形式で、短い形式の日付と時刻の文字列が表示されます。  
  
 [!code-cpp[System.DateTime.Now#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now1.cpp#2)]
 [!code-csharp[System.DateTime.Now#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now1.cs#2)]
 [!code-vb[System.DateTime.Now#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now1.vb#2)]  
  
 このプロパティの解決は、基になるオペレーティング システムに依存するシステム タイマーに依存します。 0.5 ~ 15 ミリ秒を指定する傾向にあります。 その結果への呼び出しを繰り返す、<xref:System.DateTime.Now%2A>短時間の間隔中、ループなどのプロパティが同じ値を返す可能性があります。  
  
 <xref:System.DateTime.Now%2A>プロパティは、パフォーマンスの測定に頻繁に使用します。 ただし、その低解像度、ため、ベンチマーク ツールとして使用するのに適したはありません。 優れた代替手段は、使用する、<xref:System.Diagnostics.Stopwatch>クラスです。  
  
 以降、.NET Framework version 2.0 では、戻り値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティから返される<xref:System.DateTimeKind.Local?displayProperty=nameWithType>です。  
  
> [!NOTE]
>  使用することも、<xref:System.DateTimeOffset.Now%2A?displayProperty=nameWithType>プロパティを現在の日付と時刻を取得します。 これにより、現地時刻を時刻で、さらによって時刻値をポータブル コンピューター間で単一ポイントとして明確に表現できます。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.Now%2A>と<xref:System.DateTime.UtcNow%2A>(UTC) 日付と時刻に調整される現在のローカルの日付と時刻と現在の世界を取得するプロパティです。 値を持つと共に、文字列を表示するカルチャの数値の書式指定規則を使用して、その<xref:System.DateTime.Kind%2A>プロパティです。  
  
 [!code-cpp[System.DateTime.Now#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.datetime.now/cpp/now2.cpp#3)]
 [!code-csharp[System.DateTime.Now#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.now/cs/now2.cs#3)]
 [!code-vb[System.DateTime.Now#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.now/vb/now2.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTime operator + (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Addition(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">追加する日付と時刻の値。</param>
        <param name="t">加算する時間間隔。</param>
        <summary>指定した日付と時刻に指定した時間間隔を加算して、新しい日付と時刻を作成します。</summary>
        <returns><paramref name="d" /> に <paramref name="t" /> を加算した値であるオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[この演算子を同等の方法は、します。<xref:System.DateTime.Add%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 次の例では、加算演算子を示します。  
  
 [!code-cpp[DateTime Operators#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#1)]
 [!code-csharp[DateTime Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#1)]
 [!code-vb[DateTime Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">比較する最初のオブジェクト。</param>
        <param name="d2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> の 2 つの指定したインスタンスが等しいかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> と <paramref name="d1" /> が同じ日付と時刻を表す場合は <paramref name="d2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Equality%2A>演算子は、次の 2 つあるかどうかを判定<xref:System.DateTime>タイマー刻みの数を比較することによって値が等しい。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンの時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等の方法は、します。<xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 次の例では、等値演算子を示します。  
  
 [!code-cpp[DateTime Operators#2](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime Operators/CPP/class1.cpp#2)]
 [!code-csharp[DateTime Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime Operators/CS/class1.cs#2)]
 [!code-vb[DateTime Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime Operators/VB/class1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した <see cref="T:System.DateTime" /> が、指定したもう 1 つの <see cref="T:System.DateTime" /> より後の時刻かどうかを判断します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="t1" /> より遅い場合は <paramref name="t2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThan%2A>演算子が 2 つの間の関係を決める<xref:System.DateTime>タイマー刻みの数を比較することによっての値。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンの時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等の方法は、します。<xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した 1 つの <see cref="T:System.DateTime" /> が、指定した別の <see cref="T:System.DateTime" /> と同じ日時またはそれより後の日時を表しているかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="t1" /> と同じかそれより遅い場合は <paramref name="t2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_GreaterThanOrEqual%2A>演算子が 2 つの間の関係を決める<xref:System.DateTime>タイマー刻みの数を比較することによっての値。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンの時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等の方法は、します。<xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">比較する最初のオブジェクト。</param>
        <param name="d2">比較する 2 番目のオブジェクト。</param>
        <summary><see cref="T:System.DateTime" /> の 2 つの指定したインスタンスが等しいかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> と <paramref name="d1" /> が同じ日付と時刻を表していない場合は <paramref name="d2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Inequality%2A>演算子は、次の 2 つあるかどうかを判定<xref:System.DateTime>タイマー刻みの数を比較することによって値が等しくないです。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンの時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等の方法は、します。<xref:System.DateTime.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した <see cref="T:System.DateTime" /> が、指定したもう 1 つの <see cref="T:System.DateTime" /> より前の時刻かどうかを判断します。</summary>
        <returns>
          <see langword="true" /> が <paramref name="t1" /> より早い場合は <paramref name="t2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThan%2A>演算子が 2 つの間の関係を決める<xref:System.DateTime>タイマー刻みの数を比較することによっての値。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンの時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等の方法は、します。<xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (DateTime t1, DateTime t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTime t1, valuetype System.DateTime t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.DateTime" />
        <Parameter Name="t2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="t1">比較する最初のオブジェクト。</param>
        <param name="t2">比較する 2 番目のオブジェクト。</param>
        <summary>指定した 1 つの <see cref="T:System.DateTime" /> が、指定した別の <see cref="T:System.DateTime" /> と同じ日時またはそれより前の日時を表しているかどうかを判断します。</summary>
        <returns>
          <see langword="true" />場合<paramref name="t1" />が同じか、またはよりも前<paramref name="t2" />、それ以外の<see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_LessThanOrEqual%2A>演算子が 2 つの間の関係を決める<xref:System.DateTime>タイマー刻みの数を比較することによっての値。 比較する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンの時刻を表すことを確認します。 これを行うには、<xref:System.DateTime.Kind%2A> プロパティの値を比較します。  
  
 この演算子を同等の方法は、します。<xref:System.DateTime.Compare%28System.DateTime%2CSystem.DateTime%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (DateTime d1, DateTime d2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTime d1, valuetype System.DateTime d2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d1" Type="System.DateTime" />
        <Parameter Name="d2" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="d1">減算対象の日付および時刻の値 (被減数)。</param>
        <param name="d2">減算する日付および時刻の値 (減数)。</param>
        <summary>指定した日付と時刻から指定したもう 1 つの日付と時刻を減算して、時間間隔を返します。</summary>
        <returns><paramref name="d1" /> と <paramref name="d2" /> の間の時間間隔、つまり <paramref name="d1" /> から <paramref name="d2" /> を引いた値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.op_Subtraction%28System.DateTime%2CSystem.DateTime%29>メソッドがの値を考慮していない、 <xref:System.DateTime.Kind%2A> 、2 つのプロパティ<xref:System.DateTime>減算を実行するときの値します。 減算する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンの時刻を表すことを確認してください。 それ以外の場合、結果は、タイム ゾーン間で相違点が含まれます。  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=nameWithType>メソッドは、減算を実行するときにタイム ゾーン間で相違点を考慮します。  
  
 この演算子を同等の方法は、します。<xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 次の例で、<xref:System.DateTime.Subtract%2A>メソッドと減算演算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTime operator - (DateTime d, TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTime op_Subtraction(valuetype System.DateTime d, valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.DateTime" />
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="d">減算される日時の値。</param>
        <param name="t">減算する時間間隔。</param>
        <summary>指定した日付と時刻から指定した時間間隔を減算して、新しい日付と時刻を返します。</summary>
        <returns><paramref name="d" /> の値から <paramref name="t" /> の値を減算した値を保持するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、タイマー刻みの数を減算`t`のタイマー刻み値から`d`です。  
  
 この演算子を同等の方法は、します。<xref:System.DateTime.Subtract%28System.DateTime%29?displayProperty=nameWithType>  
  
## Examples  
 次の例で、<xref:System.DateTime.Subtract%2A>メソッドと減算演算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果として返された <see cref="T:System.DateTime" /> が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このセクションの内容:  
  
 [オーバー ロードされたメソッドの構文](#Syntax)   
 [パラメーター](#Params)   
 [戻り値](#Returns)   
 [例外](#Exceptions)   
 [どのメソッドが呼び出ししますか。](#Tasks)   
 [解析する文字列](#StringToParse)   
 [解析およびカルチャの規則](#Culture)   
 [要素の解析とスタイル要素](#Styles)   
 次に例を示します。   
 [DateTime.Parse(String)](#Parse1_Example)  
 [DateTime.Parse (String, IFormatProvider)](#Parse2_Example)  
 [DateTime.Parse (文字列、IFormatProvider、DateTimeStyles)](#Parse3_Example)  
[バージョン情報](#Versions)  
  
<a name="Syntax"></a>   
## <a name="overloaded-method-syntax"></a>オーバー ロードされたメソッドの構文  
 オーバー ロードを選択するための追加のガイダンスについては、次を参照してください[どのメソッドが呼び出ししますか?。](#Tasks)  
  
 `DateTime.Parse(String s)`  
 変換には、現在のスレッド カルチャの書式指定規則を使用し、に基づいて文字列を解釈する、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>スタイル フラグ ([例](#Parse1_Example))。  
  
 `DateTime.Parse(String s, IFormatProvider provider)`  
 変換には、指定されたカルチャの書式指定規則を使用し、に基づいて文字列を解釈する、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>スタイル フラグ ([例](#Parse2_Example))。  
  
 `DateTime.Parse(String s, IFormatProvider provider, DateTypeStyles styles)`  
 変換には、指定されたカルチャの書式指定規則を使用して、指定したスタイル フラグに基づいて文字列を解釈 ([例](#Parse3_Example))。  

<a name="Params"></a>   
## <a name="parameters"></a>パラメーター  
 これは、パラメーターの完全な一覧、<xref:System.DateTime.Parse%2A>メソッドです。 各オーバー ロードで使用するパラメーター、上記のオーバー ロードの構文を参照してください。  
  
|パラメーター|型|説明|  
|---------------|----------|-----------------|  
|`s`|<xref:System.String>|変換する日付と時刻を表す文字列。 参照してください[解析する文字列](#StringToParse)です。<br /><br /> 既定値: なし (パラメーターはすべてのオーバー ロードで使用)|  
|`provider`|<xref:System.IFormatProvider>|`s` に関するカルチャ固有の書式情報を提供するオブジェクト。 参照してください[解析およびカルチャの規則](#Culture)です。<br /><br /> 既定値:<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>|  
|`styles`|<xref:System.Globalization.DateTimeStyles>|解析操作を成功させるために `s` で使用できるスタイル要素を示し、現在のタイム ゾーンまたは現在の日付に関連して解析した日付を解釈する方法を定義する列挙値のビットごとの組み合わせ。 通常指定する値は、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType> です。 参照してください[解析とスタイル要素](#Styles)です。<br /><br /> 既定値:<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>|  
  
<a name="Returns"></a>   
## <a name="return-value"></a>戻り値  
 型: <xref:System.DateTime>  
`s` に含まれる日時と等価のオブジェクト。  
  
 一般に、<xref:System.DateTime.Parse%2A>メソッドを返します、<xref:System.DateTime>オブジェクト<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>します。 ただし、<xref:System.DateTime.Parse%2A>メソッドもタイム ゾーンの変換を実行しての値を設定、<xref:System.DateTime.Kind%2A>プロパティの値に応じて異なる方法で、`s`と`styles`パラメーター。  
  
|If|タイム ゾーンの変換|Kind プロパティ|  
|--------|--------------------------|-------------------|  
|`s`タイム ゾーン情報が含まれています。|日付と時刻は、ローカル タイム ゾーンの時刻に変換されます。|<xref:System.DateTimeKind?displayProperty=nameWithType>|  
|`s`タイム ゾーン情報を格納および`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>フラグ。|日付と時刻が世界協定時刻 (UTC) に変換されます。|<xref:System.DateTimeKind?displayProperty=nameWithType>|  
|`s`Z または GMT タイム ゾーン指定子が含まれていますと`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.RoundtripKind>フラグ。|日付と時刻は UTC として解釈されます。|<xref:System.DateTimeKind?displayProperty=nameWithType>|  
  
 次の例では、ローカル タイム ゾーンの時刻にタイム ゾーン情報を含む日付の文字列に変換します。  
  
 [!code-csharp[System.DateTime.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse2.cs#2)]
 [!code-vb[System.DateTime.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse2.vb#2)]  
  
 日付と時刻の値を維持することもできます。<xref:System.DateTime.Kind%2A>プロパティ、書式設定とを使用して操作を解析中に、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグ。 次の例を示しています、<xref:System.Globalization.DateTimeStyles.RoundtripKind>フラグに影響を与える、解析操作で<xref:System.DateTime>は、"o"、"r"または"u"書式指定子を使用して文字列に変換する値。  
  
 [!code-csharp[System.DateTime.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse5.cs#5)]
 [!code-vb[System.DateTime.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse5.vb#5)]  
  
<a name="Exceptions"></a>   
## <a name="exceptions"></a>例外  
  
|例外|条件|によってスローされます。|  
|---------------|---------------|---------------|  
|<xref:System.ArgumentNullException>|`s` は `null` です。|すべてのオーバー ロード|  
|<xref:System.FormatException>|`s`有効な文字列形式の日付と時刻は含まれません。|すべてのオーバー ロード|  
|<xref:System.ArgumentException>|`styles`無効な組み合わせが含まれています<xref:System.Globalization.DateTimeStyles>値 (たとえば、その両方が含まれます<xref:System.Globalization.DateTimeStyles.AssumeLocal>と<xref:System.Globalization.DateTimeStyles.AssumeUniversal>)。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|  
  
<a name="Tasks"></a>   
## <a name="which-method-do-i-call"></a>どのメソッドが呼び出ししますか。  
  
|目的|Call|  
|--------|----------|  
|現在のカルチャの規則を使用して日付と時刻の文字列を解析します。|<xref:System.DateTime.Parse%28System.String%29>オーバー ロード|  
|特定のカルチャの規則を使用して日付と時刻の文字列を解析します。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29>オーバー ロード (を参照してください[解析および文化的慣習](#Culture))|  
|(空白文字や空白) などの特殊なスタイル要素を含む日付と時刻の文字列を解析します。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>オーバー ロード|  
|日付と時刻の文字列を解析し、UTC またはローカル時刻への変換を実行します。|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>オーバー ロード|  
|例外を処理せず、日付と時刻の文字列を解析します。|<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> メソッド|  
|書式設定操作によって作成された日付と時刻の値 (ラウンドト リップ) を復元します。|"O"または"r"標準書式指定文字列を渡す、<xref:System.DateTime.ToString%28System.String%29>メソッド、および呼び出し、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>を持つオーバー ロード<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>|  
|コンピューター (および可能性のあるカルチャ) の境界を越えて固定形式で日付と時刻の文字列を解析します。|<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>または<xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType>メソッド|  
  
<a name="StringToParse"></a>   
## <a name="the-string-to-parse"></a>解析する文字列  
 <xref:System.DateTime.Parse%2A>メソッドに日付と時刻の値の文字列形式に変換しようとしました。 その<xref:System.DateTime>と同等です。 解析しようと`s`スローされることがなく完全に、<xref:System.FormatException>例外。  
  
> [!IMPORTANT]
>  呼び出すときに例外処理を使用する日付と時刻の文字列形式が認識されているパターンに従う必要があります、ため常にする必要があります、<xref:System.DateTime.Parse%2A>ユーザー入力を解析します。 例外を処理しない場合を呼び出すことができます、<xref:System.DateTime.TryParse%2A?displayProperty=nameWithType>日付と時刻の文字列を解析するメソッド、解析操作が成功したかどうかを示す値を返します。  
  
 解析する文字列には、形式は次のいずれかを実行できます。  
  
-   日付と時刻部分の文字列です。  
  
-   日付は時間のコンポーネントがありません。 文字列です。 時刻部分がない場合、メソッドの深夜 12時 00分と見なされます。 基づく年に変換されます、日付部分に 2 桁の年がある場合、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>の現在のカルチャの現在の暦または特定のカルチャの現在の暦 (null 以外でオーバー ロードを使用する場合`provider`引数)。  
  
-   時間がない日付部分の文字列です。 メソッドがない限り、現在の日付を想定、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>オーバー ロードして含める<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>で、`styles`でいる場合、メソッドが想定 1 月 1 日 0001 パラメーター。  
  
-   タイム ゾーン情報が含まれており、ISO 8601 に準拠している文字列。 次の例では、最初の文字列は世界協定時刻 (UTC) を指定し、2 番目の文字列が 7 時間であるタイム ゾーンの時刻を指定 (utc) より前。  
  
     2008-11-01T19:35:00.0000000Z   
    2008-11-01T19:35:00.0000000-07時 00分  
  
-   GMT 指定子が含まれ、;、RFC 1123 形式に準拠する文字列例えば：  
  
     Sat、01 2008年 11 月 19時 35分: 00 GMT  
  
-   日付と時刻とタイム ゾーン オフセットの情報; を含む文字列例えば：  
  
     03/01/2009 05:42:00 -5:00  
  
 場合`s`解析メソッドで使用されるカレンダーで閏年閏日の文字列表現です (を参照してください[解析およびカルチャの規則](#Culture)) では、<xref:System.DateTime.Parse%2A>メソッド解析`s`が正常にします。 場合`s`閏日で、うるう年以外、メソッドでのスローの文字列表現です、<xref:System.FormatException>例外。  
  
 <xref:System.DateTime.Parse%2A>メソッドが日付の文字列表現を解析する試行し、異なるカルチャ間で文字列を解析しようとして、現在または指定されたカルチャの書式指定規則を使用して、時間が失敗することができます。 異なるロケール間で特定の日付と時刻の形式を解析のオーバー ロードのいずれかの操作を使用して、<xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType>メソッドと書式指定子を提供します。  
  
<a name="Culture"></a>   
## <a name="parsing-and-cultural-conventions"></a>解析およびカルチャの規則  
 すべてのオーバー ロード、<xref:System.DateTime.Parse%2A>に解析する文字列が ISO 8601 形式のパターンに準拠していない限り、メソッドはカルチャに依存します。 内の情報を書式設定、解析操作ポイント、<xref:System.Globalization.DateTimeFormatInfo>次のように派生したオブジェクト。  
  
|呼び出す場合|および`provider`は|書式設定情報はからを派生します。|  
|-----------------|-----------------------|--------------------------------------------|  
|<xref:System.DateTime.Parse%28System.String%29>|-|現在のスレッド カルチャ (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>プロパティ)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|<xref:System.Globalization.DateTimeFormatInfo> オブジェクト|指定した<xref:System.Globalization.DateTimeFormatInfo>オブジェクト|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|`null`|現在のスレッド カルチャ (<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType>プロパティ)|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|<xref:System.Globalization.CultureInfo> オブジェクト|<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> プロパティ|  
|<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29> または <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>|カスタム<xref:System.IFormatProvider>の実装|<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> メソッド|  
  
 書式設定情報からの派生、<xref:System.Globalization.DateTimeFormatInfo>オブジェクト、<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType>プロパティは解析操作で使用する暦を定義します。  
  
 使用して日付と時刻の文字列を解析する場合、<xref:System.Globalization.DateTimeFormatInfo>を持つオブジェクトは、標準的なカルチャの別の設定をカスタマイズするを使用して、<xref:System.DateTime.ParseExact%2A>メソッドの代わりに、<xref:System.DateTime.Parse%2A>メソッドが成功した変換の可能性を向上させるためにします。 非標準の日付と時刻の文字列は、複雑で解析するが困難を指定できます。 <xref:System.DateTime.Parse%2A>メソッドが失敗するは、複数の暗黙的な解析パターンを含む文字列の解析を試みます。 これに対し、<xref:System.DateTime.ParseExact%2A>メソッドでは、明示的に成功する可能性のある 1 つ以上の正確な解析のパターンを指定する必要があります。 詳細については、の「DateTimeFormatInfo と動的データ」セクションを参照してください、<xref:System.Globalization.DateTimeFormatInfo>トピックです。  
  
> [!IMPORTANT]
>  特定のカルチャの書式指定規則は動的なので、変更される可能性があることができますに注意してください。 または、既定値 (現在) のカルチャの書式指定規則に依存する解析操作を指定することを意味、<xref:System.IFormatProvider>インバリアント カルチャ以外のカルチャを表すオブジェクトが予期せず失敗する場合、次のいずれかが発生します。  
>   
> -   カルチャに固有のデータが、.NET Framework または .NET Framework の既存のバージョンに更新プログラムの結果としてメジャーまたはマイナー バージョン間で変更されました。  
> -   カルチャに固有のデータには、ユーザーの基本設定をコンピューターから別のコンピューターまたはセッションごとに異なることが反映されます。  
> -   カルチャに固有のデータでは、標準のカルチャまたはカスタム カルチャの設定をオーバーライドする置換カルチャを表します。  
>   
>  カルチャのデータの変更に関連付けられているデータと時刻の文字列を解析中に問題を防ぐためには、日付と時刻の文字列を解析するには、インバリアント カルチャを使用して、または呼び出すことができます、<xref:System.DateTime.ParseExact%2A>または<xref:System.DateTime.TryParseExact%2A>メソッドと正確な形式を指定します。解析する文字列。 シリアル化して日付と時刻のデータを逆シリアル化するか、またはを使用して、インバリアント カルチャの書式指定規則をシリアル化し逆シリアル化できる場合、<xref:System.DateTime>バイナリ形式の値。  
>   
>  詳細については、"動的なカルチャ"のデータ セクションを参照してください、 <xref:System.Globalization.CultureInfo> 」セクションのトピックと「Persisting DateTime 値」、<xref:System.DateTime>トピックです。  
  
<a name="Styles"></a>   
## <a name="parsing-and-style-elements"></a>要素の解析とスタイル要素  
 すべて<xref:System.DateTime.Parse%2A>オーバー ロード内の先頭、内部、または末尾の空白文字を無視する`s`です。 日付と時刻の先頭と末尾のシャープ記号文字 (「#」、U +0 0023)、ペアで囲まできますいずれかで最後できますや以上の NULL 文字 (u+0000) してください。  
  
 さらに、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>オーバー ロードは、`styles`パラメーターの 1 つまたは複数のメンバーで構成される、<xref:System.Globalization.DateTimeStyles>列挙します。 このパラメーターを定義する方法`s`を解釈して、解析操作をどのように変換する必要があります`s`日付と時刻にします。 次の表に、それぞれの効果<xref:System.Globalization.DateTimeStyles>解析操作でのメンバーです。  
  
|DateTimeStyles メンバー|変換への影響|  
|---------------------------|--------------------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、それを UTC に変換、次のようにします。<br /><br /> If `s` 、タイム ゾーン オフセットが含まれて 場合、または`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeLocal>フラグは、メソッド呼び出し文字列を解析して<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値です。Utc を基準とし、セット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。<br />If `s` (UTC) を表すことを示しますまたは`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AssumeUniversal>フラグは、メソッドは、文字列を解析して、返されたでタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。<br />その他のすべてのケースでは、フラグには効果はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|この値は無視されます。 内部の空白文字は常に日付と時刻の要素に使用の`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|この値は無視されます。 先頭の空白文字は常に日付と時刻の要素に使用の`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|この値は無視されます。 末尾の空白文字は常に日付と時刻の要素に使用の`s`します。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定する`s`先頭、内部、および、末尾の空白を含めることがあります。 これが既定の動作です。 より制限の厳しい指定することによって、オーバーライドできません<xref:System.Globalization.DateTimeStyles>などの列挙値<xref:System.Globalization.DateTimeStyles.None>です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定された場合`s`がありませんが、現地時刻、タイム ゾーン情報が使用されます。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>フラグが含まれている、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>に値が設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`と見なされます、UTC タイム ゾーン情報がありません。 しない限り、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>メソッドが返されたに変換して、フラグが存在<xref:System.DateTime>UTC から値を現地時刻と設定をその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効な場合は、この値が無視されます。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイム ゾーン情報を含む文字列、しようとする日付と時刻の文字列に変換しないように、<xref:System.DateTime>と共に現地時間を表す値の<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind?displayProperty=nameWithType>です。 呼び出すことによってこのような文字列を作成する通常、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>メソッドと、"o"、"r"または"u"標準書式指定子を使用しています。|  
  
<a name="Parse1_Example"></a>   
## <a name="datetimeparsestring-example"></a>DateTime.Parse(String) 例  
 次の例は、既定のプロバイダーとスタイルの値を使用していくつかの日付と時刻の値の文字列表現を解析します例の出力結果を生成するために使用されるコンピューターの現在のスレッド カルチャは EN-US カルチャの書式指定規則。、および<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>フラグのスタイルを設定します。 処理、<xref:System.FormatException>メソッドがいくつか他のカルチャを使用して、日付と時刻の文字列形式を解析しようとするときにスローされる例外の規則を書式設定します。 現在のスレッド カルチャの書式指定規則を使用しない日付と時刻の値を正しく解析する方法も示しています。  
  
 [!code-csharp[System.DateTime.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse1.cs#1)]
 [!code-vb[System.DateTime.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse1.vb#1)]  
  
<a name="Parse2_Example"></a>   
## <a name="datetimeparsestring-iformatprovider-example"></a>(String, IFormatProvider) DateTime.Parse 例  
 次の例では、EN-US、FR-FR、DE-DE カルチャの規則を使用して日付文字列の配列を解析します。 異なるカルチャ間で 1 つの日付の文字列形式を異なる方法で解釈できることを示します。  
  
 [!code-csharp[System.DateTime.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse3.cs#3)]
 [!code-vb[System.DateTime.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse3.vb#3)]  
  
<a name="Parse3_Example"></a>   
## <a name="datetimeparsestring-iformatprovider-datetimestyles-example"></a>DateTime.Parse (文字列、IFormatProvider、DateTimeStyles) の例  
 次の例で、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>メソッドの値を表示し、<xref:System.DateTime.Kind%2A>結果のプロパティ<xref:System.DateTime>値。  
  
 [!code-csharp[System.DateTime.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Parse/cs/Parse4.cs#4)]
 [!code-vb[System.DateTime.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Parse/vb/Parse4.vb#4)]  
  
<a name="Versions"></a>   
## <a name="version-information"></a>バージョン情報  
 .NET Framework  
 すべてのオーバー ロードではサポートされて: 4.5、4、3.5、3.0、2.0、1.1、1.0  
  
 .NET Framework Client Profile  
 すべてのオーバー ロードではサポートされて: 4、3.5 SP1  
  
 汎用性のあるクラス ライブラリ  
 すべてのオーバー ロードがサポートされています。  
  
 Windows ストア アプリ用 .NET  
 すべてのオーバー ロードではサポートされて: Windows 8  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <summary>日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <returns><paramref name="s" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  例と包括的な使用状況についての他のオーバー ロードは、`Parse`メソッドを参照してください、<xref:System.DateTime.Parse%2A>オーバー ロードの概要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" />有効な文字列形式の日付と時刻は含まれません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <param name="provider">に関するカルチャ固有の書式情報を提供するオブジェクト<c>s</c>です。</param>
        <summary>カルチャ固有の書式情報を使用して、日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <returns><paramref name="s" /> で指定された書式に従って表記された、<paramref name="provider" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  例と包括的な使用状況についての他のオーバー ロードは、`Parse`メソッドを参照してください、<xref:System.DateTime.Parse%2A>オーバー ロードの概要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" />有効な文字列形式の日付と時刻は含まれません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime Parse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <param name="provider">に関するカルチャ固有の書式情報を提供するオブジェクト<c>s</c>です。</param>
        <param name="styles">使用可能なスタイル要素を示す列挙値のビットごとの組み合わせ<c>s</c>解析の操作が成功する方法を定義する現在のタイム ゾーンに関連して解析した日付を解釈するか、現在の日付。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>カルチャ固有の書式情報と書式スタイルを使用して、日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
        <returns><paramref name="s" /> および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="styles" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  例と包括的な使用状況についての他のオーバー ロードは、`Parse`メソッドを参照してください、<xref:System.DateTime.Parse%2A>オーバー ロードの概要です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" />有効な文字列形式の日付と時刻は含まれません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" />無効な組み合わせを含む<see cref="T:System.Globalization.DateTimeStyles" />値。 たとえば、両方とも<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />と<see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <param name="format">要求の形式を定義する書式指定子<c>s</c>です。 詳細については、「解説」を参照してください。</param>
        <param name="provider">に関するカルチャ固有の書式情報を提供するオブジェクト<c>s</c>です。</param>
        <summary>指定した書式とカルチャ固有の書式情報を使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> の値に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。</summary>
        <returns><paramref name="s" /> および <paramref name="format" /> で指定された書式に従って表記された <paramref name="provider" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType>メソッドで定義された形式である必要があります日付の文字列形式を解析して、`format`パラメーター。 必要、\<日付 > と\<時間 > で指定された順序で、日付と時刻の文字列形式の要素が表示されます`format`、および`s`で許可されている以外の空白があるない`format`です。 場合`format`日付定義時刻要素がないと、解析操作が成功した、結果として得られる<xref:System.DateTime>値が午前 0 時 (00: 00:00)。 場合`format`、時間を定義する日付要素がないと、解析操作が成功した、結果として得られる<xref:System.DateTime>値が日付`DateTime.Now.Date`です。  
  
 場合`s`の時刻に特定のタイム ゾーンと、解析操作が成功すると、表していない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は<xref:System.DateTimeKind?displayProperty=nameWithType>します。 場合`s`は特定のタイム ゾーンの時刻を表してと`format`タイム ゾーン情報が存在する (場合など`format`と等しい"o"、"r"または"u"標準書式指定子を"z"、"zz"または"zzz"カスタム書式指定子が含まれている場合、または) では、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>値は<xref:System.DateTimeKind?displayProperty=nameWithType>します。  
  
 `format`パラメーターは、1 つの標準書式指定子、または必要とされる書式を定義する 1 つまたは複数のカスタム書式指定子を含む文字列`s`です。 有効な書式指定コードに関する詳細については、「[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)または[カスタムの日付と時刻の書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)です。  
  
> [!NOTE]
>  場合`format`されていません ("yyyyMMddHHmm") などの日付または時刻の区切り記号を含める、インバリアント カルチャを使用するカスタム書式パターン、`provider`パラメーターおよび各カスタムの最も長い形式の書式指定子。 たとえば、形式パターンに時間を指定する場合より狭いフォームでは、"H"ではなく、広義の形式"HH"を指定します。  
  
 特定の日付と時刻のシンボルとで使用される特定の言語で曜日の名前) などの文字列`s`によって定義された、`provider`パラメーターの正確な形式が格納される`s`場合`format`標準書式指定子の文字列です。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>を解釈するために使用するカルチャを表すオブジェクト`s`です。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティ定義シンボルでと書式設定`s`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   カスタム<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドでは、どちらかを返します、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ParseExact%2A>メソッドです。  
  
 [!code-csharp[System.DateTime.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/ParseExact1.cs#1)]
 [!code-vb[System.DateTime.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/ParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> または <paramref name="format" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" />または<paramref name="format" />空の文字列します。  
  
 -または-  
  
 <paramref name="s" />指定されたパターンに対応する日時が含まれていない<paramref name="format" />です。  
  
 -または-  
  
 時間の部分とで am/pm<paramref name="s" />一致しません。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.ParseExact" />メソッドがスローされます、<see cref="T:System.FormatException" />に解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含むかどうか。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョンでは、AM/PM 指定子は無視されます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="format">要求の形式を定義する書式指定子<c>s</c>です。 詳細については、「解説」を参照してください。</param>
        <param name="provider">に関するカルチャ固有の書式情報を提供するオブジェクト<c>s</c>です。</param>
        <param name="style">追加情報を提供する列挙値のビットごとの組み合わせ<c>s</c>、内に存在可能なスタイル要素について<c>s</c>、またはからの変換に関する<c>の</c>を<see cref="T:System.DateTime" />値。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
        <returns><paramref name="s" />、<paramref name="format" />、および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="style" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドで定義された形式である必要があります日付の文字列形式を解析して、`format`パラメーター。 必要で、日付と時刻の要素`s`で指定された順序で表示される`format`です。 場合`s`のパターンに一致しない、`format`によって定義されたすべてのバリエーションをパラメーター、`style`パラメーター、メソッドをスロー、<xref:System.FormatException>です。 これに対し、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドは、書式プロバイダーのによって認識される形式のいずれかの日付の文字列表現を解析<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドもにより、日付と時刻の要素`s`を任意の順序で表示します。  
  
 場合、`s`パラメーターには、時刻のみが含まれています。 および日がない場合を除き、現在の日付が使用される、`style`パラメーターが含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグいる場合、既定の日付 (`DateTime.Date.MinValue`) を使用します。 場合、`s`パラメーターが含まれるは、日付のみとありません時間、午前 0 時 (00: 00:00) を使用します。 `style`パラメーターも指定するかどうか、`s`パラメーターが先頭、内部、または末尾の空白文字を含めることができます。  
  
 場合`s`タイム ゾーン情報を含まない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>オブジェクトが<xref:System.DateTimeKind?displayProperty=nameWithType>です。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグを返す、<xref:System.DateTime>値が<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>、またはを使用して、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>と<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグを返す、<xref:System.DateTime>値のある<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>します。 場合`s`タイム ゾーン情報が含まれています時間は、必要に応じて、ローカル時刻に変換されます、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグを設定して、現地時刻を世界協定時刻 (UTC) の変換を行わない、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。  
  
 `format`パラメーターの必要なパターンを定義する、`s`パラメーター。 1 つまたは複数のいずれかのカスタム書式指定子で構成されていることができます、[カスタムの日付と時刻の書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)テーブル、またはから定義済みのパターンを識別する 1 つの標準書式指定子、[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)テーブル。  
  
 カスタム書式パターンでは日付または時刻の区切り記号を使用しない場合は、インバリアント カルチャを使用して、`provider`パラメーターおよび各カスタムの最も長い形式の書式指定子。 たとえば、パターンに時間を指定する場合より狭いフォームでは、"H"ではなく、広義の形式"HH"を指定します。  
  
> [!NOTE]
>  必要とするのではなく`s`解析操作が成功するために 1 つの形式に準拠して、呼び出すことができます、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドし、許可されている複数の形式を指定します。 これにより、解析操作が成功する可能性が高くなります。  
  
 `styles`パラメーターには 1 つまたは複数のメンバーが含まれています、<xref:System.Globalization.DateTimeStyles>かどうかと、空白文字で定義されていないかを決定する列挙体`format`に表示できる`s`解析操作の正確な動作を制御するとします。 次の表がそれぞれどのように説明のメンバー、<xref:System.Globalization.DateTimeStyles>列挙体の運用に与える影響、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>メソッドです。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、UTC に変換します。 場合`s`、タイム ゾーン オフセットが含まれていますまたは`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグは、メソッド呼び出し文字列を解析して<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値を utc を基準とし、セット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。 場合`s`(UTC) を表すことを示しますまたは`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグは、メソッドは、文字列を解析して、返されたでタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。 その他のすべてのケースでは、フラグには効果はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|定義されていない、空白文字を指定`format`任意の特定の日付または時刻要素の間に表示できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|定義されていない、空白文字を指定`format`の先頭に表示できる`s`です。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|定義されていない、空白文字を指定`format`の最後に表示できる`s`です。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定する`s`先頭、内部、および、末尾の空白文字で定義されていない場合があります`format`です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定する場合`s`、タイム ゾーン情報がない、現地時刻を表すことが前提とします。 しない限り、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグが含まれている、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>に値が設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`、タイム ゾーン情報がない UTC を表記と見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>メソッドが返されたに変換して、フラグが存在<xref:System.DateTime>UTC から値を現地時刻と設定をその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|場合`s`時刻を含む日付の情報がない場合、戻り値の日付が に設定されている`DateTime.MinValue.Date`です。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`既定値を使用してパラメーターを解析します。 含まれている以外の空白`format`は許可されていません。 場合`s`、返された日付、日付部分がない<xref:System.DateTime>値は 1/1/0001 に設定します。 場合`s`タイム ゾーン情報を含まない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。 タイム ゾーン情報が存在する場合`s`、時刻は現地時刻に変換され、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイム ゾーン情報を含む文字列への変換を防止しようとする<xref:System.DateTime>値の日付と時刻のでその<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind?displayProperty=nameWithType>。 このフラグは、主に UTC 時刻の現地時間への変換を防ぎます。|  
  
 特定の日付と時刻のシンボルとで使用される特定の言語で曜日の名前) などの文字列`s`によって定義された、`provider`パラメーターの正確な形式が格納される`s`場合`format`標準書式指定子の文字列です。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>を解釈するために使用するカルチャを表すオブジェクト`s`です。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティ定義シンボルでと書式設定`s`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   カスタム<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドでは、どちらかを返します、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29>メソッドです。 注意してください、文字列"5/01/2009 午前 8 時 30 分"を解析できない正常時、`styles`パラメーターと等しい<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>では、先頭のスペースは許可されていないため`format`です。 さらに、文字列"5/01/2009 09時 00分"を正常に解析されたことはできません、`format`の"mm/dd/yyyyhh:mm"日付文字列としての先頭をゼロ、月の番号の前はため`format`が必要です。  
  
 [!code-csharp[System.DateTime.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact2.cs#2)]
 [!code-vb[System.DateTime.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> または <paramref name="format" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" />または<paramref name="format" />空の文字列します。  
  
 -または-  
  
 <paramref name="s" />指定されたパターンに対応する日時が含まれていない<paramref name="format" />です。  
  
 -または-  
  
 時間の部分とで am/pm<paramref name="s" />一致しません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" />無効な組み合わせを含む<see cref="T:System.Globalization.DateTimeStyles" />値。 たとえば、両方とも<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />と<see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />です。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.ParseExact" />メソッドがスローされます、<see cref="T:System.FormatException" />に解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含むかどうか。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョンでは、AM/PM 指定子は無視されます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <param name="formats">許可された形式の配列<c>s</c>です。 詳細については、「解説」を参照してください。</param>
        <param name="provider">に関するカルチャ固有の書式情報を提供するオブジェクト<c>s</c>です。</param>
        <param name="style">使用可能な書式を示す列挙値のビットごとの組み合わせ<c>s</c>です。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式の少なくとも 1 つと完全に一致する必要があります。それ以外の場合は、例外がスローされます。</summary>
        <returns><paramref name="s" />、<paramref name="formats" />、および <paramref name="provider" /> で指定された書式に従って表記された <paramref name="style" /> に含まれる日時と等価のオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドに割り当てられているパターンのいずれかに一致する日付の文字列表現を解析して、`formats`パラメーター。 場合、文字列`s`によって定義される種類のいずれかでこれらのパターンのいずれかと一致しません、`styles`パラメーター、メソッドをスロー、<xref:System.FormatException>です。 比較する場合を除いて`s`に複数の書式パターン、なく単一の書式パターンでは、このオーバー ロードの動作は、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドです。  
  
 `s`パラメーターには、解析するには、日付と時刻が含まれています。 場合、`s`パラメーターには、時刻のみが含まれています。 および日がない場合を除き、現在の日付が使用される、`style`パラメーターが含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグいる場合、既定の日付 (`DateTime.Date.MinValue`) を使用します。 場合、`s`パラメーターが含まれるは、日付のみとありません時間、午前 0 時 (00: 00:00) を使用します。 `style`パラメーターも指定するかどうか、`s`パラメーターは、先頭を含めることができます、内部、または末尾の空白文字で書式指定文字列のいずれかで許可されているもの以外の`formats`します。  
  
 場合`s`タイム ゾーン情報を含まない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>オブジェクトが<xref:System.DateTimeKind?displayProperty=nameWithType>です。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグを返す、<xref:System.DateTime>値が<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>、またはを使用して、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>と<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグを返す、<xref:System.DateTime>値のある<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>します。 場合`s`タイム ゾーン情報が含まれています時間は、必要に応じて、ローカル時刻に変換されます、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグをローカル時刻を世界協定時刻 (UTC) に変換し、設定されません、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。  
  
 `formats`パラメーターには、パターンの配列が含まれています。 1 つ`s`解析操作が成功する場合に正確に一致する必要があります。 内のパターン、`formats`パラメーターは、1 つまたは複数のカスタム書式指定子から、[カスタムの日付と時刻の書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)テーブル、またはから定義済みのパターンを識別する 1 つの標準書式指定子、[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)テーブル。  
  
 カスタム書式パターンでは日付または時刻の区切り記号を使用しない場合は、インバリアント カルチャを使用して、`provider`パラメーターおよび各カスタムの最も長い形式の書式指定子。 たとえば、パターンに時間を指定する場合より狭いフォームでは、"H"ではなく、広義の形式"HH"を指定します。  
  
 `styles`パラメーターには 1 つまたは複数のメンバーが含まれています、<xref:System.Globalization.DateTimeStyles>かどうかと、空白文字で定義されていないかを決定する列挙体`format`に表示できる`s`解析操作の正確な動作を制御するとします。 次の表がそれぞれどのように説明のメンバー、<xref:System.Globalization.DateTimeStyles>列挙体の運用に与える影響、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29>メソッドです。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、UTC に変換します。 場合`s`、タイム ゾーン オフセットが含まれていますまたは`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグは、メソッド呼び出し文字列を解析して<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値を utc を基準とし、セット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。 場合`s`(UTC) を表すことを示しますまたは`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグは、メソッドは、文字列を解析して、返されたでタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。 その他のすべてのケースでは、フラグには効果はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|定義されていない、空白文字を指定`format`任意の特定の日付または時刻要素の間に表示できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|定義されていない、空白文字を指定`format`の先頭に表示できる`s`です。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|定義されていない、空白文字を指定`format`の最後に表示できる`s`です。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定する`s`先頭、内部、および、末尾の空白文字で定義されていない場合があります`format`です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定する場合`s`、タイム ゾーン情報がない、現地時刻を表すことが前提とします。 しない限り、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグが含まれている、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>に値が設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`、タイム ゾーン情報がない UTC を表記と見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>メソッドが返されたに変換して、フラグが存在<xref:System.DateTime>UTC から値を現地時刻と設定をその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|場合`s`時刻を含む日付の情報がない場合、戻り値の日付が に設定されている`DateTime.MinValue.Date`です。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`既定値を使用してパラメーターを解析します。 含まれている以外の空白`format`は許可されていません。 場合`s`、返された日付、日付部分がない<xref:System.DateTime>値は 1/1/0001 に設定します。 場合`s`タイム ゾーン情報を含まない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。 タイム ゾーン情報が存在する場合`s`、時刻は現地時刻に変換され、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイム ゾーン情報を含む文字列、しようとすると日時、日付に変換できない、<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind?displayProperty=nameWithType>です。 このフラグは、主に UTC 時刻の現地時間への変換を防ぎます。|  
  
 特定の日付と時刻のシンボルとで使用される特定の言語で曜日の名前) などの文字列`s`によって定義された、`provider`パラメーターの正確な形式が格納される`s`場合`format`標準書式指定子の文字列です。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>を解釈するために使用するカルチャを表すオブジェクト`s`です。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティ定義シンボルでと書式設定`s`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   カスタム<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドでは、どちらかを返します、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドを使用できる形式の数値の文字列が正しく解析できることを確認してください。  
  
 [!code-csharp[System.Datetime.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ParseExact/cs/parseexact3.cs#3)]
 [!code-vb[System.Datetime.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ParseExact/vb/parseexact3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> または <paramref name="formats" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> が空の文字列です。  
  
 または  
  
 要素<paramref name="formats" />空の文字列します。  
  
 または  
  
 <paramref name="s" />任意の要素に対応する日時が含まれていない<paramref name="formats" />です。  
  
 または  
  
 時間の部分とで am/pm<paramref name="s" />一致しません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="style" />無効な組み合わせを含む<see cref="T:System.Globalization.DateTimeStyles" />値。 たとえば、両方とも<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />と<see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />です。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.ParseExact" />メソッドがスローされます、<see cref="T:System.FormatException" />に解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含むかどうか。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョンでは、AM/PM 指定子は無視されます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の秒の部分を取得します。</summary>
        <value>DateTime の秒の部分 (0 ～ 59)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例で、<xref:System.DateTime.Second%2A>プロパティです。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpecifyKind">
      <MemberSignature Language="C#" Value="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime SpecifyKind(valuetype System.DateTime value, valuetype System.DateTimeKind kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="kind" Type="System.DateTimeKind" />
      </Parameters>
      <Docs>
        <param name="value">日付と時刻。</param>
        <param name="kind">新しいオブジェクトが現地時刻であるか、世界協定時刻 (UTC) であるか、またはそのどちらでもないかを示す列挙値の 1 つ。</param>
        <summary>指定された <see cref="T:System.DateTime" /> と同じタイマー刻みの数を持つ新しい <see cref="T:System.DateTime" /> オブジェクトを、指定された <see cref="T:System.DateTimeKind" /> 値 (現地時刻、世界協定時刻 (UTC)、または、そのいずれでもないことを示す) に基づいて作成します。</summary>
        <returns><paramref name="value" /> パラメーターが表すオブジェクトと同じティック数、および <see cref="T:System.DateTimeKind" /> パラメーターで指定された <paramref name="kind" /> 値を持つ、新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.DateTime>オブジェクトは、時刻の値は現地時刻、世界協定時刻 (UTC)、またはそのどちらに基づいており、時刻値が含まれる Ticks フィールドが 100 ナノ秒タイマー刻み単位で測定されるかどうかを示す Kind フィールドで構成されます。 <xref:System.DateTime.SpecifyKind%2A>メソッドが新たに作成<xref:System.DateTime>オブジェクトの指定を使用して`kind`パラメーターと元の時刻の値。  
  
> [!IMPORTANT]
>  返された<xref:System.DateTime>値を表さない同じインスタントとして、`value`パラメーター、および<xref:System.DateTime.SpecifyKind%2A>タイム ゾーンの変換の方法ではありません。 指定された時間外に出て、代わりに、`value`パラメーターが変更されないようにし、セット、<xref:System.DateTime.Kind%2A>プロパティを`kind`です。 タイム ゾーンの変換方法については、次を参照してください。[に変換する時間の間のタイム ゾーン](~/docs/standard/datetime/converting-between-time-zones.md)です。  
  
 <xref:System.DateTime.SpecifyKind%2A>メソッドは、情報を受信する相互運用シナリオで役に立ちます、<xref:System.DateTime>が指定されていない種類フィールドを持つオブジェクトを特定する独立したタイマー刻みフィールドがローカル時刻または utc のどちらを表していることを意味します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.SpecifyKind%2A>メソッドを示すために、<xref:System.DateTime.Kind%2A>プロパティに影響、<xref:System.DateTime.ToLocalTime%2A>と<xref:System.DateTime.ToUniversalTime%2A>変換メソッド。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">減算する日付と時刻の値。</param>
        <summary>このインスタンスから指定した日付と時刻を減算します。</summary>
        <returns>このインスタンスで表された日付と時刻から <paramref name="value" /> で表された日付と時刻を減算した値と等しい時間間隔。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.DateTime%29>メソッドが 2 つの日付の差を決定します。 現在のインスタンスからの時間間隔を減算する呼び出し、<xref:System.DateTime.Subtract%28System.TimeSpan%29>メソッドです。 現在のインスタンスから特定の時間間隔を減算するには、その時間間隔を現在の日付に追加するメソッドを呼び出し、メソッドの引数として負の値を指定します。 たとえば、現在の日付から 2 か月間、減算を呼び出して、 <xref:System.DateTime.AddMonths%28System.Int32%29> -2 の値を持つメソッドです。  
  
 かどうか、現在のインスタンスの日時よりも前`value`、メソッドを返します、<xref:System.TimeSpan>を負の時間間隔を表すオブジェクト。 すべての 0 ではないプロパティの値である、(など<xref:System.TimeSpan.Days%2A>または<xref:System.TimeSpan.Ticks%2A>) が負の値。  
  
 <xref:System.DateTime.Subtract%28System.DateTime%29>メソッドがの値を考慮していない、 <xref:System.DateTime.Kind%2A> 、2 つのプロパティ<xref:System.DateTime>減算を実行するときの値します。 減算する前に<xref:System.DateTime>オブジェクト、オブジェクトが同じタイム ゾーンの時刻を表すことを確認してください。 それ以外の場合、結果は、タイム ゾーン間で相違点が含まれます。  
  
> [!NOTE]
>  <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=nameWithType>メソッドは、減算を実行するときにタイム ゾーン間で相違点を考慮します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Subtract%2A>メソッドと減算演算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTime Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.Subtract(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">減算する時間間隔。</param>
        <summary>このインスタンスから指定した期間を減算します。</summary>
        <returns>このインスタンスで表された日付と時刻から <paramref name="value" /> で表された時間間隔を減算した値と等しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29>メソッドは、現在のインスタンスから指定された時間間隔の違いは、日付を返します。 2 つの日付間の時間間隔を特定するのには、呼び出し、<xref:System.DateTime.Subtract%28System.DateTime%29>メソッドです。 現在のインスタンスから特定の時間間隔を減算するには、その時間間隔を現在の日付に追加するメソッドを呼び出し、メソッドの引数として負の値を指定します。 たとえば、現在の日付から 2 か月間、減算を呼び出して、 <xref:System.DateTime.AddMonths%28System.Int32%29> -2 の値を持つメソッドです。  
  
 このメソッドはこの値を変更しない<xref:System.DateTime>です。 代わりに、新しい返します<xref:System.DateTime>をこの操作の結果の値。  
  
 通常、<xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>メソッド減算、<xref:System.TimeSpan>オブジェクトを表す正の期間を返す、<xref:System.DateTime>が現在のインスタンスの日時より前の値。 ただし場合、<xref:System.TimeSpan>オブジェクトが、負の時間範囲を表します、<xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>メソッドを返します、<xref:System.DateTime>値が日付と現在のインスタンスの時刻よりも後です。  
  
 <xref:System.DateTime.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>メソッドでは、複数の (指定された時間数) と指定された時間を分単位などの時間単位で構成される時間間隔を減算することができます。 1 つの単位 (年、月、日など) の時間を減算する、<xref:System.DateTime>インスタンスに渡すことできます負の数値をパラメーターとして次のいずれかの。  
  
-   <xref:System.DateTime.AddYears%2A>、特定の年現在の日付と時刻のインスタンスから数を減算します。  
  
-   <xref:System.DateTime.AddMonths%2A>、現在の日付と時刻のインスタンスから月の特定の数を減算します。  
  
-   <xref:System.DateTime.AddDays%2A>、特定の数の現在の日付と時刻のインスタンスからの日数を減算します。  
  
-   <xref:System.DateTime.AddHours%2A>、特定の数の現在の日付と時刻のインスタンスからの時間を減算します。  
  
-   <xref:System.DateTime.AddMinutes%2A>、特定の数の現在の日付と時刻のインスタンスから分を減算します。  
  
-   <xref:System.DateTime.AddSeconds%2A>、特定の現在の日付と時刻のインスタンスからの秒数を減算します。  
  
-   <xref:System.DateTime.AddMilliseconds%2A>、特定の現在の日付と時刻のインスタンスからのミリ秒数を減算します。  
  
-   <xref:System.DateTime.AddTicks%2A>、特定の現在の日付と時刻のインスタンスからのティック数を減算します。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Subtract%2A>メソッドと減算演算子。  
  
 [!code-cpp[DateTime.Subtraction#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.Subtraction/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.Subtraction#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Subtraction/CS/class1.cs#1)]
 [!code-vb[DateTime.Subtraction#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Subtraction/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">結果が <see cref="F:System.DateTime.MinValue" /> より小さいか、<see cref="F:System.DateTime.MaxValue" /> より大きいです。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IComparable#CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.GetTypeCode">
      <MemberSignature Language="C#" Value="TypeCode IConvertible.GetTypeCode ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.TypeCode System.IConvertible.GetTypeCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#GetTypeCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToBoolean">
      <MemberSignature Language="C#" Value="bool IConvertible.ToBoolean (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.IConvertible.ToBoolean(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToByte">
      <MemberSignature Language="C#" Value="byte IConvertible.ToByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int8 System.IConvertible.ToByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToChar">
      <MemberSignature Language="C#" Value="char IConvertible.ToChar (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance char System.IConvertible.ToChar(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDateTime">
      <MemberSignature Language="C#" Value="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.DateTime System.IConvertible.ToDateTime(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトを返します。</summary>
        <returns>現在のオブジェクト。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDecimal">
      <MemberSignature Language="C#" Value="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Decimal System.IConvertible.ToDecimal(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToDouble">
      <MemberSignature Language="C#" Value="double IConvertible.ToDouble (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float64 System.IConvertible.ToDouble(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt16">
      <MemberSignature Language="C#" Value="short IConvertible.ToInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int16 System.IConvertible.ToInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt32">
      <MemberSignature Language="C#" Value="int IConvertible.ToInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IConvertible.ToInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToInt64">
      <MemberSignature Language="C#" Value="long IConvertible.ToInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int64 System.IConvertible.ToInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSByte">
      <MemberSignature Language="C#" Value="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int8 System.IConvertible.ToSByte(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToSingle">
      <MemberSignature Language="C#" Value="float IConvertible.ToSingle (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance float32 System.IConvertible.ToSingle(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToType">
      <MemberSignature Language="C#" Value="object IConvertible.ToType (Type type, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.IConvertible.ToType(class System.Type type, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="type">必要な型。</param>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトを、指定された型のオブジェクトに変換します。</summary>
        <returns>値が現在の <paramref name="type" /> オブジェクトに等価である、<see cref="T:System.DateTime" /> パラメーターによって指定された型のオブジェクト。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidCastException">この変換はサポートされていません、<see cref="T:System.DateTime" />型です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt16">
      <MemberSignature Language="C#" Value="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int16 System.IConvertible.ToUInt16(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt32">
      <MemberSignature Language="C#" Value="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int32 System.IConvertible.ToUInt32(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IConvertible.ToUInt64">
      <MemberSignature Language="C#" Value="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance unsigned int64 System.IConvertible.ToUInt64(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><see cref="T:System.IFormatProvider" /> インターフェイスを実装するオブジェクト。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary>この変換はサポートされていません。 このメソッドを使用しようとすると、<see cref="T:System.InvalidCastException" /> がスローされます。</summary>
        <returns>このメンバーの戻り値は使用されません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">すべての場合。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">データを読み込む先のオブジェクト。</param>
        <param name="context">このシリアル化のシリアル化先。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
        <summary><see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.DateTime" /> オブジェクトをシリアル化するために必要なすべてのデータを格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは追加、`info`を持つパラメーター、<xref:System.DateTime.Ticks%2A>と<xref:System.DateTime.Kind%2A>プロパティの値。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">直前の呼び出し元に対する完全な信頼が必要です。 このメンバーは、部分的に信頼されているまたは透過的なコードで使用することはできません。</permission>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスの日付と時刻を表すタイマー刻み数を取得します。</summary>
        <value>このインスタンスの日付と時刻を表すタイマー刻み数。 値は <see langword="DateTime.MinValue.Ticks" /> から <see langword="DateTime.MaxValue.Ticks" /> までの間にあります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 単一のティックは、100 ナノ秒または 1 つ 1,000万分の 1 秒を表します。 10,000 のティックをミリ秒単位で 1 秒あたり 10,000, 000 ティック。  
  
 このプロパティの値が 0001 年 1 月 1 日の午前 12時 00分: 00 からの経過時間を 100 ナノ秒間隔の数を表します (0: 00:00 年 1 月 1 日 UTC 0001、グレゴリオ暦で) を表す<xref:System.DateTime.MinValue?displayProperty=nameWithType>です。 秒を leap に起因する、タイマー刻みの数は含まれません。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.Ticks%2A>プロパティ インスタンスを作成して、21 世紀の先頭から経過したタイマー刻みの数を表示する、<xref:System.TimeSpan>オブジェクト。 <xref:System.TimeSpan>を使用してその他のいくつかの時間間隔の経過時間を表示するオブジェクトを使用しています。  
  
 [!code-csharp[System.DateTime.Ticks#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Ticks/cs/Ticks.cs#1)]
 [!code-vb[System.DateTime.Ticks#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Ticks/vb/Ticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスの時刻を取得します。</summary>
        <value>深夜の 12 時から経過した 1 日の端数部分を表す時間間隔。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 異なり、<xref:System.DateTime.Date%2A>プロパティです。 返す、 <xref:System.DateTime> 、日付、時刻部分なしを表す値、<xref:System.DateTime.TimeOfDay%2A>プロパティから返される、<xref:System.TimeSpan>を表す値、<xref:System.DateTime>値の時間コンポーネントです。  
  
 1 日の時間を表示またはの時刻の文字列形式を取得するかどうか、<xref:System.DateTime>値、オーバー ロードの代わりに呼び出すことができます、<xref:System.DateTime.ToString%2A>メソッドが、`format`パラメーターまたは使用する、[複合書式指定](~/docs/standard/base-types/composite-formatting.md)"t"または"T"標準書式指定文字列で機能します。  
  
   
  
## Examples  
 次の例の値を表示する、<xref:System.DateTime.TimeOfDay%2A>プロパティの配列を<xref:System.DateTime>値。 戻り値は、複合書式指定操作で、"t"標準書式指定文字列によって返される文字列とも対照的です。  
  
 [!code-csharp[System.DateTime.TimeOfDay#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.timeofday/cs/timeofday1.cs#1)]
 [!code-vb[System.DateTime.TimeOfDay#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.timeofday/vb/timeofday1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToBinary">
      <MemberSignature Language="C#" Value="public long ToBinary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToBinary() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToBinary" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトを 64 ビットのバイナリ値にシリアル化します。後で、この値を使って、<see cref="T:System.DateTime" /> オブジェクトを再構築できます。</summary>
        <returns><see cref="P:System.DateTime.Kind" /> プロパティおよび <see cref="P:System.DateTime.Ticks" /> プロパティをエンコードする 64 ビットの符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、 <xref:System.DateTime.ToBinary%2A> 、現在の値を変換する方法の<xref:System.DateTime>オブジェクトをバイナリ値にします。 バイナリ値を使用して、その後、および<xref:System.DateTime.FromBinary%2A>メソッドを元の再作成する<xref:System.DateTime>オブジェクト。  
  
> [!IMPORTANT]
>  場合によっては、<xref:System.DateTime>によって返される値、<xref:System.DateTime.FromBinary%2A>メソッドは、元と同じではありません<xref:System.DateTime>に指定された値、<xref:System.DateTime.ToBinary%2A>メソッドです。 詳細については、次のセクションでは、「ローカル時刻の調整」を参照してください。  
  
## <a name="local-time-adjustment"></a>現地時刻の調整  
 ローカル タイム ゾーンを調整して、世界協定時刻である、ローカル時刻として表されます、<xref:System.DateTime>構造体が<xref:System.DateTime.Kind%2A>プロパティの値を<xref:System.DateTimeKind.Local>です。 ローカルを復元するときに<xref:System.DateTime>によって生成されるバイナリ表現からの値、 <xref:System.DateTime.ToBinary%2A> 、メソッド、<xref:System.DateTime.FromBinary%2A>メソッドは、元の値に等しいしないように再作成された値を調整できます。 これは、次のような条件で発生します。  
  
-   ローカル<xref:System.DateTime>オブジェクトは、1 つのタイム ゾーンでシリアル化、<xref:System.DateTime.ToBinary%2A>メソッドによって別のタイム ゾーンで、逆シリアル化と、<xref:System.DateTime.FromBinary%2A>メソッドを結果として得られるによって表されるローカル時間<xref:System.DateTime>オブジェクトが 2 番目のタイム ゾーンに自動的に調整します。  
  
     たとえば、<xref:System.DateTime>午後 3 時のローカル時刻を表すオブジェクト 米国内で実行されているアプリケーション太平洋標準時ゾーンを使用して、<xref:System.DateTime.ToBinary%2A>を変換する方法の<xref:System.DateTime>オブジェクトをバイナリ値にします。 米国で実行されている別のアプリケーション米国東部標準時ゾーンを使用して、<xref:System.DateTime.FromBinary%2A>を新しいバイナリ値を変換する方法の<xref:System.DateTime>オブジェクト。 新しい値<xref:System.DateTime>オブジェクトは、午後 6 時、元の午後 3 として同じ時点を表します ただし、東部標準時ゾーンのローカル時刻に調整されます。  
  
-   場合、ローカルのバイナリ表現<xref:System.DateTime>値が対象のシステムのローカル タイム ゾーンで無効な時刻を表して<xref:System.DateTime.FromBinary%2A>が呼び出されると、時間の調整が無効です。  
  
     たとえば、米国で標準時から夏時間への移行が発生します太平洋標準時ゾーン、2010 年 3 月 14 日、午前 2時 00分に時間が進み午前 3 時に、1 時間 この間隔の時間は、このタイム ゾーンに存在しません、時間間隔は、無効な時刻です。 時間内にあるを場合にこの範囲に変換される、バイナリ値によって次の例を示しています、<xref:System.DateTime.ToBinary%2A>メソッドでは、復元し、<xref:System.DateTime.FromBinary%2A>メソッド、元の値を調整して、有効な時刻になります。 特定の日付と時刻の値に渡すことによっての変更される可能性がありますする可能性があるかどうかを確認することができます、<xref:System.TimeZoneInfo.IsInvalidTime%2A?displayProperty=nameWithType>メソッドの例とを示しています。  
  
     [!code-csharp[System.DateTime.FromBinary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.frombinary/cs/frombinary1.cs#1)]
     [!code-vb[System.DateTime.FromBinary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.frombinary/vb/frombinary1.vb#1)]  
  
## <a name="version-considerations"></a>バージョンの考慮事項  
 .NET Framework バージョン 2.0 以降の<xref:System.DateTime>プライベートなフィールドが現地時刻、世界協定時刻 (UTC)、またはそのどちらもに、指定した時刻の値はに基づいて表示するかどうかを示す、および日付と時刻の指定を 100 ナノ秒タイマー刻みの数を含むプライベートのタイマー刻みフィールドの構造で構成されます。 タイマー刻みのフィールドをアクセスするのには、<xref:System.DateTime.Ticks%2A>プロパティと種類のフィールドにアクセスできる、<xref:System.DateTime.Kind%2A>プロパティです。  
  
 シリアル化する場合、.NET Framework 2.0 の前に、<xref:System.DateTime>などを使用してシリアル化インターフェイスではなく、手動でオブジェクト<xref:System.Runtime.Serialization.ISerializable?displayProperty=nameWithType>、タイマー刻みのデータのシリアル化に必要なだけ、<xref:System.DateTime>構造体。 バージョン 2.0 以降では、種類のデータもシリアルする必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の日付を取得します。</summary>
        <value>今日の日付を表すオブジェクト (ただし、時刻部分は 00:00:00)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以降、.NET Framework version 2.0 では、戻り値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティから返される<xref:System.DateTimeKind.Local>です。  
  
 現在の時刻のない現在の日付を返すので、<xref:System.DateTime.Today%2A>プロパティは日付のみを操作するアプリケーションでの使用に適しています。 詳細については、「[選択の間で DateTime DateTimeOffset TimeSpan、および TimeZoneInfo](~/docs/standard/datetime/choosing-between-datetime.md)です。 これに対し、<xref:System.DateTime.TimeOfDay%2A>プロパティは、現在の日付を使用せず、現在の時刻を返しますと<xref:System.DateTime.Now%2A>プロパティは、現在の日付と現在の時刻の両方を返します。  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.Date%2A>現在の日付を取得するプロパティです。 示されている方法、<xref:System.DateTime>標準日時書式指定文字列の一部を使用して値を書式設定することができます。 3 番目の呼び出しによって、出力が生成されることに注意してください、<xref:System.DateTime.ToString%28System.String%29>メソッドは、時刻部分、ゼロを含める g 書式指定子を使用します。  
  
 [!code-csharp[System.DateTime.Today#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Today/cs/Today1.cs#1)]
 [!code-vb[System.DateTime.Today#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Today/vb/Today1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻で表した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻は、西暦 1601 年 1 月 1 日深夜 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値 (西暦)世界協定時刻 (UTC)。 Windows では、アプリケーションの作成、アクセスすると、またはファイルに書き込むときを記録するファイルの時刻を使用します。  
  
 <xref:System.DateTime.ToFileTime%2A>メソッドを使用、<xref:System.DateTime.Kind%2A>プロパティを決定するかどうか、現在<xref:System.DateTime>オブジェクトが、現地時刻、UTC 時刻、または現地時刻として扱われる時間の不特定の種類。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToFileTime%2A>メソッドです。  
  
 [!code-cpp[DateTime.ToFileTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToFileTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToFileTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToFileTime/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日付と時刻の深夜 12時 00分西暦 1601 年 1 月 1 日の前に、結果のファイル時刻を表します UTC です。</exception>
        <block subset="none" type="usage">
          <para>通常、<see cref="M:System.DateTime.FromFileTime(System.Int64)" />メソッド復元、<see cref="T:System.DateTime" />によって保存された値、<see cref="M:System.DateTime.ToFileTime" />メソッドです。 ただし、2 つの値は、次の条件下で異なる場合があります。  
  
-   場合、シリアル化と逆シリアル化、<see cref="T:System.DateTime" />値が異なるタイム ゾーンで発生します。 たとえば場合、<see cref="T:System.DateTime" />時刻は午後 12 時 30 分の値 米国の米国東部標準時がシリアル化され、米国でし、逆シリアル化太平洋標準時ゾーン、午後 12 時 30 分の元の値 午前 9 時 30 分に調整されます。 2 つのタイム ゾーンの違いを反映します。  
  
-   場合、<see cref="T:System.DateTime" />シリアル化される値は、ローカル タイム ゾーンで無効な時刻を表します。 ここで、<see cref="M:System.DateTime.ToFileTime" />メソッドは、調整、復元された<see cref="T:System.DateTime" />をローカル タイム ゾーンで有効な時刻を表すように値します。  
  
     たとえば、米国で標準時から夏時間への移行が発生します太平洋標準時ゾーン、2010 年 3 月 14 日、午前 2時 00分に時間が進み午前 3 時に、1 時間 この間隔の時間は、このタイム ゾーンに存在しません、時間間隔は、無効な時刻です。 次の例は、時間内にあるを場合はこの範囲は、長整数値に変換を示しています、<see cref="M:System.DateTime.ToFileTime" />メソッドによってを復元し、<see cref="M:System.DateTime.FromFileTime(System.Int64)" />メソッド、元の値を調整して、有効な時刻になります。 特定の日付と時刻の値に渡すことによっての変更される可能性がありますする可能性があるかどうかを確認することができます、<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />メソッドの例とを示しています。  
  
     [!code-csharp[System.DateTime.FromFileTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.fromfiletime/cs/fromfiletime1.cs#1)]
     [!code-vb[System.DateTime.FromFileTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.fromfiletime/vb/fromfiletime1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToFileTimeUtc">
      <MemberSignature Language="C#" Value="public long ToFileTimeUtc ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTimeUtc() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToFileTimeUtc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値を Windows ファイル時刻で表した値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Windows ファイル時刻は、西暦 1601 年 1 月 1 日深夜 12時 00分以降の経過時間を 100 ナノ秒間隔の数を表す 64 ビット値 (西暦)世界協定時刻 (UTC)。 Windows では、アプリケーションの作成、アクセスすると、またはファイルに書き込むときを記録するファイルの時刻を使用します。  
  
 <xref:System.DateTime.ToFileTimeUtc%2A>メソッドを使用、<xref:System.DateTime.Kind%2A>プロパティを決定するかどうか、現在<xref:System.DateTime>オブジェクトが現地時刻、UTC 時刻または UTC 時刻として扱われる時間の不特定の種類。 現地時刻である場合に変換時刻 (utc) を Windows ファイル時刻への変換を実行する前にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日付と時刻の深夜 12時 00分西暦 1601 年 1 月 1 日の前に、結果のファイル時刻を表します UTC です。</exception>
        <block subset="none" type="usage">
          <para><see cref="M:System.DateTime.ToFileTimeUtc" />メソッドが、現地時刻を UTC に変換し、後で呼び出すことによって復元するため、<see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" />メソッドに続けて、<see cref="M:System.DateTime.ToLocalTime" />メソッドです。 ただし、元の時刻は、ローカル タイム ゾーンで無効な時刻を表している場合、2 つのローカル時刻値されませんと同じなります。 詳細については、次を参照してください。、<see cref="M:System.DateTime.ToLocalTime" />メソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTime ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToLocalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLocalTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を現地時刻に変換します。</summary>
        <returns><see cref="P:System.DateTime.Kind" /> プロパティが <see cref="F:System.DateTimeKind.Local" /> であるオブジェクト。通常は、現在の <see cref="T:System.DateTime" /> オブジェクトと等価な現地時刻が値として格納されます。ただし、変換後の値が <see cref="F:System.DateTime.MaxValue" /> オブジェクトで表現可能な範囲を超えている場合は <see cref="T:System.DateTime" /> の値が格納され、逆に変換跡の値が <see cref="F:System.DateTime.MinValue" /> オブジェクトで表現可能な範囲を下回る場合は <see cref="T:System.DateTime" /> が格納されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ローカル時刻は協定世界時 (UTC) 時刻と UTC のオフセットになります。 UTC オフセットの詳細については、次を参照してください。<xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>です。 変換も考慮現在によって表される時刻に適用される夏時間規則<xref:System.DateTime>オブジェクト。  
  
> [!IMPORTANT]
>  [!INCLUDE[winxp](~/includes/winxp-md.md)] 、システム、 <xref:System.DateTime.ToLocalTime%2A> (utc) から現地時刻に変換するときに、メソッドは現在の調整規則のみを認識します。 その結果、現在の調整規則を有効にされる前に、の期間を変換すると、UTC と現地時刻の差が正確には反映されない可能性があります。  
  
 .NET Framework version 2.0 では、によって返される値で始まる、<xref:System.DateTime.ToLocalTime%2A>メソッドはによって決定されます、 <xref:System.DateTime.Kind%2A> 、現在のプロパティ<xref:System.DateTime>オブジェクト。 次の表では、考えられる結果について説明します。  
  
|種類|結果|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|このインスタンスの<xref:System.DateTime>は現地時刻に変換されます。|  
|<xref:System.DateTimeKind.Local>|変換は行われません。|  
|<xref:System.DateTimeKind.Unspecified>|このインスタンス<xref:System.DateTime>UTC 時刻であると見なされます、変換を実行し、よう<xref:System.DateTime.Kind%2A>された<xref:System.DateTimeKind.Utc>です。|  
  
> [!NOTE]
>  <xref:System.DateTime.ToLocalTime%2A>メソッドに変換する<xref:System.DateTime>を現地時刻 (utc) からの値。 使用して、指定のタイム ゾーンの時刻を現地時刻に変換する、<xref:System.TimeZoneInfo.ConvertTime%2A?displayProperty=nameWithType>メソッドです。  
  
 変換によって返される値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティは常に返します<xref:System.DateTimeKind.Local>です。 そのため、有効な結果が返される場合でも<xref:System.DateTime.ToLocalTime%2A>は同じに繰り返し適用<xref:System.DateTime>です。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToLocalTime%2A>メソッドです。 現在のカルチャおよび実行するシステムのローカル タイム ゾーンで実際の出力が依存することに注意してください。  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 次の例で、<xref:System.DateTime.SpecifyKind%2A>メソッドを示すために、<xref:System.DateTime.Kind%2A>プロパティに影響、<xref:System.DateTime.ToLocalTime%2A>と<xref:System.DateTime.ToUniversalTime%2A>変換メソッド。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>使用することができます、<see cref="M:System.DateTime.ToLocalTime" />ローカルの日付と時刻の値を UTC に変換されたを復元する方法、<see cref="M:System.DateTime.ToUniversalTime" />または<see cref="M:System.DateTime.FromFileTimeUtc(System.Int64)" />メソッドです。 ただし、元の時刻は、ローカル タイム ゾーンで無効な時刻を表している場合に一致しない復元された値。 ときに、<see cref="M:System.DateTime.ToLocalTime" />メソッドは、utc 時刻をローカル タイム ゾーンに変換、ローカルのタイム ゾーンもされるように有効な時間を調整します。  
  
 たとえば、米国で標準時から夏時間への移行が発生します太平洋標準時ゾーン、2010 年 3 月 14 日、午前 2時 00分に時間が進み午前 3 時に、1 時間 この間隔の時間は、このタイム ゾーンに存在しません、時間間隔は、無効な時刻です。 次の例は、時間内にあるを場合にこの範囲は、UTC に変換を示しています、<see cref="M:System.DateTime.ToUniversalTime" />メソッドによってを復元し、<see cref="M:System.DateTime.ToLocalTime" />メソッド、元の値を調整して、有効な時刻になります。 特定の日付と時刻の値に渡すことによっての変更される可能性がありますする可能性があるかどうかを確認することができます、<see cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />メソッドの例とを示しています。  
  
 [!code-csharp[System.DateTime.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolocaltime/cs/tolocaltime1.cs#1)]
 [!code-vb[System.DateTime.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolocaltime/vb/tolocaltime1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToLongDateString">
      <MemberSignature Language="C#" Value="public string ToLongDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongDateString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な長い形式の日付の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを長い形式の日付で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>によって定義されたパターンを使用してオブジェクトの形式が、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>現在のスレッド カルチャに関連付けられたプロパティ。 戻り値は"D"を指定することによって返される値と同じ[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)で、<xref:System.DateTime.ToString%28System.String%29>メソッドです。  
  
> [!IMPORTANT]
>  によって返される文字列、<xref:System.DateTime.ToLongDateString%2A>メソッドはカルチャに依存します。 現在のカルチャによって定義されたパターンを反映<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 たとえば、EN-US カルチャでは、標準の長い日付パターンは"dddd, MMMMdd、yyyy"です。DE-DE カルチャは"dddd, d します。 MMMMyyyy"です。JA-JP カルチャは"yyyy'? 'M'? 'd'?'". 特定のコンピューターに固有の書式指定文字列は、標準の長い日付形式の文字列とは異なることにもカスタマイズできます。  
  
 現在のスレッド カルチャの詳細については、次を参照してください。、<xref:System.Threading.Thread.CurrentCulture%2A>プロパティです。 生成される書式指定文字、書式パターン、および出力の詳細については、次を参照してください。、[型の書式設定](~/docs/standard/base-types/formatting-types.md)トピックです。 書式指定文字に関連付けられている形式パターンを変更する方法の詳細については、次を参照してください。、<xref:System.Globalization.DateTimeFormatInfo>クラスです。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToLongDateString%2A>メソッドです。  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLongTimeString">
      <MemberSignature Language="C#" Value="public string ToLongTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToLongTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToLongTimeString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な長い形式の時刻の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを長い形式の時刻で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>によって定義されたパターンを使用してオブジェクトの形式が、<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A?displayProperty=nameWithType>現在のスレッド カルチャに関連付けられたプロパティ。 戻り値は"T"を指定することによって返される値と同じ[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)で、<xref:System.DateTime.ToString%28System.String%29>メソッドです。  
  
> [!IMPORTANT]
>  によって返される文字列、<xref:System.DateTime.ToLongTimeString%2A>メソッドはカルチャに依存します。 によって定義されたパターンを反映します<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>プロパティの現在のカルチャの<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 たとえば、EN-US カルチャの標準の長い時刻パターンは、"h:mm:ss tt"です。DE-DE カルチャは"HH:mm:ss"です。JA-JP カルチャ"H:mm:ss"です。 特定のコンピューターに固有の書式指定文字列は、標準の長い時刻形式の文字列とは異なることにもカスタマイズできます。  
  
 現在のスレッド カルチャの詳細については、次を参照してください。、<xref:System.Threading.Thread.CurrentCulture%2A>プロパティです。 生成される書式指定文字、書式パターン、および出力の詳細については、次を参照してください。、[型の書式設定](~/docs/standard/base-types/formatting-types.md)トピックです。 書式指定文字に関連付けられている形式パターンを変更する方法の詳細については、次を参照してください。、<xref:System.Globalization.DateTimeFormatInfo>クラスです。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToLongTimeString%2A>メソッドです。  
  
 [!code-csharp[System.DateTime.ToLongTimeString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tolongtimestring/cs/sls.cs#1)]
 [!code-vb[System.DateTime.ToLongTimeString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tolongtimestring/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToOADate">
      <MemberSignature Language="C#" Value="public double ToOADate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 ToOADate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToOADate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスの値をそれと等価な OLE オートメーション日付に変換します。</summary>
        <returns>このインスタンスの値と等価の OLE オートメーション日付を格納している倍精度浮動小数点数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 OLE オートメーション日付は、浮動小数点数を整数コンポーネント日午前 0 時、1899 年 12 月 30日前後の数は、小数部を表す 24 で除算その日の時刻として実装されます。 たとえば、午前 0 時、1899 年 12 月 31日で表される 1.0 です。午前 6 時、1900 年 1 月 1日は 2.25; によって表されます。午前 0 時、1899 年 12 月 29日として表されます-1.0。午前 6 時、1899 年 12 月 29日は-1.25 によって表されます。  
  
 基本 OLE オートメーション日付は 1899 年 12 月 30 日の深夜がします。 OLE オートメーション日付の最小値は、午前 0 時、1 年 0100年 1 月です。 OLE オートメーション日付の最大値が同じ<xref:System.DateTime.MaxValue?displayProperty=nameWithType>、31 年 12 月の最後の時点から 9999 です。  
  
 <xref:System.DateTime.ToOADate%2A>メソッドがスローされます、 <xref:System.OverflowException> 、現在のインスタンスがよりも後の日付を表すかどうか<xref:System.DateTime.MinValue>の深夜を過ぎた January1、0100 より以前のバージョン。 ただし、現在のインスタンスの値が場合<xref:System.DateTime.MinValue>0 が返されます。  
  
 OLE オートメーションの詳細については、次を参照してください。、 [MSDN ライブラリ](http://go.microsoft.com/fwlink/?linkid=37118)です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">このインスタンスの値を OLE オートメーション日付として表すことはできません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToShortDateString">
      <MemberSignature Language="C#" Value="public string ToShortDateString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortDateString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortDateString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な短い形式の日付の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを短い形式の日付で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>によって定義されたパターンを使用してオブジェクトの形式が、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A?displayProperty=nameWithType>現在のスレッド カルチャに関連付けられたプロパティ。 戻り値は"d"を指定することによって返される値と同じ[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)で、<xref:System.DateTime.ToString%28System.String%29>メソッドです。  
  
> [!IMPORTANT]
>  によって返される文字列、<xref:System.DateTime.ToShortDateString%2A>メソッドはカルチャに依存します。 現在のカルチャによって定義されたパターンを反映<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 たとえば、EN-US カルチャの標準の短い日付のパターンは、"m/d/yyyy"です。DE-DE カルチャは"ください。MM.yyyy"です。JA-JP カルチャでは、"yyyy/M/d"です。 特定のコンピューターに固有の書式指定文字列は、標準の短い日付形式の文字列とは異なることにもカスタマイズできます。  
  
 現在のスレッド カルチャの詳細については、次を参照してください。、<xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType>プロパティです。 生成される書式指定文字、書式パターン、および出力の詳細については、次を参照してください。、[型の書式設定](~/docs/standard/base-types/formatting-types.md)トピックです。 書式指定文字に関連付けられている形式パターンを変更する方法の詳細については、次を参照してください。、<xref:System.Globalization.DateTimeFormatInfo>クラスです。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToShortDateString%2A>メソッドです。 表示される呼び出しの結果、<xref:System.DateTime.ToShortDateString%2A>メソッドを呼び出すことと同じ、<xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType>形式のパラメーターとして"d"を持つメソッドです。  
  
 [!code-csharp[System.DateTime.ToShortDateString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/cs/ToShortDateString.cs#1)]
 [!code-vb[System.DateTime.ToShortDateString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToShortDateString/vb/ToShortDateString.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToShortTimeString">
      <MemberSignature Language="C#" Value="public string ToShortTimeString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToShortTimeString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToShortTimeString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を、それと等価な短い形式の時刻の文字列形式に変換します。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトを短い形式の時刻で表した文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>によって定義されたパターンを使用してオブジェクトの形式が、<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A?displayProperty=nameWithType>現在のスレッド カルチャに関連付けられたプロパティ。 戻り値は"t"を指定することによって返される値と同じ[標準の日時書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)で、<xref:System.DateTime.ToString%28System.String%29>メソッドです。  
  
> [!IMPORTANT]
>  によって返される文字列、<xref:System.DateTime.ToShortTimeString%2A>メソッドはカルチャに依存します。 現在のカルチャによって定義されたパターンを反映<xref:System.Globalization.DateTimeFormatInfo>オブジェクト。 たとえば、EN-US カルチャの標準の短い時刻パターンは、"h:mm tt"です。DE-DE カルチャは"HH:mm"です。JA-JP カルチャ"H:mm"です。 特定のコンピューターに固有の書式指定文字列は、標準の短い時刻形式の文字列とは異なることにもカスタマイズできます。  
  
 現在のスレッド カルチャの詳細については、次を参照してください。、<xref:System.Threading.Thread.CurrentCulture%2A>プロパティです。 生成される書式指定文字、書式パターン、および出力の詳細については、次を参照してください。、[型の書式設定](~/docs/standard/base-types/formatting-types.md)トピックです。 書式指定文字に関連付けられている形式パターンを変更する方法の詳細については、次を参照してください。、<xref:System.Globalization.DateTimeFormatInfo>クラスです。  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToShortTimeString%2A>メソッドです。  
  
 [!code-csharp[DateTime.ToShortLongString#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToShortLongString/cs/sls.cs#1)]
 [!code-vb[DateTime.ToShortLongString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToShortLongString/vb/sls.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の値を変換<see cref="T:System.DateTime" />オブジェクトを現在のカルチャの書式指定規則を使用して、等価の文字列形式にします。</summary>
        <returns>現在の <see cref="T:System.DateTime" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>オブジェクトは、一般的な日付と時刻の書式指定子 ('G') を使用して書式設定します。 特定の日付と時刻の書式指定子を使用して書式を設定する呼び出し、<xref:System.DateTime.ToString%28System.String%29>メソッドです。 一般的な日付と時刻の書式指定子 ('G') を使用して、特定のカルチャの書式を設定する呼び出し、<xref:System.DateTime.ToString%28System.IFormatProvider%29>メソッドです。 特定の日付と時刻書式指定子と、特定のカルチャの規則を使用して書式を設定する呼び出し、<xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29>メソッドです。  
  
 このメソッドは、基に、現在のカルチャの書式情報を使用します。 具体的には、によって返されるカスタム書式指定文字列が組み合わされて、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>と<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>のプロパティ、<xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、`Thread.CurrentThread.CurrentCulture.DateTimeFormat`プロパティです。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>」を参照してください。 他のオーバー ロード、<xref:System.DateTime.ToString%2A>メソッドを使用するカルチャを指定の出力のパターンを定義して使用する書式、<xref:System.DateTime>値。  
  
   
  
## Examples  
 次の例を示して 方法の文字列形式を<xref:System.DateTime>によって返される値、<xref:System.DateTime.ToString>メソッドが現在のスレッド カルチャに依存します。 EN-US から JA-JP を FR-FR に現在のスレッド カルチャを変更します。 各呼び出しの場合、<xref:System.DateTime.ToString>そのカルチャを使用して日付と時刻の値の文字列表現を取得するメソッド。  
  
 [!code-csharp[System.DateTime.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.DateTime.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage">
          <para><see cref="M:System.DateTime.ToString" />メソッドは、現在のカルチャで使用されるカレンダーで日付と時刻の文字列形式を返します。 場合、現在の値<see cref="T:System.DateTime" />インスタンスよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />です。 具体的な例を次に示します。 範囲外の日付の書式を設定しようと試みます、<see cref="T:System.Globalization.HijriCalendar" />クラスの現在のカルチャはアラビア語 (シリア) ときにします。  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception2.cs#2)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception2.vb#2)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定したカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価な文字列形式に変換します。</summary>
        <returns><see cref="T:System.DateTime" /> により指定された、現在の <paramref name="provider" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在の値<xref:System.DateTime>オブジェクトは、一般的な日付と時刻書式指定子 ('G') が、短い日付パターンと長い時刻のパターンを使用して、出力を書式設定を使用して書式設定します。  
  
 短い形式の日付と長い形式の時刻パターンの形式がによって定義された、`provider`パラメーター。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、<xref:System.IFormatProvider>インターフェイスです。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.DateTimeFormatInfo>現在のカルチャに関連付けられているオブジェクトを使用します。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 次の例では、文字列形式の日付と時刻を使用して<xref:System.Globalization.CultureInfo>を 5 つの異なるカルチャを表すオブジェクト。  
  
 [!code-csharp[System.DateTime.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString4.cs#3)]
 [!code-vb[System.DateTime.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString4.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">によって使用されるカレンダーでサポートされている日付の範囲外の日付と時刻が<paramref name="provider" />です。</exception>
        <block subset="none" type="usage">
          <para><see cref="M:System.DateTime.ToString(System.IFormatProvider)" />メソッドは、によって表されるカルチャで使用されるカレンダーで日付と時刻の文字列形式を返します、<paramref name="provider" />パラメーター。 によって、カレンダーが定義されている、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />プロパティです。 場合、現在の値<see cref="T:System.DateTime" />インスタンスよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />です。 具体的な例を次に示します。 範囲外の日付の書式を設定しようと試みます、<see cref="T:System.Globalization.JapaneseCalendar" />クラスです。  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception1.cs#1)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception1.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの日時書式指定文字列。</param>
        <summary>現在の値を変換<see cref="T:System.DateTime" />オブジェクトを指定した書式と、現在のカルチャの書式指定規則を使用して、等価の文字列形式。</summary>
        <returns><see cref="T:System.DateTime" /> により指定された、現在の <paramref name="format" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.ToString%28System.String%29> ; 詳細については、現在のカルチャの書式指定規則を使用する特定の形式で日付と時刻の値の文字列形式を返しますを参照してください<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>です。  
  
 `format`パラメーターは、単一の書式指定子の文字を含める必要があります (を参照してください[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) またはカスタムの書式パターン (を参照してください[カスタムの日付と時刻の書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)) 返される文字列の形式を定義します。 場合`format`は`null`または空の文字列は、一般書式指定子、'G' を使用します。  
  
 このメソッドのいくつかの使用は、次のとおりです。  
  
-   文字列を取得すると、現在のカルチャの短い形式の日付と時刻の形式で日付と時刻が表示されます。 これを行うには、"G"書式指定子を使用します。  
  
-   文字列を取得するには、月と年のみが含まれています。 これを行うには、"yyyy MM/"書式指定文字列を使用します。 書式指定文字列は、現在のカルチャの日付の区切り記号を使用します。  
  
-   文字列を取得するには、特定の形式で日時が含まれています。 たとえば、"mm/dd/yyyyHH:mm"書式指定文字列などを表示、日付と時刻の文字列は固定形式で"19//03//2013 18時 06分"です。 書式指定文字列を使用してカルチャに固有の設定に関係なく、固定の日付の区切り記号として「/」です。  
  
-   日付の文字列をシリアル化するための圧縮された形式で日付を取得するを使用できます。 たとえば、"yyyyMMdd"書式指定文字列は、日付の区切り記号なし 2 桁の月、1 日に 2 桁の数字がそれに続く 4 桁の年を表示します。  
  
 次の例では、これら 3 つの書式指定文字列を使用して、EN-US および FR-FR カルチャの規則を使用して、日付と時刻の値を表示します。  
  
 [!code-csharp[System.DateTime.ToString#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring5.cs#5)]
 [!code-vb[System.DateTime.ToString#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring5.vb#5)]  
  
   
  
## Examples  
 次の例の文字列形式を表示する標準の日付と時刻の書式指定文字列の各と、選択したカスタムの日付や時刻書式指定文字列を使用して、<xref:System.DateTime>値。 たとえば、現在のスレッド カルチャは EN-US です。  
  
 [!code-csharp[System.DateTime.ToString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/ToString2.cs#2)]
 [!code-vb[System.DateTime.ToString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/ToString2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">長さ<paramref name="format" />は 1 であり、に対して定義されている書式指定子文字のいずれでもない<see cref="T:System.Globalization.DateTimeFormatInfo" />です。  
  
 または  
  
 <paramref name="format" />有効なカスタム書式パターンを含まないもの。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">日時が、現在のカルチャで使用されるカレンダーでサポートされている日付の範囲外です。</exception>
        <block subset="none" type="usage">
          <para><see cref="M:System.DateTime.ToString(System.String)" />メソッドは、現在のカルチャで使用されるカレンダーで日付と時刻の文字列形式を返します。 場合、現在の値<see cref="T:System.DateTime" />インスタンスよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />です。 具体的な例を次に示します。 範囲外の日付の書式を設定しようと試みます、<see cref="T:System.Globalization.HebrewCalendar" />クラスの現在のカルチャがヘブライ語 (イスラエル)。  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception3.cs#3)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception3.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">標準またはカスタムの日時書式指定文字列。</param>
        <param name="provider">カルチャ固有の書式情報を提供するオブジェクト。</param>
        <summary>指定した書式およびカルチャ固有の書式情報を使用して、現在の <see cref="T:System.DateTime" /> オブジェクトの値をそれと等価の文字列形式に変換します。</summary>
        <returns><see cref="T:System.DateTime" /> および <paramref name="format" /> により指定された、現在の <paramref name="provider" /> オブジェクトの値の文字列形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `format`パラメーターは、単一の書式指定子の文字を含めることができます (を参照してください[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)) またはカスタムの書式パターン (を参照してください[カスタムの日付と時刻の書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md))。 場合`format`は`null`または空の文字列 ("")、"G"("標準書式指定子を使用します。  
  
 `provider`パラメーターは、標準書式指定子、およびシンボルと日付と時刻のコンポーネントの名前に対応するパターンを定義します。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>が書式指定規則が返される文字列に反映するのにはカルチャを表すオブジェクト。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティが返される文字列の書式を定義します。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   実装するカスタム オブジェクト、<xref:System.IFormatProvider>インターフェイスです。 その<xref:System.IFormatProvider.GetFormat%2A>メソッドを返します、<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.DateTimeFormatInfo>に現在関連付けられているカルチャが使用されます。 詳細については、「<xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>」を参照してください。  
  
   
  
## Examples  
 次の例では、次の 4 つの異なるカルチャの日時の文字列形式を表示するのに、標準の日時書式指定文字列の各を使用します。  
  
 [!code-csharp[System.DateTime.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.ToString/cs/tostring3.cs#4)]
 [!code-vb[System.DateTime.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.ToString/vb/tostring3.vb#4)]  
  
 次の例では、さまざまな書式設定方法、<xref:System.DateTime>インバリアントを使用して値<xref:System.Globalization.DateTimeFormatInfo>です。  
  
 [!code-cpp[Classic DateTime.ToString2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTime.ToString2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/CS/source.cs#1)]
 [!code-vb[Classic DateTime.ToString2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTime.ToString2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">長さ<paramref name="format" />は 1 であり、に対して定義されている書式指定子文字のいずれでもない<see cref="T:System.Globalization.DateTimeFormatInfo" />です。  
  
 または  
  
 <paramref name="format" />有効なカスタム書式パターンを含まないもの。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">によって使用されるカレンダーでサポートされている日付の範囲外の日付と時刻が<paramref name="provider" />です。</exception>
        <block subset="none" type="usage">
          <para><see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)" />メソッドで使用されるカレンダーで日付と時刻の文字列形式を返します、<paramref name="provider" />パラメーター。 によって、カレンダーが定義されている、<see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" />プロパティです。 場合、現在の値<see cref="T:System.DateTime" />インスタンスよりも前か<see cref="P:System.Globalization.Calendar.MinSupportedDateTime" />かそれより遅い<see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />がスローされます、<see cref="T:System.ArgumentOutOfRangeException" />です。 具体的な例を次に示します。 範囲外の日付の書式を設定しようと試みます、<see cref="T:System.Globalization.UmAlQuraCalendar" />クラスです。  
  
 [!code-csharp[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/cs/datetime.tostring.argumentoutofrangeexception4.cs#4)]
 [!code-vb[System.DateTime.ToString.ArgumentOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.tostring.argumentoutofrangeexception/vb/datetime.tostring.argumentoutofrangeexception4.vb#4)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTime ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime ToUniversalTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.ToUniversalTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.DateTime" /> オブジェクトの値を世界協定時刻 (UTC) に変換します。</summary>
        <returns><see cref="P:System.DateTime.Kind" /> プロパティが <see cref="F:System.DateTimeKind.Utc" /> であるオブジェクト。通常は、現在の <see cref="T:System.DateTime" /> オブジェクトと等価な UTC が値として格納されます。ただし、変換後の値が <see cref="F:System.DateTime.MaxValue" /> オブジェクトで表現可能な範囲を超えている場合は <see cref="T:System.DateTime" /> の値が格納され、逆に変換後の値が <see cref="F:System.DateTime.MinValue" /> オブジェクトで表現可能な範囲を下回る場合は <see cref="T:System.DateTime" /> が格納されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 世界協定時刻 (UTC) では、現地時刻から UTC オフセットを差し引いたと同じです。 UTC オフセットの詳細については、次を参照してください。<xref:System.TimeZone.GetUtcOffset%2A?displayProperty=nameWithType>です。 変換も考慮現在によって表される時刻に適用される夏時間規則<xref:System.DateTime>オブジェクト。  
  
> [!IMPORTANT]
>  [!INCLUDE[winxp](~/includes/winxp-md.md)] 、システム、<xref:System.DateTime.ToUniversalTime%2A>メソッドは、現地時刻から UTC に変換するときに現在の調整規則のみを認識します。 その結果、現在の調整規則を有効にされる前に、の期間を変換すると、ローカル時刻と UTC の違いが正確には反映されない可能性があります。  
  
 .NET Framework version 2.0 では、によって返される値で始まる、<xref:System.DateTime.ToUniversalTime%2A>メソッドはによって決定されます、 <xref:System.DateTime.Kind%2A> 、現在のプロパティ<xref:System.DateTime>オブジェクト。 次の表では、考えられる結果について説明します。  
  
|種類|結果|  
|----------|-------------|  
|<xref:System.DateTimeKind.Utc>|変換は行われません。|  
|<xref:System.DateTimeKind.Local>|現在<xref:System.DateTime>オブジェクトは UTC に変換します。|  
|<xref:System.DateTimeKind.Unspecified>|現在<xref:System.DateTime>オブジェクトが、現地時刻であると見なされ、変換を実行として<xref:System.DateTime.Kind%2A>された<xref:System.DateTimeKind.Local>です。|  
  
> [!NOTE]
>  <xref:System.DateTime.ToUniversalTime%2A>メソッドに変換する<xref:System.DateTime>値を現地時刻から UTC にします。 以外のローカルのタイム ゾーンを UTC 時刻に変換する、<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType>メソッドです。 UTC からのオフセットは認識される時刻を変換するを使用して、<xref:System.DateTimeOffset.ToUniversalTime%2A>メソッドです。  
  
 インスタンスの日付と時刻の値があいまいな時刻の場合は、このメソッドは、標準時であると想定します。 (あいまいな時刻とは、標準時またはローカルのタイム ゾーンが夏時間のいずれかに割り当てることができる)インスタンスの日付と時刻の値が無効な時刻の場合は、このメソッドは単にローカル タイム ゾーンの UTC を返す (utc) オフセットからローカル時刻を減算します。 (無効な時刻は夏時間調整規則の適用のために存在しません。)  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.ToUniversalTime%2A>メソッドです。  
  
 [!code-cpp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/cpp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CPP/class1.cpp#1)]
 [!code-csharp[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/CS/class1.cs#1)]
 [!code-vb[DateTime.ToLocalTime ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.ToLocalTime ToUniversalTime/VB/class1.vb#1)]  
  
 次の例で、<xref:System.DateTime.SpecifyKind%2A>メソッドを示すために、<xref:System.DateTime.Kind%2A>プロパティに影響、<xref:System.DateTime.ToLocalTime%2A>と<xref:System.DateTime.ToUniversalTime%2A>変換メソッド。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para><see cref="M:System.DateTime.ToUniversalTime" />ローカル時刻を UTC に変換するメソッドが使用される場合があります。 <see cref="M:System.DateTime.ToLocalTime" />を元のローカル時刻を復元するメソッドが呼び出されます。 ただし、元の時刻は、ローカル タイム ゾーンで無効な時刻を表している場合、2 つのローカル時刻値されませんと同じなります。 追加情報と例では、次を参照してください。、<see cref="M:System.DateTime.ToLocalTime" />メソッドです。  
  
 [!INCLUDE[winxp](~/includes/winxp-md.md)]システムでは、<see cref="M:System.DateTime.ToUniversalTime" />メソッドは、下位レベル (つまり、日付は現在の調整の開始日より前の日付を含む、すべての日付に適用するローカル タイム ゾーンの現在の調整規則のみを認識します。ルールの場合)。 実行されるアプリケーション[!INCLUDE[winxp](~/includes/winxp-md.md)]を必要とする従来の正確なローカルの日付と時刻の計算を使用してこの問題を回避する必要があります、<see cref="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />を取得する方法、<see cref="T:System.TimeZoneInfo" />ローカル タイム ゾーンに対応するオブジェクトし、呼び出しその<see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />メソッドです。  
  
 次の例は、違いを示しています、<see cref="M:System.DateTime.ToUniversalTime" />と<see cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />のメソッド、[!INCLUDE[winxp](~/includes/winxp-md.md)]米国内のシステム表示します。 最初の 2 つのメソッド呼び出しでは、2006 年の日付に (2007年で有効になった) を現在のタイム ゾーン調整規則が適用されます。 現在の調整規則が; 年 3 月の第 2 日曜日夏時間に遷移の提供します。以前のルール、2006 年、年 4 月の最初の日曜日に発生する夏時間への遷移に対して指定された有効であった。 3 番目のメソッドの呼び出しだけは、正確に、この履歴の日付と時間の変換を実行します。  
  
 [!code-csharp[System.DateTime.ToUniversalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.datetime.touniversaltime/cs/touniversaltime.cs#1)]
 [!code-vb[System.DateTime.ToUniversalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.datetime.touniversaltime/vb/touniversaltime.vb#1)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.DateTime@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="result">このメソッドが戻るとき、<see cref="T:System.DateTime" />に含まれている日時に相当する値<c>s</c>変換が成功した場合、または<see cref="F:System.DateTime.MinValue" />変換に失敗した場合。 場合、変換は失敗、 <c>s</c>パラメーターは<see langword="null" />、空の文字列 ("")、または日付と時刻の有効な文字列形式を含んでいません。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した文字列形式の日時を対応する <see cref="T:System.DateTime" /> 表現に変換し、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドがに似ていますが、<xref:System.DateTime.Parse%28System.String%29?displayProperty=nameWithType>点を除いて、メソッド、<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29>変換が失敗した場合、メソッドが例外をスローしません。  
  
 文字列`s`、現在の書式情報を使用して解析が<xref:System.Globalization.DateTimeFormatInfo>オブジェクトは、これは、現在のスレッド カルチャによって暗黙的に提供します。  
  
 このメソッド、認識できないデータを無視しようとしています。 可能であれば、および月、日、および現在の日付と年の情報が不足している格納します。 場合`s`日付のみとなしの時間を含むこのメソッドは、時間の値が深夜 12時 00分と想定します。 場合`s`日付コンポーネントを含む 2 桁の西暦の年の値に基づいて、現在のカルチャの現在の暦に変換されます、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>プロパティです。 先頭、内部、または末尾の空白文字`s`は無視されます。 日付と時刻の先頭と末尾のシャープ記号文字 ('#'、U +0 0023)、ペアで囲まできますいずれかで最後できますや以上の NULL 文字 (u+0000) してください。  
  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドが日付の文字列表現を解析する試行と異なるカルチャ間で、特定の文字列を解析しようとしています。 現在のカルチャの書式設定規則を使用して時間が失敗するか、異なる結果を返します。 解析される場合は、特定の日付と時刻の形式が異なるロケール間を使用して、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドまたはいずれかのオーバー ロードの<xref:System.DateTime.TryParseExact%2A>メソッドと書式指定子を提供します。  
  
 場合`s`メソッド解析して、現在の暦で閏年閏日の文字列形式を`s`が正常にします。 場合`s`現在のカルチャの現在の暦で閏日で、うるう年以外の文字列表現です、解析操作は失敗し、メソッドを返します`false`です。  
  
 場合`s`タイム ゾーン情報は含まれません`result`が含まれています、<xref:System.DateTime>値のある<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>メソッドが返されます。 解析する文字列には、タイム ゾーン情報が含まれている場合`result`が含まれています、<xref:System.DateTime>値が<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>メソッドが返されます。  
  
   
  
## Examples  
 次の例は、日付と時刻文字列の数を渡します、<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドです。  
  
 [!code-cpp[System.DateTime.TryParse#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.TryParse/cpp/datetime.tryparse1.cpp#1)]
 [!code-csharp[System.DateTime.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.DateTime.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>書式設定は、現在のプロパティによって影響<see cref="T:System.Globalization.DateTimeFormatInfo" />既定ではから派生するオブジェクト、**地域と言語のオプション**コントロール パネル内の項目。 <see cref="Overload:System.DateTime.TryParse" />メソッドの失敗を返すことができますが予期せず<see langword="False" />場合、現在<see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />と<see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />プロパティが同じ値に設定されます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles styles, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="provider">に関するカルチャ固有の書式情報を提供するオブジェクト<c>s</c>です。</param>
        <param name="styles">現在のタイム ゾーンまたは現在の日付と関連させて、解析された日付をどのように解釈するかを定義する列挙値のビットごとの組み合わせ。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <param name="result">このメソッドが戻るとき、<see cref="T:System.DateTime" />に含まれている日時に相当する値<c>s</c>変換が成功した場合、または<see cref="F:System.DateTime.MinValue" />変換に失敗した場合。 場合、変換は失敗、 <c>s</c>パラメーターは<see langword="null" />、空の文字列 ("")、または日付と時刻の有効な文字列形式を含んでいません。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定したカルチャ固有の書式情報と書式スタイルを使用して、指定した文字列形式の日付と時刻をそれと等価の <see cref="T:System.DateTime" /> に変換し、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドは、日付、時刻、タイム ゾーン情報を含めることができる文字列を解析します。 に似ていますが、<xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>点を除いて、メソッド、<xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType>変換が失敗した場合、メソッドが例外をスローしません。  
  
 このメソッドが、認識できないデータと解析を無視しようとしています。`s`完全にします。 場合`s`時刻が日がない、既定の代替、現在の日付でメソッドが含まれていますか、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>フラグを置き換える`DateTime.Date.MinValue`です。 場合`s`ではありません時間、12:00、時刻は午前 0 時が使用される、日付が含まれています。 日付はあるが、その年の部分から成る 2 桁のみ場合の年に変換されます、`provider`パラメーターの現在のカレンダーの値、<xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=nameWithType>プロパティです。 先頭、内部、または末尾の空白文字`s`は無視されます。 日付と時刻の先頭と末尾のシャープ記号文字 ('#'、U +0 0023)、ペアで囲まできますいずれかで最後できますや以上の NULL 文字 (u+0000) してください。  
  
 特定の有効な形式の日付と時刻要素、名前と、日付および時刻で使用される記号が定義されている、`provider`パラメーターで、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>の書式を使用するカルチャを表すオブジェクト、`s`パラメーター。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>プロパティ定義で使用される書式`s`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>で使用される書式を定義するオブジェクト`s`です。  
  
-   カスタムの <xref:System.IFormatProvider> 実装。 その<xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>メソッドを返します、<xref:System.Globalization.DateTimeFormatInfo>で使用される書式を定義するオブジェクト`s`です。  
  
 `provider` が `null` の場合は、現在のカルチャが使用されます。  
  
 場合`s`メソッド解析して、現在の暦で閏年閏日の文字列形式を`s`が正常にします。 場合`s`の現在の暦で閏日で、うるう年以外の文字列形式を`provider`、解析操作は失敗し、このメソッドを返します、`false`です。  
  
 `styles`パラメーターが解析された文字列と、解析操作が処理する方法の正確な解釈を定義します。 1 つまたは複数のメンバーであることができます、<xref:System.Globalization.DateTimeStyles>列挙型では、次の表で説明します。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、UTC に変換します。 場合`s`、タイム ゾーン オフセットが含まれていますまたは`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグは、メソッド呼び出し文字列を解析して<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値を utc を基準とし、セット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。 場合`s`(UTC) を表すことを示しますまたは`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグは、メソッドは、文字列を解析して、返されたでタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。 その他のすべてのケースでは、フラグには効果はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|有効な場合は、この値が無視されます。 日付と時刻の要素に空白が許可されている`s`です。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|有効な場合は、この値が無視されます。 日付と時刻の要素の先頭の空白文字が許可されている`s`です。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|有効な場合は、この値が無視されます。 日付と時刻の要素の末尾の空白文字が許可されている`s`です。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定する`s`先頭、内部、および、末尾の空白を含めることがあります。 これが既定の動作です。 より制限の厳しい指定することによって、オーバーライドできません<xref:System.Globalization.DateTimeStyles>などの列挙値<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定する場合`s`、タイム ゾーン情報がない、現地時刻を表すことが前提とします。 しない限り、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグが含まれている、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>に値が設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`、タイム ゾーン情報がない UTC を表記と見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>メソッドが返されたに変換して、フラグが存在<xref:System.DateTime>UTC から値を現地時刻と設定をその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.None>|有効な場合は、この値が無視されます。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイム ゾーン情報を含む文字列の場合、変換する日付と時刻の文字列を防止しようとする<xref:System.DateTime>値とその<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind?displayProperty=nameWithType>です。 呼び出すことによってこのような文字列を作成する通常、 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> "o"、"r"または"u"標準書式指定子を使用してメソッドです。|  
  
 場合`s`タイム ゾーン情報は含まれません、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドを返します。、<xref:System.DateTime>値のある<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>しない限り、`styles`フラグがそれ以外の場合を示します。 場合`s`タイム ゾーンまたはタイム ゾーン オフセットの情報が含まれる、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドが、必要な時間の変換を実行し、次のいずれかを返します。  
  
-   A<xref:System.DateTime>値が日付と時刻が反映現地時刻でありが<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>します。  
  
-   または、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>フラグを<xref:System.DateTime>値が日付と時刻が UTC といるを反映<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>します。  
  
 使用してこの動作をオーバーライドすることができます、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグ。  
  
## <a name="parsing-custom-cultures"></a>カスタム カルチャの解析  
 カスタム カルチャの生成された日付と時刻の文字列を解析する場合、<xref:System.DateTime.TryParseExact%2A>メソッドの代わりに、<xref:System.DateTime.TryParse%2A>すると、解析操作が成功する確率を向上します。 カスタム カルチャの日付と時刻の文字列は、複雑で解析するが困難にします。 <xref:System.DateTime.TryParse%2A>メソッドは、これらのすべてが失敗するいくつかの暗黙的な解析パターンを含む文字列の解析を試みます。 これに対し、<xref:System.DateTime.TryParseExact%2A>メソッドでは、明示的に成功する可能性のある 1 つ以上の正確な解析のパターンを指定する必要があります。  
  
 カスタムのカルチャの詳細については、次を参照してください。、<xref:System.Globalization.CultureAndRegionInfoBuilder?displayProperty=nameWithType>クラスです。  
  
   
  
## Examples  
 次の例を示しています、<xref:System.DateTime.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドです。  
  
 [!code-csharp[System.DateTime.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.DateTime.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
 -または-  
  
 <paramref name="styles" />無効な組み合わせが含まれています<see cref="T:System.Globalization.DateTimeStyles" />値 (たとえば、両方<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />と<see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="provider" />ニュートラル カルチャは、解析操作では使用できません。</exception>
        <block subset="none" type="usage">
          <para>現在のプロパティによって書式設定が影響を受ける<see cref="T:System.Globalization.DateTimeFormatInfo" />が提供するオブジェクト、<paramref name="provider" />パラメーター。 <see cref="Overload:System.DateTime.TryParse" />メソッドの失敗を返すことができますが予期せず<see langword="False" />場合、現在<see cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />と<see cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />プロパティが同じ値に設定されます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string format, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する日付と時刻を格納した文字列。</param>
        <param name="format">必要な形式<c>s</c>です。</param>
        <param name="provider">に関するカルチャ固有の書式情報を提供するオブジェクト<c>s</c>です。</param>
        <param name="style">使用可能な書式を示す 1 つまたは複数の列挙値のビットごとの組み合わせ<c>s</c>です。</param>
        <param name="result">このメソッドが戻るとき、<see cref="T:System.DateTime" />に含まれている日時に相当する値<c>s</c>変換が成功した場合、または<see cref="F:System.DateTime.MinValue" />変換に失敗した場合。 場合、変換は失敗、 <c>s</c>または<c>形式</c>パラメーターは<see langword="null" />、空の文字列、またはで指定されたパターンに対応する日時が含まれていない<c>形式</c>. このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式と完全に一致する必要があります。 このメソッドは、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> が正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドで定義された形式である必要があります日付の文字列形式を解析して、`format`パラメーター。 に似ていますが、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>点を除いて、メソッド、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>変換が失敗した場合、メソッドが例外をスローしません。  
  
 `s`パラメーターが解析するには、日付と時刻が含まれており、によって定義された形式である必要があります、`format`パラメーター。 日付、時刻、タイム ゾーン要素内にある場合`s`、によって指定された順序で現れる必要がありますも`format`します。 場合`format`日付定義時刻要素がないと、解析操作が成功した、結果として得られる<xref:System.DateTime>値が午前 0 時 (00: 00:00)。 場合`format`、時間を定義する日付要素がないと、解析操作が成功した、結果として得られる<xref:System.DateTime>既定値は、日付の`DateTime.Now.Date`、またはの日付が`DateTime.MinValue.Date`場合`styles`が含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグ。 `style`パラメーターを指定するかどうか、`s`パラメーターが先頭、内部、または末尾の空白文字を含めることができます。  
  
 場合`s`タイム ゾーン情報を含まない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>オブジェクトが<xref:System.DateTimeKind?displayProperty=nameWithType>です。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグを返す、<xref:System.DateTime>値が<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>、またはを使用して、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>と<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグを返す、<xref:System.DateTime>値のある<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>します。 S にタイム ゾーン情報が含まれている場合、時刻は現地時刻に変換されます必要に応じて、および<xref:System.DateTime.Kind%2A>、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグをローカル時刻を世界協定時刻 (UTC) に変換し、設定されません、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。  
  
 `format`パラメーターの正しい形式に対応するパターンを格納する、`s`パラメーター。 内のパターン、`format`パラメーターは、1 つまたは複数のカスタム書式指定子から、[カスタムの日付と時刻の書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)テーブル、またはから定義済みのパターンを識別する 1 つの標準書式指定子、[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)テーブル。  
  
 カスタム書式パターンでは日付または時刻の区切り記号を使用しない場合は、インバリアント カルチャを使用して、`provider`パラメーターおよび各カスタムの最も長い形式の書式指定子。 たとえば、パターンに時間を指定する場合より狭いフォームでは、"H"ではなく、広義の形式"HH"を指定します。  
  
> [!NOTE]
>  必要とするのではなく`s`解析操作が成功するために 1 つの形式に準拠して、呼び出すことができます、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドし、許可されている複数の形式を指定します。 これにより、解析操作が成功する可能性が高くなります。  
  
 特定の日付と時刻のシンボルとで使用される特定の言語で曜日の名前) などの文字列`s`によって定義された、`provider`パラメーターの正確な形式が格納される`s`場合`format`標準書式指定子の文字列です。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>を解釈するために使用するカルチャを表すオブジェクト`s`です。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティ定義シンボルでと書式設定`s`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   カスタム<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドでは、どちらかを返します、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターには 1 つまたは複数のメンバーが含まれています、<xref:System.Globalization.DateTimeStyles>かどうかと、空白文字で定義されていないかを決定する列挙体`format`に表示できる`s`解析操作の正確な動作を制御するとします。 次の表がそれぞれどのように説明のメンバー、<xref:System.Globalization.DateTimeStyles>列挙体の運用に与える影響、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>メソッドです。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、UTC に変換します。 場合`s`、タイム ゾーン オフセットが含まれていますまたは`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグは、メソッド呼び出し文字列を解析して<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値を utc を基準とし、セット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。 場合`s`(UTC) を表すことを示しますまたは`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグは、メソッドは、文字列を解析して、返されたでタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。 その他のすべてのケースでは、フラグには効果はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|定義されていない、空白文字を指定`format`任意の特定の日付または時刻要素の間に表示できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|定義されていない、空白文字を指定`format`の先頭に表示できる`s`です。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|定義されていない、空白文字を指定`format`の最後に表示できる`s`です。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定する`s`先頭、内部、および、末尾の空白文字で定義されていない場合があります`format`です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定する場合`s`、タイム ゾーン情報がない、現地時刻を表すことが前提とします。 しない限り、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグが含まれている、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>に値が設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`、タイム ゾーン情報がない UTC を表記と見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>メソッドが返されたに変換して、フラグが存在<xref:System.DateTime>UTC から値を現地時刻と設定をその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|場合`s`時刻を含む日付の情報がない場合、戻り値の日付が に設定されている`DateTime.MinValue.Date`です。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`既定値を使用してパラメーターを解析します。 含まれている以外の空白`format`は許可されていません。 場合`s`、返された日付、日付部分がない<xref:System.DateTime>値は 1/1/0001 に設定します。 場合`s`タイム ゾーン情報を含まない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。 タイム ゾーン情報が存在する場合`s`、時刻は現地時刻に変換され、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイム ゾーン情報を含む文字列への変換を防止しようとする<xref:System.DateTime>値とその<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind?displayProperty=nameWithType>です。 このフラグは、主に UTC 時刻の現地時間への変換を防ぎます。|  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドです。 注意してください、文字列"5/01/2009 午前 8 時 30 分"を解析できない正常時、`styles`パラメーターと等しい<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>では、先頭のスペースは許可されていないため`format`です。 さらに、文字列"5/01/2009 09時 00分"を正常に解析されたことはできません、`format`の"mm/dd/yyyyhh:mm"日付文字列としての先頭をゼロ、月の番号の前はため`format`が必要です。  
  
 [!code-csharp[System.DateTime.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact1.cs#1)]
 [!code-vb[System.DateTime.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
 -または-  
  
 <paramref name="styles" />無効な組み合わせが含まれています<see cref="T:System.Globalization.DateTimeStyles" />値 (たとえば、両方<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />と<see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.TryParseExact" />メソッドを返します。<see langword="false" />に解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含む場合。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョンでは、AM/PM 指定子は無視されます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string s, string[] formats, class System.IFormatProvider provider, valuetype System.Globalization.DateTimeStyles style, [out] valuetype System.DateTime&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
        <Parameter Name="style" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTime&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">変換する日時を含む文字列。</param>
        <param name="formats">許可された形式の配列<c>s</c>です。</param>
        <param name="provider">に関するカルチャ固有の書式情報を提供するオブジェクト<c>s</c>です。</param>
        <param name="style">使用可能な書式を示す列挙値のビットごとの組み合わせ<c>s</c>です。 通常指定する値は、<see cref="F:System.Globalization.DateTimeStyles.None" /> です。</param>
        <param name="result">このメソッドが戻るとき、<see cref="T:System.DateTime" />に含まれている日時に相当する値<c>s</c>変換が成功した場合、または<see cref="F:System.DateTime.MinValue" />変換に失敗した場合。 場合、変換は失敗<c>s</c>または<c>形式</c>は<see langword="null" />、 <c>s</c>の要素または<c>形式</c>が空の文字列、またはの形式<c>s</c>で少なくとも 1 つの形式パターンの指定とも一致しないは<c>形式</c>です。 このパラメーターは初期化せずに渡されます。</param>
        <summary>指定した書式の配列、カルチャ固有の書式情報、およびスタイルを使用して、指定した日付と時刻の文字列形式を等価の <see cref="T:System.DateTime" /> に変換します。 文字列形式の書式は、指定した書式の少なくとも 1 つと完全に一致する必要があります。 このメソッドは、変換に成功したかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> パラメーターが正常に変換された場合は <paramref name="s" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドに割り当てられているパターンのいずれかに一致する日付の文字列表現を解析して、`formats`パラメーター。 ようなもの、<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>メソッドを除く、<xref:System.DateTime.TryParseExact%2A>変換が失敗した場合、メソッドが例外をスローしません。  
  
 `s`パラメーターには、解析するには、日付と時刻が含まれています。 場合、`s`パラメーターには、時刻のみが含まれています。 および日がない場合を除き、現在の日付が使用される、`style`パラメーターが含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグいる場合、既定の日付 (`DateTime.Date.MinValue`) を使用します。 場合、`s`パラメーターが含まれるは、日付のみとありません時間、午前 0 時 (00: 00:00) を使用します。 `style`パラメーターも指定するかどうか、`s`パラメーターは、先頭を含めることができます、内部、または末尾の空白文字で書式指定文字列のいずれかで許可されているもの以外の`formats`します。  
  
 場合`s`タイム ゾーン情報を含まない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>オブジェクトが<xref:System.DateTimeKind?displayProperty=nameWithType>です。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグを返す、<xref:System.DateTime>値が<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>、またはを使用して、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>と<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグを返す、<xref:System.DateTime>値のある<xref:System.DateTime.Kind%2A>プロパティは<xref:System.DateTimeKind?displayProperty=nameWithType>します。 S にタイム ゾーン情報が含まれている場合、時刻は現地時刻に変換されます必要に応じて、および<xref:System.DateTime.Kind%2A>、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。 使用してこの動作を変更することができます、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグをローカル時刻を世界協定時刻 (UTC) に変換し、設定されません、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。  
  
 `formats`パラメーターには、パターンの配列が含まれています。 1 つ`s`解析操作が成功する場合に正確に一致する必要があります。 内のパターン、`formats`から 1 つまたは複数のカスタム書式指定子で構成されているパラメーター、[カスタムの日付と時刻の書式指定文字列](~/docs/standard/base-types/custom-date-and-time-format-strings.md)テーブル、またはから定義済みのパターンを識別する 1 つの標準書式指定子、[標準の日付と時刻の書式指定文字列](~/docs/standard/base-types/standard-date-and-time-format-strings.md)テーブル。  
  
 カスタム書式パターンでは日付または時刻の区切り記号を使用しない場合は、インバリアント カルチャを使用して、`provider`パラメーターおよび各カスタムの最も長い形式の書式指定子。 たとえば、パターンに時間を指定する場合より狭いフォームでは、"H"ではなく、広義の形式"HH"を指定します。  
  
 特定の日付と時刻のシンボルとで使用される特定の言語で曜日の名前) などの文字列`s`によって定義された、`provider`パラメーターの正確な形式が格納される`s`場合`format`標準書式指定子の文字列です。 `provider`パラメーターには、次のいずれかを指定できます。  
  
-   A<xref:System.Globalization.CultureInfo>を解釈するために使用するカルチャを表すオブジェクト`s`です。 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクトの<xref:System.Globalization.CultureInfo.DateTimeFormat%2A>プロパティ定義シンボルでと書式設定`s`です。  
  
-   A<xref:System.Globalization.DateTimeFormatInfo>日付と時刻のデータの書式を定義するオブジェクト。  
  
-   カスタム<xref:System.IFormatProvider>実装が<xref:System.IFormatProvider.GetFormat%2A>メソッドでは、どちらかを返します、<xref:System.Globalization.CultureInfo>オブジェクトまたは<xref:System.Globalization.DateTimeFormatInfo>の書式情報を提供するオブジェクト。  
  
 場合`provider`は`null`、<xref:System.Globalization.CultureInfo>現在のカルチャに対応するオブジェクトを使用します。  
  
 `styles`パラメーターには 1 つまたは複数のメンバーが含まれています、<xref:System.Globalization.DateTimeStyles>かどうかと、空白文字で定義されていないかを決定する列挙体`format`に表示できる`s`解析操作の正確な動作を制御するとします。 次の表がそれぞれどのように説明のメンバー、<xref:System.Globalization.DateTimeStyles>列挙体の運用に与える影響、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29>メソッドです。  
  
|DateTimeStyles メンバー|説明|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles.AdjustToUniversal>|解析`s`と、必要に応じて、UTC に変換します。 場合`s`、タイム ゾーン オフセットが含まれていますまたは`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグは、メソッド呼び出し文字列を解析して<xref:System.DateTime.ToUniversalTime%2A>、返されたに変換する<xref:System.DateTime>値を utc を基準とし、セット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。 場合`s`(UTC) を表すことを示しますまたは`s`タイム ゾーン情報は含まれませんが、`styles`が含まれています、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグは、メソッドは、文字列を解析して、返されたでタイム ゾーンの変換は行われません<xref:System.DateTime>値、およびセット、<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。 その他のすべてのケースでは、フラグには効果はありません。|  
|<xref:System.Globalization.DateTimeStyles.AllowInnerWhite>|定義されていない、空白文字を指定`format`任意の特定の日付または時刻要素の間に表示できます。|  
|<xref:System.Globalization.DateTimeStyles.AllowLeadingWhite>|定義されていない、空白文字を指定`format`の先頭に表示できる`s`です。|  
|<xref:System.Globalization.DateTimeStyles.AllowTrailingWhite>|定義されていない、空白文字を指定`format`の最後に表示できる`s`です。|  
|<xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces>|指定する`s`先頭、内部、および、末尾の空白文字で定義されていない場合があります`format`です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeLocal>|指定する場合`s`、タイム ゾーン情報がない、現地時刻を表すことが前提とします。 しない限り、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>フラグが含まれている、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>に値が設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.AssumeUniversal>|指定された場合`s`、タイム ゾーン情報がない UTC を表記と見なされます。 しない限り、<xref:System.Globalization.DateTimeStyles?displayProperty=nameWithType>メソッドが返されたに変換して、フラグが存在<xref:System.DateTime>UTC から値を現地時刻と設定をその<xref:System.DateTime.Kind%2A>プロパティを<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.NoCurrentDateDefault>|場合`s`時刻を含む日付の情報がない場合、戻り値の日付が に設定されている`DateTime.MinValue.Date`です。|  
|<xref:System.Globalization.DateTimeStyles.None>|`s`既定値を使用してパラメーターを解析します。 含まれている以外の空白`format`は許可されていません。 場合`s`、返された日付、日付部分がない<xref:System.DateTime>値は 1/1/0001 に設定します。 場合`s`タイム ゾーン情報を含まない、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。 タイム ゾーン情報が存在する場合`s`、時刻は現地時刻に変換され、 <xref:System.DateTime.Kind%2A> 、返されたプロパティ<xref:System.DateTime>にオブジェクトが設定されている<xref:System.DateTimeKind?displayProperty=nameWithType>です。|  
|<xref:System.Globalization.DateTimeStyles.RoundtripKind>|タイム ゾーン情報を含む文字列への変換を防止しようとする<xref:System.DateTime>値とその<xref:System.DateTime.Kind%2A>プロパティに設定<xref:System.DateTimeKind?displayProperty=nameWithType>です。 このフラグは、主に UTC 時刻の現地時間への変換を防ぎます。|  
  
   
  
## Examples  
 次の例では、<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>メソッドを使用できる形式の数値の文字列が正しく解析できることを確認してください。  
  
 [!code-csharp[System.Datetime.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.TryParseExact/cs/TryParseExact2.cs#2)]
 [!code-vb[System.Datetime.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.TryParseExact/vb/TryParseExact2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> は有効な <see cref="T:System.Globalization.DateTimeStyles" /> 値ではありません。  
  
 -または-  
  
 <paramref name="styles" />無効な組み合わせが含まれています<see cref="T:System.Globalization.DateTimeStyles" />値 (たとえば、両方<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />と<see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />)。</exception>
        <block subset="none" type="usage">
          <para>[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]、<see cref="Overload:System.DateTime.TryParseExact" />メソッドを返します。<see langword="false" />に解析する文字列が、時間の部分と契約に含まれていない AM/PM 指定子を含む場合。 [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)]と以前のバージョンでは、AM/PM 指定子は無視されます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTime UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime UtcNow" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンピューター上の現在の日時を世界協定時刻 (UTC) で表した <see cref="T:System.DateTime" /> オブジェクトを取得します。</summary>
        <value>現在の UTC 日時を値として保持するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの解決は、基になるオペレーティング システムに依存するシステム タイマーに依存します。 0.5 ~ 15 ミリ秒を指定する傾向にあります。

 以降、.NET Framework version 2.0 では、戻り値は、<xref:System.DateTime>が<xref:System.DateTime.Kind%2A>プロパティから返される<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>です。

 使用する代わりに<xref:System.DateTime.UtcNow%2A>は<xref:System.DateTimeOffset.UtcNow%2A?displayProperty=nameWithType>します。 以前の日付と時刻の値が割り当てることで世界協定時刻 (UTC) があることを示し、<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>にその<xref:System.DateTime.Kind%2A>プロパティ、後者は、日付を割り当てますおよび時間値は UTC 時刻のオフセット (等しい<xref:System.TimeSpan.Zero?displayProperty=nameWithType>)。
  
## Examples  
 次の例で、<xref:System.DateTime.SpecifyKind%2A>メソッドを示すために、<xref:System.DateTime.Kind%2A>プロパティに影響、<xref:System.DateTime.ToLocalTime%2A>と<xref:System.DateTime.ToUniversalTime%2A>変換メソッド。  
  
 [!code-csharp[DateTime.Kind_Suite#1](~/samples/snippets/csharp/VS_Snippets_CLR/DateTime.Kind_Suite/cs/ks.cs#1)]
 [!code-vb[DateTime.Kind_Suite#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/DateTime.Kind_Suite/vb/ks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberSignature Language="DocId" Value="P:System.DateTime.Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このインスタンスで表される日付の年の部分を取得します。</summary>
        <value>1 から 9999 までの間の年。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DateTime.Year%2A>プロパティは、構成のグレゴリオ暦カレンダーの現在のインスタンスの年を返します。 現在のカルチャの既定の暦を使用して年は返しません。 年を取得する、特定の暦を使用して、カレンダーでを呼び出すことができます`GetYear`メソッドを次のコードを示します。  
  
 [!code-csharp[System.DateTime.Year#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Year/cs/Year.cs#1)]
 [!code-vb[System.DateTime.Year#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Year/vb/Year.vb#1)]  
  
   
  
## Examples  
 次の例で、<xref:System.DateTime.Year%2A>プロパティです。  
  
 [!code-cpp[System.DateTime.Minute etc#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CPP/class1.cpp#1)]
 [!code-csharp[System.DateTime.Minute etc#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.DateTime.Minute etc/CS/class1.cs#1)]
 [!code-vb[System.DateTime.Minute etc#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.DateTime.Minute etc/VB/class1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
