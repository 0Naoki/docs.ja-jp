<Type Name="PrintPropertyDictionary" FullName="System.Printing.IndexedProperties.PrintPropertyDictionary">
  <TypeSignature Language="C#" Value="public class PrintPropertyDictionary : System.Collections.Hashtable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit PrintPropertyDictionary extends System.Collections.Hashtable implements class System.IDisposable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Collections.Hashtable</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>プロパティと内のオブジェクトに関連付けられている値のコレクションを表します、<see cref="N:System.Printing" />名前空間。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コレクションの形式になります、<xref:System.Collections.Hashtable>ディクショナリ。 <xref:System.Collections.DictionaryEntry.Value%2A>の各プロパティ<xref:System.Collections.DictionaryEntry>から派生したクラスのインスタンスは、コレクション内で<xref:System.Printing.IndexedProperties.PrintProperty>です。  
  
   
  
## Examples  
 次の例では、このクラスを使用して、場所、ポート、および共有の状態のみで既存のプリンターとそのプロパティに異なる 2 つ目のプリンターをインストールする方法を示します。  
  
 [!code-csharp[ClonePrinter#ClonePrinter](~/samples/snippets/csharp/VS_Snippets_Wpf/ClonePrinter/CSharp/Program.cs#cloneprinter)]
 [!code-vb[ClonePrinter#ClonePrinter](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClonePrinter/visualbasic/program.vb#cloneprinter)]  
  
 次の例では、このクラスを使用して、リフレクションを使用せず、プロパティ、および印刷システム オブジェクトでは、これらのプロパティの種類を実行時に検出する方法を示します。  
  
 [!code-csharp[GetPrintObjectPropertyTypesWithoutReflection#ShowPropertyTypesWithoutReflection](~/samples/snippets/csharp/VS_Snippets_Wpf/GetPrintObjectPropertyTypesWithoutReflection/CSharp/Program.cs#showpropertytypeswithoutreflection)]
 [!code-vb[GetPrintObjectPropertyTypesWithoutReflection#ShowPropertyTypesWithoutReflection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GetPrintObjectPropertyTypesWithoutReflection/visualbasic/program.vb#showpropertytypeswithoutreflection)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintPropertyDictionary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.IndexedProperties.PrintPropertyDictionary.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PrintPropertyDictionary (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.IndexedProperties.PrintPropertyDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">オブジェクトを逆シリアル化または逆シリアル化する必要があるデータ。</param>
        <param name="context">ソースと変換先を含む、シリアル化ストリームのコンテキスト。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />クラスし、指定した提供<see cref="T:System.Runtime.Serialization.SerializationInfo" />と<see cref="T:System.Runtime.Serialization.StreamingContext" />です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Printing.IndexedProperties.PrintProperty attributeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Printing.IndexedProperties.PrintProperty attributeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.IndexedProperties.PrintPropertyDictionary.Add(System.Printing.IndexedProperties.PrintProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeValue" Type="System.Printing.IndexedProperties.PrintProperty" />
      </Parameters>
      <Docs>
        <param name="attributeValue">オブジェクト (から派生したクラスの<see cref="T:System.Printing.IndexedProperties.PrintProperty" />) 印刷システム ハードウェアまたはソフトウェア コンポーネントのプロパティを表すです。</param>
        <summary>指定したオブジェクトを追加します (から派生したクラスの<see cref="T:System.Printing.IndexedProperties.PrintProperty" />) をディクショナリにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.IndexedProperties.PrintProperty.Name%2A>プロパティ`attributeValue`なります、<xref:System.Collections.DictionaryEntry.Key%2A>新しいプロパティ<xref:System.Collections.DictionaryEntry>です。 <xref:System.Printing.IndexedProperties.PrintProperty>全体になると、<xref:System.Collections.DictionaryEntry.Value%2A>新しいプロパティ<xref:System.Collections.DictionaryEntry>です。  
  
 ディクショナリにエントリを追加する別の方法を参照してください。<xref:System.Printing.IndexedProperties.PrintPropertyDictionary.SetProperty%2A>です。  
  
   
  
## Examples  
 次の例では、このメソッドを使用して、場所、ポート、および共有の状態のみで既存のプリンターのプロパティとは異なる 2 つ目のプリンターをインストールする方法を示します。  
  
 [!code-csharp[ClonePrinter#ClonePrinter](~/samples/snippets/csharp/VS_Snippets_Wpf/ClonePrinter/CSharp/Program.cs#cloneprinter)]
 [!code-vb[ClonePrinter#ClonePrinter](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClonePrinter/visualbasic/program.vb#cloneprinter)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override sealed void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>によって使用されているすべてのリソースを解放、<see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose> を使い終わったら <xref:System.Printing.IndexedProperties.PrintPropertyDictionary> を呼び出します。 <xref:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose> メソッドによって、<xref:System.Printing.IndexedProperties.PrintPropertyDictionary> は使用不可の状態になります。 呼び出した後<xref:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose>、すべての参照を解放する必要があります、<xref:System.Printing.IndexedProperties.PrintPropertyDictionary>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Printing.IndexedProperties.PrintPropertyDictionary>占有されていた。 詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。  
  
> [!NOTE]
>  <xref:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose> への最後の参照を解放する前に、必ず <xref:System.Printing.IndexedProperties.PrintPropertyDictionary> を呼び出してください。 それ以外の場合、使用されているリソースは解放されませんガベージ コレクター呼び出すまで、<xref:System.Object.Finalize%2A>のメソッド、<xref:System.Printing.IndexedProperties.PrintPropertyDictionary>オブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool A_0);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool A_0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="A_0" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="A_0">To be added.</param>
        <summary>によって使用されているアンマネージ リソースを解放、<see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />し、必要に応じてマネージ リソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、パブリック<xref:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose>メソッドおよび<xref:System.Object.Finalize%2A>メソッドです。 <xref:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose>プロテクト呼び出します<xref:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose%28System.Boolean%29>に設定された名前のないブール値パラメーターを持つメソッド`true`です。 <xref:System.Object.Finalize%2A>呼び出す<xref:System.Printing.IndexedProperties.PrintPropertyDictionary.Dispose%28System.Boolean%29>パラメーターを設定して`false`です。  
  
 ブール型のパラメーターがの場合`true`、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放します。 この<xref:System.Printing.IndexedProperties.PrintPropertyDictionary>参照します。 このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。 オーバーライドする場合<see langword="Dispose(Boolean)" />既に破棄されているを以前の呼び出しでオブジェクトを参照しないように注意、<see langword="Dispose" />です。 実装する方法の詳細についての<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。  
  
 詳細については<see langword="Dispose" />と<see cref="M:System.Object.Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)です。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.IndexedProperties.PrintPropertyDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">オブジェクトをシリアル化に使用されるすべてのデータを格納します。</param>
        <param name="context">ソースと変換先を含む、シリアル化ストリームのコンテキストについて説明します。</param>
        <summary>追加、<see cref="T:System.Runtime.Serialization.SerializationInfo" />をシリアル化するために必要なデータを<see cref="T:System.Printing.IndexedProperties.PrintPropertyDictionary" />です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Printing.IndexedProperties.PrintProperty GetProperty (string attribName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.IndexedProperties.PrintProperty GetProperty(string attribName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.IndexedProperties.PrintPropertyDictionary.GetProperty(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.IndexedProperties.PrintProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attribName">によって表されるプロパティの名前、<see cref="T:System.Printing.IndexedProperties.PrintProperty" />です。</param>
        <summary>オブジェクトを取得します (から派生したクラスの<see cref="T:System.Printing.IndexedProperties.PrintProperty" />) を表す、指定されたプロパティ。</summary>
        <returns>派生したクラスのオブジェクト、<see cref="T:System.Printing.IndexedProperties.PrintProperty" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `attribName` 、大文字小文字の区別を含め、印刷システム オブジェクトの特定のプロパティの名前とまったく同じスペル必要があります。 たとえば、<xref:System.Printing.PrintQueue.QueuePort%2A>のプロパティ、 <xref:System.Printing.PrintQueue> "QueuePort"、"PrintPort"、"Port"または"Queueport"オブジェクトを記述する必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeserialization">
      <MemberSignature Language="C#" Value="public override void OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.IndexedProperties.PrintPropertyDictionary.OnDeserialization(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">イベントのソース。</param>
        <summary><see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="public void SetProperty (string attribName, System.Printing.IndexedProperties.PrintProperty attribValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetProperty(string attribName, class System.Printing.IndexedProperties.PrintProperty attribValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.IndexedProperties.PrintPropertyDictionary.SetProperty(System.String,System.Printing.IndexedProperties.PrintProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribName" Type="System.String" />
        <Parameter Name="attribValue" Type="System.Printing.IndexedProperties.PrintProperty" />
      </Parameters>
      <Docs>
        <param name="attribName">属性の名前。</param>
        <param name="attribValue">派生した型のオブジェクト<see cref="T:System.Printing.IndexedProperties.PrintProperty" />です。</param>
        <summary>派生したクラスのオブジェクトに指定された属性の値を設定<see cref="T:System.Printing.IndexedProperties.PrintProperty" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ディクショナリが含まれていない場合`attribName`、`attribName`が追加され、設定`attribValue`が、`attribName`と同じ`attribValue`です。名前です。 これらの値が同一でない場合は、このメソッドは何も行いません。  
  
   
  
## Examples  
 次の例では、このメソッドを使用して、場所、ポート、および共有の状態のみで既存のプリンターのプロパティとは異なる 2 つ目のプリンターをインストールする方法を示します。  
  
 [!code-csharp[ClonePrinter#ClonePrinter](~/samples/snippets/csharp/VS_Snippets_Wpf/ClonePrinter/CSharp/Program.cs#cloneprinter)]
 [!code-vb[ClonePrinter#ClonePrinter](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClonePrinter/visualbasic/program.vb#cloneprinter)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="attribName" />ディクショナリ内に既に値が既に<paramref name="attribValue" />です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
