<Type Name="WriteOnceBlock&lt;T&gt;" FullName="System.Threading.Tasks.Dataflow.WriteOnceBlock&lt;T&gt;">
  <TypeSignature Language="C#" Value="public sealed class WriteOnceBlock&lt;T&gt; : System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;T,T&gt;, System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;T&gt;, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;, System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WriteOnceBlock`1&lt;T&gt; extends System.Object implements class System.Threading.Tasks.Dataflow.IDataflowBlock, class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!T, !T&gt;, class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!T&gt;, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!T&gt;, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;T,T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">このデータ フロー ブロックがバッファー内のデータの種類を指定します。</typeparam>
    <summary>データフロー ブロックのネットワークで、最大 1 個の要素を受け取り格納するバッファーを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  TPL データ フローのライブラリ (<xref:System.Threading.Tasks.Dataflow?displayProperty=nameWithType> 名前空間) は [!INCLUDE[net_v45](~/includes/net-v45-md.md)] と一緒に配布されません。 インストールする、<xref:System.Threading.Tasks.Dataflow>名前空間でプロジェクトを開く[!INCLUDE[vs_dev11_long](~/includes/vs-dev11-long-md.md)]、選択**NuGet パッケージの管理**プロジェクト メニューのおよびオンラインで検索から、`Microsoft.Tpl.Dataflow`パッケージ。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WriteOnceBlock (Func&lt;T,T&gt; cloningFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!T, !T&gt; cloningFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cloningFunction" Type="System.Func&lt;T,T&gt;" />
      </Parameters>
      <Docs>
        <param name="cloningFunction">使用するのには、他のブロックに提供されるデータを複製する関数。</param>
        <summary>新しい <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> を初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WriteOnceBlock (Func&lt;T,T&gt; cloningFunction, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;!T, !T&gt; cloningFunction, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cloningFunction" Type="System.Func&lt;T,T&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <param name="cloningFunction">使用するのには、他のブロックに提供されるデータを複製する関数。</param>
        <param name="dataflowBlockOptions">この構成に使用するオプション<see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />です。</param>
        <summary>新しい初期化<see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />、指定した<see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />です。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>信号を<see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />ことにする必要がありますいないを受け入れるも、これ以上メッセージを生成もより延期されたメッセージを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後<xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601.Complete%2A>されましたデータフロー ブロックで呼び出されると、そのブロックが完了してその<xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601.Completion%2A>タスクは、以前使用可能なすべてのデータを処理した後に、最終的な状態になる、します。 <xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601.Complete%2A>発生すると、完了の待機をブロックしませんではなく、要求が開始されますが、実行すると、完了するまで待って、<xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601.Completion%2A>タスクを使用することがあります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completion">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task Completion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task Completion" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Threading.Tasks.Task" />非同期操作や、データ フロー ブロックの完了を表すです。</summary>
        <value>タスクです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 データ フロー ブロックは、それが処理中でないメッセージと、これ以上メッセージが処理されることを保証がされているときに完了したと見なされます。 返された<xref:System.Threading.Tasks.Task>関連するブロックが完了した場合は、完了した状態に遷移します。 移行、 <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>ブロックには、データ フロー ブロックのに従って正常に処理が完了したときの状態がセマンティクスを定義します。 移行、 <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.Faulted>状態、データ フロー ブロックが未処理の例外によって処理の途中で処理を完了に移行すると、 <xref:System.Threading.Tasks.TaskStatus> <xref:System.Threading.Tasks.TaskStatus.Canceled>データ フロー ブロックには、キャンセル要求を受信したため途中で処理が完了したときの状態。 タスクが完了した場合、<xref:System.Threading.Tasks.TaskStatus.Faulted>状態、その`Exception`が返される、<xref:System.AggregateException>が失敗するブロックを引き起こした 1 つまたは複数の例外を含んでいます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo">
      <MemberSignature Language="C#" Value="public IDisposable LinkTo (System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IDisposable LinkTo(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
      </Parameters>
      <Docs>
        <param name="target"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />にすると、このソースに接続します。</param>
        <param name="linkOptions">A<see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />リンクを構成するインスタンス。</param>
        <summary>リンク、<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />を指定した<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />です。</summary>
        <returns>、Dispose を呼び出すことによって、ターゲットからソースを解除する IDisposable です。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="target" />null (Visual Basic の場合) の場合は Nothing または<paramref name="linkOptions" />が null (Visual Basic の場合) の場合は Nothing です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.IDataflowBlock.Fault">
      <MemberSignature Language="C#" Value="void IDataflowBlock.Fault (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception"><see cref="T:System.Exception" />フォールトの原因となった。</param>
        <summary>により、<see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />で完了する、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />状態です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 後<xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601.System%23Threading%23Tasks%23Dataflow%23IDataflowBlock%23Fault%2A>されましたデータフロー ブロックで呼び出されると、そのブロックが完了してその<xref:System.Threading.Tasks.Dataflow.WriteOnceBlock%601.Completion%2A>タスクは、最終的な状態を入力してください。 ブロックにエラーが発生、としてで、ブロックをキャンセルすると、バッファー内のメッセージ (未処理の入力メッセージと unoffered 出力メッセージ) が失われます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="exception" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;T&gt;.TryReceiveAll">
      <MemberSignature Language="C#" Value="bool IReceivableSourceBlock&lt;T&gt;.TryReceiveAll (out System.Collections.Generic.IList&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;T&gt;.TryReceiveAll([out] class System.Collections.Generic.IList`1&lt;!T&gt;&amp; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock&lt;T&gt;#TryReceiveAll(System.Collections.Generic.IList{`0}@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IList&lt;T&gt;&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="items">アイテムのソースから受信されます。</param>
        <summary>すべての利用可能な項目を同期的に受信しようとしています、<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />です。</summary>
        <returns>
          <see langword="true" />場合は 1 つまたは複数の項目を受信した可能性があります。それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、項目を提供するソースの待機をブロックしません。  
  
 要素が使用できるかどうかを要素を確認してから返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ConsumeMessage">
      <MemberSignature Language="C#" Value="T ISourceBlock&lt;T&gt;.ConsumeMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt; target, out bool messageConsumed);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !T System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ConsumeMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T&gt; target, [out] bool&amp; messageConsumed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&lt;T&gt;#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;" />
        <Parameter Name="messageConsumed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />消費されて、メッセージのです。</param>
        <param name="target"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />メッセージを消費します。</param>
        <param name="messageConsumed">
          <see langword="true" />場合は、メッセージが正常に使用されたです。それ以外の場合、<see langword="false" />です。</param>
        <summary>リンクによって呼び出されます<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />受け入れるおよび使用する、<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />これによって以前に提供<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />です。</summary>
        <returns>消費されたメッセージの値。 別にこれは必ずしも対応<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />インスタンスの以前に予約され、として渡されるよりも、<paramref name="messageHeader" />に<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />です。 消費<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />として渡される値ではなく、返される値を使用する必要があります<paramref name="messageValue" />を通じて<see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />です。  
  
 要求メッセージを使用できない場合、戻り値がなります<see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 のみ<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>をこのインスタンスにリンクされている<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>インスタンスを使用できます<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A>、消費にのみ使用する必要があります<xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader>このソースとターゲットによって以前のインスタンスに提供します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="messageHeader" /> が有効ではありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ReleaseReservation">
      <MemberSignature Language="C#" Value="void ISourceBlock&lt;T&gt;.ReleaseReservation (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ReleaseReservation(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&lt;T&gt;#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />リリースされている予約済みのメッセージのです。</param>
        <param name="target"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />以前に予約されたメッセージを解放します。</param>
        <summary>リンクによって呼び出されます<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />以前に予約を解放する<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />この<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 のみ<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>をこのインスタンスにリンクされている<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>インスタンスを使用できます`ReleaseReservation`、リリースにのみ使用する必要があります<xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader>インスタンスは以前と正常にターゲットによって予約されています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="messageHeader" /> が有効ではありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="target" />予約されているメッセージがありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ReserveMessage">
      <MemberSignature Language="C#" Value="bool ISourceBlock&lt;T&gt;.ReserveMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;.ReserveMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!T&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock&lt;T&gt;#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="messageHeader"><see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />予約されているので、メッセージのです。</param>
        <param name="target"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />メッセージを予約します。</param>
        <summary>リンクによって呼び出されます<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />を以前に提供された予約<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />この<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />です。</summary>
        <returns>
          <see langword="true" />場合は、メッセージが正常に予約されました。それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 のみ<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>をこのインスタンスにリンクされている<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>インスタンスを使用できます<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A>、予約にのみ使用する必要があります<xref:System.Threading.Tasks.Dataflow.DataflowMessageHeader>このソースとターゲットによって以前のインスタンスに提供します。  
  
 場合`true`が返されます、<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>いずれかを呼び出す必要があります、後で<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ConsumeMessage%2A>または<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReleaseReservation%2A>このメッセージにします。 これに失敗すると、ソースとその他のターゲットを使用して、これをさらに、メッセージを伝達するできなくなる可能性があります。  
  
 <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601.ReserveMessage%2A>呼び出さないでくださいターゲットはすべて内部のロックを保持しているときにします。 これに違反するデータ フロー ネットワークでデッドロックを回避するために必要なロック階層。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="messageHeader" /> が有効ではありません。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;.OfferMessage">
      <MemberSignature Language="C#" Value="System.Threading.Tasks.Dataflow.DataflowMessageStatus ITargetBlock&lt;T&gt;.OfferMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, T messageValue, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt; source, bool consumeToAccept);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Threading.Tasks.Dataflow.DataflowMessageStatus System.Threading.Tasks.Dataflow.ITargetBlock&lt;T&gt;.OfferMessage(valuetype System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, !T messageValue, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!T&gt; source, bool consumeToAccept) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock&lt;T&gt;#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.DataflowMessageStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="messageHeader" Type="System.Threading.Tasks.Dataflow.DataflowMessageHeader" />
        <Parameter Name="messageValue" Type="T" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T&gt;" />
        <Parameter Name="consumeToAccept" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="messageHeader">A<see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />を提供しているメッセージのヘッダーを表すインスタンス。</param>
        <param name="messageValue">提供されるメッセージの値。</param>
        <param name="source"><see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />メッセージを提供します。 可能性があります<see langword="null" />です。</param>
        <param name="consumeToAccept">設定<see langword="true" />に指示を呼び出す対象<see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />への呼び出し中に同期的に<see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />を取得する前に、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />メッセージを使用するためにします。</param>
        <summary>メッセージを提供、<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />ターゲットを使用したり、メッセージを延期する機会を提供します。</summary>
        <returns>提供されたメッセージの状態。 メッセージが、ターゲットによって受け入れられた場合<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />が返されます、およびターゲットによって所有されているようになりましたので、ソースは、提供されたメッセージを使用できなくする必要があります。 場合は、メッセージは、ターゲットによって延期されました<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />が返されますを通知しようとするターゲットが後で使用したり、メッセージの予約として以外の場合は、その間、ソースをまだメッセージを所有してその他のブロックに提供できます。  
  
 ターゲットがそれ以外の場合延期された場合、メッセージが、<paramref name="source" />が<see langword="null" />、<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />が代わりに返されます。  
  
 ターゲットは、メッセージが実行されなかった場合、別のターゲットにメッセージを配信するか、単に破棄して、ソースのために同意を試みた場合<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />が返されます。  
  
 メッセージをそのままにしない場合は、ターゲット<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />が返されます。 ターゲットがメッセージを受け入れることはありませんを選択しなかった場合は、このソースから別のメッセージをそのまま<see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />が返されます。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="messageHeader" />が無効です。  
  
 - または - <paramref name="consumeToAccept" /> null 以外に用意されている場合は true のみあります<paramref name="source" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この書式設定された名前を表す文字列を返します<see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />インスタンス。</summary>
        <returns>この書式設定された名前を表す文字列<see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 継承された<xref:System.Object>です。 使用して、<xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A>オプション。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReceive">
      <MemberSignature Language="C#" Value="public bool TryReceive (Predicate&lt;T&gt; filter, out T item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryReceive(class System.Predicate`1&lt;!T&gt; filter, [out] !T&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Predicate&lt;T&gt;" />
        <Parameter Name="item" Type="T&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filter">述語の値は、受信するために正常に渡す必要があります。  <c>フィルター</c>可能性があります<see langword="null" />、後者のすべての項目が渡されます。</param>
        <param name="item">ソースから受信したアイテムです。</param>
        <summary>使用可能な出力項目を同期的に受信する試みを<see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />です。</summary>
        <returns>
          <see langword="true" />項目が受信される可能性があります。 場合それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、項目を提供するソースの待機をブロックしません。  
  
 要素が使用できるかどうかを要素を確認してから返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
