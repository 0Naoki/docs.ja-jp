<Type Name="DataflowBlock" FullName="System.Threading.Tasks.Dataflow.DataflowBlock">
  <TypeSignature Language="C#" Value="public static class DataflowBlock" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataflowBlock extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.DataflowBlock" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>データフロー ブロックを操作する静的 (Visual Basic の場合は共有) メソッドのセットを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 TPL データ フローのライブラリ (<xref:System.Threading.Tasks.Dataflow> 名前空間) は [!INCLUDE[net_v45](~/includes/net-v45-md.md)] と一緒に配布されません。 インストールする、<xref:System.Threading.Tasks.Dataflow>名前空間でプロジェクトを開く[!INCLUDE[vs_dev11_long](~/includes/vs-dev11-long-md.md)]、選択**NuGet パッケージの管理**プロジェクト メニューのおよびオンラインで検索から、`Microsoft.Tpl.Dataflow`パッケージ。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsObservable&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;TOutput&gt; AsObservable&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObservable`1&lt;!!TOutput&gt; AsObservable&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source">ラップするソースです。</param>
        <summary>新たに作成<see cref="T:System.IObservable`1" />抽象化、<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />です。</summary>
        <returns><see cref="T:System.IObservable`1" />ソースにサブスクライブされるオブザーバーを有効にします。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AsObserver&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static IObserver&lt;TInput&gt; AsObserver&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObserver`1&lt;!!TInput&gt; AsObserver&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObserver&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">ターゲット ブロックによって受け入れられる入力の種類を指定します。</typeparam>
        <param name="target">ラップするターゲット。</param>
        <summary>新たに作成<see cref="T:System.IObserver`1" />抽象化、<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />です。</summary>
        <returns>ターゲット ブロックをラップするオブザーバー。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">最初のソースに含まれるデータの種類を指定します。</typeparam>
        <typeparam name="T2">2 番目のソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source1">1 番目のソース。</param>
        <param name="action1">最初のソースからのデータで実行するハンドラー。</param>
        <param name="source2">2 番目のソース。</param>
        <param name="action2">2 番目のソースからのデータで実行するハンドラー。</param>
        <summary>どのソースによるデータ使用可能な最初の指定したハンドラーを呼び出し、2 つのデータフロー ソースを監視します。</summary>
        <returns>A<see cref="T:System.Threading.Tasks.Task`1" />を表す非同期の選択肢です。 両方のソースが、選択を完了する前に完了すると、結果のタスクが取り消されます。 ハンドラーの完了時に、結果のタスクが完了が利用可能なデータ ソースを 1 つの選択肢に正常に反映されると、タスクが終了ハンドラーは、例外をスローする場合、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />状態にあり、未処理の例外が含まれます。 タスクが終了する場合は、その<see cref="P:System.Threading.Tasks.Task`1.Result" />0 または 1 に設定すると、それぞれ最初または 2 番目のソースを表します。  
  
 このメソッドは、両方しない 2 つのデータ ソースのいずれかの要素のみが使用されます。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source1" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="action1" />は<see langword="null" />します。  
  
 または  
  
 <paramref name="source2" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="action2" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1">最初のソースに含まれるデータの種類を指定します。</typeparam>
        <typeparam name="T2">2 番目のソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source1">1 番目のソース。</param>
        <param name="action1">最初のソースからのデータで実行するハンドラー。</param>
        <param name="source2">2 番目のソース。</param>
        <param name="action2">2 番目のソースからのデータで実行するハンドラー。</param>
        <param name="dataflowBlockOptions">このオプションを構成するときに使用するオプション。</param>
        <summary>どのソースによるデータ使用可能な最初の指定したハンドラーを呼び出し、2 つのデータフロー ソースを監視します。</summary>
        <returns>A<see cref="T:System.Threading.Tasks.Task`1" />を表す非同期の選択肢です。 両方のソースが、選択を完了する前に完了した場合、または場合、<see cref="T:System.Threading.CancellationToken" />の一部として提供<paramref name="dataflowBlockOptions" />が取り消された選択肢完了する前に、結果のタスクが取り消されます。 ハンドラーの完了時に、結果のタスクが完了が利用可能なデータ ソースを 1 つの選択肢に正常に反映されると、タスクが終了ハンドラーは、例外をスローする場合、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />状態にあり、未処理の例外が含まれます。 タスクが終了する場合は、その<see cref="P:System.Threading.Tasks.Task`1.Result" />0 または 1 に設定すると、それぞれ最初または 2 番目のソースを表します。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source1" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="action1" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="source2" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="action2" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">最初のソースに含まれるデータの種類を指定します。</typeparam>
        <typeparam name="T2">2 番目のソースに含まれるデータの種類を指定します。</typeparam>
        <typeparam name="T3">3 番目のソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source1">1 番目のソース。</param>
        <param name="action1">最初のソースからのデータで実行するハンドラー。</param>
        <param name="source2">2 番目のソース。</param>
        <param name="action2">2 番目のソースからのデータで実行するハンドラー。</param>
        <param name="source3">3 番目のソース。</param>
        <param name="action3">3 番目のソースからのデータで実行するハンドラー。</param>
        <summary>どのソースによるデータ使用可能な最初の指定したハンドラーを呼び出し、3 つのデータフロー ソースを監視します。</summary>
        <returns>A<see cref="T:System.Threading.Tasks.Task`1" />を表す非同期の選択肢です。 すべてのソースが、選択を完了する前に完了すると、結果のタスクが取り消されます。 ハンドラーの完了時に、結果のタスクが完了が利用可能なデータ ソースを 1 つの選択肢に正常に反映されると、タスクが終了ハンドラーは、例外をスローする場合、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />状態にあり、未処理の例外が含まれます。 タスクが終了する場合は、その<see cref="P:System.Threading.Tasks.Task`1.Result" />ソースの 0 から始まるインデックスを設定します。  
  
 このメソッドは、データ ソースのいずれかの要素をしない複数の消費のみします。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source1" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="action1" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="source2" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="action2" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="source3" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="action3" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1">最初のソースに含まれるデータの種類を指定します。</typeparam>
        <typeparam name="T2">2 番目のソースに含まれるデータの種類を指定します。</typeparam>
        <typeparam name="T3">3 番目のソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source1">1 番目のソース。</param>
        <param name="action1">最初のソースからのデータで実行するハンドラー。</param>
        <param name="source2">2 番目のソース。</param>
        <param name="action2">2 番目のソースからのデータで実行するハンドラー。</param>
        <param name="source3">3 番目のソース。</param>
        <param name="action3">3 番目のソースからのデータで実行するハンドラー。</param>
        <param name="dataflowBlockOptions">このオプションを構成するときに使用するオプション。</param>
        <summary>どのソースによるデータ使用可能な最初の指定したハンドラーを呼び出し、3 つのデータフロー ソースを監視します。</summary>
        <returns>A<see cref="T:System.Threading.Tasks.Task`1" />を表す非同期の選択肢です。 すべてのソースが、選択を完了する前に完了した場合、または場合、<see cref="T:System.Threading.CancellationToken" />の一部として提供<paramref name="dataflowBlockOptions" />が取り消された選択肢完了する前に、結果のタスクが取り消されます。 ハンドラーの完了時に、結果のタスクが完了が利用可能なデータ ソースを 1 つの選択肢に正常に反映されると、タスクが終了ハンドラーは、例外をスローする場合、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />状態にあり、未処理の例外が含まれます。 タスクが終了する場合は、その<see cref="P:System.Threading.Tasks.Task`1.Result" />ソースの 0 から始まるインデックスを設定します。  
  
 このメソッドは、データ ソースのいずれかの要素をしない複数の消費のみします。 場合は、要素の受信後にキャンセルが要求されると、キャンセル要求は無視され、実行に関連するハンドラーが許可されます。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source1" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="action1" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="source2" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="action2" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="source3" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="action3" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="dataflowBlockOptions" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Encapsulate&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt; Encapsulate&lt;TInput,TOutput&gt; (System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!!TInput, !!TOutput&gt; Encapsulate&lt;TInput, TOutput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">ターゲットが必要な入力の種類を指定します。</typeparam>
        <typeparam name="TOutput">ソースによって生成される出力の種類を指定します。</typeparam>
        <param name="target">カプセル化するターゲット。</param>
        <param name="source">カプセル化するソース。</param>
        <summary>1 つの伝達子に、ターゲットとソースをカプセル化します。</summary>
        <returns>カプセル化されたターゲットおよびソース。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A>メソッドには、次の 2 つの既存のブロックが必要です。 ターゲット ブロック (を実装するクラスのインスタンス<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) と、ソース ブロック (を実装するクラスのインスタンス<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>)。 <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A>接続する内部クラスの新しいインスタンスを作成、<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>インターフェイスのメンバーに、`target`パラメーターおよび<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>インターフェイスのメンバーに、`source`パラメーター。  両方<xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>と<xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>から派生<xref:System.Threading.Tasks.Dataflow.IDataflowBlock>です。 ブロックの完了は、ターゲットへのソースから明示的に渡されます。 そのため、<xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A>と<xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A>中に、ターゲットに接続しているメソッド、<xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A>プロパティがソースに接続します。  ときに、必ず半分が完了すると、ターゲットで最も適切な方法です完了半分を取得するソース。例えば：  
  
 `target.Completion.ContinueWith(completion => source.Complete());`  
  
 または、完了ステータスを反映する場合は、このより高度なコードを使用することができます。  
  
```  
target.Completion.ContinueWith(completion => { if (completion.IsFaulted) 3   
  
((IDataflowBlock)batchBlock).Fault(completion.Exception);   
else   
batchBlock.Complete();   
});  
  
```  
  
 明示的にも、ターゲットからソースへのメッセージの伝達を指定する必要があります。 この明示的な接続の利点は、できること、2 つのカプセル化されたブロック間で制約のない処理を実行する自由です。 いずれかの方法を (ブロックは、デリゲートを受け取る) 場合、デリゲートをブロックに必要な処理をエンコードすることによって、またはそれらの間のブロックのサブネットワークに埋め込むことによってです。 受け取るデリゲート; ブロックを使用してより簡単です。たとえば、使用して<xref:System.Threading.Tasks.Dataflow.ActionBlock%601>、 <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>、 <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (該当する場合)、またはカスタムのブロックを指定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source">リンク元のソース。</param>
        <param name="target"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />にすると、ソースに接続します。</param>
        <summary>リンク、<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />を指定した<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />です。</summary>
        <returns><see cref="T:System.IDisposable" />呼び出されたときを<see langword="Dispose" />、ターゲットからソースを解除します。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="target" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source">リンク元のソース。</param>
        <param name="target"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />にすると、ソースに接続します。</param>
        <param name="predicate">フィルター、メッセージは、ソースからターゲットに伝達するために渡す必要があります。</param>
        <summary>リンク、<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />を指定した<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />指定のフィルターを使用します。</summary>
        <returns><see cref="T:System.IDisposable" />呼び出されたときを<see langword="Dispose" />、ターゲットからソースを解除します。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="target" /> が <see langword="null" /> です。  
  
 または  
  
 <paramref name="predicate" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source">リンク元のソース。</param>
        <param name="target"><see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />にすると、ソースに接続します。</param>
        <param name="linkOptions">データフロー ブロック間のリンクを構成する方法を指定する列挙値の 1 つ。</param>
        <param name="predicate">フィルター、メッセージは、ソースからターゲットに伝達するために渡す必要があります。</param>
        <summary>リンク、<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />を指定した<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />指定のフィルターを使用します。</summary>
        <returns><see cref="T:System.IDisposable" />呼び出されたときを<see langword="Dispose" />、ターゲットからソースを解除します。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" />が null (Visual Basic の場合) の場合は Nothing です。  
  
 または  
  
 <paramref name="target" />が null (Visual Basic の場合) の場合は Nothing です。  
  
 または  
  
 <paramref name="linkOptions" />が null (Visual Basic の場合) の場合は Nothing です。  
  
 または  
  
 <paramref name="predicate" />が null (Visual Basic の場合) の場合は Nothing です。</exception>
      </Docs>
    </Member>
    <Member MemberName="NullTarget&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; NullTarget&lt;TInput&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; NullTarget&lt;TInput&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TInput">メッセージ ブロックの型を受け入れることができます。</typeparam>
        <summary>提供されたすべてのメッセージを同期的に受け入れるターゲット ブロックを取得し、それらをドロップします。</summary>
        <returns>A<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />を受け取り、後で提供されているすべてのメッセージを削除します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source">監視するソース。</param>
        <summary>提供、<see cref="T:System.Threading.Tasks.Task`1" />を非同期的に使用可能な出力のソースを監視します。</summary>
        <returns>A<see cref="T:System.Threading.Tasks.Task`1" />以上の出力が使用できるかどうかとタイミングのことが通知されます。 タスクが完了すると場合、その<see cref="P:System.Threading.Tasks.Task`1.Result" />は<see langword="true" />、(ただし、ソースの別のコンシューマー データを取得する可能性があります)、以上の出力は、ソースで使用できます。  
  
 返された場合<see langword="false" />、以上の出力はありませんし、使用可能な出力が前にソースの完了のために使用できなくなります。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source">監視するソース。</param>
        <param name="cancellationToken">非同期操作を取り消すキャンセル トークン。</param>
        <summary>提供、<see cref="T:System.Threading.Tasks.Task`1" />を非同期的に使用可能な出力のソースを監視します。</summary>
        <returns>A<see cref="T:System.Threading.Tasks.Task`1" />以上の出力が使用できるかどうかとタイミングのことが通知されます。 タスクが完了すると場合、その<see cref="P:System.Threading.Tasks.Task`1.Result" />は<see langword="true" />、(ただし、ソースの別のコンシューマー データを取得する可能性があります)、以上の出力は、ソースで使用できます。 返された場合<see langword="false" />、以上の出力はありませんし、使用可能な出力が前にソースの完了のために使用できなくなります。 場合は、false を返します、以上の出力をできないソースの出力が使用する前に完了するために使用できなくなります。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Post&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static bool Post&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Post&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">ターゲット ブロックによって受け入れられるデータの種類を指定します。</typeparam>
        <param name="target">ターゲット ブロック。</param>
        <param name="item">ターゲットに提供されるアイテムです。</param>
        <summary>項目を投稿、<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />です。</summary>
        <returns>
          <see langword="true" />項目が、ターゲット ブロックによって受け入れられた場合それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドに同意するか、項目、ターゲット ブロックが発生しましたが、それ以外の場合、ターゲット ブロックの特別な意味で使用される、しない限り、実際に処理する項目の待機しません。 たとえば、<xref:System.Threading.Tasks.Dataflow.ActionBlock%601>からが返されます<xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A>ポストされたアイテムの入力キューに格納されているようになったら)。 ブロックの処理の観点から`Post`は非同期です。 ターゲット ブロックがそのサポートを延期するメッセージを提供またはでより多くの処理を行うことがあるブロック、`Post`実装では、使用を検討して<xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>、すぐに戻りし、投稿されたメッセージを延期し、後で後にそれを利用するようにターゲットが有効になります`SendAsync`を返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
        <param name="source">値を取得する元のソース。</param>
        <summary>同期的に指定されたソースから値を受け取ります。</summary>
        <returns>受信した値です。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">元の項目が受信されませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
        <param name="source">値を取得する元のソース。</param>
        <param name="cancellationToken">使用して、受信操作をキャンセルするトークンです。</param>
        <summary>同期的に指定されたソースから値を受信し、操作をキャンセルするトークンを提供します。</summary>
        <returns>受信した値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソースには、この操作によって受信された項目が正常に提供される、同時実行の取り消し要求が発生した場合でもその項目が返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">元の項目が受信されませんでした。</exception>
        <exception cref="T:System.OperationCanceledException">項目をソースから受け取る前に、操作が取り消されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
        <param name="source">値を取得する元のソース。</param>
        <param name="timeout">同期操作が完了するまで待機するミリ秒単位の最大時間間隔または無制限に待機する-1 ミリ秒を表す間隔。</param>
        <summary>同期的にオプションのタイムアウト期間を観察し、指定されたソースから値を受け取ります。</summary>
        <returns>受信した値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ソースには、この操作によって受信された項目が正常に提供される、同時実行のタイムアウトが発生した場合でもその項目が返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" />無限のタイムアウト期間を表す-1 ミリ秒以外の負の値数です。  
  
 または  
  
 <paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">元の項目が受信されませんでした。</exception>
        <exception cref="T:System.TimeoutException">項目をソースから受け取る前に、指定したタイムアウトが期限切れです。</exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
        <param name="source">値を取得する元のソース。</param>
        <param name="timeout">同期操作が完了するまで待機するミリ秒単位の最大時間間隔または無制限に待機する-1 ミリ秒を表す間隔。</param>
        <param name="cancellationToken">使用して、受信操作をキャンセルするトークンです。</param>
        <summary>同期的に指定されたソースから、操作をキャンセルするトークンを提供することをオプションのタイムアウト間隔を観察する値を受け取ります。</summary>
        <returns>受信した値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合は、ソースでは、この操作によって受信された項目の値が正常に提供される、同時実行のタイムアウトまたはキャンセル要求が発生した場合でも、その値が返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="source" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" />無限のタイムアウト期間を表す-1 ミリ秒以外の負の値数です。  
  
 または  
  
 <paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
        <exception cref="T:System.InvalidOperationException">元の項目が受信されませんでした。</exception>
        <exception cref="T:System.TimeoutException">項目をソースから受け取る前に、指定したタイムアウトが期限切れです。</exception>
        <exception cref="T:System.OperationCanceledException">項目をソースから受け取る前に、操作が取り消されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
        <param name="source">値を取得する元のソース。</param>
        <summary>非同期的に指定されたソースから値を受け取ります。</summary>
        <returns>非同期の受信操作を表すタスク。 返されるタスクが完了した項目の値がソースから正常に受信されると、およびその<see cref="P:System.Threading.Tasks.Task`1.Result" />受け取った値を返します。 ソースが空で、完了したため、項目の値を取得できない場合、<see cref="T:System.InvalidOperationException" />返されるタスクに例外がスローされます。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source">値を取得する元のソース。</param>
        <param name="cancellationToken">使用して、受信操作をキャンセルするトークンです。</param>
        <summary>非同期的に指定されたソースから値を受信し、操作をキャンセルするトークンを提供します。</summary>
        <returns>非同期の受信操作を表すタスク。 返されるタスクが完了した元の値が正常に受信されると、およびその<see cref="P:System.Threading.Tasks.Task`1.Result" />値を返します。 キャンセルが要求されたために、値を取得できない場合、返されるタスクが取り消されました。 ソースが空で、完了したため、値を取得できない場合、<see cref="T:System.InvalidOperationException" />返されるタスクに例外がスローされます。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
        <param name="source">値を取得する元のソース。</param>
        <param name="timeout">同期操作が完了するまで待機するミリ秒単位の最大時間間隔または無制限に待機する-1 ミリ秒を表す間隔。</param>
        <summary>非同期的にオプションのタイムアウト期間を観察し、指定されたソースから値を受け取ります。</summary>
        <returns>非同期の受信操作を表すタスク。 返されるタスクが完了した元の値が正常に受信されると、およびその<see cref="P:System.Threading.Tasks.Task`1.Result" />値を返します。 タイムアウトの有効期限が切れているため、値を取得することはできません、返されるタスクが取り消されました。 ソースが空で、完了したため、値を取得できない場合、<see cref="T:System.InvalidOperationException" />返されるタスクに例外がスローされます。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" />無限のタイムアウト期間を表す-1 ミリ秒以外の負の値数です。  
  
 または  
  
 <paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの型。</typeparam>
        <param name="source">値を取得する元のソース。</param>
        <param name="timeout">同期操作が完了するまで待機するミリ秒単位の最大時間間隔または無制限に待機する-1 ミリ秒を表す間隔。</param>
        <param name="cancellationToken">受信操作をキャンセルするために使用できるトークンです。</param>
        <summary>非同期的に操作をキャンセルするトークンを提供し、オプションのタイムアウト間隔を観察し、指定されたソースから値を受け取ります。</summary>
        <returns>非同期の受信操作を表すタスク。 返されるタスクが完了した元の値が正常に受信されると、およびその<see cref="P:System.Threading.Tasks.Task`1.Result" />値を返します。 タイムアウトが期限切れまたはキャンセルを要求したため、値を取得することはできません、返されるタスクが取り消されました。 ソースが空で、完了したため、値を取得できない場合、<see cref="T:System.InvalidOperationException" />返されるタスクに例外がスローされます。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" />無限のタイムアウト期間を表す-1 ミリ秒以外の負の値数です。  
  
 または  
  
 <paramref name="timeout" /> が <see cref="F:System.Int32.MaxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">ターゲットに送信するデータの種類を指定します。</typeparam>
        <param name="target">データを投稿するターゲット。</param>
        <param name="item">ターゲットに提供されるアイテムです。</param>
        <summary>非同期的にメッセージを延期できるように、ターゲット メッセージ ブロックを提供しています。</summary>
        <returns>A<see cref="T:System.Threading.Tasks.Task`1" />を表す非同期の送信。 ターゲットを受け入れるし、呼び出し中に提供されている要素を消費かどうか<see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />、時に、呼び出しから戻る、結果として得られる<see cref="T:System.Threading.Tasks.Task`1" />が完了して、その<see cref="P:System.Threading.Tasks.Task`1.Result" />が返される<see langword="true" />です。 ターゲット拒否した場合、提供されている要素の呼び出し中に、時に、呼び出しから戻る、結果として得られる<see cref="T:System.Threading.Tasks.Task`1" />が完了して、その<see cref="P:System.Threading.Tasks.Task`1.Result" />が返される<see langword="false" />です。 ターゲットが提供されている要素を延期する場合、要素がバッファーされる時点まで、ターゲットが消費または、この時点で、タスクは完了、それを解放とその<see cref="P:System.Threading.Tasks.Task`1.Result" />メッセージに使用されたかどうかを示すです。 ターゲット決してしようとすると、メッセージのリリースを使用したり、返されたタスクは完了しません。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">ターゲットに送信するデータの種類を指定します。</typeparam>
        <param name="target">データを投稿するターゲット。</param>
        <param name="item">ターゲットに提供されるアイテムです。</param>
        <param name="cancellationToken">送信操作のキャンセルを要求するキャンセル トークン。</param>
        <summary>非同期的にメッセージを延期できるように、ターゲット メッセージ ブロックを提供しています。</summary>
        <returns>A<see cref="T:System.Threading.Tasks.Task`1" />を表す非同期の送信。  ターゲットが受け入れ、SendAsync への呼び出し中に提供されている要素を使用する場合に、呼び出しから戻る、結果として得られる<see cref="T:System.Threading.Tasks.Task`1" />が完了して、その<c>結果</c>プロパティは true を返します。  ターゲット拒否した場合、提供されている要素の呼び出し中に、時に、呼び出しから戻る、結果として得られる<see cref="T:System.Threading.Tasks.Task`1" />が完了して、その<c>結果</c>プロパティは false を返します。 ターゲットが提供されている要素を延期する場合、要素がバッファーされる時点まで、ターゲットが消費または、この時点で、タスクは完了、それを解放とその<c>結果</c>メッセージに使用されたかどうかを示すです。 ターゲット決してしようとすると、メッセージのリリースを使用したり、返されたタスクは完了しません。  
  
 ターゲットが送信されたデータを使用して正常には前にキャンセルが要求されると、返されたタスクは Canceled 状態で完了し、データはターゲットに使用できなきます。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="target" />が null (Visual Basic の場合) の場合は Nothing です。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static bool TryReceive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt; source, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReceive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!!TOutput&gt; source, [out] !!TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="item" Type="TOutput&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">ソースに含まれるデータの種類を指定します。</typeparam>
        <param name="source">受信に使用する元のソース。</param>
        <param name="item">ソースから受信したアイテムです。</param>
        <summary>項目を同期的に受信する試みを<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />です。</summary>
        <returns>
          <see langword="true" />項目が受信される可能性があります。 場合それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、移行元に項目を提供するまで待機しません。  
  
 要素が使用できるかどうかが返されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
