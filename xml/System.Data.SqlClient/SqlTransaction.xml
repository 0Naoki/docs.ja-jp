<Type Name="SqlTransaction" FullName="System.Data.SqlClient.SqlTransaction">
  <TypeSignature Language="C#" Value="public sealed class SqlTransaction : System.Data.Common.DbTransaction, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlTransaction extends System.Data.Common.DbTransaction implements class System.Data.IDbTransaction, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlTransaction" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbTransaction</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>SQL Server データベースで実行する TRANSACT-SQL トランザクションを表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アプリケーションを作成、<xref:System.Data.SqlClient.SqlTransaction>を呼び出してオブジェクト<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>上、<xref:System.Data.SqlClient.SqlConnection>オブジェクト。 (コミットまたはトランザクションを中止するなど) のトランザクションに関連付けられているすべての後続操作に対して実行され、<xref:System.Data.SqlClient.SqlTransaction>オブジェクト。  
  
> [!NOTE]
>  `Try`/`Catch`例外処理は、コミットまたはロールバック時に常に使用する必要があります、<xref:System.Data.SqlClient.SqlTransaction>です。 両方<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>と<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>生成、<xref:System.InvalidOperationException>接続が終了した場合、またはトランザクションが、サーバー上で既にロールバックされている場合。  
  
 詳細については[!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]トランザクションを参照してください[明示的なトランザクション](http://msdn.microsoft.com/library/ms175127\(SQL.105\).aspx)と[効率的なトランザクションのコーディング](http://msdn.microsoft.com/library/ms187484\(SQL.105\).aspx)です。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。 使用する方法も示します、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。 エラーが発生、トランザクションがロールバック最初せずが破棄されるかどうか、またはコミットします。 `Try`/`Catch`エラー処理を使用すると、コミットまたはトランザクションをロールバックしようとするときに、すべてのエラーを処理します。  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Commit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データベース トランザクションをコミットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>メソッドは、TRANSACT-SQL の COMMIT TRANSACTION ステートメントに相当します。 ロールバックできませんトランザクション、コミットされたすべての変更に、データベースの一部として必要になるためです。 詳細については、SQL Server オンライン ブックを参照してください。  
  
> [!NOTE]
>  `Try`/`Catch`例外処理は、コミットまたはロールバック時に常に使用する必要があります、<xref:System.Data.SqlClient.SqlTransaction>です。 両方`Commit`と<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>生成、<xref:System.InvalidOperationException>接続が終了した場合、またはトランザクションが、サーバー上で既にロールバックされている場合。  
  
 SQL Server トランザクションの詳細については、SQL Server オンライン ブックの「明示的なトランザクション」および「効率的なトランザクションのコーディング」を参照してください。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。 使用する方法も示します、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。 トランザクションはすべてエラーにロールバックします。 `Try`/`Catch`エラー処理を使用すると、コミットまたはトランザクションをロールバックしようとするときに、すべてのエラーを処理します。  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">トランザクションをコミットしようとしてエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">トランザクションは既にコミットまたはロールバックされています。  
  
 または  
  
 接続が切れています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Data.SqlClient.SqlConnection" /> 、トランザクションに関連付けられているオブジェクトまたは<see langword="null" />場合は、トランザクションは無効になりました。</summary>
        <value><see cref="T:System.Data.SqlClient.SqlConnection" />トランザクションに関連付けられているオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 1 つのアプリケーションでは、0 個以上のトランザクションで複数のデータベース接続があります。 このプロパティでは、によって作成された特定のトランザクションに関連付けられている接続オブジェクトを確認できます。<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.DbConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsolationLevel">
      <MemberSignature Language="C#" Value="public override System.Data.IsolationLevel IsolationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.IsolationLevel IsolationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.IsolationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このトランザクションの <see cref="T:System.Data.IsolationLevel" /> を指定します。</summary>
        <value>このトランザクションの <see cref="T:System.Data.IsolationLevel" />。 既定値は、<see langword="ReadCommitted" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 並列トランザクションはサポートされていません。 したがって、<xref:System.Data.IsolationLevel>トランザクション全体に適用されます。  
  
 SQL Server 分離レベルの詳細については、「分離レベルで、データベース エンジン」SQL Server オンライン ブックを参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Rollback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トランザクションを保留状態からロールバックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドは、TRANSACT-SQL の ROLLBACK TRANSACTION ステートメントに相当します。 詳細については、SQL Server オンライン ブックを参照してください。  
  
 トランザクションのみロールバック可能を保留状態から (後<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>が呼び出されると、その前に<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>と呼びます)。 バックアップ イベントが破棄する前に、トランザクションはロールバックされます`Commit`または`Rollback`と呼びます。  
  
> [!NOTE]
>  `Try`/`Catch`例外処理は、トランザクションをロールバックするときに常に使用する必要があります。 A`Rollback`生成、<xref:System.InvalidOperationException>接続が終了した場合、またはトランザクションが、サーバー上で既にロールバックされている場合。  
  
 SQL Server トランザクションの詳細については、SQL Server オンライン ブックの「明示的なトランザクション」および「効率的なトランザクションのコーディング」を参照してください。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。 使用する方法も示します、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。 トランザクションはすべてエラーにロールバックします。 `Try`/`Catch`エラー処理を使用すると、コミットまたはトランザクションをロールバックしようとするときに、すべてのエラーを処理します。  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">トランザクションをコミットしようとしてエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">トランザクションは既にコミットまたはロールバックされています。  
  
 または  
  
 接続が切れています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rollback(string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Rollback(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionName">トランザクションのロールバック、またはロールバック先のセーブポイントの名前。</param>
        <summary>保留中の状態からトランザクションをロールバックし、トランザクションまたはセーブポイントの名前を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドは、TRANSACT-SQL の ROLLBACK TRANSACTION ステートメントに相当します。 詳細については、「明示的なトランザクション」および「トランザクションのセーブポイント」SQL Server オンライン ブックを参照してください。  
  
 トランザクションのみロールバック可能を保留状態から (後<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>が呼び出されると、その前に<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>と呼びます)。 これを破棄する前に戻る場合は、トランザクションはロールバックされます`Commit`または`Rollback`と呼びます。  
  
> [!NOTE]
>  `Try`/`Catch`例外処理は、トランザクションをロールバックするときに常に使用する必要があります。 A`Rollback`生成、<xref:System.InvalidOperationException>接続が終了した場合、またはトランザクションが、サーバー上で既にロールバックされている場合。  
  
 SQL Server トランザクションの詳細については、SQL Server オンライン ブックの「明示的なトランザクション」および「効率的なトランザクションのコーディング」を参照してください。  
  
   
  
## Examples  
 次の例を作成、<xref:System.Data.SqlClient.SqlConnection>と<xref:System.Data.SqlClient.SqlTransaction>です。 使用する方法も示します、 <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>、 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>、および<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>メソッドです。 トランザクションはすべてエラーにロールバックします。 `Try`/`Catch`エラー処理を使用すると、コミットまたはトランザクションをロールバックしようとするときに、すべてのエラーを処理します。  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">トランザクション名が指定されていません。</exception>
        <exception cref="T:System.InvalidOperationException">トランザクションは既にコミットまたはロールバックされています。  
  
 または  
  
 接続が切れています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string savePointName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string savePointName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Save(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savePointName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="savePointName">セーブポイントの名前です。</param>
        <summary>トランザクションの一部をロールバックするために使用して、セーブポイント名を指定するトランザクションにセーブポイントが作成されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlTransaction.Save%2A>メソッドは、TRANSACT-SQL SAVE TRANSACTION ステートメントと同じです。  
  
 使用される値、`savePoint`パラメーターで使用される同じ値を指定できます、`transactionName`の一部の実装のパラメーター、<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>メソッドです。  
  
 セーブポイントは、トランザクションの一部をロールバックするメカニズムを提供します。 使用してセーブポイントを作成する、<xref:System.Data.SqlClient.SqlTransaction.Save%2A>メソッド、および、その後の呼び出し、<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>トランザクションの開始にロールバックではなく、セーブポイントにロールバックするメソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">トランザクションをコミットしようとしてエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">トランザクションは既にコミットまたはロールバックされています。  
  
 または  
  
 接続が切れています。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
