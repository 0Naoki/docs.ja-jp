<Type Name="ValidationResult" FullName="System.Windows.Controls.ValidationResult">
  <TypeSignature Language="C#" Value="public class ValidationResult" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ValidationResult extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ValidationResult" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>によって返される結果を表す、<see cref="T:System.Windows.Controls.ValidationRule" />です。<see cref="M:System.Windows.Controls.ValidationRule.Validate(System.Object,System.Globalization.CultureInfo)" /> メソッドをチェック済みの値が渡されるかどうかを示す、<see cref="T:System.Windows.Controls.ValidationRule" />です。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]データ バインディング モデルを使用すると、関連付ける<xref:System.Windows.Data.Binding.ValidationRules%2A>で、<xref:System.Windows.Data.Binding>または<xref:System.Windows.Data.MultiBinding>オブジェクト。 サブクラス化してカスタム規則を作成することができます、<xref:System.Windows.Controls.ValidationRule>クラスと実装、<xref:System.Windows.Controls.ValidationRule.Validate%2A>メソッドです。 <xref:System.Windows.Controls.ValidationRule.Validate%2A>メソッドを返します、<xref:System.Windows.Controls.ValidationResult>チェック済みの値が有効かどうかを報告するオブジェクト。  
  
 検証プロセスの詳細についてを参照してください「データの検証」[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)です。  
  
   
  
## Examples  
 次の例では、入力値または下限と上限の外部数字以外の文字が含まれている場合は無効としてマークされる検証規則の実装を示します。 値が有効でない場合、<xref:System.Windows.Controls.ValidationResult.ErrorContent%2A>プロパティおよび<xref:System.Windows.Controls.ValidationResult.IsValid%2A>、返されたプロパティ<xref:System.Windows.Controls.ValidationResult>適切なエラー メッセージに設定されてと`false`それぞれします。  
  
 完了の例では、次を参照してください。[する方法: バインド検証を実装する](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)です。  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ValidationResult (bool isValid, object errorContent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool isValid, object errorContent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.#ctor(System.Boolean,System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="isValid" Type="System.Boolean" />
        <Parameter Name="errorContent" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="isValid">値と照合するかどうか、<see cref="T:System.Windows.Controls.ValidationRule" />が無効です。</param>
        <param name="errorContent">無効性について説明します。</param>
        <summary><see cref="T:System.Windows.Controls.ValidationResult" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]データ バインディング モデルを使用すると、関連付ける<xref:System.Windows.Data.Binding.ValidationRules%2A>で、<xref:System.Windows.Data.Binding>または<xref:System.Windows.Data.MultiBinding>オブジェクト。 サブクラス化してカスタム規則を作成することができます、<xref:System.Windows.Controls.ValidationRule>クラスと実装、<xref:System.Windows.Controls.ValidationRule.Validate%2A>メソッドです。 <xref:System.Windows.Controls.ValidationRule.Validate%2A>メソッドを返します、<xref:System.Windows.Controls.ValidationResult>チェック済みの値が有効かどうかを報告するオブジェクト。  
  
 検証プロセスの詳細についてを参照してください「データの検証」[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)です。  
  
   
  
## Examples  
 次の例では、入力値または下限と上限の外部数字以外の文字が含まれている場合は無効としてマークされる検証規則の実装を示します。 値が有効でない場合、<xref:System.Windows.Controls.ValidationResult.ErrorContent%2A>プロパティおよび<xref:System.Windows.Controls.ValidationResult.IsValid%2A>、返されたプロパティ<xref:System.Windows.Controls.ValidationResult>適切なエラー メッセージに設定されてと`false`それぞれします。  
  
 完了の例では、次を参照してください。[する方法: バインド検証を実装する](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)です。  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">比較対象の <see cref="T:System.Windows.Controls.ValidationResult" /> インスタンス。</param>
        <summary>指定したインスタンスと <see cref="T:System.Windows.Controls.ValidationResult" /> の現在のインスタンスを比較し、値が等しいかどうかを確認します。</summary>
        <returns>
          <see langword="true" />場合<paramref name="obj" />とこのインスタンスの<see cref="T:System.Windows.Controls.ValidationResult" />非常時と同じ値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、演算子のオーバーライドによって呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorContent">
      <MemberSignature Language="C#" Value="public object ErrorContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ErrorContent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.ErrorContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>無効性に関する追加情報を提供するオブジェクトを取得します。</summary>
        <value>無効性に関する追加情報を提供するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]データ バインディング モデルを使用すると、関連付ける<xref:System.Windows.Data.Binding.ValidationRules%2A>で、<xref:System.Windows.Data.Binding>または<xref:System.Windows.Data.MultiBinding>オブジェクト。 サブクラス化してカスタム規則を作成することができます、<xref:System.Windows.Controls.ValidationRule>クラスと実装、<xref:System.Windows.Controls.ValidationRule.Validate%2A>メソッドです。 <xref:System.Windows.Controls.ValidationRule.Validate%2A>メソッドを返します、<xref:System.Windows.Controls.ValidationResult>チェック済みの値が有効かどうかを報告するオブジェクト。  
  
 検証プロセスの詳細についてを参照してください「データの検証」[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)です。  
  
   
  
## Examples  
 次の例では、入力値または下限と上限の外部数字以外の文字が含まれている場合は無効としてマークされる検証規則の実装を示します。 値が有効でない場合、<xref:System.Windows.Controls.ValidationResult.ErrorContent%2A>プロパティおよび<xref:System.Windows.Controls.ValidationResult.IsValid%2A>、返されたプロパティ<xref:System.Windows.Controls.ValidationResult>適切なエラー メッセージに設定されてと`false`それぞれします。  
  
 完了の例では、次を参照してください。[する方法: バインド検証を実装する](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)です。  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Controls.ValidationResult" /> のハッシュ コードを返します。</summary>
        <returns>この <see cref="T:System.Windows.Controls.ValidationResult" /> のハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>値と照合するかどうかを示す値を取得、<see cref="T:System.Windows.Controls.ValidationRule" />が無効です。</summary>
        <value>
          <see langword="true" />値が無効である場合それ以外の場合、<see langword="false" />です。 既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]データ バインディング モデルを使用すると、関連付ける<xref:System.Windows.Data.Binding.ValidationRules%2A>で、<xref:System.Windows.Data.Binding>または<xref:System.Windows.Data.MultiBinding>オブジェクト。 サブクラス化してカスタム規則を作成することができます、<xref:System.Windows.Controls.ValidationRule>クラスと実装、<xref:System.Windows.Controls.ValidationRule.Validate%2A>メソッドです。 <xref:System.Windows.Controls.ValidationRule.Validate%2A>メソッドを返します、<xref:System.Windows.Controls.ValidationResult>チェック済みの値が有効かどうかを報告するオブジェクト。  
  
 検証プロセスの詳細についてを参照してください「データの検証」[データ バインディングの概要](~/docs/framework/wpf/data/data-binding-overview.md)です。  
  
   
  
## Examples  
 次の例では、入力値または下限と上限の外部数字以外の文字が含まれている場合は無効としてマークされる検証規則の実装を示します。 値が有効でない場合、<xref:System.Windows.Controls.ValidationResult.ErrorContent%2A>プロパティおよび<xref:System.Windows.Controls.ValidationResult.IsValid%2A>、返されたプロパティ<xref:System.Windows.Controls.ValidationResult>適切なエラー メッセージに設定されてと`false`それぞれします。  
  
 完了の例では、次を参照してください。[する方法: バインド検証を実装する](~/docs/framework/wpf/data/how-to-implement-binding-validation.md)です。  
  
 [!code-csharp[BindValidation#3](~/samples/snippets/csharp/VS_Snippets_Wpf/BindValidation/CSharp/AgeRangeRule.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Controls.ValidationResult left, class System.Windows.Controls.ValidationResult right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.op_Equality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Controls.ValidationResult" />
        <Parameter Name="right" Type="System.Windows.Controls.ValidationResult" />
      </Parameters>
      <Docs>
        <param name="left">比較する 1 番目のインスタンス。</param>
        <param name="right">比較する 2 番目のインスタンス。</param>
        <summary>2 つの <see cref="T:System.Windows.Controls.ValidationResult" /> オブジェクトの値が等しいかどうかを比較します。</summary>
        <returns>
          2 つのオブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Controls.ValidationResult left, System.Windows.Controls.ValidationResult right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Controls.ValidationResult left, class System.Windows.Controls.ValidationResult right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ValidationResult.op_Inequality(System.Windows.Controls.ValidationResult,System.Windows.Controls.ValidationResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Controls.ValidationResult" />
        <Parameter Name="right" Type="System.Windows.Controls.ValidationResult" />
      </Parameters>
      <Docs>
        <param name="left">比較する 1 番目のインスタンス。</param>
        <param name="right">比較する 2 番目のインスタンス。</param>
        <summary>比較する 2 つ<see cref="T:System.Windows.Controls.ValidationResult" />値の非等値のオブジェクト。</summary>
        <returns>
          <see langword="true" />値が等しくない場合それ以外の場合、<see langword="false" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidResult">
      <MemberSignature Language="C#" Value="public static System.Windows.Controls.ValidationResult ValidResult { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Controls.ValidationResult ValidResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ValidationResult.ValidResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ValidationResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>有効なインスタンスを取得<see cref="T:System.Windows.Controls.ValidationResult" />です。</summary>
        <value>有効なインスタンス<see cref="T:System.Windows.Controls.ValidationResult" />です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
