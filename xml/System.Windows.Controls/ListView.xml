<Type Name="ListView" FullName="System.Windows.Controls.ListView">
  <TypeSignature Language="C#" Value="public class ListView : System.Windows.Controls.ListBox" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ListView extends System.Windows.Controls.ListBox" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ListView" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ListBox</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="ItemContainerStyle", StyleTargetType=typeof(System.Windows.Controls.ListViewItem))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>データ アイテムのリストを表示するコントロールを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.ListView><xref:System.Windows.Controls.ItemsControl>、つまり、任意の型 (文字列、画像、またはパネル) などのオブジェクトのコレクションを含めることができます。 詳細については、<xref:System.Windows.Controls.ItemsControl> クラスを参照してください。  
  
 データ項目の表示、<xref:System.Windows.Controls.ListView>によって指定される、表示モードによって定義された、<xref:System.Windows.Controls.ListView.View%2A>プロパティです。 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]提供、<xref:System.Windows.Controls.GridView>パーティションの表示モード、<xref:System.Windows.Controls.ListView>データ項目コンテンツの列にします。 プロパティとメソッドを<xref:System.Windows.Controls.GridView>とその関連クラスのスタイルを設定し、列のコンテンツを指定します。  
  
 次の図は、<xref:System.Windows.Controls.ListView>で、<xref:System.Windows.Controls.GridView>ビュー。  
  
 ![GridView 出力を含む ListView](~/add/media/listviewgridview.JPG "GridView 出力を含む ListView")  
  
 派生するクラスを作成することで、カスタム ビューを定義することもできます。<xref:System.Windows.Controls.ViewBase>です。 詳細については、次を参照してください。[する方法: ListView のカスタム ビュー モードを作成する](~/docs/framework/wpf/controls/how-to-create-a-custom-view-mode-for-a-listview.md)です。  
  
 カスタムを定義する場合<xref:System.Windows.Controls.ItemsControl.ItemContainerStyle%2A>の<xref:System.Windows.Controls.ListView>制御し、定義も、 <xref:System.Windows.Controls.ItemsControl.ItemTemplate%2A>、含める必要があります、<xref:System.Windows.Controls.ContentPresenter>で、<xref:System.Windows.Controls.ItemsControl.ItemContainerStyle%2A>です。 <xref:System.Windows.Controls.ContentPresenter>に必要な<xref:System.Windows.Controls.ItemsControl.ItemTemplate%2A>正常に動作します。  
  
 配置の問題を回避する、<xref:System.Windows.Controls.GridView>モードを表示、追加コンテンツまたは内のアイテムの幅に影響するプロパティを設定、<xref:System.Windows.Controls.ItemsControl.ItemContainerStyle%2A>の<xref:System.Windows.Controls.ListView>です。 配置の問題を防ぐためには、プロパティおよびに対して定義されているテンプレートを使用して、<xref:System.Windows.Controls.GridView>表示モード。 これには、プロパティおよびで使用されているクラスに対して定義されているテンプレートが含まれます、<xref:System.Windows.Controls.GridView>モードでは、ように表示<xref:System.Windows.Controls.GridViewColumn>と<xref:System.Windows.Controls.GridViewColumnHeader>です。  
  
 2 つ<xref:System.Windows.Controls.ListView>コントロールは、同じビューを共有できません。 2 回以上使用できるビューを指定するには、テンプレートまたはスタイルを使用します。 例については、 <xref:System.Windows.Controls.GridView> 、再利用可能なリソースとして定義されている他のカスタム ビューを参照してください、[複数のビューのサンプルを含む ListView](http://go.microsoft.com/fwlink/?LinkID=160013)です。  
  
 使用しないでください、<xref:System.Windows.Controls.Control.HorizontalContentAlignment%2A>と<xref:System.Windows.Controls.Control.VerticalContentAlignment%2A>プロパティ<xref:System.Windows.Controls.ListView>を使用して表示されるコンテンツ、<xref:System.Windows.Controls.GridView>です。 列のコンテンツの配置を指定する、 <xref:System.Windows.Controls.GridView>、定義、<xref:System.Windows.Controls.GridViewColumn.CellTemplate%2A>です。  
  
 多数のアイテムを表示すると、パフォーマンスの問題が発生する可能性があります。  参照してください[のパフォーマンスの最適化: コントロール](~/docs/framework/wpf/advanced/optimizing-performance-controls.md)詳細についてはします。  
  
## <a name="customizing-the-listview-control"></a>ListView コントロールのカスタマイズ  
 設定を適用する、同じプロパティを複数<xref:System.Windows.Controls.ListView>、コントロールを使用して、<xref:System.Windows.FrameworkElement.Style%2A>プロパティです。 既定値を変更することができます<xref:System.Windows.Controls.ControlTemplate>コントロールの外観を一意にします。 作成の詳細については、<xref:System.Windows.Controls.ControlTemplate>を参照してください[、ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)です。  部分とに固有の状態を表示する、<xref:System.Windows.Controls.ListView>を参照してください[ListView スタイルとテンプレート](~/docs/framework/wpf/controls/listview-styles-and-templates.md)です。  
  
 コントロールの既定のスタイルでは、このコントロールの依存関係プロパティを設定する場合があります。  プロパティが既定のスタイルが設定されている場合は、アプリケーションでコントロールが表示されたら既定値から、プロパティが変更可能性があります。 既定のスタイルは、いるデスクトップ テーマによっては、アプリケーションが実行されている場合は使用が決定されます。  詳細については、次を参照してください。 [WPF テーマの既定の](http://go.microsoft.com/fwlink/?LinkID=158252)します。  
  
> [!NOTE]
>  Visual プロパティの設定はのみに効果が場合、このプロパティは、両方に存在<xref:System.Windows.Controls.ListView>コントロールの既定のテンプレートとを使用して設定をします。 「を変更する、Visual 構造の制御」 セクションで visual のプロパティの一覧を検索できる[、ControlTemplate を作成することで、既存のコントロールの外観のカスタマイズ](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)です。  
  
   
  
## Examples  
 次の例を作成する方法を示しています、<xref:System.Windows.Controls.ListView>を実装するコントロール、<xref:System.Windows.Controls.GridView>としてその<xref:System.Windows.Controls.ListView.View%2A>です。 「解説」セクションの図は、この例から取得されます。  
  
 [!code-xaml[ListViewCode#ListViewEmployee](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewCode/CSharp/Window1.xaml#listviewemployee)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ListView.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Controls.ListView" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearContainerForItemOverride">
      <MemberSignature Language="C#" Value="protected override void ClearContainerForItemOverride (System.Windows.DependencyObject element, object item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearContainerForItemOverride(class System.Windows.DependencyObject element, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ListView.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="element"><see cref="T:System.Windows.Controls.ListViewItem" />コンテナーをオフにします。</param>
        <param name="item">オブジェクトを<see cref="T:System.Windows.Controls.ListViewItem" />が含まれています。</param>
        <summary>すべてのテンプレート、スタイル、およびとして表示されるオブジェクトのバインドを削除、<see cref="T:System.Windows.Controls.ListViewItem" />です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerForItemOverride">
      <MemberSignature Language="C#" Value="protected override System.Windows.DependencyObject GetContainerForItemOverride ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.DependencyObject GetContainerForItemOverride() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ListView.GetContainerForItemOverride" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作成して、新しい返します<see cref="T:System.Windows.Controls.ListViewItem" />コンテナーです。</summary>
        <returns>新しい<see cref="T:System.Windows.Controls.ListViewItem" />コントロール。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsItemItsOwnContainerOverride">
      <MemberSignature Language="C#" Value="protected override bool IsItemItsOwnContainerOverride (object item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsItemItsOwnContainerOverride(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ListView.IsItemItsOwnContainerOverride(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">評価するオブジェクト。</param>
        <summary>オブジェクトを指定するかどうか、<see cref="T:System.Windows.Controls.ListViewItem" />です。</summary>
        <returns>
          <see langword="true" />場合、<paramref name="item" />は、 <see cref="T:System.Windows.Controls.ListViewItem" />、それ以外の<see langword="false" />します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateAutomationPeer">
      <MemberSignature Language="C#" Value="protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ListView.OnCreateAutomationPeer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Peers.AutomationPeer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>定義、<see cref="T:System.Windows.Automation.Peers.AutomationPeer" />の<see cref="T:System.Windows.Controls.ListView" />コントロール。</summary>
        <returns>返します、<see cref="T:System.Windows.Automation.Peers.ListViewAutomationPeer" />オブジェクトに対して、<see cref="T:System.Windows.Controls.ListView" />コントロール。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnItemsChanged">
      <MemberSignature Language="C#" Value="protected override void OnItemsChanged (System.Collections.Specialized.NotifyCollectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnItemsChanged(class System.Collections.Specialized.NotifyCollectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ListView.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Collections.Specialized.NotifyCollectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント引数。</param>
        <summary>応答する、<see cref="M:System.Windows.Controls.ItemsControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 アイテム コレクション内の変更がある場合に、このメソッドが呼び出されます、<xref:System.Windows.Controls.ListView>コントロール。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareContainerForItemOverride">
      <MemberSignature Language="C#" Value="protected override void PrepareContainerForItemOverride (System.Windows.DependencyObject element, object item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void PrepareContainerForItemOverride(class System.Windows.DependencyObject element, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ListView.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="element">あるオブジェクト、<see cref="T:System.Windows.Controls.ListViewItem" />を 1 つに変換できるか。</param>
        <param name="item">使用して作成するオブジェクト、<see cref="T:System.Windows.Controls.ListViewItem" />です。</param>
        <summary>スタイル、テンプレート、およびバインドの設定、<see cref="T:System.Windows.Controls.ListViewItem" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、準備、<xref:System.Windows.Controls.ListViewItem>に従って、指定した表示のコントロールを<xref:System.Windows.Controls.ListView.View%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ViewBase View { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ViewBase View" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.ListView.View" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ViewBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、データのスタイル設定およびで構成の方法を定義するオブジェクト、<see cref="T:System.Windows.Controls.ListView" />コントロール。</summary>
        <value>A<see cref="T:System.Windows.Controls.ViewBase" />内の情報を表示する方法を指定するオブジェクト、<see cref="T:System.Windows.Controls.ListView" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA#tla_titlewinfx](~/includes/tlasharptla-titlewinfx-md.md)]環境には、という名前の構成可能な表示モードが含まれています。<xref:System.Windows.Controls.GridView>です。 継承されるカスタム ビューを作成することもできます。<xref:System.Windows.Controls.ViewBase>です。 詳細については、次を参照してください。[する方法: ListView のカスタム ビュー モードを作成する](~/docs/framework/wpf/controls/how-to-create-a-custom-view-mode-for-a-listview.md)です。  
  
<a name="dependencyPropertyInfo_View"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.ListView.ViewProperty>|  
|メタデータ プロパティに設定します。`true`|なし|  
  
> [!NOTE]
>  このプロパティのプロパティ メタデータの型は<xref:System.Windows.PropertyMetadata>ではなく、<xref:System.Windows.FrameworkPropertyMetadata>です。  
  
   
  
## Examples  
 次の例を指定する方法を示しています、<xref:System.Windows.Controls.GridView>オブジェクトとして、<xref:System.Windows.Controls.ListView.View%2A>の<xref:System.Windows.Controls.ListView>コントロール。  
  
 [!code-csharp[ListViewCode#ListViewView](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewCode/CSharp/Window1.xaml.cs#listviewview)]
 [!code-vb[ListViewCode#ListViewView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListViewCode/visualbasic/window1.xaml.vb#listviewview)]
 [!code-xaml[ListViewCode#ListViewView](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewCode/CSharp/Window1.xaml#listviewview)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ViewProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ViewProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.ListView.ViewProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.ListView.View" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
