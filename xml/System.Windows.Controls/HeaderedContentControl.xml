<Type Name="HeaderedContentControl" FullName="System.Windows.Controls.HeaderedContentControl">
  <TypeSignature Language="C#" Value="public class HeaderedContentControl : System.Windows.Controls.ContentControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi HeaderedContentControl extends System.Windows.Controls.ContentControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.HeaderedContentControl" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Controls.ContentControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Text)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>単一のコンテンツが含まれており、ヘッダーをすべてのコントロールの基本実装を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.HeaderedContentControl>継承、<xref:System.Windows.Controls.ContentControl.Content%2A>プロパティから<xref:System.Windows.Controls.ContentControl>を定義し、<xref:System.Windows.Controls.HeaderedContentControl.Header%2A>型のプロパティを<xref:System.Object>です。  <xref:System.Windows.Controls.HeaderedContentControl.Header%2A>コントロールの見出しを提供します。 同様に、<xref:System.Windows.Controls.ContentControl.Content%2A>のプロパティ、 <xref:System.Windows.Controls.ContentControl>、<xref:System.Windows.Controls.HeaderedContentControl.Header%2A>任意の型を指定できます。  
  
 次の図は 2 つ<xref:System.Windows.Controls.TabItem>から継承されるオブジェクト<xref:System.Windows.Controls.HeaderedContentControl>です。 最初の<xref:System.Windows.Controls.TabItem>が<xref:System.Windows.UIElement>オブジェクトの両方のコンテンツとして、<xref:System.Windows.Controls.HeaderedContentControl.Header%2A>と<xref:System.Windows.Controls.ContentControl.Content%2A>:<xref:System.Windows.Controls.HeaderedContentControl.Header%2A>に設定されている、<xref:System.Windows.Controls.StackPanel>を格納している、<xref:System.Windows.Shapes.Ellipse>と<xref:System.Windows.Controls.TextBlock>以外の場合は、<xref:System.Windows.Controls.ContentControl.Content%2A>に設定されている、<xref:System.Windows.Controls.StackPanel>を格納している、<xref:System.Windows.Controls.TextBlock>と<xref:System.Windows.Controls.Label>です。  <xref:System.Windows.Controls.HeaderedContentControl.Header%2A> 、2 つ目の<xref:System.Windows.Controls.TabItem>文字列に設定されていると、<xref:System.Windows.Controls.ContentControl.Content%2A>単一に設定されている<xref:System.Windows.Controls.TextBlock>です。  
  
 ![TabControl](~/add/media/controlcontentmodelteabitem.PNG "TabControl")  
ヘッダー プロパティに異なる型 TabControl  
  
 A<xref:System.Windows.Controls.HeaderedContentControl>制限の既定のスタイルがします。 アプリケーション開発者が作成できる、<xref:System.Windows.Controls.HeaderedContentControl>がの外観は非常に単純になります。 新規に作成することができます、コントロールの外観を向上する場合は、<xref:System.Windows.Controls.ControlTemplate>です。 A<xref:System.Windows.Controls.HeaderedContentControl>ヘッダーを含む 1 つのコンテンツ コントロールのモデルが用意されているために、カスタム コントロールを作成するために便利です。  
  
 コントロールの既定のスタイルでは、このコントロールの依存関係プロパティを設定する場合があります。  プロパティが既定のスタイルが設定されている場合は、アプリケーションでコントロールが表示されたら既定値から、プロパティが変更可能性があります。 既定のスタイルは、いるデスクトップ テーマによっては、アプリケーションが実行されている場合は使用が決定されます。  詳細については、次を参照してください。 [WPF テーマの既定の](http://go.microsoft.com/fwlink/?LinkID=158252)します。  
  
   
  
## Examples  
 次の例を作成する方法を示しています、 <xref:System.Windows.Controls.TabControl> 「解説」セクションに示すようにします。  
  
 [!code-xaml[ControlContentOverviewSnippets#16](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlContentOverviewSnippets/CSharp/Window1.xaml#16)]  
  
 次の例を作成する方法を示して、<xref:System.Windows.Controls.ControlTemplate>の<xref:System.Windows.Controls.HeaderedContentControl>です。  
  
 [!code-xaml[HeaderedContentControl#HeaderedContentControlStyle](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedContentControl/CSharp/Page1.xaml#headeredcontentcontrolstyle)]  
  
 [!code-xaml[HeaderedContentControl#HeaderedContentControl](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedContentControl/CSharp/Page1.xaml#headeredcontentcontrol)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HeaderedContentControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedContentControl.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Controls.HeaderedContentControl" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasHeader">
      <MemberSignature Language="C#" Value="public bool HasHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasHeader" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedContentControl.HasHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ヘッダーがあるかどうかを示す値を取得<see langword="null" />です。</summary>
        <value>
          <see langword="true" /> プロパティが <see cref="P:System.Windows.Controls.HeaderedContentControl.Header" /> 以外の場合は <see langword="null" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_HasHeader"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.HeaderedContentControl.HasHeaderProperty>|  
|メタデータ プロパティに設定します。`true`|なし|  
  
   
  
## Examples  
 次の例では、コントロールにコンテンツを含むヘッダーがあるかどうかをテストします。  
  
 [!code-csharp[HeaderedContentControl#HasHeader](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedContentControl/CSharp/Page1.xaml.cs#hasheader)]
 [!code-vb[HeaderedContentControl#HasHeader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeaderedContentControl/VisualBasic/Page1.xaml.vb#hasheader)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasHeaderProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HasHeaderProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HasHeaderProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.HeaderedContentControl.HasHeaderProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.HeaderedContentControl.HasHeader" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Header">
      <MemberSignature Language="C#" Value="public object Header { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Header" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedContentControl.Header" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Content")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.Label)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または各コントロールのヘッダーに使用するデータを設定します。</summary>
        <value>ヘッダーのオブジェクト。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同様に、<xref:System.Windows.Controls.ContentControl.Content%2A>のプロパティ、 <xref:System.Windows.Controls.ContentControl>、<xref:System.Windows.Controls.HeaderedContentControl.Header%2A>任意の型を指定できます。 <xref:System.Windows.Controls.HeaderedContentControl>を表示するのと同じロジックを使用して、<xref:System.Windows.Controls.HeaderedContentControl.Header%2A>に記載されている<xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType>です。  
  
<a name="dependencyPropertyInfo_Header"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.HeaderedContentControl.HeaderProperty>|  
|メタデータ プロパティに設定します。`true`|なし|  
  
   
  
## Examples  
 次の例を作成、<xref:System.Windows.Controls.TabControl>を含む 2 つ<xref:System.Windows.Controls.TabItem>から継承されるオブジェクト<xref:System.Windows.Controls.HeaderedContentControl>です。  最初の<xref:System.Windows.Controls.TabItem>が<xref:System.Windows.UIElement>オブジェクトの両方のコンテンツとして、<xref:System.Windows.Controls.HeaderedContentControl.Header%2A>と<xref:System.Windows.Controls.ContentControl.Content%2A>:<xref:System.Windows.Controls.HeaderedContentControl.Header%2A>に設定されている、<xref:System.Windows.Controls.StackPanel>を格納している、<xref:System.Windows.Shapes.Ellipse>と<xref:System.Windows.Controls.TextBlock>以外の場合は、<xref:System.Windows.Controls.ContentControl.Content%2A>に設定されている、<xref:System.Windows.Controls.StackPanel>を格納している、<xref:System.Windows.Controls.TextBlock>と<xref:System.Windows.Controls.Label>です。  <xref:System.Windows.Controls.HeaderedContentControl.Header%2A> 、2 つ目の<xref:System.Windows.Controls.TabItem>文字列に設定されていると、<xref:System.Windows.Controls.ContentControl.Content%2A>単一に設定されている<xref:System.Windows.Controls.TextBlock>です。  
  
 [!code-xaml[ControlContentOverviewSnippets#16](~/samples/snippets/csharp/VS_Snippets_Wpf/ControlContentOverviewSnippets/CSharp/Window1.xaml#16)]  
  
 次の図は、<xref:System.Windows.Controls.TabControl>前述の例で作成します。  
  
 ![TabControl](~/add/media/controlcontentmodelteabitem.PNG "TabControl")  
ヘッダー プロパティに異なる型 TabControl  
  
 次の例では、2 つ作成されます<xref:System.Windows.DataTemplate>の外観を指定するオブジェクト、<xref:System.Windows.Controls.HeaderedContentControl.Header%2A>と<xref:System.Windows.Controls.ContentControl.Content%2A>の<xref:System.Windows.Controls.HeaderedContentControl>です。  
  
 [!code-xaml[HeaderedContentControl#HeaderTemplate1](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedContentControl/CSharp/Page1.xaml#headertemplate1)]  
[!code-xaml[HeaderedContentControl#HeaderTemplate2](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedContentControl/CSharp/Page1.xaml#headertemplate2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.HeaderedContentControl.HeaderProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.HeaderedContentControl.Header" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderStringFormat">
      <MemberSignature Language="C#" Value="public string HeaderStringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderStringFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または書式設定する方法を指定する複合文字列を設定、<see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />プロパティを文字列として表示されている場合。</summary>
        <value>書式設定する方法を指定する複合文字列、<see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />プロパティを文字列として表示されている場合。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat%2A>定義済み、複合、またはカスタムの文字列形式にすることができます。 文字列形式の詳細については、次を参照してください。[型の書式設定](~/docs/standard/base-types/formatting-types.md)です。 設定した場合、<xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplate%2A>または<xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector%2A>のプロパティ、 <xref:System.Windows.Controls.HeaderedContentControl>、<xref:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat%2A>プロパティは無視されます。  
  
<a name="dependencyPropertyInfo_HeaderStringFormat"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.HeaderedContentControl.HeaderStringFormatProperty>|  
|メタデータ プロパティに設定**は true。**|なし|  
  
   
  
## Examples  
 次の例ではバインド、<xref:System.Windows.Controls.TabControl>のコレクションに`Student`オブジェクト。  `Student`クラスには、`Name`プロパティ、コレクションの`Course`オブジェクト、および実装する、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>いずれかを返すメソッドを`Name`の受講者またはスチューデントのコースを一覧表示する文字列。  この例では<xref:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat%2A>に受講者の名前を格納する、<xref:System.Windows.Controls.HeaderedContentControl.Header%2A>それぞれの<xref:System.Windows.Controls.TabItem>(から継承される<xref:System.Windows.Controls.HeaderedContentControl>)、および<xref:System.Windows.Controls.TabControl.ContentStringFormat%2A?displayProperty=nameWithType>コンテンツ内の各受講者コース一覧を表示する、<xref:System.Windows.Controls.TabItem>です。  
  
 [!code-xaml[ContentStringSnippets#TabControl](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml#tabcontrol)]  
  
 次の例を実装して、<xref:System.IFormattable.ToString%2A?displayProperty=nameWithType>いずれかを返すメソッドを`Name`の受講者またはスチューデントのコースを一覧表示する文字列。  
  
 [!code-csharp[ContentStringSnippets#TabControlToString](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml.cs#tabcontroltostring)]
 [!code-vb[ContentStringSnippets#TabControlToString](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentStringSnippets/visualbasic/window1.xaml.vb#tabcontroltostring)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderStringFormatProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderStringFormatProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderStringFormatProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.HeaderedContentControl.HeaderStringFormatProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate HeaderTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Content")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールのヘッダーの内容を表示するために使用するテンプレートを設定します。</summary>
        <value>データ テンプレートです。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_HeaderTemplate"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object HeaderTemplate="{ResourceExtension TemplateResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_HeaderTemplate"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
<a name="xamlValues_HeaderTemplate"></a>   
## <a name="xaml-values"></a>XAML 値  
 *ResourceExtension*  
 次のいずれかの: `StaticResource`、または`DynamicResource`です。 参照してください[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。  
  
 *TemplateResourceKey*  
 要求されているテンプレートを識別するキー。 このキーは既存のリソースを<xref:System.Windows.ResourceDictionary>です。  
  
> [!NOTE]
>  プロパティ要素構文は、技術的に可能ですが、推奨されません。 参照してください[インライン スタイルとテンプレート](~/docs/framework/wpf/advanced/inline-styles-and-templates.md)です。 バインディングを使用して参照かも可能ですが、一般的でないです。  
  
<a name="dependencyPropertyInfo_HeaderTemplate"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplateProperty>|  
|メタデータ プロパティに設定します。`true`|なし|  
  
   
  
## Examples  
 次の例では、2 つ作成されます<xref:System.Windows.DataTemplate>の外観を指定するオブジェクト、<xref:System.Windows.Controls.HeaderedContentControl.Header%2A>と<xref:System.Windows.Controls.ContentControl.Content%2A>の<xref:System.Windows.Controls.HeaderedContentControl>です。  
  
 [!code-xaml[HeaderedContentControl#HeaderTemplate1](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedContentControl/CSharp/Page1.xaml#headertemplate1)]  
[!code-xaml[HeaderedContentControl#HeaderTemplate2](~/samples/snippets/csharp/VS_Snippets_Wpf/HeaderedContentControl/CSharp/Page1.xaml#headertemplate2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderTemplateProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderTemplateProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.HeaderedContentControl.HeaderTemplateProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Content")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはヘッダーの表示に使用するテンプレートを選択するためのカスタム ロジックを提供する、データのテンプレート セレクターを設定します。</summary>
        <value>データ テンプレート セレクター オブジェクト。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 両方の<xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector%2A>と<xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplate%2A>プロパティが設定されて、テンプレート セレクター プロパティは無視されます。  
  
<a name="xamlAttributeUsage_HeaderTemplateSelector"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性の使用方法  
  
```  
<object HeaderTemplateSelector="{ResourceExtension DataTemplateSelectorClassKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_HeaderTemplateSelector"></a>   
## <a name="xaml-property-element-usage"></a>XAML プロパティ要素の使用  
  
```  
<object>  
  <object.HeaderTemplateSelector>  
    <MyDataTemplateSelectorImplementation .../>  
  </object.HeaderTemplateSelector>  
</object>  
```  
  
<a name="xamlValues_HeaderTemplateSelector"></a>   
## <a name="xaml-values"></a>XAML 値  
 *MyDataTemplateSelectorImplementation*  
 派生したクラス<xref:System.Windows.Controls.DataTemplateSelector>実用的を実装する<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>をオーバーライドします。 カスタム クラスをマップする方法については、次を参照してください。 [XAML 名前空間と WPF XAML のマッピングの Namespace](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)です。  
  
 *ResourceExtension*  
 次のいずれかの: `StaticResource`、または`DynamicResource`です。 参照してください[XAML リソース](~/docs/framework/wpf/advanced/xaml-resources.md)です。  
  
 *DataTemplateSelectorClassKey*  
 要求されているセレクターの実装を識別するキー。 このキーは、実際に実装する派生クラス<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A>をオーバーライドします。 カスタム クラスをマップする方法については、次を参照してください。 [XAML 名前空間と WPF XAML のマッピングの Namespace](~/docs/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml.md)です。 インスタンスを追加することができますもプログラムによって、<xref:System.Windows.Controls.DataTemplateSelector>リソース ディクショナリへのリソースとしてのクラスです。  
  
<a name="dependencyPropertyInfo_HeaderTemplateSelector"></a>   
## <a name="dependency-property-information"></a>依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelectorProperty>|  
|メタデータ プロパティに設定します。`true`|なし|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateSelectorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeaderTemplateSelectorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeaderTemplateSelectorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelectorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected override System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.HeaderedContentControl.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>論理上の子要素に列挙子を取得、<see cref="T:System.Windows.Controls.ControlTemplate" />です。</summary>
        <value>列挙子。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHeaderChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderChanged (object oldHeader, object newHeader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderChanged(object oldHeader, object newHeader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedContentControl.OnHeaderChanged(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeader" Type="System.Object" />
        <Parameter Name="newHeader" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="oldHeader">前の値、<see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />プロパティです。</param>
        <param name="newHeader">新しい値、<see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />プロパティです。</param>
        <summary>ときに呼び出されます、<see cref="P:System.Windows.Controls.HeaderedContentControl.Header" />のプロパティ、<see cref="T:System.Windows.Controls.HeaderedContentControl" />変更します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHeaderStringFormatChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderStringFormatChanged (string oldHeaderStringFormat, string newHeaderStringFormat);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderStringFormatChanged(string oldHeaderStringFormat, string newHeaderStringFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedContentControl.OnHeaderStringFormatChanged(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderStringFormat" Type="System.String" />
        <Parameter Name="newHeaderStringFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="oldHeaderStringFormat"><see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat" /> プロパティの変更前の値。</param>
        <param name="newHeaderStringFormat"><see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat" /> プロパティの新しい値。</param>
        <summary>ときに呼び出されます、<see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderStringFormat" />プロパティが変更されました。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHeaderTemplateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderTemplateChanged (System.Windows.DataTemplate oldHeaderTemplate, System.Windows.DataTemplate newHeaderTemplate);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderTemplateChanged(class System.Windows.DataTemplate oldHeaderTemplate, class System.Windows.DataTemplate newHeaderTemplate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedContentControl.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderTemplate" Type="System.Windows.DataTemplate" />
        <Parameter Name="newHeaderTemplate" Type="System.Windows.DataTemplate" />
      </Parameters>
      <Docs>
        <param name="oldHeaderTemplate">前の値、<see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />プロパティです。</param>
        <param name="newHeaderTemplate">新しい値、<see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />プロパティです。</param>
        <summary>ときに呼び出されます、<see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate" />プロパティが変更されました。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHeaderTemplateSelectorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnHeaderTemplateSelectorChanged (System.Windows.Controls.DataTemplateSelector oldHeaderTemplateSelector, System.Windows.Controls.DataTemplateSelector newHeaderTemplateSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHeaderTemplateSelectorChanged(class System.Windows.Controls.DataTemplateSelector oldHeaderTemplateSelector, class System.Windows.Controls.DataTemplateSelector newHeaderTemplateSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedContentControl.OnHeaderTemplateSelectorChanged(System.Windows.Controls.DataTemplateSelector,System.Windows.Controls.DataTemplateSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldHeaderTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
        <Parameter Name="newHeaderTemplateSelector" Type="System.Windows.Controls.DataTemplateSelector" />
      </Parameters>
      <Docs>
        <param name="oldHeaderTemplateSelector">前の値、<see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector" />プロパティです。</param>
        <param name="newHeaderTemplateSelector">新しい値、<see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector" />プロパティです。</param>
        <summary>ときに呼び出されます、<see cref="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplateSelector" />プロパティが変更されました。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.HeaderedContentControl.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>文字列表現を提供する<see cref="T:System.Windows.Controls.HeaderedContentControl" />です。</summary>
        <returns>オブジェクトの文字列形式。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
