<Type Name="GraphicsPathIterator" FullName="System.Drawing.Drawing2D.GraphicsPathIterator">
  <TypeSignature Language="C#" Value="public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GraphicsPathIterator extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>内のサブパスを反復処理する機能を提供する<see cref="T:System.Drawing.Drawing2D.GraphicsPath" />し、各サブ パスに含まれる図形の種類をテストします。 このクラスは継承できません。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />このヘルパー クラスを初期化するオブジェクト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> 、指定したクラス<see cref="T:System.Drawing.Drawing2D.GraphicsPath" />オブジェクト。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyData">
      <MemberSignature Language="C#" Value="public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CopyData(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types, int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]&amp;" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]&amp;" RefType="ref" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="points">関数が戻るときの配列が含まれています。<see cref="T:System.Drawing.PointF" />パス内の点を表す構造体。</param>
        <param name="types">関数が戻るときに、パス内の地点の型を表すバイト配列に含まれています。</param>
        <param name="startIndex">配列の開始インデックスを指定します。</param>
        <param name="endIndex">配列の終了インデックスを指定します。</param>
        <summary>コピー、<see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />プロパティおよび<see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />、関連するプロパティ配列<see cref="T:System.Drawing.Drawing2D.GraphicsPath" />に 2 つの配列を指定します。</summary>
        <returns>ポイントの数がコピーされます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、`startIndex`と`endIndex`パラメーターを指定したパスのデータ範囲をコピーします。  
  
   
  
## Examples  
 次の例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   グラフィックス パスを作成します。  
  
-   複数のプリミティブとマーカーには、これを設定します。  
  
-   パスのデータを画面の左側にあるを一覧表示します。  
  
-   作成、<xref:System.Drawing.Drawing2D.GraphicsPathIterator>して巻き戻すにします。  
  
-   2 番目のマーカーをパスのデータのインデックスをインクリメントします。  
  
-   呼び出し、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData%2A>に先頭と末尾の間にパスのデータをコピーする方法は、ポイントにインデックスを作成し、種類の配列。  
  
-   画面の右側にあるコピーされたデータを一覧表示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パス内の地点の数を取得します。</summary>
        <value>パス内の地点の数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す`Dispose`により、これによって使用されるリソース<xref:System.Drawing.Drawing2D.GraphicsPathIterator>を他の目的を再割り当てするオブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Enumerate(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]&amp;" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="points">関数が戻るときの配列が含まれています。<see cref="T:System.Drawing.PointF" />パス内の点を表す構造体。</param>
        <param name="types">関数が戻るときに、パス内の地点の型を表すバイト配列に含まれています。</param>
        <summary>コピー、<see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" />プロパティおよび<see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />、関連するプロパティ配列<see cref="T:System.Drawing.Drawing2D.GraphicsPath" />に 2 つの配列を指定します。</summary>
        <returns>ポイントの数がコピーされます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   グラフィックス パスを作成します。  
  
-   複数のプリミティブとマーカーには、これを設定します。  
  
-   パスのデータを画面の左側にあるを一覧表示します。  
  
-   作成、<xref:System.Drawing.Drawing2D.GraphicsPathIterator>して巻き戻すにします。  
  
-   2 番目のマーカーをパスのデータのインデックスをインクリメントします。  
  
-   呼び出し、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate%2A>パス データのコピー先のメソッド、`points`と`types`配列。  
  
-   画面の右側にあるコピーされたデータを一覧表示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~GraphicsPathIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCurve">
      <MemberSignature Language="C#" Value="public bool HasCurve ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasCurve() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>パスがこれに関連付けられているかどうかを示す<see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />曲線が含まれています。</summary>
        <returns>このメソッドが戻る<see langword="true" />曲線; が、現在のサブパスに含まれている場合、それ以外の場合<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パス内のすべての曲線はベジエ スプラインのシーケンスとして格納されます。 たとえば、パスに、省略記号を追加する場合を指定する、左上隅にある、幅、および楕円の外接する四角形の高さ。 これらの番号 (左上隅にある、幅、および高さ) が、パスに格納されていません。代わりにします。楕円は、次の 4 つのベジエ スプラインのシーケンスに変換されます。 パスのエンドポイントと格納のこれらのベジエ スプラインの制御点。  
  
 パスは、行またはベジエ スプラインに属する各データ ポイントの配列を格納します。 配列内のポイントのいくつかに属しているベジエ スプラインし<xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A>返します`true`です。 配列内のすべてのポイントに属している線、し<xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A>返します`false`です。  
  
 特定のメソッドでは、パスは、パス内のすべての曲線が線のシーケンスに変換されることを意味が平坦化します。 パスがフラット化されて、したら<xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A>は常に返します`false`です。 呼び出す、 <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>、 <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>、または<xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A>のメソッド、<xref:System.Drawing.Drawing2D.GraphicsPath>クラスが、パスを平坦化します。  
  
   
  
## Examples  
 次の例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   作成、<xref:System.Drawing.Drawing2D.GraphicsPath>オブジェクト、`myPath`です。  
  
-   次の 3 つの線、四角形および楕円を追加します。  
  
-   作成、<xref:System.Drawing.Drawing2D.GraphicsPathIterator>オブジェクトに対する`myPath`です。  
  
-   かどうかをテスト、現在のパス`myPath`曲線が含まれています。  
  
-   メッセージ ボックスに、テストの結果を示しています。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" />点をコピーするオブジェクトします。</param>
        <summary>これは、<see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />オブジェクトには、<see cref="T:System.Drawing.Drawing2D.GraphicsPath" />オブジェクトが関連付けられています。 <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />メソッドは、関連付けられているインクリメント<see cref="T:System.Drawing.Drawing2D.GraphicsPath" />パスと 1 秒あたりに現在のマーカーと次のマーカー (またはパスの末尾) の間、すべてのポイントに格納されているコピーでは、次のマーカーに<see cref="T:System.Drawing.Drawing2D.GraphicsPath" />パラメーターに渡されたオブジェクト。</summary>
        <returns>このマーカーと次のページ間のポイントの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>パスでマーカーを設定します。 マーカーは、サブパスのグループの作成に使用されます。 2 つのマーカーの間で 1 つまたは複数のサブパスを指定できます。  
  
   
  
## Examples  
 次の例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   次の 3 つの線、四角形、楕円、および 2 つのマーカーを追加します。  
  
-   画面の左側にすべてのパスのポイントの値を一覧表示します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   作成、<xref:System.Drawing.Drawing2D.GraphicsPath>オブジェクト、`myPathSection`をコピーしたポイントを受信します。  
  
-   呼び出し、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>メソッドでは、最初のマーカーを反復処理し、そのマーカーと の横の間に含まれるすべてのポイントにコピー`myPathSection`です。  
  
-   ポイントにコピーの数を返します`markerPoints`です。  
  
-   マーカーの数 (最初のマーカー) と、画面の右側にあるに含まれているポイントの数を示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker([out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out]このパラメーターに指定される整数の参照は、サブパスを開始する位置のインデックスを受け取ります。</param>
        <param name="endIndex">[out]このパラメーターに指定される整数の参照を受信するサブ パスの最後のポイントのインデックス<c>startIndex</c>ポイント。</param>
        <summary>インクリメント、<see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />パスを返す [out] パラメーターを使用して、開始、停止のインデックスでは、次のマーカーにします。</summary>
        <returns>このマーカーと次のページ間のポイントの数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A>パスでマーカーを設定します。 マーカーは、サブパスのグループの作成に使用されます。 2 つのマーカーの間で 1 つまたは複数のサブパスを指定できます。  
  
   
  
## Examples  
 次の例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   3 つの線、四角形および楕円マーカーの間に追加します。  
  
-   点の配列の値を画面に描画します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   呼び出し、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>メソッドです。  
  
-   反復的な呼び出しから返される値を使用して<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>に開始を描画し、画面には、各マーカーのポイントを停止します。  
  
-   ポイントの合計数の値を画面に描画します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextPathType">
      <MemberSignature Language="C#" Value="public int NextPathType (out byte pathType, out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextPathType([out] unsigned int8&amp; pathType, [out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathType" Type="System.Byte&amp;" RefType="out" />
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pathType">[out]グループ内のすべてのポイントで共有ポイントの種類を受信します。 使用可能な型を取得できる、<see cref="T:System.Drawing.Drawing2D.PathPointType" />列挙します。</param>
        <param name="startIndex">[out]ポイントのグループの開始インデックスを受け取ります。</param>
        <param name="endIndex">[out]ポイントのグループの終了インデックスを受け取ります。</param>
        <summary>取得開始インデックスし、データの次のグループの終了インデックスがすべて同じ型であることを指します。</summary>
        <returns>このメソッドは、グループ内のデータ ポイントの数を返します。 パスにない他のグループがある場合、このメソッドは 0 を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   次の 3 つの線、四角形および楕円を追加します。  
  
-   画面の左側にすべてのポイントの値を一覧表示します。  
  
-   作成、<xref:System.Drawing.Drawing2D.GraphicsPathIterator>して巻き戻すにします。  
  
-   `for`ループを使用してポイントを反復処理、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A>と<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A>メソッドです。  
  
-   反復的な呼び出しから返される値を使用して、サブパス数、内の地点の数と、画面の右側にパス ポイントの種類を一覧表示します。  
  
-   画面には、ポイントの合計数の値を表示します。  
  
 なお`ListPathPoints`ほとんどを分離するヘルパー関数は、(すべて) グラフィックス パス コードの表示コードのです。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath(class System.Drawing.Drawing2D.GraphicsPath path, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="isClosed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">A<see cref="T:System.Drawing.Drawing2D.GraphicsPath" />データ ポイントの設定この反復子を取得した図 (サブパス) のデータ ポイントに適合するようにあります。</param>
        <param name="isClosed">[out]現在のサブパスが閉じているかどうかを示します。 <see langword="true" />場合に、図がある場合を閉じると、それ以外の場合は<see langword="false" />します。</param>
        <summary>次の図 (サブパス) パスからを取得、関連付けられているこの<see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />です。</summary>
        <returns>取得した図 (サブパス) 内のデータ ポイントの数。 それ以上図形を取得する場合は、0 が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   次の 3 つの線、四角形、楕円、および 2 つのマーカーを追加します。  
  
-   画面の左側にすべてのパスのポイントの値を一覧表示します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   作成、<xref:System.Drawing.Drawing2D.GraphicsPath>オブジェクト、`myPathSection`をコピーしたポイントを受信します。  
  
-   呼び出し、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>メソッドは、3 番目のサブパス (図形) を反復処理するには、そのサブパス内に含まれるすべてのポイントのコピー、`myPathSection`パス、およびもにコピーされたポイント数を返します`subpathPoints`です。  
  
-   サブパス数と、画面の右側にあるに含まれているポイントの数を示します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath([out] int32&amp; startIndex, [out] int32&amp; endIndex, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="isClosed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out]次のサブ パスの開始インデックスを受け取ります。</param>
        <param name="endIndex">[out]次のサブ パスの終了インデックスを受け取ります。</param>
        <param name="isClosed">[out]サブパスが閉じているかどうかを示します。</param>
        <summary>移動、<see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />パスに次のサブパスをします。 開始インデックスと次のサブ パスの終了インデックスは、[out] パラメーターに格納されます。</summary>
        <returns>内のサブパスの数、<see cref="T:System.Drawing.Drawing2D.GraphicsPath" />オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は Windows フォームで使用するために設計され、必要があります<xref:System.Windows.Forms.PaintEventArgs> `e`、<xref:System.Windows.Forms.Form.OnPaint%2A>イベント オブジェクトです。 コードは、次のアクションを実行します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> オブジェクトを作成します。  
  
-   次の 3 つの線、四角形および楕円を追加します。  
  
-   点の配列の値を画面に描画します。  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> オブジェクトを作成します。  
  
-   呼び出し、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>メソッドです。  
  
-   反復的な呼び出しから返される値を使用して<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>に開始を描画し、画面に各サブ パスの値を停止します。  
  
-   サブパスの合計数の値を画面に描画します。  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>これを巻き戻し<see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />その関連付けられたパスの先頭にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最初に呼び出したとき、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>反復子のメソッド、反復子の関連付けられたパスの最初の図 (サブパス) 取得します。 2 番目の時間では、取得と 2 番目の図では、します。 呼び出すと、<xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>メソッド、シーケンスは開始以上です。 つまり、呼び出し後に<xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>、を次に呼び出した<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>パス内の最初の図を取得します。 <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>と<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A>メソッドは同様に動作します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubpathCount">
      <MemberSignature Language="C#" Value="public int SubpathCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SubpathCount" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パスのサブパスの数を取得します。</summary>
        <value>パス内のサブパスの数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
