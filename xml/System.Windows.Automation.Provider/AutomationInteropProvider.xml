<Type Name="AutomationInteropProvider" FullName="System.Windows.Automation.Provider.AutomationInteropProvider">
  <TypeSignature Language="C#" Value="public static class AutomationInteropProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AutomationInteropProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.AutomationInteropProvider" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>UI オートメーション プロバイダーと UI オートメーション クライアント アプリケーション間の通信をサポートします。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AppendRuntimeId">
      <MemberSignature Language="C#" Value="public const int AppendRuntimeId = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 AppendRuntimeId = (3)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>値が含まれています、UI オートメーション プロバイダーに渡される配列の最初の要素として返されるときに<see cref="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId" />、ことを示し、ID が部分的な基本のプロバイダーによって提供される ID に追加する必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このフィールドの実装で用い<xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A>直接ウィンドウでホストされていないフラグメント内の要素。  
  
   
  
## Examples  
 次の例は、実装の<xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A?displayProperty=nameWithType>リスト項目。  
  
 [!code-csharp[UIAFragmentProvider_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListItemFragment.cs#101)]
 [!code-vb[UIAFragmentProvider_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListItemFragment.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientsAreListening">
      <MemberSignature Language="C#" Value="public static bool ClientsAreListening { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool ClientsAreListening" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.AutomationInteropProvider.ClientsAreListening" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべての UI オートメーション クライアント アプリケーションにサブスクライブしているかどうかを指定する値を取得[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]イベント。</summary>
        <value>
          <see langword="true" />クライアントがイベントをサブスクライブしている場合それ以外の場合<see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#122](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#122)]
 [!code-vb[UIAFragmentProvider_snip#122](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#122)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostProviderFromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.Provider.IRawElementProviderSimple HostProviderFromHandle (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Automation.Provider.IRawElementProviderSimple HostProviderFromHandle(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.HostProviderFromHandle(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">ウィンドウのハンドル。</param>
        <summary>指定したウィンドウを表す UI オートメーション プロバイダーを返します。</summary>
        <returns>指定したウィンドウ用の未処理要素プロバイダー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって返されるインターフェイスは、バックアップにしか渡すこと[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]です。 このインターフェイスのメソッドを呼び出すしようとしています。 で例外が発生します。  
  
   
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#121](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#121)]
 [!code-vb[UIAFragmentProvider_snip#121](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#121)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLimit">
      <MemberSignature Language="C#" Value="public const int InvalidateLimit = 20;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 InvalidateLimit = (20)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>20</MemberValue>
      <Docs>
        <summary>バッチ処理する前に送信するイベントの最大数を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この値は、通知が個々 のイベントなど、指定されたかどうかを判断<xref:System.Windows.Automation.StructureChangeType.ChildAdded>または一括イベントなどの<xref:System.Windows.Automation.StructureChangeType.ChildrenBulkAdded>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemsInvalidateLimit">
      <MemberSignature Language="C#" Value="public const int ItemsInvalidateLimit = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 ItemsInvalidateLimit = (5)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.ItemsInvalidateLimit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>コンテナー内の項目のバッチ処理する前に送信するイベントの最大数。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseAutomationEvent">
      <MemberSignature Language="C#" Value="public static void RaiseAutomationEvent (System.Windows.Automation.AutomationEvent eventId, System.Windows.Automation.Provider.IRawElementProviderSimple provider, System.Windows.Automation.AutomationEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseAutomationEvent(class System.Windows.Automation.AutomationEvent eventId, class System.Windows.Automation.Provider.IRawElementProviderSimple provider, class System.Windows.Automation.AutomationEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationEvent(System.Windows.Automation.AutomationEvent,System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventId" Type="System.Windows.Automation.AutomationEvent" />
        <Parameter Name="provider" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
        <Parameter Name="e" Type="System.Windows.Automation.AutomationEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventId">イベント識別子。</param>
        <param name="provider">イベントに関連付けられた要素。</param>
        <param name="e">イベントに関する情報。</param>
        <summary>パターン イベントまたはカスタム イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パターンの実装だけで、パターンのイベントを発生しない必要があります。 など、<xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>を発生させる場合、コントロールが呼び出されるたびに使用するか<xref:System.Windows.Automation.InvokePattern.Invoke%2A>またはマウスまたはキーボード入力を使用します。 これにより、クライアントは、システム イベントに関する通知できます。  
  
   
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#122](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#122)]
 [!code-vb[UIAFragmentProvider_snip#122](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#122)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseAutomationPropertyChangedEvent">
      <MemberSignature Language="C#" Value="public static void RaiseAutomationPropertyChangedEvent (System.Windows.Automation.Provider.IRawElementProviderSimple element, System.Windows.Automation.AutomationPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseAutomationPropertyChangedEvent(class System.Windows.Automation.Provider.IRawElementProviderSimple element, class System.Windows.Automation.AutomationPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationPropertyChangedEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationPropertyChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
        <Parameter Name="e" Type="System.Windows.Automation.AutomationPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="element">イベントに関連付けられた要素。</param>
        <param name="e">イベントに関する情報。</param>
        <summary>[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] プロパティが変更された場合にイベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#123](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#123)]
 [!code-vb[UIAFragmentProvider_snip#123](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#123)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseStructureChangedEvent">
      <MemberSignature Language="C#" Value="public static void RaiseStructureChangedEvent (System.Windows.Automation.Provider.IRawElementProviderSimple provider, System.Windows.Automation.StructureChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseStructureChangedEvent(class System.Windows.Automation.Provider.IRawElementProviderSimple provider, class System.Windows.Automation.StructureChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseStructureChangedEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.StructureChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
        <Parameter Name="e" Type="System.Windows.Automation.StructureChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="provider">イベントに関連付けられた要素。</param>
        <param name="e">イベントに関する情報。</param>
        <summary>[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] ツリーが変更された場合にイベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ツリー構造の変更の例は、子要素の追加またはリスト ボックスから削除または展開やツリー ビューで折りたたまれています。  
  
 要素のいずれか、またはそのコンテナーのランタイム識別子が渡される子要素が削除されたときに、<xref:System.Windows.Automation.StructureChangedEventArgs>コンス トラクターです。 現在のバージョンで[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]、ただし、そのランタイム識別子を検出するプロバイダーのインスタンスの簡単な方法はありません。 <xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A>メソッドは通常を含む配列を返します<xref:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId>、よう指示するマジック ナンバー、[!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]システム コントロールのすべてのインスタンスの一意の識別子を作成します。 生の値によって提供される<xref:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId%2A>これには、クライアントにとって意味のないは、特定のインスタンスの識別に使用できないために、イベント、使用いない必要があります。  
  
 この制限により、型のイベント<xref:System.Windows.Automation.StructureChangeType.ChildAdded>と<xref:System.Windows.Automation.StructureChangeType.ChildRemoved>は非常に役に立ちません。 代わりに、常に使用<xref:System.Windows.Automation.StructureChangeType.ChildrenBulkAdded>と<xref:System.Windows.Automation.StructureChangeType.ChildrenBulkRemoved>、ランタイム識別子として 0 を渡します。 使用することはできません`null`ように、この例外が生成されます。 クライアントは、コンテナー内の変更が行われたことが通知されます (で識別される、`sender`に渡されたパラメーター、 <xref:System.Windows.Automation.StructureChangedEventHandler>) どのような子の特定の通知を追加または削除しないとします。  
  
   
  
## Examples  
 次の例では、子を追加するときにイベントを発生させる方法を示しています。 または、カスタム リスト ボックスから削除します。  
  
 [!code-csharp[FragmentProvider#101](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentProvider/CSharp/ListFragment.cs#101)]
 [!code-vb[FragmentProvider#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentProvider/VisualBasic/ListFragment.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnRawElementProvider">
      <MemberSignature Language="C#" Value="public static IntPtr ReturnRawElementProvider (IntPtr hwnd, IntPtr wParam, IntPtr lParam, System.Windows.Automation.Provider.IRawElementProviderSimple el);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReturnRawElementProvider(native int hwnd, native int wParam, native int lParam, class System.Windows.Automation.Provider.IRawElementProviderSimple el) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.AutomationInteropProvider.ReturnRawElementProvider(System.IntPtr,System.IntPtr,System.IntPtr,System.Windows.Automation.Provider.IRawElementProviderSimple)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
        <Parameter Name="wParam" Type="System.IntPtr" />
        <Parameter Name="lParam" Type="System.IntPtr" />
        <Parameter Name="el" Type="System.Windows.Automation.Provider.IRawElementProviderSimple" />
      </Parameters>
      <Docs>
        <param name="hwnd">要素のウィンドウのハンドル。</param>
        <param name="wParam"><see langword="wParam" />のメンバー、<see langword="WM_GETOBJECT" />メッセージ。</param>
        <param name="lParam"><see langword="lParam" />のメンバー、<see langword="WM_GETOBJECT" />メッセージ。</param>
        <param name="el">要素の UI オートメーション プロバイダー。</param>
        <summary>応答要素の UI オートメーション プロバイダーを返します、<see langword="WM_GETOBJECT" />メッセージ。</summary>
        <returns>割り当てられるデータへのポインター<see cref="P:System.Windows.Forms.Message.Result" />基本ウィンドウ プロシーにメッセージを渡す前にします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[UIAFragmentProvider_snip#116](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAFragmentProvider_snip/CSharp/ListFragment.cs#116)]
 [!code-vb[UIAFragmentProvider_snip#116](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAFragmentProvider_snip/VisualBasic/ListFragment.vb#116)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootObjectId">
      <MemberSignature Language="C#" Value="public const int RootObjectId = -25;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 RootObjectId = (-25)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.Provider.AutomationInteropProvider.RootObjectId" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-25</MemberValue>
      <Docs>
        <summary>使用される値が含まれています、<see langword="lParam" />のメンバー、<see langword="WM_GETOBJECT" />サーバーがルートの未処理要素プロバイダーへの参照を返すことを示すメッセージ。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
