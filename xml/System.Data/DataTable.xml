<Type Name="DataTable" FullName="System.Data.DataTable">
  <TypeSignature Language="C#" Value="public class DataTable : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataTable extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RowChanging")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("TableName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataTableEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Xml.Serialization.XmlSchemaProvider("GetDataTableSchema")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>メモリ内データの 1 つのテーブルを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable> ADO.NET ライブラリ内のサーバーの全体のオブジェクトです。 その他のオブジェクトを使用する、<xref:System.Data.DataTable>含める、<xref:System.Data.DataSet>と<xref:System.Data.DataView>です。  
  
 アクセスするときに<xref:System.Data.DataTable>オブジェクト、条件付きで大文字小文字が区別されることに注意してください。 たとえば、1 つ<xref:System.Data.DataTable>"mydatatable"の名前は"Mydatatable"という名前別と、テーブルのいずれかの検索に使用される文字列は大文字と小文字を区別見なされます。 ただし、"mydatatable"が存在する"Mydatatable"がない場合は、検索文字列が見なされると大文字小文字を区別しません。 A <xref:System.Data.DataSet> 2 つを含めることができます<xref:System.Data.DataTable>が同じであるオブジェクト<xref:System.Data.DataTable.TableName%2A>プロパティの値が異なる<xref:System.Data.DataTable.Namespace%2A>プロパティの値。 操作の詳細については<xref:System.Data.DataTable>、オブジェクトを参照してください[DataTable の作成](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable.md)です。  
  
 作成する場合は、<xref:System.Data.DataTable>プログラムでは、最初に定義してそのスキーマを追加して<xref:System.Data.DataColumn>オブジェクトを<xref:System.Data.DataColumnCollection>(を使用してアクセス、<xref:System.Data.DataTable.Columns%2A>プロパティ)。 追加の詳細については<xref:System.Data.DataColumn>、オブジェクトを参照してください[DataTable に列の追加](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md)です。  
  
 行を追加する、 <xref:System.Data.DataTable>、最初に使用する必要があります、<xref:System.Data.DataTable.NewRow%2A>を返す新しいメソッドを<xref:System.Data.DataRow>オブジェクト。 <xref:System.Data.DataTable.NewRow%2A>メソッドのスキーマを持つ行を返します、<xref:System.Data.DataTable>テーブルの定義されているように、<xref:System.Data.DataColumnCollection>です。 最大数の行を<xref:System.Data.DataTable>できるストアは 16,777, 216 です。 詳細については、次を参照してください。 [DataTable にデータを追加する](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-data-to-a-datatable.md)です。  
  
 <xref:System.Data.DataTable>ものコレクションを含む<xref:System.Data.Constraint>データの整合性を確保するために使用するオブジェクト。 詳細については、次を参照してください。 [DataTable の制約](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md)です。  
  
 多数ある<xref:System.Data.DataTable>決定をテーブルに変更があったときに使用できるイベントです。 これには、<xref:System.Data.DataTable.RowChanged>、<xref:System.Data.DataTable.RowChanging>、<xref:System.Data.DataTable.RowDeleting>、および <xref:System.Data.DataTable.RowDeleted> が含まれます。 使用できるイベントの詳細については、<xref:System.Data.DataTable>を参照してください[DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)です。  
  
 インスタンス<xref:System.Data.DataTable>作成されると、いくつか読み取り/書き込みのプロパティは初期値に設定されます。 これらの値の一覧は、次を参照してください。、<xref:System.Data.DataTable.%23ctor%2A?displayProperty=nameWithType>コンス トラクターのトピックです。  
  
> [!NOTE]
>  <xref:System.Data.DataSet>と<xref:System.Data.DataTable>オブジェクトから継承<xref:System.ComponentModel.MarshalByValueComponent>、およびサポート、 <xref:System.Runtime.Serialization.ISerializable> .NET Framework リモート処理用のインターフェイスです。 これらは、.NET Framework リモート処理のために使用できる唯一の ADO.NET オブジェクトです。  
  
   
  
## Examples  
 次の例では、2 つ作成されます<xref:System.Data.DataTable>オブジェクトと 1 つ<xref:System.Data.DataRelation>オブジェクト、および新しいオブジェクトを追加、<xref:System.Data.DataSet>です。 テーブルが表示されます、<xref:System.Windows.Forms.DataGridView>コントロール。  
  
 [!code-csharp[Classic WebData DataTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable Example/VB/source.vb#1)]  
  
 このサンプルでは、特定のスキーマ定義を含む DataTable を手動で作成する方法を示します。  
  
-   複数のデータ テーブルを作成し、最初の列を定義します。  
  
-   テーブルの制約を作成します。  
  
-   値を挿入し、テーブルを表示します。  
  
-   式列を作成し、テーブルを表示します。  
  
 このサンプル コードで c# および Visual Basic のプロジェクトにある [開発者コード サンプル](http://code.msdn.microsoft.com/How-to-create-DataTable-7abb4914)です。  
  
 [!code-csharp[Classic WebData DataTable Example2#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/classic webdata datatable example2/cs/source.cs#1)]
 [!code-vb[Classic WebData DataTable Example2#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/classic webdata datatable example2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型は、マルチ スレッドの読み取り操作に対して安全です。 すべての書き込み操作を同期する必要があります。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Data.DataTable" />引数のないクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンス トラクターのすべてのプロパティの初期値の設定、<xref:System.Data.DataTable>オブジェクト。 次の表は、プロパティとその既定値を示します。 インスタンス<xref:System.Data.DataTable>作成されると、次読み取り/書き込みプロパティの初期値に設定されます。  
  
|プロパティ|既定値|  
|--------------|-------------------|  
|**CaseSensitive**|親と同じ<xref:System.Data.DataSet>いずれかに属している場合は、します。 それ以外の場合は `false`。|  
|**DisplayExpression**|空の文字列 ("")|  
|**ロケール**|親と同じ<xref:System.Data.DataSet>オブジェクトの<xref:System.Globalization.CultureInfo>(によって返される、<xref:System.Data.DataSet.Locale%2A>プロパティ) 以外の場合は親が存在しない場合、既定では、現在のシステム<xref:System.Globalization.CultureInfo>です。|  
|**MinimumCapacity**|50 行です。|  
  
 プロパティに別個の呼び出しでこれらのプロパティのいずれかの値を変更することができます。  
  
   
  
## Examples  
 次の例は、新しい作成<xref:System.Data.DataTable>で<xref:System.Data.DataColumn>と<xref:System.Data.DataRow>で表示、<xref:System.Windows.Forms.DataGridView>コントロール。  
  
 [!code-csharp[Classic WebData DataTable.DataTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DataTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTable (string tableName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tableName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tableName">テーブルに付ける名前です。 場合<c>tableName</c>は<see langword="null" />、または空の文字列に追加すると、既定の名前が割り当てられて、<see cref="T:System.Data.DataTableCollection" />です。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Data.DataTable" />指定したテーブル名を持つクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を作成、<xref:System.Data.DataTable>で表示、<xref:System.Windows.Forms.DataGridView>コントロール。  
  
 [!code-csharp[Classic WebData DataTable.DataTable1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DataTable1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DataTable1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataTable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">オブジェクトを逆シリアル化または逆シリアル化に必要なデータです。</param>
        <param name="context">ソースと指定したシリアル化されたストリームの転送先。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Data.DataTable" />クラス、<see cref="T:System.Runtime.Serialization.SerializationInfo" />と<see cref="T:System.Runtime.Serialization.StreamingContext" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この実装、<xref:System.Data.DataTable>コンス トラクターが必要<xref:System.Runtime.Serialization.ISerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTable (string tableName, string tableNamespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string tableName, string tableNamespace) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="tableName" Type="System.String" />
        <Parameter Name="tableNamespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tableName">テーブルに付ける名前です。 場合<c>tableName</c>は<see langword="null" />、または空の文字列に追加すると、既定の名前が割り当てられて、<see cref="T:System.Data.DataTableCollection" />です。</param>
        <param name="tableNamespace">名前空間に格納されたデータの XML 表現を<see langword="DataTable" />です。</param>
        <summary>新しいインスタンスを初期化、<see cref="T:System.Data.DataTable" />クラスの指定したテーブル名と名前空間を使用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.AcceptChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>前回このテーブルに対して行ったすべての変更をコミット<see cref="M:System.Data.DataTable.AcceptChanges" />が呼び出されました。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに<xref:System.Data.DataTable.AcceptChanges%2A>が呼び出されると、いずれかの<xref:System.Data.DataRow>まだ編集モードでのオブジェクトは、その編集を正常に終了します。 <xref:System.Data.DataRowState>も変更: すべて`Added`と`Modified`になる行`Unchanged`、および`Deleted`行が削除されます。  
  
 <xref:System.Data.DataTable.AcceptChanges%2A>でメソッドが呼び出された一般に、<xref:System.Data.DataTable>更新を試行した後、<xref:System.Data.DataSet>を使用して、<xref:System.Data.Common.DbDataAdapter.Update%2A?displayProperty=nameWithType>メソッドです。  
  
   
  
## Examples  
 次の例では、各テーブルにエラーをテストします。 (を渡すことによって、未定義の関数を)、テーブルのエラーを調整することができる場合<xref:System.Data.DataTable.AcceptChanges%2A>が呼び出された場合<xref:System.Data.DataTable.RejectChanges%2A>と呼びます。  
  
 [!code-csharp[Classic WebData DataTable.AcceptChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.AcceptChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.AcceptChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.AcceptChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.BeginInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataTable" /> の初期化を開始します。 初期化は実行時に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Studio .NET デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用するコンポーネントの初期化を開始します。 <xref:System.Data.DataTable.EndInit%2A>メソッドが初期化を終了します。 使用して、<xref:System.Data.DataTable.BeginInit%2A>と<xref:System.Data.DataTable.EndInit%2A>メソッド使用されないように、コントロールが完全に初期化される前にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoadData">
      <MemberSignature Language="C#" Value="public void BeginLoadData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginLoadData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.BeginLoadData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データの読み込み中に、通知、インデックスのメンテナンス、および制約をオフにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して<xref:System.Data.DataTable.BeginLoadData%2A>と共に<xref:System.Data.DataTable.LoadDataRow%2A>と<xref:System.Data.DataTable.EndLoadData%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaseSensitive">
      <MemberSignature Language="C#" Value="public bool CaseSensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitive" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.CaseSensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テーブル内の文字列比較、大文字小文字を区別するかどうかを示します。</summary>
        <value>
          <see langword="true" />場合は、比較では大文字小文字を区別します。それ以外の場合<see langword="false" />です。 既定値が親に設定されている<see cref="T:System.Data.DataSet" />オブジェクトの<see cref="P:System.Data.DataSet.CaseSensitive" />プロパティ、または<see langword="false" />場合、<see cref="T:System.Data.DataTable" />とは無関係に作成された、<see cref="T:System.Data.DataSet" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.CaseSensitive%2A>プロパティは、並べ替え、検索、およびフィルター処理で文字列を比較に影響します。  
  
   
  
## Examples  
 次の例では、<xref:System.Data.DataTable.Select%2A>メソッドに 2 回、<xref:System.Data.DataTable>です。 最初に、<xref:System.Data.DataTable.CaseSensitive%2A>プロパティに設定されている`false`に、2 番目`true`です。  
  
 [!code-csharp[Classic WebData DataTable.CaseSensitive Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.CaseSensitive Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.CaseSensitive Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildRelations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection ChildRelations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection ChildRelations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.ChildRelations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この子のリレーションシップのコレクションを取得<see cref="T:System.Data.DataTable" />です。</summary>
        <value>A<see cref="T:System.Data.DataRelationCollection" />テーブルの子リレーションシップを格納しています。 ない場合は、空のコレクションが返される<see cref="T:System.Data.DataRelation" />オブジェクトが存在します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Data.DataRelation> 2 つのテーブル間のリレーションシップを定義します。 通常、2 つのテーブルは、同じデータを含む単一のフィールドでリンクされます。 たとえば、アドレス データを格納するテーブルには、国/地域を表すコードを含む 1 つのフィールドがあります。 国/地域のデータが含まれる 2 番目のテーブルには、国/地域を識別するコードを含む 1 つのフィールドを持つし、このコードは、対応するフィールドの最初のテーブルに挿入することができます。 A <xref:System.Data.DataRelation>、次に、少なくとも 4 つ情報にはが含まれています: (1) 最初のテーブルの名前、(2) の最初のテーブル内の列名、(3) 2 番目のテーブルの名前および (4) 2 番目のテーブル内の列名。  
  
   
  
## Examples  
 次の例では、<xref:System.Data.DataTable.ChildRelations%2A>をそれぞれの子を返すプロパティ<xref:System.Data.DataRelation>で、<xref:System.Data.DataTable>です。 引数としてそれぞれのリレーションを使用して、<xref:System.Data.DataRow.GetChildRows%2A>のメソッド、<xref:System.Data.DataRow>行の配列を返します。 行の各列の値が出力されます。  
  
 [!code-csharp[Classic WebData DataTable.ChildRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ChildRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ChildRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ChildRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>消去、<see cref="T:System.Data.DataTable" />すべてのデータ。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべてのテーブルのすべての行が削除されます。 表に、子行が孤立するを原因となるすべての適用されている子リレーションシップがある場合、例外が生成されます。  
  
 場合、<xref:System.Data.DataSet>にバインドされて、 <xref:System.Xml.XmlDataDocument>、呼び出し元<xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType>または<xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType>を生成、<xref:System.NotSupportedException>です。 このような状況を避けるためには、テーブルごとに、一度に 1 行ずつの削除を走査します。 使用すると<xref:System.Data.DataTable.NewRow%2A>を呼び出す前に新しい行を作成する、行を処理する必要があります<xref:System.Data.DataTable.Clear%2A>です。  
  
   
  
## Examples  
 次の例では、すべてのデータのテーブルを消去します。  
  
 [!code-csharp[Classic WebData DataTable.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataTable Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>構造のクローンを作成、<see cref="T:System.Data.DataTable" />をすべて含む<see cref="T:System.Data.DataTable" />スキーマおよび制約。</summary>
        <returns>新しい<see cref="T:System.Data.DataTable" />現在と同じスキーマで<see cref="T:System.Data.DataTable" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これらのクラスが派生されている場合、複製が同じ派生クラスにもなります。  
  
 新しい複製を作成<xref:System.Data.DataTable>元と同じ構造を持つ<xref:System.Data.DataTable>、任意のデータはコピーされませんが、(新しい<xref:System.Data.DataTable>は含められません`DataRows`)。 新しい構造とデータの両方をコピーする<xref:System.Data.DataTable>を使用して<xref:System.Data.DataTable.Copy%2A>です。  
  
   
  
## Examples  
 次の例では、DataTable.Clone を実行した後、構造と対象テーブルの制約を更新する方法を示します。 ClonedDataTable クラスは、コピー先のテーブルを返すし、すべての更新イベントが含まれています。 クローン後のソース テーブルの構造の変更は、コピー先のテーブルに反映されません。 具体的には、このサンプルを行います。  
  
-   ソース テーブルの列の変更を更新します。  
  
-   ソース テーブルの一意の制約の変更を更新します。  
  
-   ソース テーブルの外部キーの変更を更新します。  
  
 このサンプル コードで c# および Visual Basic のプロジェクトにある [開発者コード サンプル](http://code.msdn.microsoft.com/site/search?f%5B0%5D.Type=SearchText&f%5B0%5D.Value=How%20to%20automically%20update%20the%20structure%20of%20a%20cloned%20DataTable)です。  
  
```csharp  
using System;  
using System.Linq;  
using System.Data;  
using System.ComponentModel;  
  
class Program {  
   static void Main(string[] args) {  
      DataTable courses = NewCourseDataTable();  
      Console.WriteLine("This is the source table:");  
      WriteDataTable(courses);  
  
      ClonedDataTable clonedResult = new ClonedDataTable(courses);  
      DataTable clonedCourses = clonedResult.DestinationTable;  
      Console.WriteLine("This is the destination table:");  
      WriteDataTable(clonedCourses);  
  
      // Add the events of updating column collection into the source table.  
      clonedResult.UpdateAddedColumn();  
      clonedResult.UpdateDeletedColumn();  
      // Add a DataColumn in source table.  
      DataColumn columnCreidts = new DataColumn("Credits", typeof(Int32));  
      courses.Columns.Add(columnCreidts);  
      Console.WriteLine("After add a column in source table, it's the result in the destination:");  
      WriteDataTable(clonedCourses);  
  
      // Add the event of updating UniqueConstraint into the source table.  
      clonedResult.UpdateUniqueConstraint();  
  
      // Add the unique constraint in source table.  
      UniqueConstraint uniqueConstraint = new UniqueConstraint(courses.Columns["CourseId"]);  
      courses.Constraints.Add(uniqueConstraint);  
  
      Console.WriteLine(@"If we add the unique constraint in source table and then insert the duplicate   
rows into the destination table, we will get the following error:");  
      InsertDuplicateData(clonedCourses);  
      Console.WriteLine();  
  
      // Add the event of updating ForeignKeyConstraint into the source table.  
      clonedResult.UpdateForeignKeyConstraint();  
  
      // Add the ForeignKeyConstraint into the source table.  
      DataTable deparments = NewDeparmentDataTable();  
      DataSet dataset = new DataSet();  
  
      dataset.Tables.Add(courses);  
      dataset.Tables.Add(clonedCourses);  
      dataset.Tables.Add(deparments);  
  
      ForeignKeyConstraint foreignKey = new ForeignKeyConstraint(deparments.Columns["DepartmentId"], courses.Columns["DepartmentId"]);  
      courses.Constraints.Add(foreignKey);  
  
      Console.WriteLine(@"If we add the foreign key constraint in source table and then insert a row   
without the parent  into the destination table, we will get the following error:");  
      InsertNoParentRow(clonedCourses);  
      Console.WriteLine();  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   static private DataTable NewCourseDataTable() {  
      DataTable newTable = new DataTable();  
  
      DataColumn[] columns ={   
                                      new DataColumn("CourseId", typeof(String)),  
                                      new DataColumn("CourseName",typeof(String)),                                        
                                      new DataColumn("DepartmentId", typeof(Int32))  
                                  };  
  
      newTable.Columns.AddRange(columns);  
  
      newTable.Rows.Add("C1045", "Calculus", 7);  
      newTable.Rows.Add("C1061", "Physics", 1);  
      newTable.Rows.Add("C2021", "Composition", 2);  
      newTable.Rows.Add("C2042", "Literature", 2);  
  
      return newTable;  
   }  
  
   static private DataTable NewDeparmentDataTable() {  
      DataTable newTable = new DataTable();  
  
      DataColumn[] columns ={   
                                      new DataColumn("DepartmentId", typeof(Int32)),  
                                      new DataColumn("Name",typeof(String)),  
                                  };  
  
      newTable.Columns.AddRange(columns);  
  
      newTable.Rows.Add(1, "Engineering");  
      newTable.Rows.Add(2, "English");  
      newTable.Rows.Add(4, "Economics");  
      newTable.Rows.Add(7, "Mathematics");  
  
      return newTable;  
   }  
  
   static private void WriteDataTable(DataTable table) {  
      if (table == null)  
         return;  
  
      foreach (DataColumn column in table.Columns) {  
         Console.Write("{0,-15}", column.ColumnName);  
      }  
      Console.WriteLine();  
  
      foreach (DataRow row in table.Rows) {  
         for (int i = 0; i < table.Columns.Count; i++)  
            Console.Write("{0,-15}", row[i].ToString());  
         Console.WriteLine();  
      }  
  
      Console.WriteLine();  
   }  
  
   static private void InsertDuplicateData(DataTable table) {  
      try {  
         table.Rows.Add("C1045", "Calculus", 7);  
         table.Rows.Add("C1045", "Calculus", 7);  
      } catch (Exception e) {  
         Console.WriteLine("\"" + e.Message + "\"");  
      }  
   }  
  
   private static void InsertNoParentRow(DataTable table) {  
      try {  
         table.Rows.Add("C1061", "Physics", 11);  
      } catch (Exception e) {  
         Console.WriteLine("\"" + e.Message + "\"");  
      }  
   }  
}  
  
public class ClonedDataTable {  
   private DataTable sourceTable;  
   private DataTable destinationTable;  
  
   public ClonedDataTable(DataTable source) {  
      sourceTable = source;  
      // set the cloned result  
      destinationTable = sourceTable.Clone();  
   }  
  
   public void UpdateAddedColumn() {  
      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnAdded);  
   }  
  
   public void UpdateDeletedColumn() {  
      sourceTable.Columns.CollectionChanged += new CollectionChangeEventHandler(ColumnDeleted);  
   }  
  
   public void UpdateUniqueConstraint() {  
      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(UniqueConstraint_Changed);  
   }  
  
   public void UpdateForeignKeyConstraint() {  
      sourceTable.Constraints.CollectionChanged += new CollectionChangeEventHandler(ForeignKeyConstraint_Changed);  
   }  
  
   // After the source table adds a column, the method will add the same column in the destination table.  
   void ColumnAdded(object sender, System.ComponentModel.CollectionChangeEventArgs e) {  
      if (e.Action == CollectionChangeAction.Add) {  
         DataColumn column = e.Element as DataColumn;  
  
         if (column != null) {  
            DataColumn newColumn = new DataColumn(column.ColumnName, column.DataType, column.Expression, column.ColumnMapping);  
  
            if (!destinationTable.Columns.Contains(newColumn.ColumnName))  
               destinationTable.Columns.Add(newColumn);  
         }  
      }  
   }  
  
   // After the source table deletes a column, the method will delete the same column in the destination table.  
   void ColumnDeleted(object sender, CollectionChangeEventArgs e) {  
      if (e.Action == CollectionChangeAction.Remove) {  
         DataColumn column = e.Element as DataColumn;  
  
         if (column != null)  
            if (destinationTable.Columns.Contains(column.ColumnName))  
               destinationTable.Columns.Remove(column.ColumnName);  
      }  
   }  
  
   // After the source table changes the UniqueConstraint, this method changes the same UniqueConstraint in destination table.        
   void UniqueConstraint_Changed(object sender, CollectionChangeEventArgs e) {  
      UniqueConstraint constraint = e.Element as UniqueConstraint;  
  
      if (constraint == null)  
         return;  
  
      String constraintName = constraint.ConstraintName;  
  
      if (e.Action == CollectionChangeAction.Add) {  
         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  
         Boolean isPrimaryKey = constraint.IsPrimaryKey;  
  
         // Get the columns used in new constraint from the destiantion table.  
         for (Int32 i = 0; i < constraint.Columns.Count(); i++) {  
            String columnName = constraint.Columns[i].ColumnName;  
  
            if (destinationTable.Columns.Contains(columnName))  
               columns[i] = destinationTable.Columns[columnName];  
            else  
               return;  
         }  
  
         UniqueConstraint newConstraint = new UniqueConstraint(constraintName, columns, isPrimaryKey);  
  
         if (!destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Add(newConstraint);  
  
      } else if (e.Action == CollectionChangeAction.Remove)  
         if (destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Remove(constraintName);  
   }  
  
   // After the source table changes the ForeignKeyConstraint, this method changes    
   // the same ForeignKeyConstraint in the destination table.  
   void ForeignKeyConstraint_Changed(object sender, CollectionChangeEventArgs e) {  
      ForeignKeyConstraint constraint = e.Element as ForeignKeyConstraint;  
  
      if (constraint == null)  
         return;  
  
      // If the source and destination are not in the same DataSet, don't change the ForeignKeyConstraint.  
      if (sourceTable.DataSet != destinationTable.DataSet)  
         return;  
  
      String constraintName = constraint.ConstraintName;  
  
      if (e.Action == CollectionChangeAction.Add) {  
         DataColumn[] columns = new DataColumn[constraint.Columns.Count()];  
         DataColumn[] parentColumns = constraint.RelatedColumns;  
  
         // Get the columns used in new constraint from the destination table.  
         for (int i = 0; i < constraint.Columns.Count(); i++) {  
            String columnName = constraint.Columns[i].ColumnName;  
  
            if (destinationTable.Columns.Contains(columnName))  
               columns[i] = destinationTable.Columns[columnName];  
            else  
               return;  
         }  
  
         ForeignKeyConstraint newConstraint = new ForeignKeyConstraint(constraintName, parentColumns, columns);  
         newConstraint.AcceptRejectRule = constraint.AcceptRejectRule;  
         newConstraint.DeleteRule = constraint.DeleteRule;  
         newConstraint.UpdateRule = constraint.UpdateRule;  
  
         if (!destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Add(newConstraint);  
      } else if (e.Action == CollectionChangeAction.Remove)  
         if (destinationTable.Constraints.Contains(constraintName))  
            destinationTable.Constraints.Remove(constraintName);  
   }  
  
   // return the destination table.  
   public DataTable DestinationTable {  
      get { return destinationTable; }  
   }  
}  
```  
  
 このサンプルでは、DataTable にデータを変更し、データ ソースを更新する方法を示します。  
  
 まず、データベースを作成します。  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]   
  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
```  
  
 コンパイルして、サンプルを実行することができますようになりました。 [データ ソースに更新して DataTable 内のデータを変更する方法](http://code.msdn.microsoft.com/How-to-modify-data-in-c68d35f4)はこのサンプルの Visual Basic および c# のプロジェクトがあります。  
  
```csharp  
using System;  
using System.Data;  
using System.Data.SqlClient;  
  
class Program {  
   static void Main(string[] args) {  
  
   string MySchoolConnectionString = "Data Source=(local);Initial Catalog=MySchool;Integrated Security=True";  
  
      // Get Data  
      String selectString =  
       @"Select [CourseID],[Year],[Title],[Credits],[DepartmentID] From [dbo].[Course];  
               Select [DepartmentID],[Name],[Budget],[StartDate],[Administrator] From [dbo].[Department] ";  
  
      DataSet dataSet = new DataSet();  
      DataTable course = dataSet.Tables.Add("Course");  
      DataTable department = dataSet.Tables.Add("Department");  
  
      Console.WriteLine("Get data from database:");  
      GetDataTables(MySchoolConnectionString, selectString, dataSet, course, department);  
      Console.WriteLine();  
  
      // Use DataTable Edits to edit the data  
      String updateString =  
              @"Update [dbo].[Course] Set [Credits]=@Credits Where [CourseID]=@CourseID;";  
  
      course.ColumnChanged += OnColumnChanged;  
  
      // Set the Credits of first row is negative value, and set the Credits of second row is plus.  
      ChangeCredits(course, course.Rows[0], -1);  
      ChangeCredits(course, course.Rows[1], 11);  
  
      UpdateDataTables(MySchoolConnectionString, updateString, dataSet, "Course",  
          new SqlParameter("@CourseID", SqlDbType.NVarChar, 10, "CourseID"),  
          new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits"));  
      Console.WriteLine("Only the Credits of second row is changed.");  
      ShowDataTable(course);  
      Console.WriteLine();  
  
      // Delete and Remove from DataTable  
      // Create the foreign key constraint, and set the DeleteRule with Cascade.  
      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint("CourseDepartFK", department.Columns["DepartmentID"], course.Columns["DepartmentID"]);  
      courseDepartFK.DeleteRule = Rule.Cascade;  
      courseDepartFK.UpdateRule = Rule.Cascade;  
      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  
      course.Constraints.Add(courseDepartFK);  
  
      String deleteString = @"Delete From [dbo].[Course] Where [CourseID]=@CourseID;";  
  
      department.Rows[0].Delete();  
      Console.WriteLine("If One row in Department table is deleted, the related rows in Course table will also be deleted.");  
      Console.WriteLine("Department DataTable:");  
      ShowDataTable(department);  
      Console.WriteLine();  
      Console.WriteLine("Course DataTable:");  
      ShowDataTable(course);  
      Console.WriteLine();  
      // Update the delete operation  
      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, "Course",  
          new SqlParameter("@CourseID", SqlDbType.NVarChar, 10, "CourseID"));  
      Console.WriteLine("After delete operation:");  
      Console.WriteLine("Course DataTable:");  
      ShowDataTable(course);  
      Console.WriteLine();  
  
      course.Rows.RemoveAt(0);  
      Console.WriteLine("Now we remove one row from Course:");  
      ShowDataTable(course);  
      DeleteDataTables(MySchoolConnectionString, deleteString, dataSet, "Course",  
          new SqlParameter("@CourseID", SqlDbType.NVarChar, 10, "CourseID"));  
   }  
  
   // Use SqlDataAdapter to get data.  
   private static void GetDataTables(String connectionString, String selectString,  
       DataSet dataSet, params DataTable[] tables) {  
      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  
         adapter.SelectCommand = new SqlCommand(selectString);  
         adapter.SelectCommand.Connection = new SqlConnection(connectionString);  
  
         adapter.Fill(0, 0, tables);  
  
         foreach (DataTable table in dataSet.Tables) {  
            Console.WriteLine("Data in {0}:", table.TableName);  
            ShowDataTable(table);  
            Console.WriteLine();  
         }  
      }  
   }  
  
   // Use SqlDataAdapter to update the updata operation.  
   private static void UpdateDataTables(String connectionString, String updateString,  
       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  
      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  
         adapter.UpdateCommand = new SqlCommand(updateString);  
         adapter.UpdateCommand.Parameters.AddRange(parameters);  
         adapter.UpdateCommand.Connection = new SqlConnection(connectionString);  
  
         adapter.Update(dataSet, tableName);  
      }  
   }  
  
   // Use SqlDataAdapter to update delete operation.  
   private static void DeleteDataTables(String connectionString, String deleteString,  
       DataSet dataSet, String tableName, params SqlParameter[] parameters) {  
      using (SqlDataAdapter adapter = new SqlDataAdapter()) {  
         adapter.DeleteCommand = new SqlCommand(deleteString);  
         adapter.DeleteCommand.Parameters.AddRange(parameters);  
         adapter.DeleteCommand.Connection = new SqlConnection(connectionString);  
  
         adapter.Update(dataSet, tableName);  
      }  
   }  
  
   // Use DataTable Edits to modify the data.  
   private static void ChangeCredits(DataTable table, DataRow row, Int32 credits) {  
      row.BeginEdit();  
      Console.WriteLine("We change row {0}", table.Rows.IndexOf(row));  
      row["Credits"] = credits;  
      row.EndEdit();  
   }  
  
   // The method will be invoked when the value in DataTable is changed.  
   private static void OnColumnChanged(Object sender, DataColumnChangeEventArgs args) {  
      Int32 credits = 0;  
      // If Credits is changed and the value is negative, we'll cancel the edit.  
      if ((args.Column.ColumnName == "Credits") &&  
          (!Int32.TryParse(args.ProposedValue.ToString(), out credits) || credits < 0)) {  
         Console.WriteLine("The value of Credits is invalid. Edit canceled.");  
         args.Row.CancelEdit();  
      }  
   }  
  
   // Display the column and value of DataTable.  
   private static void ShowDataTable(DataTable table) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-14}", col.ColumnName);  
      }  
      Console.WriteLine("{0,-14}", "RowState");  
  
      foreach (DataRow row in table.Rows) {  
         if (row.RowState == DataRowState.Deleted) {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime)))  
                  Console.Write("{0,-14:d}", row[col, DataRowVersion.Original]);  
               else if (col.DataType.Equals(typeof(Decimal)))  
                  Console.Write("{0,-14:C}", row[col, DataRowVersion.Original]);  
               else  
                  Console.Write("{0,-14}", row[col, DataRowVersion.Original]);  
            }  
         }  
         else {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime)))  
                  Console.Write("{0,-14:d}", row[col]);  
               else if (col.DataType.Equals(typeof(Decimal)))  
                  Console.Write("{0,-14:C}", row[col]);  
               else  
                  Console.Write("{0,-14}", row[col]);  
            }  
         }  
         Console.WriteLine("{0,-14}", row.RowState);  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnChanged">
      <MemberSignature Language="C#" Value="public event System.Data.DataColumnChangeEventHandler ColumnChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataColumnChangeEventHandler ColumnChanged" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.ColumnChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataColumnChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>値が変更された後に発生、指定された<see cref="T:System.Data.DataColumn" />で、<see cref="T:System.Data.DataRow" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)です。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.ColumnChanged Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanged Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ColumnChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnChanging">
      <MemberSignature Language="C#" Value="public event System.Data.DataColumnChangeEventHandler ColumnChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataColumnChangeEventHandler ColumnChanging" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.ColumnChanging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataColumnChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>値が変更されたときに発生する、指定された<see cref="T:System.Data.DataColumn" />で、<see cref="T:System.Data.DataRow" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)です。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.ColumnChanging Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanging Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ColumnChanging Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ColumnChanging Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Data.DataColumnCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataColumnCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataColumnCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このテーブルに属している列のコレクションを取得します。</summary>
        <value>A<see cref="T:System.Data.DataColumnCollection" />のコレクションを含む<see cref="T:System.Data.DataColumn" />テーブルのオブジェクト。 ない場合は、空のコレクションが返される<see cref="T:System.Data.DataColumn" />オブジェクトが存在します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumnCollection>各列のデータ型を定義することによって、テーブルのスキーマを決定します。  
  
   
  
## Examples  
 次の例を使用してテーブル内の各行の値ごとの出力、<xref:System.Data.DataTable.Columns%2A>プロパティです。  
  
 [!code-csharp[Classic WebData DataTable.Columns Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Columns Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Columns Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Columns Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compute">
      <MemberSignature Language="C#" Value="public object Compute (string expression, string filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Compute(string expression, string filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Compute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
        <Parameter Name="filter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">計算する式。</param>
        <param name="filter">式に評価される行を制限するフィルター。</param>
        <summary>フィルター条件を通過する現在の行で指定された式を計算します。</summary>
        <returns><see cref="T:System.Object" />計算の結果に設定します。 式は、null に評価されると、戻り値になります<see cref="F:System.DBNull.Value" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `expression`パラメーターには、集計関数が必要です。 たとえば、次に示します有効な式。  
  
 `Count(Quantity)`  
  
 この式ではありません。  
  
 `Sum (Quantity * UnitPrice)`  
  
 作成する必要がある場合は、次の 2 つ以上の列に対して操作を実行する必要があります、<xref:System.Data.DataColumn>設定、その<xref:System.Data.DataColumn.Expression%2A>プロパティを適切な式と、結果の列に集計式を使用します。 その場合は、指定された、<xref:System.Data.DataColumn>名前「合計」、および<xref:System.Data.DataColumn.Expression%2A>プロパティにこの設定。  
  
 `"Quantity * UnitPrice"`  
  
 Expression 引数、<xref:System.Data.DataTable.Compute%2A>メソッドできるようになりますこの。  
  
 `Sum(total)`  
  
 2 番目のパラメーターでは、`filter`式で使用する行を決定します。 たとえば、テーブル"colDate"という名前の日付列が含まれている場合、次の式を持つ行を制限します。  
  
 `colDate > 1/1/99 AND colDate < 17/1/99`  
  
 両方のパラメーターの式を作成する規則について、次を参照してください。、<xref:System.Data.DataColumn.Expression%2A?displayProperty=nameWithType>プロパティです。  
  
   
  
## Examples  
 次の例では、販売員の識別番号が 5 つの「合計」をという名前の列の値を合計します。  
  
 [!code-csharp[Classic WebData DataTable.Compute Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Compute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Compute Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Compute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constraints">
      <MemberSignature Language="C#" Value="public System.Data.ConstraintCollection Constraints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ConstraintCollection Constraints" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Constraints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ConstraintCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このテーブルで保持されている制約のコレクションを取得します。</summary>
        <value>A<see cref="T:System.Data.ConstraintCollection" />のコレクションを含む<see cref="T:System.Data.Constraint" />テーブルのオブジェクト。 ない場合は、空のコレクションが返される<see cref="T:System.Data.Constraint" />オブジェクトが存在します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Data.ForeignKeyConstraint> (または複数) の列の値を削除または更新されたときの動作を制限します。 このような制約は主キー列で使用するためのものです。 2 つのテーブル間の親子関係、親テーブルから値を削除することができますに影響を与える子行で、次の方法のいずれか。  
  
-   子行がすることもできます (連鎖動作) を削除します。  
  
-   子の列 (列または列) の値は、null 値に設定できます。  
  
-   子の列 (列または列) の値は、既定値に設定できます。  
  
-   例外を生成できます。  
  
 A<xref:System.Data.UniqueConstraint>一意でない値に主キーの値を設定しようとするときにアクティブになります。  
  
   
  
## Examples  
 次の例では追加、<xref:System.Data.ForeignKeyConstraint>制約のコレクションにします。  
  
 [!code-csharp[Classic WebData DataTable.Constraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Constraints Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Constraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Constraints Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Copy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この構造とデータの両方をコピー<see cref="T:System.Data.DataTable" />です。</summary>
        <returns>新しい<see cref="T:System.Data.DataTable" />同じ構造 (テーブルのスキーマと制約) とこのデータを持つ<see cref="T:System.Data.DataTable" />します。  
  
 これらのクラスが派生されている場合、コピーが同じ派生クラスにもなります。  
  
 <see cref="M:System.Data.DataTable.Copy" />新たに作成<see cref="T:System.Data.DataTable" />同じ構造と、元のデータを持つ<see cref="T:System.Data.DataTable" />します。 新しい構造にコピーする<see cref="T:System.Data.DataTable" />、データではなくを使用して、<see cref="M:System.Data.DataTable.Clone" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、 <xref:System.Data.DataTable.Copy%2A> 、元のコピーを作成するメソッド<xref:System.Data.DataTable>です。 名前空間の名前が親から継承されている場合は保持されない<xref:System.Data.DataTable>または<xref:System.Data.DataSet>です。  
  
 [!code-csharp[Classic WebData DataTable.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Copy Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Copy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.CreateDataReader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返します、<see cref="T:System.Data.DataTableReader" />この内のデータに対応する<see cref="T:System.Data.DataTable" />です。</summary>
        <returns>A<see cref="T:System.Data.DataTableReader" />ソースに対応する 1 つの結果セットを含んでいる<see cref="T:System.Data.DataTable" />インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <xref:System.Data.DataTable> インスタンスを作成するコンソール アプリケーションの例を次に示します。 渡します、塗りつぶされた<xref:System.Data.DataTable>を呼び出すプロシージャに、<xref:System.Data.DataTable.CreateDataReader%2A>内に含まれる結果を反復処理するメソッド、<xref:System.Data.DataTableReader>です。  
  
 [!code-csharp[DataWorks DataTable.CreateDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.CreateDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.CreateDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.CreateDataReader/VB/source.vb#1)]  
  
 この例では、次の出力がコンソール ウィンドウに表示されます。  
  
 `1 Mary`  
  
 `2 Andy`  
  
 `3 Peter`  
  
 `4 Russ`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataTable CreateInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataTable CreateInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.CreateInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Data.DataTable" /> の新しいインスタンスを作成します。</summary>
        <returns>新しい式です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSet">
      <MemberSignature Language="C#" Value="public System.Data.DataSet DataSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataSet DataSet" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.DataSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Data.DataSet" />このテーブルが属しています。</summary>
        <value><see cref="T:System.Data.DataSet" />このテーブルが属しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントロールがデータにバインドされて、 <xref:System.Data.DataTable>、このテーブルに所属し、<xref:System.Data.DataSet>を取得する、<xref:System.Data.DataSet>このプロパティを使用します。  
  
   
  
## Examples  
 次の例は、親を返します<xref:System.Data.DataSet>を介して特定のテーブルの<xref:System.Data.DataTable.DataSet%2A>プロパティです。  
  
 [!code-csharp[Classic WebData DataTable.DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultView">
      <MemberSignature Language="C#" Value="public System.Data.DataView DefaultView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataView DefaultView" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.DefaultView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フィルター選択されたビュー、またはカーソルの位置を含む可能性のあるテーブルのカスタマイズされたビューを取得します。</summary>
        <value><see cref="T:System.Data.DataView" /> に関連付けられている <see cref="T:System.Data.DataTable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.DefaultView%2A>プロパティから返される、<xref:System.Data.DataView>並べ替え、フィルター、および検索に使用することができます、<xref:System.Data.DataTable>です。  
  
   
  
## Examples  
 次の例のプロパティの設定、<xref:System.Data.DataTable>オブジェクトの<xref:System.Data.DataView>を通じて、<xref:System.Data.DataTable.DefaultView%2A>プロパティです。 バインドも示します、<xref:System.Windows.Forms.DataGridView>コントロールを<xref:System.Data.DataTable>"CompanyName"という名前の列を含む"Suppliers"という名前  
  
 [!code-csharp[Classic WebData DataTable.DefaultView Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.DefaultView Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.DefaultView Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.DefaultView Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayExpression">
      <MemberSignature Language="C#" Value="public string DisplayExpression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayExpression" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.DisplayExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または使用をユーザー インターフェイスにこのテーブルを表す値を返す式を設定します。 <see langword="DisplayExpression" />プロパティを使用して、ユーザー インターフェイスでこのテーブルの名前を表示できます。</summary>
        <value>表示文字列です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.EndInit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Data.DataTable" /> の初期化を終了します。 初期化は実行時に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Studio .NET デザイン環境では、このメソッドを使用して、フォームまたは別のコンポーネントで使用するコンポーネントの初期化を終了します。 <xref:System.Data.DataTable.BeginInit%2A>メソッドは、初期化を開始します。 使用して、<xref:System.Data.DataTable.BeginInit%2A>と<xref:System.Data.DataTable.EndInit%2A>メソッド使用されないように、コントロールが完全に初期化される前にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoadData">
      <MemberSignature Language="C#" Value="public void EndLoadData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndLoadData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.EndLoadData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データの読み込み後、通知、インデックスのメンテナンス、および制約をオンにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して<xref:System.Data.DataTable.EndLoadData%2A>と共に<xref:System.Data.DataTable.LoadDataRow%2A>と<xref:System.Data.DataTable.BeginLoadData%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.ExtendedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カスタマイズされたユーザー情報のコレクションを取得します。</summary>
        <value>A<see cref="T:System.Data.PropertyCollection" />カスタム ユーザー情報を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.ExtendedProperties%2A>にカスタム情報を追加する、<xref:System.Data.DataTable>です。 情報を追加、`Add`メソッドです。 情報を取得、`Item`メソッドです。  
  
 拡張プロパティが型でなければなりません<xref:System.String>です。 文字列型ではないプロパティは保持されないときに、<xref:System.Data.DataTable>は XML として書き込まれます。  
  
   
  
## Examples  
 次の例では、タイムスタンプ値を<xref:System.Data.DataTable>を通じて、<xref:System.Data.DataTable.ExtendedProperties%2A>プロパティです。  
  
 [!code-csharp[Classic WebData DataTable.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="fInitInProgress">
      <MemberSignature Language="C#" Value="protected bool fInitInProgress;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly bool fInitInProgress" />
      <MemberSignature Language="DocId" Value="F:System.Data.DataTable.fInitInProgress" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>初期化が進行中かどうかを確認します。 初期化は実行時に発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable GetChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コピーを取得、<see cref="T:System.Data.DataTable" />が読み込まれた後に加えられたすべての変更を格納しているまたは<see cref="M:System.Data.DataTable.AcceptChanges" />最後に呼び出されています。</summary>
        <returns>これから加えた変更はコピー <see cref="T:System.Data.DataTable" />、または<see langword="null" />変更が見つからなかった場合です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新たに作成<xref:System.Data.DataSet>、元のすべての行のコピーを含む<xref:System.Data.DataSet>保留中の変更があります。 リレーションシップの制限が原因で、新規に追加するその他の変更されていない行<xref:System.Data.DataSet>変更されていない行が変更された行の外部キーに対応する主キーを含めるかどうか。 メソッドを返します`null`(`Nothing` Visual Basic で) 元の行が存在しない場合<xref:System.Data.DataSet>で保留中の変更。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataTable GetChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTable GetChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates"><see cref="T:System.Data.DataRowState" /> 値のいずれか。</param>
        <summary>コピーを取得、<see cref="T:System.Data.DataTable" />が最後に読み込まれた、または後に加えられたすべての変更を含む<see cref="M:System.Data.DataTable.AcceptChanges" />呼び出されると、によってフィルター選択された<see cref="T:System.Data.DataRowState" />です。</summary>
        <returns>フィルター選択されたコピー、<see cref="T:System.Data.DataTable" />にマージするのと後で実行されるアクションがあることができます、<see cref="T:System.Data.DataTable" />を使用して<see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />です。 場合は、目的の行はありません<see cref="T:System.Data.DataRowState" />が見つかると、このメソッドを返します<see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.GetChanges%2A>メソッドが 1 秒あたりに生成するために使用される<xref:System.Data.DataTable>を元の変更のみを格納しているオブジェクトが導入されました。 使用して、`rowStates`新しいオブジェクトを含める必要があります変更の種類を指定する引数。  
  
 リレーションシップの制約が含まれるように変更されていない親行をあります。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataTableSchema">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema (System.Xml.Schema.XmlSchemaSet schemaSet);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetDataTableSchema(class System.Xml.Schema.XmlSchemaSet schemaSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaSet" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemaSet"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> インスタンス。</param>
        <summary>このメソッドが戻る、 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 、Web サービス記述言語 (WSDL) を示すを含むインスタンス、 <see cref="T:System.Data.DataTable" /> Web サービス用です。</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchemaSet" /> インスタンス。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetErrors">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] GetErrors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] GetErrors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetErrors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>配列を取得<see cref="T:System.Data.DataRow" />エラーが含まれているオブジェクト。</summary>
        <returns>配列<see cref="T:System.Data.DataRow" />エラーが発生したオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一覧を返します<xref:System.Data.DataRow>を持つオブジェクト<xref:System.Data.DataRow.RowError%2A>を設定します。 呼び出すときにエラーが発生することができます、<xref:System.Data.Common.DataAdapter.Update%2A>で<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>'éý' **true**です。 呼び出されません<xref:System.Data.DataTable.AcceptChanges%2A>上、<xref:System.Data.DataTable>すべてのエラーを解決して再送信するまで、<xref:System.Data.DataSet>を更新します。  
  
   
  
## Examples  
 次の例では、<xref:System.Data.DataTable.GetErrors%2A>の配列を返すメソッドを<xref:System.Data.DataRow>エラーが発生したオブジェクト。  
  
 [!code-csharp[Classic WebData DataTable.GetErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.GetErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.GetErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.GetErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">A<see cref="T:System.Runtime.Serialization.SerializationInfo" />に関連付けられているシリアル化されたデータを保持するオブジェクト、<see cref="T:System.Data.DataTable" />です。</param>
        <param name="context">A<see cref="T:System.Runtime.Serialization.StreamingContext" />ソースと関連付けられているシリアル化されたストリームの送信先を格納しているオブジェクト、<see cref="T:System.Data.DataTable" />です。</param>
        <summary>シリアル化情報オブジェクトを、<see cref="T:System.Data.DataTable" /> のシリアル化に必要なデータで事前設定します。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="info" />パラメーターが null 参照 (<see langword="Nothing" /> Visual Basic で)。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRowType">
      <MemberSignature Language="C#" Value="protected virtual Type GetRowType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type GetRowType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetRowType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>行の種類を取得します。</summary>
        <returns>型を返します、<see cref="T:System.Data.DataRow" />です。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Schema.XmlSchema GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.GetSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />」をご覧ください。</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" />によって生成されるオブジェクトの XML 表現を表す、<see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />メソッドによって消費されると、<see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />メソッドです。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.HasErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内のテーブルのいずれかの行のいずれかでエラーがあるかどうかを示す値を取得、<see cref="T:System.Data.DataSet" />テーブルが属しています。</summary>
        <value>
          <see langword="true" />エラーがある場合それ以外の場合<see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーの作業に含まれるデータのセットを<xref:System.Data.DataTable>、変更によって検証エラーが発生した場合、エラーでは、各変更をマークできます。 全体をマークする<xref:System.Data.DataRow>、エラー メッセージを使用すると、<xref:System.Data.DataRow.RowError%2A>プロパティです。 含む行の各列でエラーを設定することも、<xref:System.Data.DataRow.SetColumnError%2A>メソッドです。  
  
 データ ソースを更新する前に、 <xref:System.Data.DataSet>、最初に呼び出すことをお勧め、<xref:System.Data.DataSet.GetChanges%2A>ターゲット上メソッド<xref:System.Data.DataSet>です。 メソッドの結果、<xref:System.Data.DataSet>オリジナルに行われた変更のみを格納しています。 送信する前に、<xref:System.Data.DataSet>を更新するため、データ ソースを確認、<xref:System.Data.DataTable.HasErrors%2A>すべてのエラーが行または行の列に関連付けられるかどうかを表示するには、各テーブルのプロパティです。  
  
 各エラーを解決した後に、エラーをクリア、<xref:System.Data.DataRow.ClearErrors%2A>のメソッド、`DataRow`です。  
  
   
  
## Examples  
 次の例では、<xref:System.Data.DataTable.HasErrors%2A>プロパティをテーブルにエラーが含まれているかどうかは確認します。  
  
 [!code-csharp[Classic WebData DataTable.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.HasErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.HasErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportRow">
      <MemberSignature Language="C#" Value="public void ImportRow (System.Data.DataRow row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ImportRow(class System.Data.DataRow row) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ImportRow(System.Data.DataRow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" />
      </Parameters>
      <Docs>
        <param name="row"><see cref="T:System.Data.DataRow" />をインポートします。</param>
        <summary>コピー、<see cref="T:System.Data.DataRow" />に、<see cref="T:System.Data.DataTable" />プロパティの設定だけでなく、元の現在の値を保持します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す<xref:System.Data.DataTable.NewRow%2A>、行の既定の値が、既存のテーブル スキーマを使用してテーブルに行を追加し、設定、<xref:System.Data.DataRowState>に`Detached`です。 呼び出す<xref:System.Data.DataTable.ImportRow%2A>既存を保持<xref:System.Data.DataRowState>と共に、行の他の値。 場合、`DataRow`を渡すパラメーターがデタッチ済み状態では、これは無視され、例外はスローされません。  
  
 新しい行は、データ テーブルの末尾に追加されます。  
  
 新しい行が制約に違反する場合は、データ テーブルに追加できません。  
  
 DataTable.Rows.Find および DataTable.Rows.IndexOf として持つ新しい行のインデックスを取得することができます。 詳細については、「<xref:System.Data.DataRowCollection>」および「<xref:System.Data.DataTable.Rows%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.Initialized" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>後に発生、<see cref="T:System.Data.DataTable" />が初期化されています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、「<xref:System.Data.DataTable.IsInitialized%2A>」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、<see cref="T:System.Data.DataTable" />が初期化されています。</summary>
        <value>
          <see langword="true" />コンポーネントを示すために初期化が完了します。それ以外の場合<see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 状態を返します、<xref:System.Data.DataTable>ことによって作成される、インスタンスの Visual Studio 中にします。 <xref:System.Data.DataTable.BeginInit%2A>メソッドに設定を`false`と<xref:System.Data.DataTable.EndInit%2A>メソッドに設定を`true`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>入力、 <see cref="T:System.Data.DataTable" /> 、指定されたを使用してデータ ソースから値を持つ<see cref="T:System.Data.IDataReader" />します。 場合、<see langword="DataTable" />既に、行を含むデータ ソースからの受信データは、既存の行にマージします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Load`メソッドは、指定されたデータ ソースからデータを取得して、現在のデータ コンテナーへの追加をすべて中央揃え、いくつかの一般的なシナリオで使用できます (ここで、 `DataTable`)。 これらのシナリオの標準的使用方法を説明する、`DataTable`その更新プログラムを記述する方法、および動作をマージします。  
  
 A`DataTable`により同期または 1 つのプライマリ データ ソースを更新します。 `DataTable`プライマリ データ ソースとの同期を許可する、変更を追跡します。 さらに、 `DataTable` 1 つまたは複数のセカンダリ データ ソースからデータの増分を受け入れることができます。 `DataTable`セカンダリ データ ソースと同期できるようにするために変更を追跡する必要はありません。  
  
 これら 2 つの架空のデータ ソースから、ユーザーは、次の動作のいずれかが必要な可能性です。  
  
-   初期化`DataTable`プライマリ データ ソースからです。 このシナリオでは、ユーザーは、空の初期化に`DataTable`プライマリ データ ソースから値を使用します。 後で、ユーザーは、プライマリ データ ソースに変更を反映する予定です。  
  
-   変更を保存して、プライマリ データ ソースから再同期できます。 このシナリオでは、ユーザーを`DataTable`上記のシナリオで塗りつぶされで行われた変更を保持し、プライマリ データ ソースと、増分同期を実行、`DataTable`です。  
  
-   データの増分は、セカンダリ データ ソースからフィードです。 このシナリオでは、ユーザーは、1 つまたは複数のセカンダリ データ ソースからの変更をマージし、プライマリ データ ソースに戻るには、その変更を伝達するためがします。  
  
 `Load`メソッドにより、これらすべてのシナリオです。 すべてが 1 つのオーバー ロードのため、このメソッドでは、読み込みのオプション パラメーターを指定することができますを示す方法で既に行、<xref:System.Data.DataTable>読み込まれる行と結合します。 (動作を指定することはしないオーバー ロードは、既定の読み込みオプションを使用します)。次の表に、次の 3 つの負荷で提供されるオプション、<xref:System.Data.LoadOption>列挙します。 各ケースでは、説明は、受信データで行の主キーには、既存の行の主キーが一致する場合に、動作を示します。  
  
|読み込みオプション|説明|  
|-----------------|-----------------|  
|`PreserveChanges` (既定値)|受信した行の値を持つ行の元のバージョンを更新します。|  
|`OverwriteChanges`|受信した行の値を持つ行の現在と元のバージョンを更新します。|  
|`Upsert`|受信した行の値を持つ行の現在のバージョンを更新します。|  
  
 一般に、`PreserveChanges`と`OverwriteChanges`同期するために、ユーザーが必要なシナリオ向けのオプションでは、`DataSet`と、プライマリ データ ソースを変更します。 `Upsert`オプションには、1 つまたは複数のセカンダリ データ ソースから集計の変更が容易になります。  
  
   
  
## Examples  
 次の例では、呼び出し元に関連する問題のいくつかを示します、<xref:System.Data.DataTable.Load%2A>メソッドです。 例では、読み込まれたからスキーマを推論するときなど、スキーマの問題に重点を置いています最初に、 <xref:System.Data.IDataReader>、および、互換性のないスキーマは、および存在しないか、その他の列を含むスキーマを処理します。 例は、さまざまな読み込みオプションの処理など、データの問題について説明します。  
  
> [!NOTE]
>  この例は、のいずれかのオーバー ロードされたバージョンを使用する方法を示しています。`Load`です。 使用可能な可能性のあるその他の例は、個々 のオーバー ロードのトピックを参照してください。  
  
 [!code-csharp[DataWorks DataTableLoad#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Load(System.Data.IDataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Data.IDataReader" />結果セットを提供します。</param>
        <summary>入力、 <see cref="T:System.Data.DataTable" /> 、指定されたを使用してデータ ソースから値を持つ<see cref="T:System.Data.IDataReader" />します。 場合、<see cref="T:System.Data.DataTable" />既に、行を含むデータ ソースからの受信データは、既存の行にマージします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Load%2A>メソッドは最初の結果セットから読み込まれた<xref:System.Data.IDataReader>、正常に完了すると、位置を設定、リーダーの次の結果セットに存在する場合とします。 データを変換するとき、`Load`メソッドとして同じ変換規則を使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType>メソッドです。  
  
 <xref:System.Data.DataTable.Load%2A>メソッド考慮する必要が特定の問題を次の 3 つのデータを読み込むときに、<xref:System.Data.IDataReader>インスタンス: スキーマ、データ、およびイベント操作します。 スキーマを使用する場合、<xref:System.Data.DataTable.Load%2A>メソッドを次の表に示す条件が発生する可能性があります。 データが含まれていないものも含め、すべてのインポートされた結果セットのスキーマの操作を実行します。  
  
|条件|動作|  
|---------------|--------------|  
|<xref:System.Data.DataTable>スキーマがありません。|<xref:System.Data.DataTable.Load%2A>メソッドは、インポートされたからの結果セットに基づくスキーマを推論<xref:System.Data.IDataReader>です。|  
|<xref:System.Data.DataTable>スキーマがありますが、読み込まれたスキーマと互換性がありません。|<xref:System.Data.DataTable.Load%2A>メソッドは、互換性のないスキーマにデータを読み込むしようとしたときに発生する特定のエラーに対応する例外をスローします。|  
|スキーマは互換性が読み込まれた結果セットのスキーマに存在しない列が含まれています、<xref:System.Data.DataTable>です。|<xref:System.Data.DataTable.Load%2A>メソッドは、余分な列を追加`DataTable`のスキーマです。 メソッドは、対応する場合に例外をスロー内の列、<xref:System.Data.DataTable>読み込まれた結果セットは、互換性のある値ではありません。 メソッドは、追加されたすべての列の結果セットからも制約情報を取得します。 場合にのみに使用するこの制約情報の場合を除き、Primary Key 制約、現在<xref:System.Data.DataTable>読み込み操作の開始時に任意の列を含んでいません。|  
|スキーマは互換性が読み込まれた結果セットのスキーマがよりも少ない列が含まれています、`DataTable`です。|不足している列が定義されている既定値または列のデータ型は、null 値を許容する場合、<xref:System.Data.DataTable.Load%2A>メソッドを使用する行を追加するには、既定値の置換または`null`不足している列の値。 既定値はありません場合、または`null`使用できますが、次に、`Load`メソッドが例外をスローします。 特定の既定値が指定されていない場合、`Load`メソッドを使用、`null`暗黙的な既定値として値。|  
  
 動作を検討する前に、`Load`データ操作の観点からメソッドを検討する各内の行、<xref:System.Data.DataTable>は現在の値と各列の元の値の両方を保持します。 これらの値がそれと同等か、行のデータがいっぱいになる以降変更されている場合は異なる場合があります、`DataTable`です。  詳細については、次を参照してください。[行の状態と行のバージョン](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)します。  
  
 このバージョンの`Load`メソッドは、元の値をそのまま残して、各行の現在の値を維持しようとしています。 (受信データの動作をより細かく制御する場合は、「 <xref:System.Data.DataTable.Load%2A?displayProperty=nameWithType>。)既存の行と受信した行には、対応する主キーの値が含まれて場合、現在の行の状態の値を使用して、行が処理されると、それ以外の場合、新しい行として扱われます。  
  
 イベント処理の観点から、<xref:System.Data.DataTable.RowChanging>各行が変更されると、前に、イベントが発生し、<xref:System.Data.DataTable.RowChanged>イベントは、各行が変更された後に発生します。 各ケースで、<xref:System.Data.DataRowChangeEventArgs.Action%2A>のプロパティ、<xref:System.Data.DataRowChangeEventArgs>イベント ハンドラーに渡されたインスタンスには、イベントに関連付けられている特定のアクションに関する情報が含まれています。 このアクションの値は、読み込み操作の前に、の行の状態によって異なります。 各ケースで両方のイベントが発生して、アクションは、それぞれの同じです。 アクションは、各の行の現在または元のバージョンまたは、現在の行の状態に応じて、両方に適用可能性があります。  
  
 次の表の動作を表示する、`Load`メソッドです。 最後の行 (「(存在しない)」のラベル) では、既存の行が一致しない入力の行の動作について説明します。 このテーブル内の各セルでは、現在と元の行に、フィールドの値を説明と共に、<xref:System.Data.DataRowState>後の値の`Load`メソッドが完了します。 ここでは、メソッドは読み込みオプションを指定することはしませんし、既定値を使用`PreserveChanges`です。  
  
|既存の DataRowState|後の値`Load`メソッド、およびイベントのアクション|  
|---------------------------|--------------------------------------------------|  
|追加|現在 =\<既存 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更 ><br /><br /> RowAction ChangeOriginal を =|  
|変更日時|現在 =\<既存 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更 ><br /><br /> RowAction ChangeOriginal を =|  
|Deleted|現在 =\<不可 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<削除 ><br /><br /> RowAction ChangeOriginal を =|  
|Unchanged|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|  
|(存在しない)|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|  
  
 値が、<xref:System.Data.DataColumn>などのプロパティの使用を制限することができます<xref:System.Data.DataColumn.ReadOnly%2A>と<xref:System.Data.DataColumn.AutoIncrement%2A>です。 `Load`メソッドは、列のプロパティによって定義された動作と一貫性のある方法でこのような列を処理します。 読み取りのみ制約、<xref:System.Data.DataColumn>はメモリに加えられた変更にのみ適用されます。 `Load`メソッドの必要な場合は、読み取り専用の列の値が上書きされます。  
  
 現在の行を受信した行とを比較するのに使用する主キー フィールドのバージョンを決定する、`Load`メソッドが存在する場合、行に、主キーの値の元のバージョンを使用します。 それ以外の場合、`Load`メソッドは主キー フィールドの現在のバージョンを使用します。  
  
   
  
## Examples  
 次の例では、呼び出し元に関連する問題のいくつかを示します、<xref:System.Data.DataTable.Load%2A>メソッドです。 例では、読み込まれたからスキーマを推論するときなど、スキーマの問題に重点を置いています最初に、 <xref:System.Data.IDataReader>、および、互換性のないスキーマは、および存在しないか、その他の列を含むスキーマを処理します。 この例では、`Load`読み込み操作の前後にデータを表示するメソッド。  
  
 [!code-csharp[DataWorks DataTableLoad.IDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad.IDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad.IDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad.IDataReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Data.IDataReader" /> 1 つまたは複数の結果セットを提供します。</param>
        <param name="loadOption">値、<see cref="T:System.Data.LoadOption" />を示す列挙体方法で既に行、<see cref="T:System.Data.DataTable" />同じ主キーを共有する受信の行と結合されます。</param>
        <summary>入力、 <see cref="T:System.Data.DataTable" /> 、指定されたを使用してデータ ソースから値を持つ<see cref="T:System.Data.IDataReader" />します。 場合、<see langword="DataTable" />既に、行を含む、既存の行の値に基づいて、データ ソースからの受信データをマージ、<paramref name="loadOption" />パラメーター。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Load`メソッドは最初の結果セットから読み込まれた<xref:System.Data.IDataReader>、正常に完了すると、位置を設定、リーダーの次の結果セットに存在する場合とします。 データを変換するとき、`Load`メソッドとして同じ変換規則を使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A>メソッドです。  
  
 `Load`メソッド考慮する必要が特定の問題を次の 3 つのデータを読み込むときに、<xref:System.Data.IDataReader>インスタンス: スキーマ、データ、およびイベント操作します。 スキーマを使用する場合、`Load`メソッドを次の表に示す条件が発生する可能性があります。 データが含まれていないものも含め、すべてのインポートされた結果セットのスキーマの操作を実行します。  
  
|条件|動作|  
|---------------|--------------|  
|<xref:System.Data.DataTable>スキーマがありません。|`Load`メソッドは、インポートされたからの結果セットに基づくスキーマを推論<xref:System.Data.IDataReader>です。|  
|<xref:System.Data.DataTable>スキーマがありますが、読み込まれたスキーマと互換性がありません。|`Load`メソッドは、互換性のないスキーマにデータを読み込むしようとしたときに発生する特定のエラーに対応する例外をスローします。|  
|スキーマは互換性が読み込まれた結果セットのスキーマに存在しない列が含まれています、`DataTable`です。|`Load`メソッドは、余分な列を追加`DataTable`のスキーマです。 メソッドは、対応する場合に例外をスロー内の列、<xref:System.Data.DataTable>読み込まれた結果セットは、互換性のある値ではありません。 メソッドは、追加されたすべての列の結果セットからも制約情報を取得します。 場合にのみに使用するこの制約情報の場合を除き、Primary Key 制約、現在<xref:System.Data.DataTable>読み込み操作の開始時に任意の列を含んでいません。|  
|スキーマは互換性が読み込まれた結果セットのスキーマがよりも少ない列が含まれています、`DataTable`です。|不足している列が定義されている既定値または列のデータ型は、null 値を許容する場合、`Load`メソッドを使用する、行を追加する、不足している列の既定値または null 値を置換します。 既定値や null は使用できない場合、`Load`メソッドが例外をスローします。 特定の既定値が指定されていない場合、`Load`メソッドは、暗黙的な既定値として null 値を使用します。|  
  
 動作を検討する前に、`Load`データ操作の観点からメソッドを検討する各内の行、<xref:System.Data.DataTable>は現在の値と各列の元の値の両方を保持します。 これらの値がそれと同等か、行のデータがいっぱいになる以降変更されている場合は異なる場合があります、`DataTable`です。 参照してください[行の状態と行のバージョン](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)詳細についてはします。  
  
 このメソッドの呼び出しで指定された<xref:System.Data.LoadOption>パラメーター受信データの処理に影響します。 Load メソッドで既存の行として同じ主キーを持つ読み込み行が処理する方法 現在の値、元の値、またはその両方を変更にする必要がありますか。 これらの問題とその詳細は、によって制御されます、`loadOption`パラメーター。  
  
 既存の行と受信した行には、対応する主キーの値が含まれて場合、現在の行の状態の値を使用して、行が処理されると、それ以外の場合、新しい行として扱われます。  
  
 イベント処理の観点から、<xref:System.Data.DataTable.RowChanging>各行が変更されると、前に、イベントが発生し、<xref:System.Data.DataTable.RowChanged>イベントは、各行が変更された後に発生します。 各ケースで、<xref:System.Data.DataRowChangeEventArgs.Action%2A>のプロパティ、<xref:System.Data.DataRowChangeEventArgs>イベント ハンドラーに渡されたインスタンスには、イベントに関連付けられている特定のアクションに関する情報が含まれています。 このアクションの値は、読み込み操作の前に、の行の状態によって異なります。 各ケースで両方のイベントが発生して、アクションは、それぞれの同じです。 アクションは、各の行の現在または元のバージョンまたは、現在の行の状態に応じて、両方に適用可能性があります。  
  
 次の表は、Load メソッドのそれぞれに呼び出されたときの動作を表示、`LoadOption`値、およびも値が読み込まれている行の行の状態と対話する方法を示しています。 最後の行 (「(存在しない)」のラベル) では、既存の行が一致しない入力の行の動作について説明します。 このテーブル内の各セルでは、現在と元の行に、フィールドの値を説明と共に、<xref:System.Data.DataRowState>後の値の`Load`メソッドが完了します。  
  
|既存の DataRowState|Upsert|OverwriteChanges|PreserveChanges (既定の動作)|  
|---------------------------|------------|----------------------|------------------------------------------|  
|追加|現在 =\<着信 ><br /><br /> 元 = -\<不可 ><br /><br /> 状態 =\<追加 ><br /><br /> RowAction 変更を =|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|現在 =\<既存 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更 ><br /><br /> RowAction ChangeOriginal を =|  
|変更日時|現在 =\<着信 ><br /><br /> 元 =\<既存 ><br /><br /> 状態 =\<変更 ><br /><br /> RowAction 変更を =|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|現在 =\<既存 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更 ><br /><br /> RowAction ChangeOriginal を =|  
オリジナル|(負荷の動作に影響が削除された行ではなく)<br /><br /> 現在 =--<br /><br /> 元 =\<既存 ><br /><br /> 状態 =\<削除 ><br /><br /> (次の特性を持つ新しい行が追加されます)<br /><br /> 現在 =\<着信 ><br /><br /> 元 =\<不可 ><br /><br /> 状態 =\<追加 ><br /><br /> RowAction = 追加|削除の取り消しと<br /><br /> 現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|現在 =\<不可 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<削除 ><br /><br /> RowAction ChangeOriginal を =|  
|Unchanged|現在 =\<着信 ><br /><br /> 元 =\<既存 ><br /><br /> 新しい値が同じ場合、既存の値として、<br /><br /> 状態 =\<変更なし ><br /><br /> RowAction = なし<br /><br /> Else<br /><br /> 状態 =\<変更 ><br /><br /> RowAction 変更を =|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|  
存在しません)|現在 =\<着信 ><br /><br /> 元 =\<不可 ><br /><br /> 状態 =\<追加 ><br /><br /> RowAction = 追加|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|  
  
 値が、<xref:System.Data.DataColumn>などのプロパティの使用を制限することができます<xref:System.Data.DataColumn.ReadOnly%2A>と<xref:System.Data.DataColumn.AutoIncrement%2A>です。 `Load`メソッドは、列のプロパティによって定義された動作と一貫性のある方法でこのような列を処理します。 読み取りのみ制約、<xref:System.Data.DataColumn>はメモリに加えられた変更にのみ適用されます。 `Load`メソッドの必要な場合は、読み取り専用の列の値が上書きされます。  
  
 呼び出すときに、OverwriteChanges PreserveChanges オプションを指定するかどうか、`Load`メソッド後、前提されてから受信したデータが送信されたこと、`DataTable`のプライマリ データ ソース、および DataTable 変更を追跡し、データ ソースへの変更を反映することができます。 アップサート オプションを選択した場合、データがユーザーによって変更されるなど、中間層コンポーネントによって提供されるデータなど、セカンダリ データ ソースのいずれかから送信されたことと見なされます。 ここでは、という前提は、目的の 1 つまたは複数のデータ ソースからデータを集計するには、 `DataTable`、プライマリ データ ソースにデータをおそらく伝達します。 <xref:System.Data.LoadOption>が主キーの比較に使用される行のバージョンを特定のパラメーターを使用します。 次の表は、詳細を提供します。  
  
|読み込みオプション|主キーの比較に使用される DataRow バージョン|  
|-----------------|-----------------------------------------------------|  
|`OverwriteChanges`|元のバージョンは存在する場合、それ以外の場合に現在のバージョン|  
|`PreserveChanges`|元のバージョンは存在する場合、それ以外の場合に現在のバージョン|  
|`Upsert`|現在のバージョンが存在する場合、それ以外の場合の元のバージョン|  
  
   
  
## Examples  
 次の例では、呼び出し元に関連する問題のいくつかを示します、<xref:System.Data.DataTable.Load%2A>メソッドです。 例では、読み込まれたからスキーマを推論するときなど、スキーマの問題に重点を置いています最初に、 <xref:System.Data.IDataReader>、および、互換性のないスキーマは、および存在しないか、その他の列を含むスキーマを処理します。 例は、さまざまな読み込みオプションの処理など、データの問題について説明します。  
  
 [!code-csharp[DataWorks DataTableLoad.LoadOption#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad.LoadOption/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad.LoadOption#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad.LoadOption/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <param name="reader">A<see cref="T:System.Data.IDataReader" />結果セットを提供します。</param>
        <param name="loadOption">値、<see cref="T:System.Data.LoadOption" />を示す列挙体方法で既に行、<see cref="T:System.Data.DataTable" />同じ主キーを共有する受信の行と結合されます。</param>
        <param name="errorHandler">A<see cref="T:System.Data.FillErrorEventHandler" />データの読み込み中にエラーが発生したときに呼び出すデリゲート。</param>
        <summary>塗りつぶします、 <see cref="T:System.Data.DataTable" /> 、指定されたを使用してデータ ソースから値を持つ<see cref="T:System.Data.IDataReader" />エラー処理デリゲートを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Load`メソッドは最初の結果セットから読み込まれた<xref:System.Data.IDataReader>、正常に完了すると、位置を設定、リーダーの次の結果セットに存在する場合とします。 データを変換するとき、`Load`メソッドとして同じ変換規則を使用して、<xref:System.Data.Common.DbDataAdapter.Fill%2A?displayProperty=nameWithType>メソッドです。  
  
 `Load`メソッド考慮する必要が特定の問題を次の 3 つのデータを読み込むときに、<xref:System.Data.IDataReader>インスタンス: スキーマ、データ、およびイベント操作します。 スキーマを使用する場合、`Load`メソッドを次の表に示す条件が発生する可能性があります。 データが含まれていないものも含め、すべてのインポートされた結果セットのスキーマの操作を実行します。  
  
|条件|動作|  
|---------------|--------------|  
|<xref:System.Data.DataTable>スキーマがありません。|`Load`メソッドは、インポートされたからの結果セットに基づくスキーマを推論<xref:System.Data.IDataReader>です。|  
|<xref:System.Data.DataTable>スキーマがありますが、読み込まれたスキーマと互換性がありません。|`Load`メソッドは、互換性のないスキーマにデータを読み込むしようとしたときに発生する特定のエラーに対応する例外をスローします。|  
|スキーマは互換性が読み込まれた結果セットのスキーマに存在しない列が含まれています、`DataTable`です。|`Load`メソッドを追加する列を追加`DataTable`のスキーマです。 メソッドは、対応する場合に例外をスロー内の列、<xref:System.Data.DataTable>読み込まれた結果セットは、互換性のある値ではありません。 メソッドは、追加されたすべての列の結果セットからも制約情報を取得します。 場合にのみに使用するこの制約情報の場合を除き、Primary Key 制約、現在<xref:System.Data.DataTable>読み込み操作の開始時に任意の列を含んでいません。|  
|スキーマは互換性が読み込まれた結果セットのスキーマがよりも少ない列が含まれています、`DataTable`です。|不足している列が定義されている既定値または列のデータ型は、null 値を許容する場合、`Load`メソッドを使用する、行を追加する、不足している列の既定値または null 値を置換します。 既定値や null は使用できない場合、`Load`メソッドが例外をスローします。 特定の既定値が指定されていない場合、`Load`メソッドは、暗黙的な既定値として null 値を使用します。|  
  
 動作を検討する前に、`Load`データ操作の観点からメソッドを検討する各内の行、<xref:System.Data.DataTable>は現在の値と各列の元の値の両方を保持します。 これらの値がそれと同等か、行のデータがいっぱいになる以降変更されている場合は異なる場合があります、`DataTable`です。 参照してください[行の状態と行のバージョン](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)詳細についてはします。  
  
 このメソッドの呼び出しで指定された<xref:System.Data.LoadOption>パラメーター受信データの処理に影響します。 Load メソッドで既存の行として同じ主キーを持つ読み込み行が処理する方法 現在の値、元の値、またはその両方を変更にする必要がありますか。 これらの問題とその詳細は、によって制御されます、`loadOption`パラメーター。  
  
 既存の行と受信した行には、対応する主キーの値が含まれて場合、現在の行の状態の値を使用して、行が処理されると、それ以外の場合、新しい行として扱われます。  
  
 イベント処理の観点から、<xref:System.Data.DataTable.RowChanging>各行が変更されると、前に、イベントが発生し、<xref:System.Data.DataTable.RowChanged>イベントは、各行が変更された後に発生します。 各ケースで、<xref:System.Data.DataRowChangeEventArgs.Action%2A>のプロパティ、<xref:System.Data.DataRowChangeEventArgs>イベント ハンドラーに渡されたインスタンスには、イベントに関連付けられている特定のアクションに関する情報が含まれています。 このアクションの値は、読み込み操作の前に、の行の状態によって異なります。 各ケースで両方のイベントが発生して、アクションは、それぞれの同じです。 アクションは、各の行の現在または元のバージョンまたは、現在の行の状態に応じて、両方に適用可能性があります。  
  
 次の表は、Load メソッドのそれぞれに呼び出されたときの動作を表示、`LoadOption`値、およびも値が読み込まれている行の行の状態と対話する方法を示しています。 最後の行 (「(存在しない)」のラベル) では、既存の行が一致しない入力の行の動作について説明します。 このテーブル内の各セルでは、現在と元の行に、フィールドの値を説明と共に、<xref:System.Data.DataRowState>後の値の`Load`メソッドが完了します。  
  
|既存の DataRowState|Upsert|OverwriteChanges|PreserveChanges (既定の動作)|  
|---------------------------|------------|----------------------|------------------------------------------|  
|追加|現在 =\<着信 ><br /><br /> 元 = -\<不可 ><br /><br /> 状態 =\<追加 ><br /><br /> RowAction 変更を =|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|現在 =\<既存 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更 ><br /><br /> RowAction ChangeOriginal を =|  
|変更日時|現在 =\<着信 ><br /><br /> 元 =\<既存 ><br /><br /> 状態 =\<変更 ><br /><br /> RowAction 変更を =|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|現在 =\<既存 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更 ><br /><br /> RowAction ChangeOriginal を =|  
オリジナル|(負荷の動作に影響が削除された行ではなく)<br /><br /> 現在 =--<br /><br /> 元 =\<既存 ><br /><br /> 状態 =\<削除 ><br /><br /> (次の特性を持つ新しい行が追加されます)<br /><br /> 現在 =\<着信 ><br /><br /> 元 =\<不可 ><br /><br /> 状態 =\<追加 ><br /><br /> RowAction = 追加|削除の取り消しと<br /><br /> 現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|現在 =\<不可 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<削除 ><br /><br /> RowAction ChangeOriginal を =|  
|Unchanged|現在 =\<着信 ><br /><br /> 元 =\<既存 ><br /><br /> 新しい値が同じ場合、既存の値として、<br /><br /> 状態 =\<変更なし ><br /><br /> RowAction = なし<br /><br /> Else<br /><br /> 状態 =\<変更 ><br /><br /> RowAction 変更を =|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|  
存在しません)|現在 =\<着信 ><br /><br /> 元 =\<不可 ><br /><br /> 状態 =\<追加 ><br /><br /> RowAction = 追加|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|現在 =\<着信 ><br /><br /> 元 =\<着信 ><br /><br /> 状態 =\<変更なし ><br /><br /> RowAction ChangeCurrentAndOriginal を =|  
  
 値が、<xref:System.Data.DataColumn>などのプロパティの使用を制限することができます<xref:System.Data.DataColumn.ReadOnly%2A>と<xref:System.Data.DataColumn.AutoIncrement%2A>です。 `Load`メソッドは、列のプロパティによって定義された動作と一貫性のある方法でこのような列を処理します。 読み取りのみ制約、<xref:System.Data.DataColumn>はメモリに加えられた変更にのみ適用されます。 `Load`メソッドの必要な場合は、読み取り専用の列の値が上書きされます。  
  
 呼び出すときに、OverwriteChanges PreserveChanges オプションを指定するかどうか、`Load`メソッド後、前提されてから受信したデータが送信されたこと、`DataTable`のプライマリ データ ソース、および DataTable 変更を追跡し、データ ソースへの変更を反映することができます。 アップサート オプションを選択した場合、データがユーザーによって変更されるなど、中間層コンポーネントによって提供されるデータなど、セカンダリ データ ソースのいずれかから送信されたことと見なされます。 ここでは、という前提は、目的の 1 つまたは複数のデータ ソースからデータを集計するには、 `DataTable`、プライマリ データ ソースにデータをおそらく伝達します。 <xref:System.Data.LoadOption>が主キーの比較に使用される行のバージョンを特定のパラメーターを使用します。 次の表は、詳細を提供します。  
  
|読み込みオプション|主キーの比較に使用される DataRow バージョン|  
|-----------------|-----------------------------------------------------|  
|`OverwriteChanges`|元のバージョンは存在する場合、それ以外の場合に現在のバージョン|  
|`PreserveChanges`|元のバージョンは存在する場合、それ以外の場合に現在のバージョン|  
|`Upsert`|現在のバージョンが存在する場合、それ以外の場合の元のバージョン|  
  
 `errorHandler`パラメーターは、<xref:System.Data.FillErrorEventHandler>データの読み込み中にエラーが発生したときに呼び出されるプロシージャを参照するデリゲート。 <xref:System.Data.FillErrorEventArgs>プロシージャに渡されたパラメーターが、エラーが発生した場合、データの現在の行に関する情報を取得できるようにするプロパティを提供し、<xref:System.Data.DataTable>入力中です。 このデリゲート メカニズムを使用して、シンプルな try/catch ブロックではなく、エラーを確認することができます状況の処理し、必要な場合の処理を続行します。 <xref:System.Data.FillErrorEventArgs>パラメーターにより指定、<xref:System.Data.FillErrorEventArgs.Continue%2A>プロパティ: このプロパティを設定`true`エラーを処理され、処理を続行することを示します。 プロパティを設定`false`処理を停止することを示すためにします。 注意してそのプロパティを設定`false`によって、例外をスローする問題を引き起こしたコード。  
  
   
  
## Examples  
 [!code-csharp[DataWorks DataTableLoad.ErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableLoad.ErrorEventHandler/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableLoad.ErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableLoad.ErrorEventHandler/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow LoadDataRow (object[] values, bool fAcceptChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow LoadDataRow(object[] values, bool fAcceptChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Object[]" />
        <Parameter Name="fAcceptChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="values">新しい行の作成に使用される値の配列。</param>
        <param name="fAcceptChanges">
          <see langword="true" />受け入れるように次のように変更します。それ以外の場合<see langword="false" />です。</param>
        <summary>検索し、特定の行を更新します。 一致する行が見つからない場合は、特定の値を使用して、新しい行が作成されます。</summary>
        <returns>新しい <see cref="T:System.Data.DataRow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.LoadDataRow%2A>メソッドは値の配列を受け取り、主キー列内の一致する値を検索します。  
  
 列に既定値がある場合は、その列の既定値を設定する配列に null の値を渡します。 同様に、列にある場合、<xref:System.Data.DataColumn.AutoIncrement%2A>プロパティが自動的に生成された行の値を設定する配列に null 値を渡してを真に設定します。  
  
 場合、`fAcceptChanges`パラメーターは`true`指定しないと、新しいデータが追加またはし<xref:System.Data.DataTable.AcceptChanges%2A>内のすべての変更を反映するために呼び出される、<xref:System.Data.DataTable>以外の場合は、引数が`false`、新しく追加された行が挿入、としてマークされ、既存の行への変更が変更としてマークされています。  
  
 例外はいずれかの中にも発生する、<xref:System.Data.DataTable.ColumnChanging>または<xref:System.Data.DataTable.RowChanging>イベント。 例外が発生する場合、テーブルに行は追加されません。  
  
 使用して<xref:System.Data.DataTable.LoadDataRow%2A>と共に<xref:System.Data.DataTable.BeginLoadData%2A>と<xref:System.Data.DataTable.EndLoadData%2A>です。  
  
   
  
## Examples  
 次の例では、<xref:System.Data.DataTable.LoadDataRow%2A>行を検索しようとするメソッド。 このような行が見つからない場合、値は、新しい行の作成に使用されます。  
  
 [!code-csharp[Classic WebData DataTable.LoadDataRow Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.LoadDataRow Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.LoadDataRow Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.LoadDataRow Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">配列は、テーブル内の列の数を超えています。</exception>
        <exception cref="T:System.InvalidCastException">値は、各列の型と一致しません。</exception>
        <exception cref="T:System.Data.ConstraintException">行を追加するには、制約が無効にします。</exception>
        <exception cref="T:System.Data.NoNullAllowedException">列に null 値を格納しようとしています。 ここで<see cref="P:System.Data.DataColumn.AllowDBNull" />は false。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadDataRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow LoadDataRow (object[] values, System.Data.LoadOption loadOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow LoadDataRow(object[] values, valuetype System.Data.LoadOption loadOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Object[]" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <param name="values">新しい行の作成に使用される値の配列。</param>
        <param name="loadOption">配列の値が既存の行に対応する値に適用する方法を決定するために使用します。</param>
        <summary>検索し、特定の行を更新します。 一致する行が見つからない場合は、特定の値を使用して、新しい行が作成されます。</summary>
        <returns>新しい <see cref="T:System.Data.DataRow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.LoadDataRow%2A>メソッドは値の配列を受け取り、主キー列内の一致する値を検索します。  
  
 列に既定値がある場合は、その列の既定値を設定する配列に null の値を渡します。 同様に、列にある場合、<xref:System.Data.DataColumn.AutoIncrement%2A>プロパティが自動的に生成された行の値を設定する配列に null 値を渡してを真に設定します。  
  
 値、`loadOption`配列内の値が既存の行に適用する方法を決定するパラメーターを使用します。 たとえば場合、`loadOption`に設定されている`OverwriteChanges`、`Original`と`Current`各列の値は、受信した行の値に置き換えられますと`RowState`プロパティに設定されている`Unchanged`です。  
  
 例外はいずれかの中にも発生する、<xref:System.Data.DataTable.ColumnChanging>または<xref:System.Data.DataTable.RowChanging>イベント。 例外が発生する場合、テーブルに行は追加されません。  
  
 使用して<xref:System.Data.DataTable.LoadDataRow%2A>と共に<xref:System.Data.DataTable.BeginLoadData%2A>と<xref:System.Data.DataTable.EndLoadData%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Locale" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはテーブル内の文字列を比較するために使用するロケール情報を設定します。</summary>
        <value>A<see cref="T:System.Globalization.CultureInfo" />ユーザーのコンピューターのロケールに関するデータを格納します。 既定値は、<see cref="T:System.Data.DataSet" />オブジェクトの<see cref="T:System.Globalization.CultureInfo" />(によって返される、<see cref="P:System.Data.DataSet.Locale" />プロパティ) を<see cref="T:System.Data.DataTable" />が属している; に、テーブルが属していない場合、 <see cref="T:System.Data.DataSet" />、既定値は、現在のシステム<see cref="T:System.Globalization.CultureInfo" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Globalization.CultureInfo>特定のカルチャまたはコミュニティのソフトウェアの設定を表します。  
  
 文字列比較に使用する場合、<xref:System.Globalization.CultureInfo>並べ替え、比較、およびフィルター処理に影響を与えます。  
  
> [!NOTE]
>  式を含む列で、<xref:System.StringComparison.InvariantCulture>を使用します。 <xref:System.StringComparison.CurrentCulture>は無視されます。  
  
   
  
## Examples  
 次の例のセット、<xref:System.Globalization.CultureInfo>を通じて、 <xref:System.Data.DataTable.Locale%2A> ISO 言語の名前を出力します。  
  
 [!code-csharp[Classic WebData DataTable.Locale Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Locale Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Locale Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Merge">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたマージ<see cref="T:System.Data.DataTable" />、現在の<see cref="T:System.Data.DataTable" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Merge`メソッドを使用して 2 つのマージ<xref:System.Data.DataTable>ほぼ同じスキーマを持つオブジェクト。 マージは、通常使用クライアント アプリケーションに既存のデータ ソースから最新の変更を組み込む<xref:System.Data.DataTable>です。 これにより、クライアント アプリケーションが、更新された<xref:System.Data.DataTable>データ ソースから最新データを使用します。  
  
 マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。 子テーブルがない影響を受けるか、含まれています。 テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。  
  
   
  
## Examples  
 次のコンソール アプリケーションの動作を示す、`missingSchemaAction`のパラメーター、<xref:System.Data.DataTable.Merge%2A>メソッドです。 この例では、2 番目のバージョンのスキーマを変更する、同じテーブルの 2 つのバージョンを作成します。 コードは、最初に 2 番目のテーブルをマージを試みます。  
  
> [!NOTE]
>  この例では、マージのオーバー ロードされたバージョンのいずれかを使用する方法を示します。 使用可能な可能性のあるその他の例は、個々 のオーバー ロードのトピックを参照してください。  
  
 [!code-csharp[DataWorks DataTableMergeOverload#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTableMergeOverload/CS/source.cs#1)]
 [!code-vb[DataWorks DataTableMergeOverload#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTableMergeOverload/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Merge(System.Data.DataTable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><see cref="T:System.Data.DataTable" /> 、現在のマージする<see cref="T:System.Data.DataTable" />です。</param>
        <summary>指定されたマージ<see cref="T:System.Data.DataTable" />、現在の<see cref="T:System.Data.DataTable" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 をマージするマージ メソッドが使用される<xref:System.Data.DataTable>ほぼ同じスキーマを持つオブジェクト。 マージは、通常使用クライアント アプリケーションに既存のデータ ソースから最新の変更を組み込む<xref:System.Data.DataTable>です。 これにより、クライアント アプリケーションが、更新された<xref:System.Data.DataTable>データ ソースから最新データを使用します。  
  
 マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。 子テーブルがない影響を受けるか、含まれています。 テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。  
  
 `Merge`メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および最後に、既存の更新を含むプロシージャの最後に<xref:System.Data.DataTable>です。  
  
 マージを実行するには、マージする前に、既存のデータに加えられた変更は、マージ操作中に既定では保持されます。 開発者は、このメソッドを呼び出して他の 2 つのオーバー ロードのいずれか、false 値を指定してこの動作を変更することができます、`preserveChanges`パラメーター。  
  
 クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために通常です。 このシナリオでは、<xref:System.Data.DataTable.GetChanges%2A>メソッドが最初に呼び出されます。 2 番目に返します<xref:System.Data.DataTable>検証とマージ用に最適化されています。 この秒<xref:System.Data.DataTable>オブジェクトにのみが含まれています、 <xref:System.Data.DataRow> 、元のサブセットの結果として得られる、変更されたオブジェクト<xref:System.Data.DataTable>です。 このサブセットは通常小さくより効率的に渡されます中間層コンポーネントに戻す。 中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層送信できるように、新しいバックアップ<xref:System.Data.DataTable>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<xref:System.Data.DataTable>クライアント アプリケーションの元にマージできます<xref:System.Data.DataTable>で、<xref:System.Data.DataTable.Merge%2A>メソッドです。  
  
 新しいソースをマージする際に<xref:System.Data.DataTable>、ターゲットに任意のソース行、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つ対象の行に一致します。 ソースの行を<xref:System.Data.DataRowState>の値`Added`新しいソース行として同じ主キーの値を持つ新しい対象行と照合されます。  
  
   
  
## Examples  
 次のコンソール アプリケーションを作成、単純な<xref:System.Data.DataTable>テーブルにデータを追加します。 例は、コピーする行の追加、テーブルのコピーを作成します。 最後に、この例では、<xref:System.Data.DataTable.Merge%2A>メソッドの最初のテーブルのデータが 2 番目のテーブル データをマージします。  
  
 [!code-csharp[DataWorks DataTable.Merge#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.Merge/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.Merge#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.Merge/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="table"><see langword="DataTable" /> 、現在のマージする<see langword="DataTable" />です。</param>
        <param name="preserveChanges">
          <see langword="true" />、、現在の変更を保存する<see langword="DataTable" />それ以外の<see langword="false" />します。<see langword="" /></param>
        <summary>指定されたマージ<see cref="T:System.Data.DataTable" />、現在の<see langword="DataTable" />、現在の変更を保存するかどうかを示す<see langword="DataTable" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 をマージするマージ メソッドが使用される<xref:System.Data.DataTable>ほぼ同じスキーマを持つオブジェクト。 マージは、通常使用クライアント アプリケーションに既存のデータ ソースから最新の変更を組み込む<xref:System.Data.DataTable>です。 これにより、クライアント アプリケーションが、更新された<xref:System.Data.DataTable>データ ソースから最新データを使用します。  
  
 マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。 子テーブルがない影響を受けるか、含まれています。 テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。  
  
 `Merge`メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および最後に、既存の更新を含むプロシージャの最後に<xref:System.Data.DataTable>です。  
  
 マージを実行するには、マージする前に、既存のデータに加えられた変更を保持しつつマージ操作中に、開発者が false を指定しない限り、`preserveChanges`パラメーター。 場合、`preserveChanges`にパラメーターが設定されている`true`、入力方向の値は、既存の行の現在の行バージョンの既存の値を上書きしません。 場合、`preserveChanges`にパラメーターが設定されている`false`、入力方向の値は、既存の行の現在の行バージョンで既存の値を上書きしないでください。 行のバージョンの詳細については、次を参照してください。[行の状態と行のバージョン](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)します。  
  
 クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために通常です。 このシナリオでは、<xref:System.Data.DataTable.GetChanges%2A>メソッドが最初に呼び出されます。 2 番目に返します<xref:System.Data.DataTable>検証とマージ用に最適化されています。 この秒<xref:System.Data.DataTable>オブジェクトにのみが含まれています、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として得られる、変更されたオブジェクト<xref:System.Data.DataTable>です。 このサブセットは一般に小さいと、したがってこのサブセットは、中間層コンポーネントに渡されますより効率的にします。 中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層送信できるように、新しいバックアップ<xref:System.Data.DataTable>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<xref:System.Data.DataTable>クライアント アプリケーションの元にマージできます<xref:System.Data.DataTable>で、<xref:System.Data.DataTable.Merge%2A>メソッドです。  
  
 新しいソースをマージする際に<xref:System.Data.DataTable>、ターゲットに任意のソース行、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つ対象の行に一致しました。 ソースの行を<xref:System.Data.DataRowState>の値`Added`新しいソース行として同じ主キーの値を持つ新しい対象行と照合されます。  
  
   
  
## Examples  
 次のコンソール アプリケーションを作成、 <xref:System.Data.DataTable> 、行を含む、それらの行のデータの一部を変更しを異なるデータをマージしようとしています。<xref:System.Data.DataTable>です。 動作の違いを示します、`preserveChanges`パラメーター。  
  
 [!code-csharp[DataWorks DataTable.MergePreserveChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.MergePreserveChanges/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.MergePreserveChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.MergePreserveChanges/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="table"><see cref="T:System.Data.DataTable" /> 、現在のマージする<see cref="T:System.Data.DataTable" />です。</param>
        <param name="preserveChanges">
          <see langword="true" />、、現在の変更を保存する<see cref="T:System.Data.DataTable" />それ以外の<see langword="false" />します。</param>
        <param name="missingSchemaAction"><see cref="T:System.Data.MissingSchemaAction" /> 値のいずれか。</param>
        <summary>指定されたマージ<see cref="T:System.Data.DataTable" />、現在の<see langword="DataTable" />、変更を保存するかどうかと、現在の不足しているスキーマを処理する方法を示す<see langword="DataTable" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Merge`メソッドを使用して 2 つのマージ<xref:System.Data.DataTable>ほぼ同じスキーマを持つオブジェクト。 マージは、通常使用クライアント アプリケーションに既存のデータ ソースから最新の変更を組み込む<xref:System.Data.DataTable>です。 これにより、クライアント アプリケーションが、更新された<xref:System.Data.DataTable>データ ソースから最新データを使用します。  
  
 マージ操作では、元のテーブルのみとマージするテーブルが考慮されます。 子テーブルがない影響を受けるか、含まれています。 テーブルに 1 つまたは複数の子テーブル、リレーションシップの一部として定義されている場合は、各子テーブルを個別にマージする必要があります。  
  
 `Merge`メソッドと通常呼ばれる一連の変更の検証、エラーを調整、変更をデータ ソースの更新、および最後に、既存の更新を含むプロシージャの最後に<xref:System.Data.DataTable>です。  
  
 マージを実行するには、マージする前に、既存のデータに加えられた変更を保持しつつマージ操作中に、開発者が false を指定しない限り、`preserveChanges`パラメーター。 場合、`preserveChanges`にパラメーターが設定されている`true`、入力方向の値は、既存の行の現在の行バージョンの既存の値を上書きしません。 場合、`preserveChanges`にパラメーターが設定されている`false`、入力方向の値は、既存の行の現在の行バージョンで既存の値を上書きしないでください。 行のバージョンの詳細については、次を参照してください。[行の状態と行のバージョン](~/docs/framework/data/adonet/dataset-datatable-dataview/row-states-and-row-versions.md)します。  
  
 クライアント アプリケーションでは、1 つのボタンが、ユーザーがクリックして、変更されたデータを収集し、中間層コンポーネントに送信する前に検証するために通常です。 このシナリオでは、<xref:System.Data.DataTable.GetChanges%2A>メソッドが最初に呼び出されます。 2 番目に返します<xref:System.Data.DataTable>検証とマージ用に最適化されています。 この秒<xref:System.Data.DataTable>オブジェクトにのみが含まれています、<xref:System.Data.DataTable>と<xref:System.Data.DataRow>、元のサブセットの結果として得られる、変更されたオブジェクト<xref:System.Data.DataTable>です。 このサブセットは一般に小さいと、したがってこのサブセットは、中間層コンポーネントに渡されますより効率的にします。 中間層コンポーネントは、ストアド プロシージャを使用して変更を元のデータ ソースを更新します。 中間層送信できるように、新しいバックアップ<xref:System.Data.DataTable>(元のクエリを再度実行して)、元のデータと、データ ソースから最新のデータを含むまたはで行われたことをデータ ソースから変更されたサブセットに送り返すことができます。 (たとえば、データ ソースは、一意の主キー値を自動的に作成される場合これらの値ことができますに伝える、クライアント アプリケーションです。)どちらの場合に返された<xref:System.Data.DataTable>クライアント アプリケーションの元にマージできます<xref:System.Data.DataTable>で、<xref:System.Data.DataTable.Merge%2A>メソッドです。  
  
 ときに、<xref:System.Data.DataTable.Merge%2A>メソッドは、2 つのスキーマの<xref:System.Data.DataTable>するスキーマが変更された可能性があるため、オブジェクトを比較します。 たとえば、企業間取引のシナリオで新しい列が追加された可能性が XML スキーマに自動のプロセスによってです。 場合、ソース<xref:System.Data.DataTable>スキーマ要素が含まれています (追加<xref:System.Data.DataColumn>オブジェクト) ターゲットで不足しているを設定して、スキーマ要素をターゲットに追加することができます、`missingSchemaAction`引数`MissingSchemaAction.Add`です。 その場合、統合<xref:System.Data.DataTable>追加されたスキーマとデータが含まれています。  
  
 スキーマをマージするには、後に、データがマージされます。  
  
 新しいソースをマージする際に<xref:System.Data.DataTable>、ターゲットに任意のソース行、<xref:System.Data.DataRowState>の値`Unchanged`、 `Modified`、または`Deleted`が同じ主キーの値を持つ対象の行に一致しました。 ソースの行を<xref:System.Data.DataRowState>の値`Added`新しいソース行として同じ主キーの値を持つ新しい対象行と照合されます。  
  
   
  
## Examples  
 次のコンソール アプリケーションの動作を示す、`missingSchemaAction`のパラメーター、<xref:System.Data.DataTable.Merge%2A>メソッドです。 この例では、2 番目のバージョンのスキーマを変更する、同じテーブルの 2 つのバージョンを作成します。 コードは、最初に 2 番目のテーブルをマージを試みます。  
  
 [!code-csharp[DataWorks DataTable.MergeMissingSchemaAction#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.MergeMissingSchemaAction/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.MergeMissingSchemaAction#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.MergeMissingSchemaAction/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumCapacity">
      <MemberSignature Language="C#" Value="public int MinimumCapacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumCapacity" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.MinimumCapacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(50)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはこのテーブルの初期の開始サイズを設定します。</summary>
        <value>このテーブルの行の最初の開始サイズ。 既定値は 50 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.MinimumCapacity%2A>により、システムはデータのフェッチする前に、適切なリソースのセットを作成します。 状況でパフォーマンスが重要な場合は、このプロパティの設定パフォーマンスを最適化できます。  
  
   
  
## Examples  
 次の例のセット、<xref:System.Data.DataTable.MinimumCapacity%2A>の<xref:System.Data.DataTable>です。  
  
 [!code-csharp[Classic WebData DataTable.MinimumCapacity Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.MinimumCapacity Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.MinimumCapacity Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.MinimumCapacity Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の名前空間に格納されたデータの XML 表現を<see cref="T:System.Data.DataTable" />です。</summary>
        <value><see cref="T:System.Data.DataTable" /> の名前空間。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRow">
      <MemberSignature Language="C#" Value="public System.Data.DataRow NewRow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow NewRow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.NewRow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新たに作成<see cref="T:System.Data.DataRow" />テーブルと同じスキーマを使用します。</summary>
        <returns>A<see cref="T:System.Data.DataRow" />と同じスキーマで、<see cref="T:System.Data.DataTable" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する必要があります、<xref:System.Data.DataTable.NewRow%2A>メソッドを新規作成<xref:System.Data.DataRow>と同じスキーマでオブジェクト、<xref:System.Data.DataTable>です。 作成した後、<xref:System.Data.DataRow>に追加することができます、<xref:System.Data.DataRowCollection>して、<xref:System.Data.DataTable>オブジェクトの<xref:System.Data.DataTable.Rows%2A>プロパティです。 使用すると<xref:System.Data.DataTable.NewRow%2A>を新しい行を作成するには、行必要がありますに追加されたりを呼び出す前に、データ テーブルから削除<xref:System.Data.DataTable.Clear%2A>です。  
  
   
  
## Examples  
 次の例を作成、 <xref:System.Data.DataTable>、2 つ追加<xref:System.Data.DataColumn>テーブルのスキーマを決定し、いくつかを新たに作成するオブジェクト<xref:System.Data.DataRow>オブジェクトを使用して、<xref:System.Data.DataTable.NewRow%2A>メソッドです。 もの<xref:System.Data.DataRow>にオブジェクトを追加し、<xref:System.Data.DataRowCollection>を使用して、<xref:System.Data.DataRowCollection.Add%2A>メソッドです。  
  
 [!code-csharp[Classic WebData DataTable.NewRow Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.NewRow Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.NewRow Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.NewRow Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRowArray">
      <MemberSignature Language="C#" Value="protected System.Data.DataRow[] NewRowArray (int size);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Data.DataRow[] NewRowArray(int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.NewRowArray(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size">A<see cref="T:System.Int32" />配列のサイズを記述する値。</param>
        <summary>配列を返します<see cref="T:System.Data.DataRow" />です。</summary>
        <returns>新しい配列。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewRowFromBuilder">
      <MemberSignature Language="C#" Value="protected virtual System.Data.DataRow NewRowFromBuilder (System.Data.DataRowBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Data.DataRow NewRowFromBuilder(class System.Data.DataRowBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="builder" Type="System.Data.DataRowBuilder" />
      </Parameters>
      <Docs>
        <param name="builder"><see cref="T:System.Data.DataRowBuilder" /> オブジェクト。</param>
        <summary>既存の行から、新しい行を作成します。</summary>
        <returns>A<see cref="T:System.Data.DataRow" />クラスを派生します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnColumnChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnChanged (System.Data.DataColumnChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnChanged(class System.Data.DataColumnChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataColumnChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
        <summary><see cref="E:System.Data.DataTable.ColumnChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)" />メソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnChanging (System.Data.DataColumnChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnColumnChanging(class System.Data.DataColumnChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataColumnChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Data.DataColumnChangeEventArgs" />。</param>
        <summary><see cref="E:System.Data.DataTable.ColumnChanging" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)" />メソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">イベント データを格納している <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
        <summary><see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />メソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveColumn">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveColumn (System.Data.DataColumn column);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveColumn(class System.Data.DataColumn column) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.Data.DataColumn" />
      </Parameters>
      <Docs>
        <param name="column"><see cref="T:System.Data.DataColumn" />削除されます。</param>
        <summary>通知、<see cref="T:System.Data.DataTable" />を<see cref="T:System.Data.DataColumn" />削除しています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)" />メソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRowChanged (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowChanged(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
        <summary><see cref="E:System.Data.DataTable.RowChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)" />メソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnRowChanging (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowChanging(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
        <summary><see cref="E:System.Data.DataTable.RowChanging" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)" />メソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDeleted (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDeleted(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
        <summary><see cref="E:System.Data.DataTable.RowDeleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" />メソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnRowDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnRowDeleting (System.Data.DataRowChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRowDeleting(class System.Data.DataRowChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataRowChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Data.DataRowChangeEventArgs" />。</param>
        <summary><see cref="E:System.Data.DataTable.RowDeleting" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" />メソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnTableCleared">
      <MemberSignature Language="C#" Value="protected virtual void OnTableCleared (System.Data.DataTableClearEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTableCleared(class System.Data.DataTableClearEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataTableClearEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
        <summary><see cref="E:System.Data.DataTable.TableCleared" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 発生させる、 <xref:System.Data.DataTable.TableCleared> 、すべての行が正常にクリアされましたその前に直後後に発生するイベント、<xref:System.Data.DataTable.Clear%2A>メソッドが呼び出し元にコントロールを返します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTableClearing">
      <MemberSignature Language="C#" Value="protected virtual void OnTableClearing (System.Data.DataTableClearEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTableClearing(class System.Data.DataTableClearEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataTableClearEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Data.DataTableClearEventArgs" />。</param>
        <summary><see cref="E:System.Data.DataTable.TableClearing" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 発生させます、<xref:System.Data.DataTable.TableClearing>の処理の前に発生するイベント、<xref:System.Data.DataTable.Clear%2A>操作を開始します。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTableNewRow">
      <MemberSignature Language="C#" Value="protected virtual void OnTableNewRow (System.Data.DataTableNewRowEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTableNewRow(class System.Data.DataTableNewRowEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Data.DataTableNewRowEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Data.DataTableNewRowEventArgs" />。</param>
        <summary><see cref="E:System.Data.DataTable.TableNewRow" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 発生させる、<xref:System.Data.DataTable.TableNewRow>新しいの後に発生するイベント<xref:System.Data.DataRow>を使用して作成された<xref:System.Data.DataTable.NewRow%2A>です。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 概要については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentRelations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection ParentRelations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection ParentRelations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.ParentRelations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この親リレーションシップのコレクションを取得<see cref="T:System.Data.DataTable" />です。</summary>
        <value>A<see cref="T:System.Data.DataRelationCollection" />テーブルの親リレーションを格納しています。 ない場合は、空のコレクションが返される<see cref="T:System.Data.DataRelation" />オブジェクトが存在します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例では、<xref:System.Data.DataTable.ParentRelations%2A>それぞれの親を取得するプロパティ<xref:System.Data.DataRelation>で、<xref:System.Data.DataTable>です。 引数としてそれぞれのリレーションを使用して、<xref:System.Data.DataRow.GetParentRows%2A>のメソッド、<xref:System.Data.DataRow>行の配列を返します。 行の各列の値が出力されます。  
  
 [!code-csharp[Classic WebData DataTable.ParentRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ParentRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ParentRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ParentRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の名前空間に格納されたデータの XML 表現を<see cref="T:System.Data.DataTable" />です。</summary>
        <value>プレフィックス、<see cref="T:System.Data.DataTable" />です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryKey">
      <MemberSignature Language="C#" Value="public System.Data.DataColumn[] PrimaryKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataColumn[] PrimaryKey" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.PrimaryKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.PrimaryKeyEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.PrimaryKeyTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataColumn[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ テーブルの主キーとして機能する列の配列を設定します。</summary>
        <value><see cref="T:System.Data.DataColumn" /> オブジェクトの配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 テーブルの主キーは、テーブル内のレコードを識別する一意である必要があります。 2 つ以上の列から成る主キーを持つテーブルがあることもできます。 これは、1 つの列が一意の値を含めることはできませんと発生します。 など、2 つの列の主キーは、"FirstName"と"LastName"列ので構成されている可能性があります。 主キーは、1 つ以上の列確立できなかったため、<xref:System.Data.DataTable.PrimaryKey%2A>プロパティの配列から成る<xref:System.Data.DataColumn>オブジェクト。  
  
   
  
## Examples  
 最初の例の主キー列を返す方法を示しています、<xref:System.Data.DataTable>に表示される、`DataGrid`です。 2 番目の例は、の主キー列を設定する方法を示します、<xref:System.Data.DataTable>です。  
  
 [!code-csharp[Classic WebData DataTable.PrimaryKey Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.PrimaryKey Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.PrimaryKey Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.PrimaryKey Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DataException">キーは、外部キーです。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XML スキーマとデータを読み取り、<see cref="T:System.Data.DataTable" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataTable> 、XML ドキュメントから一方、<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。 データとスキーマの両方を読み取りのいずれかの操作を使用して、`ReadXML`を含むオーバー ロード、`XmlReadMode`パラメーター、その値に設定および`ReadSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.WriteXml%2A>と<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッド、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataTable`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">派生したオブジェクト<see cref="T:System.IO.Stream" /></param>
        <summary>XML スキーマとデータを読み取り、<see cref="T:System.Data.DataTable" />指定して<see cref="T:System.IO.Stream" />です。</summary>
        <returns><see cref="T:System.Data.XmlReadMode" />データの読み取りに使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Data.DataTable>とその子孫が、指定されたデータで読み込まれる<xref:System.IO.Stream>です。 このメソッドの動作は次のものと同じ、<xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType>をここで、データ以外のメソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。  
  
 <xref:System.Data.DataTable.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataTable> 、XML ドキュメントから一方、<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.WriteXml%2A>と<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッド、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataTable`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。  
  
> [!NOTE]
>  `DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。  
  
   
  
## Examples  
 次の例を作成、 <xref:System.Data.DataTable> 2 つの列と 10 行を含むです。 この例で、<xref:System.Data.DataTable>スキーマとデータを呼び出すことによって、メモリ ストリーム、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。 作成、2 番目の例では、<xref:System.Data.DataTable>を呼び出すと、<xref:System.Data.DataTable.ReadXml%2A>メソッドでスキーマおよびデータを設定します。  
  
 [!code-csharp[DataWorks DataTable.ReadXml#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXml/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXml#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXml/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.IO.TextReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.IO.TextReader" />データの読み取りに使用されます。</param>
        <summary>XML スキーマとデータを読み取り、<see cref="T:System.Data.DataTable" />指定して<see cref="T:System.IO.TextReader" />です。</summary>
        <returns><see cref="T:System.Data.XmlReadMode" />データの読み取りに使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Data.DataTable>とその子孫が、指定されたデータで読み込まれる<xref:System.IO.TextReader>です。 このメソッドの動作は次のものと同じ、<xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType>をここで、データ以外のメソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。  
  
 <xref:System.Data.DataTable.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataTable> 、XML ドキュメントから一方、<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.WriteXml%2A>と<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッド、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataTable`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。  
  
> [!NOTE]
>  `DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。  
  
   
  
## Examples  
 次の例を作成、 <xref:System.Data.DataTable> 2 つの列と 10 行を含むです。 この例で、<xref:System.Data.DataTable>スキーマとデータを呼び出すことによって、メモリ ストリーム、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。 作成、2 番目の例では、<xref:System.Data.DataTable>を呼び出すと、<xref:System.Data.DataTable.ReadXml%2A>メソッドでスキーマおよびデータを設定します。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlText#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlText/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlText#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlText/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">データの読み出し元のファイルの名前。</param>
        <summary>XML スキーマとデータを読み取り、<see cref="T:System.Data.DataTable" />指定したファイルからです。</summary>
        <returns><see cref="T:System.Data.XmlReadMode" />データの読み取りに使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Data.DataTable>と、示されたという名前のファイルからのデータとその子孫が読み込まれる<xref:System.String>です。 このメソッドの動作は次のものと同じ、<xref:System.Data.DataSet.ReadXml%2A?displayProperty=nameWithType>をここで、データ以外のメソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。  
  
 <xref:System.Data.DataTable.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataTable> 、XML ドキュメントから一方、<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.WriteXml%2A>と<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッド、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataTable`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。  
  
> [!NOTE]
>  `DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。  
  
```csharp  
using System.Data;  
public class A {  
   static void Main(string[] args) {  
      DataTable tabl = new DataTable("mytable");  
      tabl.Columns.Add(new DataColumn("id", typeof(int)));  
      for (int i = 0; i < 10; i++) {  
         DataRow row = tabl.NewRow();  
         row["id"] = i;  
         tabl.Rows.Add(row);  
      }  
      tabl.WriteXml("f.xml", XmlWriteMode.WriteSchema);  
      DataTable newt = new DataTable();  
      newt.ReadXml("f.xml");  
   }  
}  
```  
  
   
  
## Examples  
 次の例を作成、 <xref:System.Data.DataTable> 2 つの列と 10 行を含むです。 この例で、<xref:System.Data.DataTable>スキーマとデータをディスクにします。 作成、2 番目の例では、<xref:System.Data.DataTable>を呼び出すと、<xref:System.Data.DataTable.ReadXml%2A>メソッドでスキーマおよびデータを設定します。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlString/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Xml.XmlReader" />データの読み取りに使用されます。</param>
        <summary>XML スキーマとデータを読み取り、<see cref="T:System.Data.DataTable" />指定して<see cref="T:System.Xml.XmlReader" />です。</summary>
        <returns><see cref="T:System.Data.XmlReadMode" />データの読み取りに使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Data.DataTable>と、示されたという名前のファイルからのデータとその子孫が読み込まれる<xref:System.Xml.XmlReader>です。 このメソッドの動作は次のものと同じ、<xref:System.Data.DataTable.ReadXml%2A>をここで、データ以外のメソッドが、現在のテーブルとその子孫に対してのみ読み込まれます。  
  
 <xref:System.Data.DataTable.ReadXml%2A>メソッドには、いずれかのデータのみを読み取る方法またはデータとスキーマの両方に、 <xref:System.Data.DataTable> 、XML ドキュメントから一方、<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッドは、スキーマのみを読み取ります。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.WriteXml%2A>と<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッド、それぞれします。 XML データ、または両方のスキーマとデータを書き込む、`DataTable`を使用して、`WriteXml`メソッドです。 スキーマだけを書き込むには、使用、`WriteXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 インライン スキーマを指定すると、データを読み込む前に既存のリレーショナル構造を拡張すると、インライン スキーマが使用されます。 (たとえば、異なるデータ型で定義されている同じテーブルに同じ列) に競合がある場合、例外が発生します。  
  
 インライン スキーマが指定されていない場合、リレーショナル構造は、XML ドキュメントの構造に従って、必要に応じて、推論によって拡張されます。 スキーマは拡張できません推論によってすべてのデータを公開するために、例外が発生します。  
  
> [!NOTE]
>  `DataSet`とそれに対応する XML 要素は関連付けません`DataColumn`または`DataTable`シリアル化された XML で (「_ _」) のように有効な XML 文字をエスケープするときにします。 `DataSet`自体のみ XML 要素の名前に無効な XML 文字をエスケープし、したがってのみが使用できる、同じです。 XML 要素名の有効な文字はエスケープ処理中に、要素が無視されます。  
  
   
  
## Examples  
 次の例を作成、 <xref:System.Data.DataTable> 2 つの列と 10 行を含むです。 この例で、<xref:System.Data.DataTable>スキーマとデータを<xref:System.Xml.XmlReader>です。 作成、2 番目の例では、<xref:System.Data.DataTable>を呼び出すと、<xref:System.Data.DataTable.ReadXml%2A>メソッドがスキーマとデータを入力する、<xref:System.Xml.XmlReader>インスタンス。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlXmlReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlXmlReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlXmlReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlXmlReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>XML スキーマを読み取り、<see cref="T:System.Data.DataTable" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、`ReadXmlSchema`のスキーマを作成する方法、<xref:System.Data.DataTable>です。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 スキーマを XML ドキュメントに書き込むには使用、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドです。  
  
 XML スキーマは XSD 標準に従って解釈されます。  
  
 `ReadXmlSchema`を呼び出す前にメソッドが呼び出され、通常、<xref:System.Data.DataTable.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataTable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">スキーマの読み取りに使用されるストリーム。</param>
        <summary>XML スキーマを読み取り、<see cref="T:System.Data.DataTable" />指定のストリームを使用しています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataTable>です。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 スキーマを XML ドキュメントに書き込むには使用、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドです。  
  
 XML スキーマは XSD 標準に従って解釈されます。  
  
 データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。 例外はスローされません。  
  
 `ReadXmlSchema`を呼び出す前にメソッドが呼び出され、通常、<xref:System.Data.DataTable.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataTable>です。  
  
 XML スキーマを使用して入れ子にされたリレーションシップを作成するには、暗黙的な入れ子になった要素を使用します。 明示的な列名を使用する入れ子にされたリレーションシップを構成することもできます。 要素は、対応するデータ テーブルを入れ子にされたリレーションシップに参加するために暗黙的に入れ子にする必要があります。  
  
   
  
## Examples  
 次のコンソール アプリケーションを作成、新しい<xref:System.Data.DataTable>、し、そのテーブルのスキーマを書き込みます、<xref:System.IO.MemoryStream>です。 例が新たに作成し、<xref:System.Data.DataTable>し、そのスキーマを保存済みの XML スキーマから読み取ります。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlIOStream#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlIOStream/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlIOStream#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlIOStream/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.IO.TextReader" />スキーマ情報を読み取るために使用します。</param>
        <summary>XML スキーマを読み取り、<see cref="T:System.Data.DataTable" />指定して<see cref="T:System.IO.TextReader" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataTable>です。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 スキーマを XML ドキュメントに書き込むには使用、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドです。  
  
 XML スキーマは XSD 標準に従って解釈されます。  
  
 データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。 例外はスローされません。  
  
 `ReadXmlSchema`を呼び出す前にメソッドが呼び出され、通常、<xref:System.Data.DataTable.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataTable>です。  
  
 XML スキーマを使用して入れ子にされたリレーションシップを作成するには、暗黙的な入れ子になった要素を使用します。 また、明示的な列名を使用する入れ子にされたリレーションシップを再構成できます。 要素は、対応するデータ テーブルを入れ子にされたリレーションシップに参加するために暗黙的に入れ子にする必要があります。  
  
   
  
## Examples  
 次のコンソール アプリケーションを作成、新しい<xref:System.Data.DataTable>、し、そのテーブルのスキーマを書き込みます、<xref:System.IO.MemoryStream>です。 例が新たに作成し、<xref:System.Data.DataTable>を使用して、保存されている XML スキーマからそのスキーマを読み取ると、 <xref:System.IO.StreamReader> (から継承される<xref:System.IO.TextReader>) のソースとして。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlSchema#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchema/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlSchema#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchema/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">スキーマ情報を読み取り元のファイルの名前。</param>
        <summary>XML スキーマを読み取り、<see cref="T:System.Data.DataTable" />指定したファイルからです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataTable>です。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 スキーマを XML ドキュメントに書き込むには使用、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドです。  
  
 XML スキーマは XSD 標準に従って解釈されます。  
  
 データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。 例外はスローされません。  
  
 `ReadXmlSchema`を呼び出す前にメソッドが呼び出され、通常、<xref:System.Data.DataTable.ReadXml%2A>の塗りつぶしに使用するメソッド、`DataTable`です。  
  
 XML スキーマを使用して入れ子にされたリレーションシップを作成するには、暗黙的な入れ子になった要素を使用します。 また、明示的な列名を使用する入れ子にされたリレーションシップを再構成できます。 要素は、対応するデータ テーブルを入れ子にされたリレーションシップに参加するために暗黙的に入れ子にする必要があります。  
  
   
  
## Examples  
 次のコンソール アプリケーションを作成、新しい<xref:System.Data.DataTable>、し、そのテーブルのスキーマをファイルに書き込みます。 例が新たに作成し、<xref:System.Data.DataTable>し、そのソースとしてファイルを使用して、保存されている XML スキーマからそのスキーマを読み込みます。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlSchemaString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaString/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlSchemaString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Xml.XmlReader" />スキーマ情報を読み取るために使用します。</param>
        <summary>XML スキーマを読み取り、<see cref="T:System.Data.DataTable" />指定して<see cref="T:System.Xml.XmlReader" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.ReadXmlSchema%2A>のスキーマを作成する方法、<xref:System.Data.DataTable>です。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 スキーマを XML ドキュメントに書き込むには使用、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドです。  
  
 XML スキーマは XSD 標準に従って解釈されます。  
  
 データの破損は、msdata:DataType と xs:type 型が一致しない場合に発生することができます。 例外はスローされません。  
  
 `ReadXmlSchema`を呼び出す前にメソッドが呼び出され、通常、<xref:System.Data.DataTable.ReadXml%2A>の塗りつぶしに使用するメソッド、<xref:System.Data.DataTable>です。  
  
> [!NOTE]
>  XML スキーマを使用して入れ子にされたリレーションシップを作成する方法では、暗黙的な入れ子になった要素を持つです。 さらに、入れ子にされたリレーションシップは、再ワイヤード (有線)、明示的な列名を使用する可能性があります。 要素を暗黙的に入れ子にされたリレーションシップに参加する対応するデータ テーブルの入れ子にするために必須であります。  
  
   
  
## Examples  
 次のコンソール アプリケーションを作成、新しい<xref:System.Data.DataTable>、し、そのテーブルのスキーマを書き込みます、<xref:System.IO.MemoryStream>です。 例が新たに作成し、<xref:System.Data.DataTable>を使用して、保存されている XML スキーマからそのスキーマを読み取ると、 <xref:System.Xml.XmlTextReader> (から継承される<xref:System.Xml.XmlReader>) のソースとして。  
  
 [!code-csharp[DataWorks DataTable.ReadXmlSchemaReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.ReadXmlSchemaReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.ReadXmlSchemaReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSerializable">
      <MemberSignature Language="C#" Value="protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadXmlSerializable(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
        <summary>XML ストリームから読み取ります。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RejectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.RejectChanges" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>読み込まれてから、テーブルまたは最後の時刻に加えられたすべての変更をロールバック<see cref="M:System.Data.DataTable.AcceptChanges" />が呼び出されました。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに<xref:System.Data.DataTable.RejectChanges%2A>が呼び出されると、いずれかの<xref:System.Data.DataRow>編集モードに残っているオブジェクトがそれらの編集をキャンセルします。 新しい行が削除されます。 行、 <xref:System.Data.DataRowState> 'éý'`Modified`または`Deleted`元の状態に戻り値。  
  
   
  
## Examples  
 次の例は、いくつか変更を加える、 <xref:System.Data.DataTable>、呼び出すことによって、変更を拒否したが、<xref:System.Data.DataTable.RejectChanges%2A>メソッドです。  
  
 [!code-csharp[Classic WebData DataTable.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RejectChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RejectChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemotingFormat">
      <MemberSignature Language="C#" Value="public System.Data.SerializationFormat RemotingFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SerializationFormat RemotingFormat" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.RemotingFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはシリアル化形式を設定します。</summary>
        <value>A<see cref="T:System.Data.SerializationFormat" />いずれかを指定する列挙<see langword="Binary" />または<see langword="Xml" />シリアル化します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リセット、<see cref="T:System.Data.DataTable" />を元の状態にします。 リセットは、すべてのデータ、インデックス、リレーション、およびテーブルの列を削除します。 データセットには、データ テーブルが含まれている場合、テーブルされます、データセットの一部の表がリセットされた後です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowChanged">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowChanged" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>後に発生する<see cref="T:System.Data.DataRow" />が変更されました。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)です。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowChanged Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanged Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowChanging">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowChanging" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowChanging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、<see cref="T:System.Data.DataRow" />が変更されています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)です。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowChanging Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanging Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowChanging Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowChanging Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDeleted">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowDeleted" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowDeleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テーブル内の行が削除された後に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)です。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowDeleted Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleted Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowDeleted Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleted Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDeleting">
      <MemberSignature Language="C#" Value="public event System.Data.DataRowChangeEventHandler RowDeleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataRowChangeEventHandler RowDeleting" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.RowDeleting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テーブル内の行を削除する前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細については、次を参照してください。 [DataTable イベントの処理](~/docs/framework/data/adonet/dataset-datatable-dataview/handling-datatable-events.md)です。  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataTable.RowDeleting Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.RowDeleting Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.RowDeleting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public System.Data.DataRowCollection Rows { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRowCollection Rows" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このテーブルに属している行のコレクションを取得します。</summary>
        <value>A<see cref="T:System.Data.DataRowCollection" />を格納している<see cref="T:System.Data.DataRow" />オブジェクト。 それ以外の場合、null 以外の場合値なし<see cref="T:System.Data.DataRow" />オブジェクトが存在します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しい<xref:System.Data.DataRow>、使用する必要があります、<xref:System.Data.DataTable.NewRow%2A>新しいオブジェクトを返すメソッド。 このようなオブジェクトが自動的に構成に対して定義されているスキーマに従って、<xref:System.Data.DataTable>のコレクションを<xref:System.Data.DataColumn>オブジェクト。 を新しい行を作成し、行の各列の値を設定した後に行を追加、<xref:System.Data.DataRowCollection>を使用して、`Add`メソッドです。  
  
 各<xref:System.Data.DataRow>コレクション内には、テーブル内のデータの行を表します。 行内の列の値に変更をコミットするに呼び出す必要があります、<xref:System.Data.DataTable.AcceptChanges%2A>メソッドです。  
  
   
  
## Examples  
 設定する行を返し、2 つの例を次に示します。 最初の例では、<xref:System.Data.DataTable.Rows%2A>プロパティのすべての行の各列の値に出力します。 2 番目の例では、<xref:System.Data.DataTable>オブジェクトの<xref:System.Data.DataTable.NewRow%2A>メソッドを作成、新しい<xref:System.Data.DataRow>のスキーマとオブジェクト、<xref:System.Data.DataTable>です。 行の値を設定した後に行は追加、<xref:System.Data.DataRowCollection>を通じて、`Add`メソッドです。  
  
 [!code-csharp[Classic WebData DataTable.Rows Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Rows Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Rows Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Rows Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべての配列を取得<see cref="T:System.Data.DataRow" />オブジェクト。</summary>
        <returns><see cref="T:System.Data.DataRow" /> オブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 適切な並べ替え順序と並べ替えの条件の指定<xref:System.Data.DataTable.Select%2A>または<xref:System.Data.DataTable.Select%2A>です。  
  
   
  
## Examples  
 次の例の配列を返します<xref:System.Data.DataRow>オブジェクトを介して、<xref:System.Data.DataTable.Select%2A>メソッドです。  
  
 [!code-csharp[Classic WebData DataTable.Select Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select (string filterExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select(string filterExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterExpression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterExpression">使用して、行をフィルター処理する条件。 行のフィルター選択する方法については、次を参照してください。 [DataView RowFilter 構文 [c#]](http://www.csharp-examples.net/dataview-rowfilter/)です。</param>
        <summary>すべての配列を取得<see cref="T:System.Data.DataRow" />フィルター条件に一致するオブジェクト。</summary>
        <returns><see cref="T:System.Data.DataRow" /> オブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 作成する、`filterExpression`引数に適用される同じ規則を使用して、<xref:System.Data.DataColumn>クラスの<xref:System.Data.DataColumn.Expression%2A>フィルターを作成するためのプロパティの値。  
  
 適切な並べ替え順序と並べ替えの条件の指定<xref:System.Data.DataTable.Select%2A>または<xref:System.Data.DataTable.Select%2A>です。  
  
 フィルターの列に null 値が含まれている場合、結果の一部をされません。  
  
   
  
## Examples  
 次の例では、フィルター式を使用して、配列を返す<xref:System.Data.DataRow>オブジェクト。  
  
 [!code-csharp[Classic WebData DataTable.Select1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select (string filterExpression, string sort);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select(string filterExpression, string sort) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterExpression" Type="System.String" />
        <Parameter Name="sort" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterExpression">使用して、行をフィルター処理する条件。 行のフィルター選択する方法については、次を参照してください。 [DataView RowFilter 構文 [c#]](http://www.csharp-examples.net/dataview-rowfilter/)です。</param>
        <param name="sort">列と並べ替えの方向を指定する文字列。</param>
        <summary>すべての配列を取得<see cref="T:System.Data.DataRow" />指定した並べ替え順序における、フィルター条件に一致するオブジェクト。</summary>
        <returns>配列<see cref="T:System.Data.DataRow" />フィルター式に一致するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 フォームに、`filterExpression`引数を作成するため、同じ規則を使用して、<xref:System.Data.DataColumn>クラスの<xref:System.Data.DataColumn.Expression%2A>プロパティの値。 `Sort`引数は、クラスの作成するため、同じ規則を使用するも<xref:System.Data.DataColumn.Expression%2A>文字列。  
  
 フィルターの列に null 値が含まれている場合、結果の一部をされません。  
  
   
  
## Examples  
 次の例では、フィルター式を使用して、配列を返す<xref:System.Data.DataRow>オブジェクト。  
  
 [!code-csharp[Classic WebData DataTable.Select2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.DataRow[] Select (string filterExpression, string sort, System.Data.DataViewRowState recordStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataRow[] Select(string filterExpression, string sort, valuetype System.Data.DataViewRowState recordStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRow[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterExpression" Type="System.String" />
        <Parameter Name="sort" Type="System.String" />
        <Parameter Name="recordStates" Type="System.Data.DataViewRowState" />
      </Parameters>
      <Docs>
        <param name="filterExpression">使用して、行をフィルター処理する条件。 行のフィルター選択する方法については、次を参照してください。 [DataView RowFilter 構文 [c#]](http://www.csharp-examples.net/dataview-rowfilter/)です。</param>
        <param name="sort">列と並べ替えの方向を指定する文字列。</param>
        <param name="recordStates"><see cref="T:System.Data.DataViewRowState" /> 値のいずれか。</param>
        <summary>すべての配列を取得<see cref="T:System.Data.DataRow" />指定した状態に一致する並べ替えの順序でフィルターに一致するオブジェクト。</summary>
        <returns><see cref="T:System.Data.DataRow" /> オブジェクトの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 フォームに、`filterExpression`引数を作成するため、同じ規則を使用して、<xref:System.Data.DataColumn>クラスの<xref:System.Data.DataColumn.Expression%2A>プロパティの値。 `Sort`引数は、クラスの作成するため、同じ規則を使用するも<xref:System.Data.DataColumn.Expression%2A>文字列。  
  
 フィルターの列に null 値が含まれている場合、結果の一部をされません。  
  
   
  
## Examples  
 次の例では、フィルター式とレコードの状態を使用して、配列を返します<xref:System.Data.DataRow>オブジェクト。  
  
 [!code-csharp[Classic WebData DataTable.Select3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.Select3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.Select3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.Select3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.Site" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataTable" /> を取得または設定します。</summary>
        <value><see cref="T:System.ComponentModel.ISite" /> の <see cref="T:System.Data.DataTable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 サイトのバインド、<xref:System.ComponentModel.Component>を<xref:System.ComponentModel.Container>とそれらの間で通信を有効にするだけでなく、コンテナーは、そのコンポーネントを管理するための手段を提供します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />」をご覧ください。</summary>
        <value>
          <see langword="true" />場合は、コレクションは、コレクションの<see cref="T:System.Collections.IList" />オブジェクト。 それ以外の場合、<see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.DataTable> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IListSource.GetList" />」を参照してください。</summary>
        <returns><see cref="T:System.Collections.IList" />をオブジェクトからデータ ソースにバインドできます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.DataTable> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />」を参照してください。</summary>
        <returns><see cref="T:System.Xml.Schema.XmlSchema" />によって生成されるオブジェクトの XML 表現を表す、<see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />メソッドによって消費されると、<see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />メソッドです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">XmlReader です。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />」をご覧ください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">XmlWriter。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />」をご覧ください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Data.DataSet> のインスタンスが <xref:System.Xml.Serialization.IXmlSerializable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableCleared">
      <MemberSignature Language="C#" Value="public event System.Data.DataTableClearEventHandler TableCleared;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataTableClearEventHandler TableCleared" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.TableCleared" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableClearEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>後に発生、<see cref="T:System.Data.DataTable" />がオフになっています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.TableCleared>すべての行が正常にクリアされましたその前に、すぐにイベントが発生、<xref:System.Data.DataTable.Clear%2A>メソッドが呼び出し元にコントロールを返します。 <xref:System.Data.DataTable.TableCleared>消去操作中に例外がある場合、イベントは発生しません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableClearing">
      <MemberSignature Language="C#" Value="public event System.Data.DataTableClearEventHandler TableClearing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataTableClearEventHandler TableClearing" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.TableClearing" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableClearEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、<see cref="T:System.Data.DataTable" />がオフになっています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.TableClearing>の処理の前にイベントが発生した、<xref:System.Data.DataTable.Clear%2A>操作を開始します。 このイベントが常に発生したときに、<xref:System.Data.DataTable.Clear%2A>テーブルには、0 行が含まれている場合でも、メソッドが呼び出されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataTable.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Data.DataTable" /> の名前を取得または設定します。</summary>
        <value><see cref="T:System.Data.DataTable" /> の名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.TableName%2A>親からこのテーブルを返すために使用<xref:System.Data.DataSet>オブジェクトの<xref:System.Data.DataTableCollection>(によって返される、<xref:System.Data.DataSet.Tables%2A>プロパティ)。  
  
   
  
## Examples  
 次の例の出力、<xref:System.Data.DataTable.TableName%2A>のコレクションの各テーブルに対して<xref:System.Data.DataTable>オブジェクト。  
  
 [!code-csharp[Classic WebData DataTable.TableName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.TableName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.TableName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.TableName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see langword="null" />または空の文字列 ("") に渡されるコレクションにこのテーブルが属しているとします。</exception>
        <exception cref="T:System.Data.DuplicateNameException">テーブルは、同じ名前のテーブルが既に存在するコレクションに属しています。 (比較では大文字小文字を区別します。)</exception>
      </Docs>
    </Member>
    <Member MemberName="TableNewRow">
      <MemberSignature Language="C#" Value="public event System.Data.DataTableNewRowEventHandler TableNewRow;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.DataTableNewRowEventHandler TableNewRow" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataTable.TableNewRow" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableNewRowEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>新しいときに発生<see cref="T:System.Data.DataRow" />を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しいした後に発生<xref:System.Data.DataRow>を使用して作成された<xref:System.Data.DataTable.NewRow%2A>です。 このイベントが発生する前に、呼び出された`NewRow`メソッドを返します。 新しい<xref:System.Data.DataRow>インスタンスがデタッチ済み以外の場合は、コレクションに追加されていません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>取得、<see cref="P:System.Data.DataTable.TableName" />と<see cref="P:System.Data.DataTable.DisplayExpression" />連結された文字列として 1 つを使用する必要がある場合、します。</summary>
        <returns>成る文字列、<see cref="P:System.Data.DataTable.TableName" />と<see cref="P:System.Data.DataTable.DisplayExpression" />値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 取得、<xref:System.Data.DataTable.TableName%2A>と<xref:System.Data.DataTable.DisplayExpression%2A>の<xref:System.Data.DataTable>です。  
  
   
  
## Examples  
 次の例を返します、<xref:System.Data.DataTable.TableName%2A>と<xref:System.Data.DataTable.DisplayExpression%2A>を使用して、<xref:System.Data.DataTable.ToString%2A>メソッドです。  
  
 [!code-csharp[Classic WebData DataTable.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataTable.ToString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataTable.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataTable.ToString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在の内容を書き込みます、 <see cref="T:System.Data.DataTable" /> XML として。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、2 つ作成されます<xref:System.Data.DataTable>をインスタンス化、追加するように各、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataRelation>関連する 2 つの表とを使用して、 <xref:System.Data.DataTable.WriteXml%2A> に親テーブル内に含まれるデータを書き込むメソッド<xref:System.IO.TextWriter>. 設定するときに、例が動作を示します、`writeHierarchy`にその値の各パラメーター。  
  
> [!NOTE]
>  この例では、WriteXml のオーバー ロードされたバージョンのいずれかを使用する方法を示します。 使用可能な可能性のあるその他の例は、個々 のオーバー ロードのトピックを参照してください。  
  
 [!code-csharp[DataWorks DataTable.WriteXmlOverload#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlOverload/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlOverload#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlOverload/VB/source.vb#1)]  
  
 この例では、次の出力がコンソール ウィンドウに表示されます。  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
</NewDataSet>  
==============================  
Customer table, with hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
          <xs:element name="Table2">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="OrderID" type="xs:int" />  
                <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
                <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
      <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" m  
sdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="OrderID" />  
      </xs:unique>  
      <xs:keyref name="CustomerOrder" refer="Constraint1">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="CustomerID" />  
      </xs:keyref>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
  <Table2>  
    <OrderID>1</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2003-12-02T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>2</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2004-01-03T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>3</OrderID>  
    <CustomerID>2</CustomerID>  
    <OrderDate>2004-11-13T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>4</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-16T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>5</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-22T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>6</OrderID>  
    <CustomerID>4</CustomerID>  
    <OrderDate>2004-06-15T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
</NewDataSet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">データの書き込み先となるストリーム。</param>
        <summary><see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.IO.Stream" /> を使用して XML として書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">内容を書き込む対象の <see cref="T:System.IO.TextWriter" />。</param>
        <summary><see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.IO.TextWriter" /> を使用して XML として書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">XML データの書き込み先ファイルです。</param>
        <summary>現在の内容を書き込みます、<see cref="T:System.Data.DataTable" />を指定したファイルを使用して XML として。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Xml.XmlWriter" />内容を記述するときに使用します。</param>
        <summary><see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.Xml.XmlWriter" /> を使用して XML として書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">データの書き込み先となるストリーム。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫の内容を記述します。 場合<see langword="false" />(既定値) の場合は、現在のテーブルのみのデータを書き込みます。</param>
        <summary><see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.IO.Stream" /> を使用して XML として書き込みます。 テーブルとそのすべての子孫のデータを保存する設定、<paramref name="writeHierarchy" />パラメーターを<see langword="true" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataTable> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 XML スキーマは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。  
  
 通常、`WriteXml`メソッドが、現在のテーブルに対してのみデータを書き込みます。 関連するテーブルの現在のテーブルとその子孫のすべてのデータを書き込みでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="stream">データの書き込み先となるストリーム。</param>
        <param name="mode"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</param>
        <summary>現在のデータおよび必要に応じて、スキーマを書き込みます、<see cref="T:System.Data.DataTable" />指定して、指定したファイルに<see cref="T:System.Data.XmlWriteMode" />です。 記述するには、スキーマの値を設定、<paramref name="mode" />パラメーターを<see langword="WriteSchema" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer">内容を書き込む対象の <see cref="T:System.IO.TextWriter" />。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫の内容を記述します。 場合<see langword="false" />(既定値) の場合は、現在のテーブルのみのデータを書き込みます。</param>
        <summary><see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.IO.TextWriter" /> を使用して XML として書き込みます。 テーブルとそのすべての子孫のデータを保存する設定、<paramref name="writeHierarchy" />パラメーターを<see langword="true" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 通常、`WriteXml`メソッドが、現在のテーブルに対してのみデータを書き込みます。 現在のテーブルとそのすべての子孫、関連するテーブルのデータを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、2 つ作成されます<xref:System.Data.DataTable>をインスタンス化、追加するように各、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataRelation>関連する 2 つの表とを使用して、 <xref:System.Data.DataTable.WriteXml%2A> に親テーブル内に含まれるデータを書き込むメソッド<xref:System.IO.TextWriter>. 設定するときに、例が動作を示します、`writeHierarchy`パラメーターを`true`です。  
  
 [!code-csharp[DataWorks DataTable.WriteXml#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXml/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXml#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXml/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" />ドキュメントを書き込むために使用します。</param>
        <param name="mode"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</param>
        <summary>現在のデータおよび必要に応じて、スキーマを書き込みます、<see cref="T:System.Data.DataTable" />指定して<see cref="T:System.IO.TextWriter" />と<see cref="T:System.Data.XmlWriteMode" />です。 記述するには、スキーマの値を設定、<paramref name="mode" />パラメーターを<see langword="WriteSchema" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fileName">XML データの書き込み先ファイルです。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫の内容を記述します。 場合<see langword="false" />(既定値) の場合は、現在のテーブルのみのデータを書き込みます。</param>
        <summary>現在の内容を書き込みます、<see cref="T:System.Data.DataTable" />を指定したファイルを使用して XML として。 テーブルとそのすべての子孫のデータを保存する設定、<paramref name="writeHierarchy" />パラメーターを<see langword="true" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
 通常、`WriteXml`メソッドが、現在のテーブルに対してのみデータを書き込みます。 関連するテーブルの現在のテーブルとその子孫のすべてのデータを書き込みでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="fileName">データの書き込み先となるファイルの名前。</param>
        <param name="mode"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</param>
        <summary>現在のデータおよび必要に応じて、スキーマを書き込みます、<see cref="T:System.Data.DataTable" />指定のファイルを使用し、<see cref="T:System.Data.XmlWriteMode" />です。 記述するには、スキーマの値を設定、<paramref name="mode" />パラメーターを<see langword="WriteSchema" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Xml.XmlWriter" />内容を記述するときに使用します。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫の内容を記述します。 場合<see langword="false" />(既定値) の場合は、現在のテーブルのみのデータを書き込みます。</param>
        <summary><see cref="T:System.Data.DataTable" /> の現在の内容を指定された <see cref="T:System.Xml.XmlWriter" /> を使用して XML として書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
 通常、`WriteXml`メソッドが、現在のテーブルに対してのみデータを書き込みます。 現在のテーブルとその子孫、関連するテーブル全体のデータを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Xml.XmlWriter" />ドキュメントを書き込むために使用します。</param>
        <param name="mode"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</param>
        <summary>現在のデータおよび必要に応じて、スキーマを書き込みます、<see cref="T:System.Data.DataTable" />指定して<see cref="T:System.Xml.XmlWriter" />と<see cref="T:System.Data.XmlWriteMode" />です。 記述するには、スキーマの値を設定、<paramref name="mode" />パラメーターを<see langword="WriteSchema" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">データの書き込み先となるストリーム。</param>
        <param name="mode"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫の内容を記述します。 場合<see langword="false" />(既定値) の場合は、現在のテーブルのみのデータを書き込みます。</param>
        <summary>現在のデータおよび必要に応じて、スキーマを書き込みます、<see cref="T:System.Data.DataTable" />指定して、指定したファイルに<see cref="T:System.Data.XmlWriteMode" />です。 記述するには、スキーマの値を設定、<paramref name="mode" />パラメーターを<see langword="WriteSchema" />です。 テーブルとそのすべての子孫のデータを保存する設定、<paramref name="writeHierarchy" />パラメーターを<see langword="true" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 `DataTable` 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、`XmlWriteMode`パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
 通常、`WriteXml`メソッドは、現在のテーブルに対してのみデータを保存します。 `WriteXml`メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 `DataTable` 、XML ドキュメントに対し、`WriteXmlSchema`メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、`XmlWriteMode`パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
 通常、`WriteXml`メソッドが、現在のテーブルに対してのみデータを書き込みます。 関連するテーブルの現在のテーブルとその子孫のすべてのデータを書き込みでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" />ドキュメントを書き込むために使用します。</param>
        <param name="mode"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫の内容を記述します。 場合<see langword="false" />(既定値) の場合は、現在のテーブルのみのデータを書き込みます。</param>
        <summary>現在のデータおよび必要に応じて、スキーマを書き込みます、<see cref="T:System.Data.DataTable" />指定して<see cref="T:System.IO.TextWriter" />と<see cref="T:System.Data.XmlWriteMode" />です。 記述するには、スキーマの値を設定、<paramref name="mode" />パラメーターを<see langword="WriteSchema" />です。 テーブルとそのすべての子孫のデータを保存する設定、<paramref name="writeHierarchy" />パラメーターを<see langword="true" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
 通常、`WriteXml`メソッドは、現在のテーブルに対してのみデータを保存します。 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
 通常、`WriteXml`メソッドが、現在のテーブルに対してのみデータを書き込みます。 関連するテーブルの現在のテーブルとその子孫のすべてのデータを書き込みでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、2 つ作成されます<xref:System.Data.DataTable>をインスタンス化、追加するように各、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataRelation>関連する 2 つの表とを使用して、 <xref:System.Data.DataTable.WriteXml%2A> に親テーブル内に含まれるデータを書き込むメソッド<xref:System.IO.TextWriter>. 設定するときに、例が動作を示します、`writeHierarchy`にその値の各パラメーター。  
  
 [!code-csharp[DataWorks DataTable.WriteXmlIO#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlIO/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlIO#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlIO/VB/source.vb#1)]  
  
 この例では、次の出力がコンソール ウィンドウに表示されます。  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
</NewDataSet>  
==============================  
Customer table, with hierarchy  
==============================  
<NewDataSet>  
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema  
" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
      <xs:complexType>  
        <xs:choice minOccurs="0" maxOccurs="unbounded">  
          <xs:element name="Table1">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="ID" type="xs:int" />  
                <xs:element name="Name" type="xs:string" minOccurs="0" />  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
          <xs:element name="Table2">  
            <xs:complexType>  
              <xs:sequence>  
                <xs:element name="OrderID" type="xs:int" />  
                <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
                <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
  
              </xs:sequence>  
            </xs:complexType>  
          </xs:element>  
        </xs:choice>  
      </xs:complexType>  
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table1" />  
        <xs:field xpath="ID" />  
      </xs:unique>  
      <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" m  
sdata:PrimaryKey="true">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="OrderID" />  
      </xs:unique>  
      <xs:keyref name="CustomerOrder" refer="Constraint1">  
        <xs:selector xpath=".//Table2" />  
        <xs:field xpath="CustomerID" />  
      </xs:keyref>  
    </xs:element>  
  </xs:schema>  
  <Table1>  
    <ID>1</ID>  
    <Name>Mary</Name>  
  </Table1>  
  <Table1>  
    <ID>2</ID>  
    <Name>Andy</Name>  
  </Table1>  
  <Table1>  
    <ID>3</ID>  
    <Name>Peter</Name>  
  </Table1>  
  <Table1>  
    <ID>4</ID>  
    <Name>Russ</Name>  
  </Table1>  
  <Table2>  
    <OrderID>1</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2003-12-02T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>2</OrderID>  
    <CustomerID>1</CustomerID>  
    <OrderDate>2004-01-03T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>3</OrderID>  
    <CustomerID>2</CustomerID>  
    <OrderDate>2004-11-13T00:00:00.0000000-08:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>4</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-16T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>5</OrderID>  
    <CustomerID>3</CustomerID>  
    <OrderDate>2004-05-22T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
  <Table2>  
    <OrderID>6</OrderID>  
    <CustomerID>4</CustomerID>  
    <OrderDate>2004-06-15T00:00:00.0000000-07:00</OrderDate>  
  </Table2>  
</NewDataSet>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fileName">データの書き込み先となるファイルの名前。</param>
        <param name="mode"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫の内容を記述します。 場合<see langword="false" />(既定値) の場合は、現在のテーブルのみのデータを書き込みます。</param>
        <summary>現在のデータおよび必要に応じて、スキーマを書き込みます、<see cref="T:System.Data.DataTable" />指定のファイルを使用し、<see cref="T:System.Data.XmlWriteMode" />です。 記述するには、スキーマの値を設定、<paramref name="mode" />パラメーターを<see langword="WriteSchema" />です。 テーブルとそのすべての子孫のデータを保存する設定、<paramref name="writeHierarchy" />パラメーターを<see langword="true" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
 通常、`WriteXml`メソッドは、現在のテーブルに対してのみデータを保存します。 現在のテーブルとスキーマのすべてのデータを保存する場合、<xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
 通常、`WriteXml`メソッドが、現在のテーブルに対してのみデータを書き込みます。 現在のテーブルで、すべての子孫、関連するテーブルのデータを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Xml.XmlWriter" />ドキュメントを書き込むために使用します。</param>
        <param name="mode"><see cref="T:System.Data.XmlWriteMode" /> 値のいずれか。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫の内容を記述します。 場合<see langword="false" />(既定値) の場合は、現在のテーブルのみのデータを書き込みます。</param>
        <summary>現在のデータおよび必要に応じて、スキーマを書き込みます、<see cref="T:System.Data.DataTable" />指定して<see cref="T:System.Xml.XmlWriter" />と<see cref="T:System.Data.XmlWriteMode" />です。 記述するには、スキーマの値を設定、<paramref name="mode" />パラメーターを<see langword="WriteSchema" />です。 テーブルとそのすべての子孫のデータを保存する設定、<paramref name="writeHierarchy" />パラメーターを<see langword="true" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.WriteXml%2A>メソッドには、いずれかのデータのみを記述する方法またはデータとスキーマの両方から、 <xref:System.Data.DataTable> 、XML ドキュメントに対し、<xref:System.Data.DataTable.WriteXmlSchema%2A>メソッドは、スキーマのみを書き込みます。 記述するにはデータとスキーマの両方を含むオーバー ロードのいずれかを使用して、<xref:System.Data.XmlWriteMode>パラメーター、その値に設定し、`WriteSchema`です。  
  
 True に設定が、同じことに注意してください、<xref:System.Data.DataTable.ReadXml%2A>と<xref:System.Data.DataTable.ReadXmlSchema%2A>メソッド、それぞれします。 XML データまたはスキーマとデータの両方を読み取り、`DataTable`を使用して、`ReadXml`メソッドです。 スキーマだけを読み取り、使用、`ReadXmlSchema`メソッドです。  
  
 通常、`WriteXml`メソッドが、現在のテーブルに対してのみデータを書き込みます。 現在のテーブルとその子孫、関連するテーブル全体のデータを書き込むでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
> [!NOTE]
>  <xref:System.InvalidOperationException>場合の列の型がスローされます、`DataRow`から読み取りまたは書き込みを実装する<xref:System.Dynamic.IDynamicMetaObjectProvider>を実装していません<xref:System.Xml.Serialization.IXmlSerializable>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のデータ構造を書き込み、 <see cref="T:System.Data.DataTable" /> XML スキーマとして。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataTable> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 XML スキーマは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、2 つ作成されます<xref:System.Data.DataTable>をインスタンス化、追加するように各、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataRelation>関連する 2 つの表とを使用して、 <xref:System.Data.DataTable.WriteXmlSchema%2A> に親テーブル内に含まれるデータを書き込むメソッド<xref:System.IO.TextWriter>. 設定するときに、例が動作を示します、`writeHierarchy`にその値の各パラメーター。  
  
> [!NOTE]
>  この例は、のいずれかのオーバー ロードされたバージョンを使用する方法を示しています。`WriteXmlSchema`可能なその他の例は、個々 のオーバー ロードのトピックを参照してください。  
  
 [!code-csharp[DataWorks DataTable.WriteXmlSchemaOverload#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchemaOverload/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlSchemaOverload#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchemaOverload/VB/source.vb#1)]  
  
 この例では、次の出力がコンソール ウィンドウに表示されます。  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Ta  
ble1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
  </xs:element>  
</xs:schema>  
==============================  
Customer table, with hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
        <xs:element name="Table2">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="OrderID" type="xs:int" />  
              <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
              <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
    <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="OrderID" />  
    </xs:unique>  
    <xs:keyref name="CustomerOrder" refer="Constraint1">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="CustomerID" />  
    </xs:keyref>  
  </xs:element>  
</xs:schema>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">XML スキーマの書き込み先となるストリーム。</param>
        <summary>現在のデータ構造を書き込み、<see cref="T:System.Data.DataTable" />指定されたストリームに XML スキーマとして。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataTable> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 XML スキーマは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" />書き込みに使用します。</param>
        <summary>現在のデータ構造を書き込み、<see cref="T:System.Data.DataTable" />指定して、XML スキーマとして<see cref="T:System.IO.TextWriter" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataTable> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 XML スキーマは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">使用するファイルの名前です。</param>
        <summary>現在のデータ構造を書き込み、<see cref="T:System.Data.DataTable" />指定したファイルに XML スキーマとして。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataTable> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 XML スキーマは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer">使用する <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>現在のデータ構造を書き込み、<see cref="T:System.Data.DataTable" />指定して、XML スキーマとして<see cref="T:System.Xml.XmlWriter" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataTable> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 XML スキーマは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">XML スキーマの書き込み先となるストリーム。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫のスキーマを記述します。 場合<see langword="false" />(既定値) のスキーマを現在のテーブルのみを記述します。</param>
        <summary>現在のデータ構造を書き込み、<see cref="T:System.Data.DataTable" />指定されたストリームに XML スキーマとして。 セットをテーブルとそのすべての子孫にスキーマを保存する、<paramref name="writeHierarchy" />パラメーターを<see langword="true" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataTable> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 XML スキーマは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。  
  
 通常、`WriteXmlSchema`メソッドは、現在のテーブルに対してのみ、スキーマを書き込みます。 記述するには、現在のテーブルとその子孫、関連するテーブル全体のスキーマでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.IO.TextWriter" />書き込みに使用します。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫のスキーマを記述します。 場合<see langword="false" />(既定値) のスキーマを現在のテーブルのみを記述します。</param>
        <summary>現在のデータ構造を書き込み、<see cref="T:System.Data.DataTable" />指定して、XML スキーマとして<see cref="T:System.IO.TextWriter" />です。 セットをテーブルとそのすべての子孫にスキーマを保存する、<paramref name="writeHierarchy" />パラメーターを<see langword="true" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataTable> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 XML スキーマは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。  
  
 通常、`WriteXmlSchema`メソッドは、現在のテーブルに対してのみ、スキーマを書き込みます。 記述するには、現在のテーブルとその子孫、関連するテーブル全体のスキーマでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
   
  
## Examples  
 次のコンソール アプリケーションでは、2 つ作成されます<xref:System.Data.DataTable>をインスタンス化、追加するように各、 <xref:System.Data.DataSet>、作成、<xref:System.Data.DataRelation>関連する 2 つの表とを使用して、 <xref:System.Data.DataTable.WriteXmlSchema%2A> に親テーブル内に含まれるデータを書き込むメソッド<xref:System.IO.TextWriter>. 設定するときに、例が動作を示します、`writeHierarchy`にその値の各パラメーター。  
  
 [!code-csharp[DataWorks DataTable.WriteXmlSchema#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchema/CS/source.cs#1)]
 [!code-vb[DataWorks DataTable.WriteXmlSchema#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataTable.WriteXmlSchema/VB/source.vb#1)]  
  
 この例では、次の出力がコンソール ウィンドウに表示されます。  
  
```  
==============================  
Customer table, without hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Ta  
ble1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
  </xs:element>  
</xs:schema>  
==============================  
Customer table, with hierarchy  
==============================  
<?xml version="1.0" encoding="utf-16"?>  
<xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema"  
xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
  <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="Table1">  
    <xs:complexType>  
      <xs:choice minOccurs="0" maxOccurs="unbounded">  
        <xs:element name="Table1">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="ID" type="xs:int" />  
              <xs:element name="Name" type="xs:string" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
        <xs:element name="Table2">  
          <xs:complexType>  
            <xs:sequence>  
              <xs:element name="OrderID" type="xs:int" />  
              <xs:element name="CustomerID" type="xs:int" minOccurs="0" />  
              <xs:element name="OrderDate" type="xs:dateTime" minOccurs="0" />  
            </xs:sequence>  
          </xs:complexType>  
        </xs:element>  
      </xs:choice>  
    </xs:complexType>  
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table1" />  
      <xs:field xpath="ID" />  
    </xs:unique>  
    <xs:unique name="Table2_Constraint1" msdata:ConstraintName="Constraint1" msdata:PrimaryKey="true">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="OrderID" />  
    </xs:unique>  
    <xs:keyref name="CustomerOrder" refer="Constraint1">  
      <xs:selector xpath=".//Table2" />  
      <xs:field xpath="CustomerID" />  
    </xs:keyref>  
  </xs:element>  
</xs:schema>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fileName">使用するファイルの名前です。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫のスキーマを記述します。 場合<see langword="false" />(既定値) のスキーマを現在のテーブルのみを記述します。</param>
        <summary>現在のデータ構造を書き込み、<see cref="T:System.Data.DataTable" />指定したファイルに XML スキーマとして。 セットをテーブルとそのすべての子孫にスキーマを保存する、<paramref name="writeHierarchy" />パラメーターを<see langword="true" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataTable> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 XML スキーマは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。  
  
 通常、`WriteXmlSchema`メソッドは、現在のテーブルに対してのみ、スキーマを書き込みます。 記述するには、現在のテーブルとその子孫、関連するテーブル全体のスキーマでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, bool writeHierarchy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer, bool writeHierarchy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="writeHierarchy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Xml.XmlWriter" />ドキュメントを書き込むために使用します。</param>
        <param name="writeHierarchy">場合<see langword="true" />、現在のテーブルとそのすべての子孫のスキーマを記述します。 場合<see langword="false" />(既定値) のスキーマを現在のテーブルのみを記述します。</param>
        <summary>現在のデータ構造を書き込み、<see cref="T:System.Data.DataTable" />指定して、XML スキーマとして<see cref="T:System.Xml.XmlWriter" />です。 セットをテーブルとそのすべての子孫にスキーマを保存する、<paramref name="writeHierarchy" />パラメーターを<see langword="true" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Data.DataTable.WriteXmlSchema%2A>のスキーマを記述する方法、 <xref:System.Data.DataTable> XML ドキュメントにします。 スキーマには、テーブル、リレーションシップ、および制約の定義が含まれています。  
  
 XML スキーマは、XSD 標準を使用して書き込まれます。  
  
 XML ドキュメントに、データの書き込みに使用して、<xref:System.Data.DataTable.WriteXml%2A>メソッドです。  
  
 通常、`WriteXmlSchema`メソッドは、現在のテーブルに対してのみ、スキーマを書き込みます。 記述するには、現在のテーブルとその子孫、関連するテーブル全体のスキーマでメソッドを呼び出し、`writeHierarchy`パラメーターに設定`true`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
