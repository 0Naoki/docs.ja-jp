<Type Name="ExportFactory&lt;T&gt;" FullName="System.ComponentModel.Composition.ExportFactory&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class ExportFactory&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExportFactory`1&lt;T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.ExportFactory`1" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">エクスポートの型。</typeparam>
    <summary>指定したエクスポートを提供するパートの新しいインスタンスを作成するファクトリ。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 参照するときいない直接部品を使用して、<xref:System.Lazy%601>オブジェクト、<xref:System.Lazy%601.Value%2A>プロパティは常に同じオブジェクトへの参照を返します。 状況によっては、新しいオブジェクトの作成時に結果への参照を必要があります。 <xref:System.ComponentModel.Composition.ExportFactory%601>そのようなシナリオに適しています。  
  
 <xref:System.ComponentModel.Composition.ExportFactory%601>同様の方法で使用できる<xref:System.Lazy%601>パーツ属性設定を作成するときにします。 で定義されたインポート コントラクト<xref:System.ComponentModel.Composition.ExportFactory%601>のジェネリック パラメーターを持つ`T`で定義されているエクスポートは一致`T`です。 たとえば、フォローはエクスポートし、一致をインポートします。  
  
```csharp  
[Export]  
public String myData = "Example Data.";  
  
[Import]  
public ExportFactory<String> theData { get; set; }  
```  
  
```vb  
<Export()>  
Public myData As String = "Example Data."  
  
<Import()>  
Public Property theData As ExportFactory(Of String)  
```  
  
 <xref:System.ComponentModel.Composition.ExportFactory%601.CreateExport%2A?displayProperty=nameWithType>メソッドを返します、 <xref:System.ComponentModel.Composition.ExportLifetimeContext%601> 2 つの部分を持つオブジェクト。 <xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Value%2A?displayProperty=nameWithType>プロパティが作成されたパートへのアクセスを提供します。 呼び出す、<xref:System.ComponentModel.Composition.ExportLifetimeContext%601.Dispose%2A>のメソッド、<xref:System.ComponentModel.Composition.ExportLifetimeContext%601>オブジェクトが作成されたパートと、それを作成したコンテナーへの参照なしに管理するパートの有効期間をできるように、その依存関係すべてクリーンアップします。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportFactory (Func&lt;Tuple&lt;T,Action&gt;&gt; exportLifetimeContextCreator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Tuple`2&lt;!T, class System.Action&gt;&gt; exportLifetimeContextCreator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportFactory`1.#ctor(System.Func{System.Tuple{`0,System.Action}})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="exportLifetimeContextCreator" Type="System.Func&lt;System.Tuple&lt;T,System.Action&gt;&gt;" />
      </Parameters>
      <Docs>
        <param name="exportLifetimeContextCreator">エクスポートされた値を返す関数を<see cref="T:System.Action" />をその参照を解放します。</param>
        <summary><see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateExport">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.ExportLifetimeContext&lt;T&gt; CreateExport ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.Composition.ExportLifetimeContext`1&lt;!T&gt; CreateExport() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportFactory`1.CreateExport" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.ExportLifetimeContext&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ファクトリのエクスポート型のインスタンスを作成します。</summary>
        <returns>工場出荷時の有効なインスタンスには、型がエクスポートされます。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFilterScopedCatalog">
      <MemberSignature Language="C#" Value="protected virtual bool OnFilterScopedCatalog (System.ComponentModel.Composition.Primitives.ComposablePartDefinition composablePartDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnFilterScopedCatalog(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition composablePartDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ExportFactory`1.OnFilterScopedCatalog(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="composablePartDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Parameters>
      <Docs>
        <param name="composablePartDefinition">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
