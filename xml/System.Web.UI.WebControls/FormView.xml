<Type Name="FormView" FullName="System.Web.UI.WebControls.FormView">
  <TypeSignature Language="C#" Value="public class FormView : System.Web.UI.WebControls.CompositeDataBoundControl, System.Web.UI.IDataItemContainer, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IDataBoundItemControl, System.Web.UI.WebControls.IPostBackContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormView extends System.Web.UI.WebControls.CompositeDataBoundControl implements class System.Web.UI.IDataItemContainer, class System.Web.UI.INamingContainer, class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.IDataBoundControl, class System.Web.UI.WebControls.IDataBoundItemControl, class System.Web.UI.WebControls.IPostBackContainer" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FormView" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.CompositeDataBoundControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IDataItemContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IDataBoundItemControl</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IPostBackContainer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("PageIndexChanging")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.FormViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataKeyProperty("DataKey")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ユーザー定義のテンプレートを使用して、データ ソースから取得した単一レコードの値を表示します。 <see cref="T:System.Web.UI.WebControls.FormView" /> コントロールを使用して、レコードを編集、削除、および挿入することができます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このトピックの内容  
  
-   [はじめに](#introduction)  
  
-   [テンプレート](#templates)  
  
-   [データへのバインド](#binding_to_data)  
  
-   [データ操作](#data_operations)  
  
-   [ユーザー インターフェイスのカスタマイズ](#customizing_the_user_interface)  
  
-   [イベント](#events)  
  
-   [ユーザー補助](#accessibility)  
  
-   [CSS スタイルを適用します。](#applying_styles)  
  
-   [宣言型の構文](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>はじめに  
 <xref:System.Web.UI.WebControls.FormView>コントロールを使用して、データ ソースから 1 つのレコードを表示します。 に似ていますが、<xref:System.Web.UI.WebControls.DetailsView>を制御する点を除いて行フィールドではなく、ユーザー定義のテンプレートが表示されます。 独自のテンプレートを作成することより柔軟なデータの表示方法を制御するがします。 <xref:System.Web.UI.WebControls.FormView>コントロールは、次の機能をサポートします。  
  
-   など、データ ソース コントロールにバインド<xref:System.Web.UI.WebControls.SqlDataSource>と<xref:System.Web.UI.WebControls.ObjectDataSource>です。  
  
-   組み込みの挿入機能します。  
  
-   組み込みの更新と機能を削除します。  
  
-   組み込みのページング機能。  
  
-   プログラムによるアクセスを<xref:System.Web.UI.WebControls.FormView>オブジェクト モデルを動的にプロパティを設定、イベントを処理します。  
  
-   ユーザー定義のテンプレート、テーマ、およびスタイルを使用した外観のカスタマイズ。  
  
<a name="templates"></a>   
## <a name="templates"></a>テンプレート  
 <xref:System.Web.UI.WebControls.FormView>コンテンツを表示するコントロールをコントロールのさまざまな部分のテンプレートを作成する必要があります。 ほとんどのテンプレートは、省略可能です。ただし、コントロールが構成されているモード用のテンプレートを作成する必要があります。 たとえば、<xref:System.Web.UI.WebControls.FormView>レコードの挿入をサポートするコントロールは、挿入項目テンプレートに定義されている必要があります。 次の表には、作成できるさまざまなテンプレートが一覧表示します。  
  
|テンプレートの種類|説明|  
|-------------------|-----------------|  
|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|データのコンテンツを定義行、<xref:System.Web.UI.WebControls.FormView>コントロールが編集モードになっています。 通常、このテンプレートには、入力コントロールとするユーザーが既存のレコードの編集に使用できるコマンド ボタンが含まれます。|  
|<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>|空のデータ行には、ときに表示されるは、コンテンツを定義、<xref:System.Web.UI.WebControls.FormView>コントロールがいくつかのレコードがないデータ ソースにバインドされています。 通常、このテンプレートには、データ ソースにいくつかのレコードが含まれていないことをユーザーにアラートを生成するコンテンツが含まれます。|  
|<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>|フッター行のコンテンツを定義します。 通常、このテンプレートには、フッター行に表示するには、追加のコンテンツが含まれます。 **注:** 、別の方法として、フッター行に設定して表示するテキストを指定することができますだけ、<xref:System.Web.UI.WebControls.FormView.FooterText%2A>プロパティです。|  
|<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>|ヘッダー行のコンテンツを定義します。 通常、このテンプレートには、ヘッダー行に表示するには、追加のコンテンツが含まれます。 **注:**を代わりに、設定して、ヘッダー行に表示するテキストを指定することができますだけ、<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>プロパティです。|  
|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|データのコンテンツを定義行、<xref:System.Web.UI.WebControls.FormView>コントロールが読み取り専用モードになっています。 通常、このテンプレートには、既存のレコードの値を表示するコンテンツが含まれます。|  
|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|データのコンテンツを定義行、<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードになっています。 通常、このテンプレートには、入力コントロールと使用するユーザーが新しいレコードを追加できるコマンド ボタンが含まれます。|  
|<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>|ページング機能が有効になっているときに表示されるページャー行のコンテンツを定義します (ときに、<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>プロパティに設定されている`true`)。 このテンプレートには、通常、使用するユーザーが別のレコードに移動できるコントロールが含まれます。 **注:** 、<xref:System.Web.UI.WebControls.FormView>コントロールが組み込みのページャー行ユーザー インターフェイス (UI)。 独自のカスタムのページャー行を作成する場合にのみ、ポケットベル テンプレートを作成する必要があります。|  
  
 項目テンプレートでフィールドの値を表示するには、データ バインディング式を使用します。 データ バインド式の詳細については、次を参照してください。[データ バインディング式の構文](http://msdn.microsoft.com/en-us/676beb1d-ddfa-4153-bba8-3c86dcb7ceca)です。  
  
 項目テンプレートの編集と挿入項目テンプレートの入力コントロールは、双方向のバインド式を使用して、データ ソースのフィールドにバインドできます。 これにより、<xref:System.Web.UI.WebControls.FormView>コントロールを自動的に更新プログラムの入力コントロールの値を抽出または操作を挿入します。 双方向のバインド式は、入力コントロールを自動的に元のフィールド値を表示する編集項目テンプレートのこともできます。 双方向のバインド式の詳細については、次を参照してください。[データベースへのバインド](http://msdn.microsoft.com/en-us/ab7b2846-975b-4057-a948-45527497c742)です。  
  
<a name="binding_to_data"></a>   
## <a name="binding-to-data"></a>データへのバインド  
 <xref:System.Web.UI.WebControls.FormView>コントロールをデータ ソース コントロールにバインドできる (など<xref:System.Web.UI.WebControls.SqlDataSource>、 <xref:System.Web.UI.WebControls.ObjectDataSource>、または<xref:System.Web.UI.WebControls.AccessDataSource>) を実装する任意のデータ ソースのコレクションに、または、<xref:System.Collections.IEnumerable?displayProperty=nameWithType>インターフェイスは、よう<xref:System.Data.DataView?displayProperty=nameWithType>、 <xref:System.Collections.ArrayList?displayProperty=nameWithType>、 <xref:System.Collections.Generic.List%601?displayProperty=nameWithType>、または他のコレクション型。 使用して次のいずれかのバインド、<xref:System.Web.UI.WebControls.FormView>適切なデータ ソースの種類を制御します。  
  
-   データ ソース コントロールにバインドするには、設定、<xref:System.Web.UI.WebControls.DataBoundControl.DataSourceID%2A>のプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロールを<xref:System.Web.UI.Control.ID%2A>データ ソース コントロールの値。 <xref:System.Web.UI.WebControls.FormView>コントロールは自動的に指定されたデータ ソース コントロールにバインドし、活用できるデータ ソース コントロールの機能を挿入、更新、削除、およびページング機能を実行します。 これは、データにバインドする推奨される方法です。  
  
-   実装するデータ ソースにバインドする、<xref:System.Collections.IEnumerable?displayProperty=nameWithType>インターフェイス、プログラムで設定、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataSource%2A>のプロパティ、<xref:System.Web.UI.WebControls.FormView>データ ソースを制御し、呼び出す、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A>メソッドです。 このメソッドを使用する場合、<xref:System.Web.UI.WebControls.FormView>コントロールでは組み込みの挿入、更新、削除、およびページング機能を提供しません。 適切なイベントを使用してこの機能を提供する必要があります。  
  
 データ バインディングの詳細については、次を参照してください。 [ASP.NET データ アクセス コンテンツ マップ](http://msdn.microsoft.com/en-us/f9219396-a0fa-481f-894d-e3d9c67d64f2)です。  
  
> [!NOTE]
>  このコントロールは、悪意のあるクライアント スクリプトが含まれる可能性があります、ユーザー入力を表示する使用できます。 スクリプトの実行可能ファイル、SQL ステートメント、またはその他のコードをアプリケーションに表示する前に、クライアントから送信される情報を確認します。 可能な限り、値が HTML でエンコードされたこのコントロールに表示される前に強くお勧めします。 ASP.NET は、入力要求の検証機能があり、ユーザー入力の中のスクリプトのブロックと HTML を提供します。 検証サーバー コントロールは、ユーザー入力を評価するも提供されます。 詳細については、次を参照してください。[検証コントロールの概要](http://msdn.microsoft.com/en-us/3c0e7514-cff2-4bed-936d-ee3f7b740190)です。  
  
<a name="data_operations"></a>   
## <a name="data-operations"></a>データ操作  
 <xref:System.Web.UI.WebControls.FormView>コントロールは、更新、削除、挿入、およびコントロール内の項目を複数のページをユーザーに許可する多くの組み込み機能を提供します。 ときに、<xref:System.Web.UI.WebControls.FormView>コントロールがデータ ソース コントロールにバインドされている、<xref:System.Web.UI.WebControls.FormView>コントロールは、データ ソース コントロールの機能を活用し、自動更新、削除、挿入、およびページング機能を提供します。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView>コントロールは、update、delete、insert、およびその他の種類のデータ ソースとページング操作のサポートを提供可能です。 ただし、これらの操作の実装で、適切なイベント ハンドラーを用意する必要があります。  
  
 <xref:System.Web.UI.WebControls.FormView>コントロール テンプレートを使用して、これに自動的に更新、削除、または挿入操作を実行するコマンド ボタンを生成する方法が用意されていません。 これらのコマンド ボタンは、適切なテンプレートに手動で含める必要があります。 <xref:System.Web.UI.WebControls.FormView>コントロールによって認識される特定のボタンを持つ、`CommandName`プロパティが特定の値に設定します。 次の表のコマンドは、ボタン、<xref:System.Web.UI.WebControls.FormView>コントロールによって認識します。  
  
|ボタン|CommandName 値|説明|  
|------------|-----------------------|-----------------|  
|キャンセル|[キャンセル]|操作をキャンセルして、ユーザーが入力した値を破棄する更新操作または挿入に使用されます。 <xref:System.Web.UI.WebControls.FormView>によって指定されたモードを返しますの制御、<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>プロパティです。|  
|削除|"削除"|データ ソースから表示されているレコードを削除する削除操作で使用します。 発生させる、<xref:System.Web.UI.WebControls.FormView.ItemDeleting>と<xref:System.Web.UI.WebControls.FormView.ItemDeleted>イベント。|  
|編集|"Edit"|更新操作で配置するために使用、<xref:System.Web.UI.WebControls.FormView>編集モードで制御します。 指定されたコンテンツ、<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>データ行のプロパティが表示されます。|  
|挿入|"Insert"|挿入操作で、ユーザーが指定した値を使用して、データ ソースに新しいレコードを挿入しようとするために使用します。 発生させる、<xref:System.Web.UI.WebControls.FormView.ItemInserting>と<xref:System.Web.UI.WebControls.FormView.ItemInserted>イベント。|  
|新規作成|"New"|配置する挿入操作で使用される、<xref:System.Web.UI.WebControls.FormView>挿入モードで制御します。 指定されたコンテンツ、<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>データ行のプロパティが表示されます。|  
|ページ|"Page"|ページング操作でページングを実行する、ページャー ボタンを表すために使用します。 ページング操作を指定するには、設定、 `CommandArgument` [次へ]、「前」、"First"、「最新」、または移動先ページのインデックスにあるボタンのプロパティです。 発生させる、<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>と<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>イベント。 **注:**この種類のボタンは通常、ポケットベル テンプレートでのみ使用します。|  
|更新|[更新]|更新操作で、ユーザーが指定した値を使用して、データ ソースに表示されているレコードを更新しようとするために使用します。 発生させる、<xref:System.Web.UI.WebControls.FormView.ItemUpdating>と<xref:System.Web.UI.WebControls.FormView.ItemUpdated>イベント。|  
  
 (すぐに表示されているレコードを削除) を削除 ボタンとは異なり、編集 または 新規 ボタンがクリックされたときに、<xref:System.Web.UI.WebControls.FormView>コントロールが編集または挿入モード、それぞれに入ります。 コンテンツを編集モードに含まれている、<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>現在のデータ項目のプロパティが表示されます。 通常、項目テンプレートの編集は [編集] ボタンに置き換えられる更新プログラムが、[キャンセル] ボタンをクリックするように定義されます。 入力フィールドのデータ型に対応するコントロール (など、<xref:System.Web.UI.WebControls.TextBox>または<xref:System.Web.UI.WebControls.CheckBox>コントロール) は、ユーザーを変更するにはフィールドの値も通常表示されます。 キャンセル ボタンをクリックすると、すべての変更を放棄中に、データ ソースのレコードを更新更新 をクリックします。  
  
 含まれるコンテンツ同様に、<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>コントロールが挿入モードの場合、データ項目のプロパティが表示されます。 挿入項目テンプレートは通常、Insert ステートメントや、[キャンセル] ボタンには、新しいボタンが置き換えられます、空の入力コントロールでは、新しいレコードの値を入力するユーザーが表示されるになるように定義されます。 キャンセル ボタンをクリックすると、すべての変更を放棄中に、データ ソースのレコードを挿入挿入 ボタンをクリックします。  
  
 <xref:System.Web.UI.WebControls.FormView>コントロールには、ユーザーがデータ ソースの他のレコードに移動するページング機能が用意されています。 ページャー行が表示される有効にすると、<xref:System.Web.UI.WebControls.FormView>ページ ナビゲーション コントロールを格納しているコントロール。 ページングを有効にするには設定、<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>プロパティを`true`です。 含まれるオブジェクトのプロパティを設定してページャー行をカスタマイズすることができます、<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>と<xref:System.Web.UI.WebControls.FormView.PagerSettings%2A>プロパティです。 組み込みのページャー行 UI を使用して、代わりを使用して、独自の UI を作成することができます、<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>プロパティです。  
  
<a name="customizing_the_user_interface"></a>   
## <a name="customizing-the-user-interface"></a>ユーザー インターフェイスのカスタマイズ  
 外観をカスタマイズすることができます、<xref:System.Web.UI.WebControls.FormView>コントロールのさまざまな部分のスタイル プロパティを設定して制御します。 次の表は、異なるスタイル プロパティを一覧表示します。  
  
|スタイル プロパティ|説明|  
|--------------------|-----------------|  
|<xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A>|ときに行のデータのスタイルの設定、<xref:System.Web.UI.WebControls.FormView>コントロールが編集モードになっています。|  
|<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>|表示される空のデータ行のスタイルの設定、<xref:System.Web.UI.WebControls.FormView>データ ソースにいくつかのレコードが含まれていない場合を制御します。|  
|<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>|フッター行のスタイルの設定、<xref:System.Web.UI.WebControls.FormView>コントロール。|  
|<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>|ヘッダー行のスタイルの設定、<xref:System.Web.UI.WebControls.FormView>コントロール。|  
|<xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A>|ときに行のデータのスタイルの設定、<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードになっています。|  
|<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>|表示されるページャーのスタイルの設定、<xref:System.Web.UI.WebControls.FormView>ページング機能が有効な場合を制御します。|  
|<xref:System.Web.UI.WebControls.FormView.RowStyle%2A>|ときに行のデータのスタイルの設定、<xref:System.Web.UI.WebControls.FormView>コントロールが読み取り専用モードになっています。|  
  
<a name="events"></a>   
## <a name="events"></a>イベント  
 <xref:System.Web.UI.WebControls.FormView>コントロールには、ユーザーがプログラムをいくつかのイベントが用意されています。 これにより、イベントが発生するたびに、カスタムのルーチンを実行することができます。 次の表に、によってサポートされるイベント、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
|イベント|説明|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.FormView.ItemCommand>|内のボタンのときに発生、<xref:System.Web.UI.WebControls.FormView>コントロールをクリックします。 このイベントは、コントロールにボタンがクリックされたときにタスクを実行する多くの場合、使用します。|  
|<xref:System.Web.UI.WebControls.FormView.ItemCreated>|すべて後で発生<xref:System.Web.UI.WebControls.FormViewRow>にオブジェクトを作成、<xref:System.Web.UI.WebControls.FormView>コントロール。 このイベントが表示される前に、レコードの値を変更する多くの場合、使用します。|  
|<xref:System.Web.UI.WebControls.FormView.ItemDeleted>|[削除] ボタンのときに発生 (ボタンがその`CommandName`プロパティが"Delete"に設定) がクリックされると、後、<xref:System.Web.UI.WebControls.FormView>コントロールがデータ ソースからレコードを削除します。 このイベントは、削除操作の結果の確認によく使用されます。|  
|<xref:System.Web.UI.WebControls.FormView.ItemDeleting>|[削除] ボタンをクリックすると、その前に発生する、<xref:System.Web.UI.WebControls.FormView>コントロールがデータ ソースからレコードを削除します。 このイベントは、削除操作を取り消すよく使用されます。|  
|<xref:System.Web.UI.WebControls.FormView.ItemInserted>|挿入ボタンときに発生 (ボタンがその`CommandName`プロパティを"Insert"に設定) がクリックされると、後、<xref:System.Web.UI.WebControls.FormView>コントロールは、レコードを挿入します。 このイベントは、挿入操作の結果の確認によく使用されます。|  
|<xref:System.Web.UI.WebControls.FormView.ItemInserting>|その前に、[挿入] ボタンがクリックされたときに発生、<xref:System.Web.UI.WebControls.FormView>コントロールは、レコードを挿入します。 このイベントは、挿入操作を取り消すよく使用されます。|  
|<xref:System.Web.UI.WebControls.FormView.ItemUpdated>|更新ボタンときに発生 (ボタンがその`CommandName`プロパティが「更新」に設定) がクリックされると、後、<xref:System.Web.UI.WebControls.FormView>コントロールは、行を更新します。 このイベントは、更新操作の結果の確認によく使用されます。|  
|<xref:System.Web.UI.WebControls.FormView.ItemUpdating>|その前に更新 ボタンがクリックされたときに発生、<xref:System.Web.UI.WebControls.FormView>コントロールは、レコードを更新します。 このイベントは、更新操作を取り消すよく使用されます。|  
|<xref:System.Web.UI.WebControls.FormView.ModeChanged>|後に発生、<xref:System.Web.UI.WebControls.FormView>コントロールがモードを変更 (編集、挿入、または読み取り専用モードに)。 このイベントは、タスクを実行する多くの場合、使用時に、<xref:System.Web.UI.WebControls.FormView>コントロールがモードを変更します。|  
|<xref:System.Web.UI.WebControls.FormView.ModeChanging>|前に発生、<xref:System.Web.UI.WebControls.FormView>コントロールがモードを変更 (編集、挿入、または読み取り専用モードに)。 このイベントは、モードの変更をキャンセルよく使用されます。|  
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>|ページャー ボタンのいずれかをクリックすると、後に発生する、<xref:System.Web.UI.WebControls.FormView>コントロールは、ページング操作を処理します。 このイベントは通常、ユーザーがコントロール内の別のレコードに移動した後にタスクを実行する必要がある場合に使用します。|  
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>|ページャー ボタンのいずれかをクリックすると、その前に発生する、<xref:System.Web.UI.WebControls.FormView>コントロールは、ページング操作を処理します。 このイベントは、ページング操作を取り消すよく使用されます。|  
  
<a name="accessibility"></a>   
## <a name="accessibility"></a>ユーザー補助  
 ユーザー補助の標準に準拠するマークアップを生成するように、このコントロールを構成する方法については、次を参照してください。 [Visual Studio と ASP.NET のユーザー補助機能](http://msdn.microsoft.com/library/7e3ce9c4-6b7d-4fb1-94b5-72cf2a44fe13)と[ASP.NET コントロールやアクセシビリティ](http://msdn.microsoft.com/library/847a37e3-ce20-41da-b0d3-7dfb0fdae9a0)です。  
  
<a name="applying_styles"></a>   
## <a name="applying-css-styles"></a>CSS スタイルを適用します。  
 <xref:System.Web.UI.WebControls.FormView>コントロールでは、マークアップで CSS スタイル規則を指定することができます。 外観をカスタマイズするテンプレートを使用する場合、<xref:System.Web.UI.WebControls.FormView>コントロール、テンプレートのマークアップで CSS スタイルを指定できます。 その場合は、他の外側のテーブルは必要ありません。 テーブルが設定して表示されないように、<xref:System.Web.UI.WebControls.FormView.RenderOuterTable%2A>プロパティを`false`です。  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>宣言型の構文  
  
```  
<asp:FormView  
    AccessKey="string"  
    AllowPaging="True|False"  
    BackColor="color name|#dddddd"  
    BackImageUrl="uri"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    Caption="string"  
    CaptionAlign="NotSet|Top|Bottom|Left|Right"  
    CellPadding="integer"  
    CellSpacing="integer"  
    CssClass="string"  
    DataKeyNames="string"  
    DataMember="string"  
    DataSource="string"  
    DataSourceID="string"  
    DefaultMode="ReadOnly|Edit|Insert"  
    EmptyDataText="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    FooterText="string"  
    ForeColor="color name|#dddddd"  
    GridLines="None|Horizontal|Vertical|Both"  
    HeaderText="string"  
    Height="size"  
    HorizontalAlign="NotSet|Left|Center|Right|Justify"  
    ID="string"  
    OnDataBinding="DataBinding event handler"  
    OnDataBound="DataBound event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnItemCommand="ItemCommand event handler"  
    OnItemCreated="ItemCreated event handler"  
    OnItemDeleted="ItemDeleted event handler"  
    OnItemDeleting="ItemDeleting event handler"  
    OnItemInserted="ItemInserted event handler"  
    OnItemInserting="ItemInserting event handler"  
    OnItemUpdated="ItemUpdated event handler"  
    OnItemUpdating="ItemUpdating event handler"  
    OnLoad="Load event handler"  
    OnModeChanged="ModeChanged event handler"  
    OnModeChanging="ModeChanging event handler"  
    OnPageIndexChanged="PageIndexChanged event handler"  
    OnPageIndexChanging="PageIndexChanging event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    PageIndex="integer"  
    PagerSettings-FirstPageImageUrl="uri"  
    PagerSettings-FirstPageText="string"  
    PagerSettings-LastPageImageUrl="uri"  
    PagerSettings-LastPageText="string"  
    PagerSettings-Mode="NextPrevious|Numeric|NextPreviousFirstLast|  
        NumericFirstLast"  
    PagerSettings-NextPageImageUrl="uri"  
    PagerSettings-NextPageText="string"  
    PagerSettings-PageButtonCount="integer"  
    PagerSettings-Position="Bottom|Top|TopAndBottom"  
    PagerSettings-PreviousPageImageUrl="uri"  
    PagerSettings-PreviousPageText="string"  
    PagerSettings-Visible="True|False"  
    RenderTable="True|False"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    Visible="True|False"  
    Width="size"  
>  
        <EditItemTemplate>  
            <!-- child controls -->  
        </EditItemTemplate>  
        <EditRowStyle />  
        <EmptyDataRowStyle />  
        <EmptyDataTemplate>  
            <!-- child controls -->  
        </EmptyDataTemplate>  
        <FooterStyle />  
        <FooterTemplate>  
            <!-- child controls -->  
        </FooterTemplate>  
        <HeaderStyle />  
        <HeaderTemplate>  
            <!-- child controls -->  
        </HeaderTemplate>  
        <InsertItemTemplate>  
            <!-- child controls -->  
        </InsertItemTemplate>  
        <InsertRowStyle />  
        <ItemTemplate>  
            <!-- child controls -->  
        </ItemTemplate>  
        <PagerSettings  
            FirstPageImageUrl="uri"  
            FirstPageText="string"  
            LastPageImageUrl="uri"  
            LastPageText="string"  
            Mode="NextPrevious|Numeric|NextPreviousFirstLast|  
                NumericFirstLast"  
            NextPageImageUrl="uri"  
            NextPageText="string"  
            OnPropertyChanged="PropertyChanged event handler"  
            PageButtonCount="integer"  
            Position="Bottom|Top|TopAndBottom"  
            PreviousPageImageUrl="uri"  
            PreviousPageText="string"  
            Visible="True|False"  
        />  
        <PagerStyle />  
        <PagerTemplate>  
            <!-- child controls -->  
        </PagerTemplate>  
        <RowStyle />  
</asp:FormView>  
```  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView>から値を表示するコントロールを<xref:System.Web.UI.WebControls.SqlDataSource>コントロール。  
  
 [!code-aspx-csharp[FormViewSimple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewSimple/CS/formviewsimplecs.aspx#1)]
 [!code-aspx-vb[FormViewSimple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewSimple/VB/formviewsimplevb.aspx#1)]  
  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView>を既存のレコードを編集するコントロール。  
  
> [!IMPORTANT]
>  この例ではコントロールには、潜在的なセキュリティの脅威は、ユーザー入力を受け付けるテキスト ボックスがあります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、次を参照してください。[スクリプト悪用概要](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)です。  
  
 [!code-aspx-csharp[FormView#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormView/CS/formvieweditcs.aspx#1)]
 [!code-aspx-vb[FormView#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormView/VB/formvieweditvb.aspx#1)]  
  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView>新しいレコードを挿入するコントロール。  
  
> [!IMPORTANT]
>  この例ではコントロールには、潜在的なセキュリティの脅威は、ユーザー入力を受け付けるテキスト ボックスがあります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、次を参照してください。[スクリプト悪用概要](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)です。  
  
 [!code-aspx-csharp[FormViewInsertItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItemTemplate/CS/formviewinsertitemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItemTemplate/VB/formviewinsertitemtemplatevb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Web.UI.WebControls.FormView" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しいインスタンスを初期化するためにこのコンス トラクターを使用して、<xref:System.Web.UI.WebControls.FormView>クラスです。 動的に追加する、<xref:System.Web.UI.WebControls.FormView>ページにコントロールを新規作成<xref:System.Web.UI.WebControls.FormView>オブジェクト、そのプロパティを設定し、追加するに、<xref:System.Web.UI.Control.Controls%2A?displayProperty=nameWithType>コンテナーのコレクションを制御するように<xref:System.Web.UI.WebControls.PlaceHolder>です。  
  
   
  
## Examples  
 次の例は、動的に追加する方法を示します、<xref:System.Web.UI.WebControls.FormView>ページを制御します。  
  
 [!code-aspx-csharp[FormViewCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCtor/CS/formviewctorcs.aspx#1)]
 [!code-aspx-vb[FormViewCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCtor/VB/formviewctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowPaging">
      <MemberSignature Language="C#" Value="public virtual bool AllowPaging { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPaging" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.AllowPaging" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはページング機能が有効になっているかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" />ページング機能を有効にするにはそれ以外の場合、<see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>コントロールが組み込みのページング機能を使用して、データ ソース内の別のレコードに移動するユーザー。 サポートするデータ ソース オブジェクトでページング機能を使用できます、<xref:System.Collections.ICollection?displayProperty=nameWithType>インターフェイスまたはページング機能をサポートするデータ ソース。  
  
 ページング機能を有効にするには設定、<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>プロパティを`true`です。 使用して、基になるデータ ソース内のアイテムの合計数を指定できます、<xref:System.Web.UI.WebControls.FormView.PageCount%2A>プロパティです。 現在表示されている項目のインデックスを確認するには<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>プロパティです。  
  
 ページングが有効になっているページャー行と呼ばれる追加の行が自動的に表示される、<xref:System.Web.UI.WebControls.FormView>コントロール。 ページャー行は、ページ ナビゲーション コントロールが含まれています、上部、下部、または両方の上部と下部コントロールの表示できます。 ポケットベル行では、次の 4 つの組み込みのページャー表示モードを持っています。 次の表では、4 つのモードについて説明します。  
  
|モード|説明|  
|----------|-----------------|  
|`PagerButton.NextPrevious`|戻るボタンと [次へ] ボタンで構成される改ページ調整コントロールのセット。|  
|`PagerButton.NextPreviousFirstLast`|次に、最初と最後のボタンの前で構成される改ページ調整コントロール、A が設定されます。|  
|`PagerButton.Numeric`|構成される改ページ調整コントロールのセットは、アクセス ページへのリンク ボタンを直接番号。 これは、既定のモードです。|  
|`PagerButton.NumericFirstLast`|番号付き、先頭と末尾のリンク ボタンで構成される改ページ調整コントロールのセット。|  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView>コントロールに自動的に非表示にページャー行のデータ ソースには、2 つ未満のレコードが含まれている場合。  
  
 使用して、ページャー (ポケットベル表示モードで、時刻、およびページャー コントロールのテキスト ラベルに表示するページへのリンクの数) などの設定を管理することができます、<xref:System.Web.UI.WebControls.FormView.PagerSettings%2A>プロパティです。 (その背景色とフォントの色を含む)、ページャーの外観を制御する、<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>プロパティです。 <xref:System.Web.UI.WebControls.FormView>コントロールでは、ページャー用のカスタム テンプレートを定義することもできます。 カスタムのページャー行テンプレートを作成する方法の詳細については、次を参照してください。<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>です。  
  
 <xref:System.Web.UI.WebControls.FormView>コントロールには、ページングが発生したときに、カスタム アクションを実行に使用できるいくつかのイベントが用意されています。 次の表には、使用可能なイベントが一覧表示します。  
  
|イベント|説明|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>|ページャー ボタンのいずれかをクリックすると、後に発生する、<xref:System.Web.UI.WebControls.FormView>コントロールは、ページング操作を処理します。 このイベントは通常、ユーザーがコントロール内の別のレコードに移動した後にタスクを実行する必要がある場合に使用します。|  
|<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>|ページャー ボタンのいずれかをクリックすると、その前に発生する、<xref:System.Web.UI.WebControls.FormView>コントロールは、ページング操作を処理します。 このイベントは、ページング操作を取り消すよく使用されます。|  
  
> [!NOTE]
>  変更するときに、これらのイベントが発生しない、<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>プロパティ プログラムでします。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>でページング機能を有効にするプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 [!code-aspx-csharp[FormViewAllowPaging#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewAllowPaging/CS/formviewallowpagingcs.aspx#1)]
 [!code-aspx-vb[FormViewAllowPaging#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewAllowPaging/VB/formviewallowpagingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackImageUrl">
      <MemberSignature Language="C#" Value="public virtual string BackImageUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BackImageUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.BackImageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはの背景に表示するイメージへの URL を設定、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>背景に表示するイメージの URL、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。 既定値は空の文字列 ("") です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.BackImageUrl%2A>の背景に表示するイメージの URL を指定するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
> [!NOTE]
>  指定したイメージがより小さい場合、<xref:System.Web.UI.WebControls.FormView>背景を埋めるためにコントロール、イメージを並べて表示します。 イメージ コントロールよりも大きい場合は、イメージをトリミングします。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.BackImageUrl%2A>のバック グラウンドでカスタム イメージを表示するプロパティを<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 [!code-aspx-csharp[FormViewBackImageUrl#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewBackImageUrl/CS/formviewbackimageurlcs.aspx#1)]
 [!code-aspx-vb[FormViewBackImageUrl#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewBackImageUrl/VB/formviewbackimageurlvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BottomPagerRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow BottomPagerRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow BottomPagerRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.BottomPagerRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Web.UI.WebControls.FormViewRow" />の下部に表示されるページャー行を表すオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>A<see cref="T:System.Web.UI.WebControls.FormViewRow" />の一番下のページャー行を表すオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ページングが有効な場合 (ときに、<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>プロパティに設定されている`true`)、ページャー行と呼ばれる追加の行がで自動的に表示されます、<xref:System.Web.UI.WebControls.FormView>コントロール。 ページャー行には、上部、下部、または両方の上部と下部コントロールの表示可能なユーザーが、他のレコードに移動できるようにするコントロールが含まれています。 使用して、<xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A>プロパティにプログラムでアクセス、 <xref:System.Web.UI.WebControls.FormViewRow> 、下部のページャー行を表すオブジェクト、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A>プロパティは、使用した場合にのみ、<xref:System.Web.UI.WebControls.FormView>コントロールは、下のページャー行を作成、<xref:System.Web.UI.WebControls.FormView.ItemCreated>イベント。  
  
 カスタム コンテンツを追加する場合などの一番下のページャー行をプログラムで操作する必要がある場合、このプロパティは使用一般的です。 変更を加える、<xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A>プロパティは、後に実行する必要があります、<xref:System.Web.UI.WebControls.FormViewRow>作成された、それ以外の一番下のページャー行を表すオブジェクトが表示された、<xref:System.Web.UI.WebControls.FormView>コントロールには、すべての変更が上書きされます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A>の下部に表示されるページャー行にアクセスするプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。 他のコンテンツ ページの行が更新されます。  
  
 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public virtual string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.Caption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の HTML caption 要素に表示するテキスト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。 このプロパティは、コントロールを支援テクノロジ デバイスのユーザーにアクセスしやすくものです。</summary>
        <value>代わりに HTML caption 要素に表示するテキストを表す文字列、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。 既定値は、空の文字列 ("") です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.Caption%2A>プロパティの HTML caption 要素に表示するテキストを指定する、<xref:System.Web.UI.WebControls.FormView>コントロール。 指定したテキストは、支援テクノロジ デバイスでコントロールを使いやすくするために使用できるテーブルの説明を提供します。  
  
 その他のユーザー補助サポート、<xref:System.Web.UI.WebControls.FormView>によってコントロールが提供される、<xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A>プロパティです。 使用して、<xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A>で HTML caption 要素の配置を指定するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 このプロパティの値を設定すると、デザイナーのツールを使用して、リソース ファイルに自動的に保存できます。 詳細については、次を参照してください。<xref:System.ComponentModel.LocalizableAttribute>と[グローバリゼーションとローカリゼーション](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.Caption%2A>でレンダリングされる HTML caption 要素のテキストを指定するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 [!code-aspx-csharp[FormViewCaption#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCaption/CS/formviewcaptioncs.aspx#1)]
 [!code-aspx-vb[FormViewCaption#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCaption/VB/formviewcaptionvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptionAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableCaptionAlign CaptionAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.TableCaptionAlign CaptionAlign" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CaptionAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableCaptionAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定で HTML caption 要素の水平または垂直方向の位置、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。 このプロパティは、コントロールを支援テクノロジ デバイスのユーザーにアクセスしやすくものです。</summary>
        <value><see cref="T:System.Web.UI.WebControls.TableCaptionAlign" /> 値のいずれか。 既定値は、<see langword="TableCaptionAlign.NotSet" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A>で HTML caption 要素の水平方向または垂直方向の位置を指定するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。 このプロパティは、コントロールを支援テクノロジ デバイスのユーザーにアクセスしやすくものです。  
  
 このプロパティのいずれかを使用して、<xref:System.Web.UI.WebControls.TableCaptionAlign>列挙値。 次の表は、使用可能な値を一覧表示します。  
  
|値|説明|  
|-----------|-----------------|  
|`TableCaptionAlign.Bottom`|Caption 要素は、テーブルの下部に揃えられます。|  
|`TableCaptionAlign.Left`|Caption 要素は、テーブルの左側に揃えられます。|  
|`TableCaptionAlign.NotSet`|Caption 要素の配置が設定されていません。|  
|`TableCaptionAlign.Right`|Caption 要素は、テーブルの右側に揃えられます。|  
|`TableCaptionAlign.Top`|Caption 要素は、テーブルの上部に揃えられます。|  
  
> [!NOTE]
>  このプロパティに設定するときに`TableCaptionAlign.NotSet`ブラウザーの既定値が使用されます。  
  
 その他のユーザー補助サポート、<xref:System.Web.UI.WebControls.FormView>によってコントロールが提供される、<xref:System.Web.UI.WebControls.FormView.Caption%2A>プロパティです。 使用して、<xref:System.Web.UI.WebControls.FormView.Caption%2A>プロパティの HTML caption 要素に表示するテキストを指定する、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
   
  
## Examples  
 次の例で使用する方法、 <xref:System.Web.UI.WebControls.FormView.CaptionAlign%2A> HTML が内の要素をキャプションを指定するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロールの左側にあるコントロールを表示する必要があります。  
  
 [!code-aspx-csharp[FormViewCaption#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCaption/CS/formviewcaptioncs.aspx#1)]
 [!code-aspx-vb[FormViewCaption#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCaption/VB/formviewcaptionvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定した値が、<see cref="T:System.Web.UI.WebControls.TableCaptionAlign" />列挙値。</exception>
      </Docs>
    </Member>
    <Member MemberName="CellPadding">
      <MemberSignature Language="C#" Value="public virtual int CellPadding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CellPadding" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CellPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはセルの内容と、セルの境界線の間の領域の量を設定します。</summary>
        <value>(ピクセル単位) のセルの内容と、セルの境界線の間の領域の量。 既定値は、-1 で、このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.CellPadding%2A>セルの内容と、セルの境界線の間の余白を制御するプロパティです。 指定されたパディングの量は、セルの 4 つすべての側面に追加されます。  
  
 同じ列のすべてのセル、<xref:System.Web.UI.WebControls.FormView>コントロールが同じ幅を持ちます。 余白の量は最も幅の広いセルに適用され、列内の他のすべてのセルはセルの幅に合わせて調整されます。 同様に、同じ行のすべてのセルには、同じ高さがあります。 余白の量は、行の行内のセルに適用され、行の他のすべてのセルはセルの高さに調整されます。 個々 のセルのサイズを指定することはできません。  
  
 セルの間隔を調整するのには、使用、<xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>プロパティです。  
  
> [!NOTE]
>  このプロパティが設定されていない場合は、ブラウザーの既定値が使用されます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.CellPadding%2A>プロパティ セルの内容と、セルの境界線の間のスペースの量を指定します。  
  
 [!code-aspx-csharp[FormViewCellPadding#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCellPadding/CS/formviewcellpaddingcs.aspx#1)]
 [!code-aspx-vb[FormViewCellPadding#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCellPadding/VB/formviewcellpaddingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellSpacing">
      <MemberSignature Language="C#" Value="public virtual int CellSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CellSpacing" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CellSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはセル間の領域の量を設定します。</summary>
        <value>セルの間隔をピクセル単位で指定します。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>の隣接するセルの間隔を制御するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。 この間隔は、垂直および水平方向の両方に適用されます。 セルの間隔は、コントロール全体の統一されています。 行または列の個々 のセルの間隔を指定することはできません。  
  
> [!NOTE]
>  このプロパティを 0 より大きい値に設定し、設定すると、<xref:System.Web.UI.WebControls.FormView.GridLines%2A>プロパティ セルの境界線が表示される値、ギャップは隣接するセルの境界線間に表示されます。 このような状況で、<xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>プロパティは、ギャップのサイズを制御します。  
  
 セルの内容と、セルの枠線の間隔を調整するを使用して、<xref:System.Web.UI.WebControls.FormView.CellPadding%2A>プロパティです。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>隣接するセルの間隔の量を指定するプロパティです。  
  
 [!code-aspx-csharp[FormViewCellPadding#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCellPadding/CS/formviewcellpaddingcs.aspx#1)]
 [!code-aspx-vb[FormViewCellPadding#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCellPadding/VB/formviewcellpaddingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeMode">
      <MemberSignature Language="C#" Value="public void ChangeMode (System.Web.UI.WebControls.FormViewMode newMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ChangeMode(valuetype System.Web.UI.WebControls.FormViewMode newMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.ChangeMode(System.Web.UI.WebControls.FormViewMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newMode" Type="System.Web.UI.WebControls.FormViewMode" />
      </Parameters>
      <Docs>
        <param name="newMode"><see cref="T:System.Web.UI.WebControls.FormViewMode" /> 列挙値のいずれか。</param>
        <summary>スイッチ、<see cref="T:System.Web.UI.WebControls.FormView" />指定したデータ入力モードを制御します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.ChangeMode%2A>をプログラムで変更する方法、<xref:System.Web.UI.WebControls.FormView>編集、挿入、および読み取り専用モードの間で制御します。 このメソッドは更新も、<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>モードが指定のプロパティです。 次の表は、さまざまなモード値を一覧表示します。  
  
|モード|説明|  
|----------|-----------------|  
|`FormViewMode.Edit`|<xref:System.Web.UI.WebControls.FormView>コントロールが編集モードは、レコードの値を更新することができます。|  
|`FormViewMode.Insert`|<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードは、データ ソースに新しいレコードを追加することができます。|  
|`FormView.ReadOnly`|<xref:System.Web.UI.WebControls.FormView>コントロールが、通常の表示モードは、読み取り専用モードです。|  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.ModeChanged>と<xref:System.Web.UI.WebControls.FormView.ModeChanging>このメソッドが呼び出されると、イベントは発生しません。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.ChangeMode%2A>を返すメソッドを<xref:System.Web.UI.WebControls.FormView>コントロール、ユーザーが別のレコードに移動するたびに読み取り専用モードにします。  
  
 [!code-aspx-csharp[FormViewChangeMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewChangeMode/CS/formviewchangemodecs.aspx#1)]
 [!code-aspx-vb[FormViewChangeMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewChangeMode/VB/formviewchangemodevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateChildControls">
      <MemberSignature Language="C#" Value="protected override int CreateChildControls (System.Collections.IEnumerable dataSource, bool dataBinding);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance int32 CreateChildControls(class System.Collections.IEnumerable dataSource, bool dataBinding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateChildControls(System.Collections.IEnumerable,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Collections.IEnumerable" />
        <Parameter Name="dataBinding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSource"><see cref="T:System.Collections.IEnumerable" />コントロールの階層構造を作成するために使用するデータ ソースを表すです。</param>
        <param name="dataBinding">
          <see langword="true" />コントロールの階層が、データ ソースから直接作成されたことを示すために<see langword="false" />状態の表示からコントロールを示すために階層を作成します。</param>
        <summary>表示するために使用されるコントロールの階層を作成、<see cref="T:System.Web.UI.WebControls.FormView" />指定されたデータ ソースを制御します。</summary>
        <returns>データ ソースから作成された項目の数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.CreateChildControls%28System.Collections.IEnumerable%2CSystem.Boolean%29>メソッドは、ヘルパー メソッドによって呼び出される、<xref:System.Web.UI.WebControls.FormView>のコントロールの階層構造を作成するコントロールを<xref:System.Web.UI.WebControls.FormView>コントロール。 ときに、`dataBinding`パラメーターは`true`コントロールの階層構造が作成される前に、データ バインディングが行われます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><see cref="T:System.Web.UI.DataSourceView" />の<see cref="T:System.Web.UI.IDataSource" />先、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがバインドされているが<see langword="null" />です。</exception>
        <block subset="none" type="overrides">
          <para>拡張するとき、<see cref="T:System.Web.UI.WebControls.FormView" />クラス、独自のコントロールの階層を作成するには、このメソッドをオーバーライドすることができます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.Style CreateControlStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateControlStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既定のテーブル スタイル オブジェクトを作成、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <returns>A<see cref="T:System.Web.UI.WebControls.Style" />の既定のテーブル スタイルを格納している、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.CreateControlStyle%2A>メソッドは、ヘルパー メソッドによって呼び出される、<xref:System.Web.UI.WebControls.FormView>既定テーブル スタイル オブジェクトを作成するコントロール。 既定のスタイルを設定するだけでなく、<xref:System.Web.UI.WebControls.TableStyle>オブジェクト、このメソッドも設定、<xref:System.Web.UI.WebControls.FormView.CellPadding%2A>プロパティを 0 にします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>拡張するとき、<see cref="T:System.Web.UI.WebControls.FormView" />クラス、独自の既定のスタイルを作成するには、このメソッドをオーバーライドすることができます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateDataSourceSelectArguments">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceSelectArguments CreateDataSourceSelectArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceSelectArguments</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>作成、<see cref="T:System.Web.UI.DataSourceSelectArguments" />処理のため、データ ソースに渡される引数を格納するオブジェクト。</summary>
        <returns>A<see cref="T:System.Web.UI.DataSourceSelectArguments" />データ ソースに渡される引数を格納しています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.CreateDataSourceSelectArguments%2A>メソッドは、ヘルパー メソッドによって呼び出される、<xref:System.Web.UI.WebControls.FormView>コントロールを作成、<xref:System.Web.UI.DataSourceSelectArguments>データ ソースに渡される引数を格納するオブジェクト。 この実装では、<xref:System.Web.UI.DataSourceSelectArguments>オブジェクトには、ページング操作の引数が含まれています。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>拡張するとき、<see cref="T:System.Web.UI.WebControls.FormView" />クラス、データ ソースに渡される値を指定するには、このメソッドをオーバーライドすることができます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateRow">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.FormViewRow CreateRow (int itemIndex, System.Web.UI.WebControls.DataControlRowType rowType, System.Web.UI.WebControls.DataControlRowState rowState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.FormViewRow CreateRow(int32 itemIndex, valuetype System.Web.UI.WebControls.DataControlRowType rowType, valuetype System.Web.UI.WebControls.DataControlRowState rowState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateRow(System.Int32,System.Web.UI.WebControls.DataControlRowType,System.Web.UI.WebControls.DataControlRowState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndex" Type="System.Int32" />
        <Parameter Name="rowType" Type="System.Web.UI.WebControls.DataControlRowType" />
        <Parameter Name="rowState" Type="System.Web.UI.WebControls.DataControlRowState" />
      </Parameters>
      <Docs>
        <param name="itemIndex">表示するデータ項目の 0 から始まるインデックス。</param>
        <param name="rowType"><see cref="T:System.Web.UI.WebControls.DataControlRowType" /> 列挙値のいずれか。</param>
        <param name="rowState"><see cref="T:System.Web.UI.WebControls.DataControlRowState" /> 列挙値のビットごとの組み合わせ。</param>
        <summary>作成、<see cref="T:System.Web.UI.WebControls.FormViewRow" />オブジェクトの型を使用して、指定した項目のインデックス、行、行の状態。</summary>
        <returns>A<see cref="T:System.Web.UI.WebControls.FormViewRow" />指定した項目のインデックス、行の種類、および行の状態を使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.CreateRow%2A>メソッドは、ヘルパー メソッドによって呼び出される、<xref:System.Web.UI.WebControls.FormView>コントロールを作成、<xref:System.Web.UI.WebControls.FormViewRow>コントロール内の行を表すオブジェクトです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>拡張するとき、<see cref="T:System.Web.UI.WebControls.FormView" />クラスを返すには、このメソッドをオーバーライドすることができます、<see cref="T:System.Web.UI.WebControls.FormViewRow" />カスタム設定を持つオブジェクト。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateTable">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.Table CreateTable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.Table CreateTable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.CreateTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Table</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>含むテーブルを作成、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <returns>A<see cref="T:System.Web.UI.WebControls.Table" />を含んでいるテーブルを表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.CreateTable%2A>メソッドは、ヘルパー メソッドによって呼び出される、<xref:System.Web.UI.WebControls.FormView>コントロールのコンテナーとして機能するテーブルを作成するコントロール。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentMode">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.FormViewMode CurrentMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.FormViewMode CurrentMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.CurrentMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のデータ入力モードを取得、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value><see cref="T:System.Web.UI.WebControls.FormViewMode" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>プロパティを決定するかどうか、<xref:System.Web.UI.WebControls.FormView>コントロールが編集、挿入、または読み取り専用モードにします。 次の表は、さまざまなモード値を一覧表示します。  
  
|モード|説明|  
|----------|-----------------|  
|`FormViewMode.Edit`|<xref:System.Web.UI.WebControls.FormView>コントロールが編集モードは、レコードの値を更新することができます。|  
|`FormViewMode.Insert`|<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードは、データ ソースに新しいレコードを追加することができます。|  
|`FormView.ReadOnly`|<xref:System.Web.UI.WebControls.FormView>コントロールが、通常の表示モードは、読み取り専用モードです。|  
  
 この値は通常によって自動的に設定、<xref:System.Web.UI.WebControls.FormView>新規、更新、挿入、削除、またはキャンセル コマンド ボタンがクリックされたときを制御します。 ときに、<xref:System.Web.UI.WebControls.FormView>コントロールには、アクションへの応答のモードが変更された、次の表に、イベントが発生します。 これにより、イベントが発生したときに、適切なルーチンを実行するカスタム イベント ハンドラーを作成できます。  
  
|イベント|説明|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.FormView.ModeChanged>|発生したときに、<xref:System.Web.UI.WebControls.FormView>コントロールは、モードを変更が、モードが変更された後です。 このイベントは通常、タスクの実行に使用されるたびに、<xref:System.Web.UI.WebControls.FormView>コントロールがモードを変更します。|  
|<xref:System.Web.UI.WebControls.FormView.ModeChanging>|発生したときに、<xref:System.Web.UI.WebControls.FormView>コントロールには、モードが変更されたモードの変更の前にします。 このイベントは通常モードの変更をキャンセル使用します。|  
  
 **注**を使用してモードをプログラムで変更するときに、これらのイベントが発生しない、<xref:System.Web.UI.WebControls.FormView.ChangeMode%2A>メソッドです。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>を決定するプロパティかどうか、<xref:System.Web.UI.WebControls.FormView>コントロールが編集、挿入、または読み取り専用モードにします。 ユーザーが別のレコード間を移動しようとしたかどうか、<xref:System.Web.UI.WebControls.FormView>コントロールが編集の詳細、ページング操作はキャンセルされます。  
  
 [!code-aspx-csharp[FormViewCurrentMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCurrentMode/CS/formviewcurrentmodecs.aspx#1)]
 [!code-aspx-vb[FormViewCurrentMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCurrentMode/VB/formviewcurrentmodevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataBind">
      <MemberSignature Language="C#" Value="public override sealed void DataBind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DataBind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.DataBind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>データ ソースを <see cref="T:System.Web.UI.WebControls.FormView" /> コントロールにバインドします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.DataBind>へのデータ ソースからデータをバインドするメソッド、<xref:System.Web.UI.WebControls.FormView>コントロール。 このメソッドは、コントロールの作業中のテンプレートのすべてのデータ バインディング式を解決します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataItem">
      <MemberSignature Language="C#" Value="public virtual object DataItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataItem" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ項目にバインドを取得、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value><see cref="T:System.Object" />を表し、データ項目にバインド、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.DataItem%2A>データ アイテムにアクセスするプロパティにバインドされる、<xref:System.Web.UI.WebControls.FormView>コントロール。 データ項目は現在のレコードのフィールドの値に直接アクセスをよく使用されます。 型、<xref:System.Object>これによって返されるプロパティは、データ ソースによって異なります。 たとえば、ときに、<xref:System.Web.UI.WebControls.SqlDataSource>コントロールにバインドする、<xref:System.Web.UI.WebControls.FormView>コントロール、<xref:System.Data.DataRowView>オブジェクトが返されます。  
  
> [!NOTE]
>  このプロパティは、データ バインディングが発生した後にのみ使用できます。 データ バインディングが実行されるまで、このプロパティを返します`null`です。 このプロパティも該当する場合に、<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードでを返します`null`です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.DataItem%2A>データ項目のフィールドの値を決定するプロパティです。  
  
 [!code-aspx-csharp[FormViewCtor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCtor/CS/formviewctorcs.aspx#1)]
 [!code-aspx-vb[FormViewCtor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCtor/VB/formviewctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataItemCount">
      <MemberSignature Language="C#" Value="public int DataItemCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataItemCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataItemCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソースのデータ項目の数を取得します。</summary>
        <value>データ ソース内のデータ項目の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.DataItemCount%2A>プロパティをデータ ソースに含まれるデータ項目の数を決定します。 このプロパティにはと同じ値が含まれています、<xref:System.Web.UI.WebControls.FormView.PageCount%2A>プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataItemIndex">
      <MemberSignature Language="C#" Value="public virtual int DataItemIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataItemIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataItemIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バインドされたデータ項目のインデックスを取得、<see cref="T:System.Web.UI.WebControls.FormView" />データ ソースからです。</summary>
        <value>バインドされたデータ項目のインデックス、<see cref="T:System.Web.UI.WebControls.FormView" />データ ソースからです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.DataItemIndex%2A>データ項目のインデックスを確認するプロパティにバインドされる、<xref:System.Web.UI.WebControls.FormView>データ ソースからです。 このプロパティにはと同じ値が含まれています、<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>プロパティです。  
  
> [!NOTE]
>  ときにこのプロパティは適用されません、<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードになっています。 コントロールが挿入モードの場合、<xref:System.Web.UI.WebControls.FormView.DataItemIndex%2A>プロパティには、-1 が返されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataKey">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataKey DataKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey DataKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Web.UI.WebControls.DataKey" />表示されているレコードの主キーを表すオブジェクト。</summary>
        <value>A<see cref="T:System.Web.UI.WebControls.DataKey" />表示されているレコードの主キーを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>プロパティが設定されて、<xref:System.Web.UI.WebControls.FormView>コントロールが自動的に作成、<xref:System.Web.UI.WebControls.DataKey>の複数のフィールドに表示されているキー/値ペアを格納しているオブジェクト、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>現在のレコードのプロパティです。 使用して、<xref:System.Web.UI.WebControls.FormView.DataKey%2A>これを取得するプロパティ<xref:System.Web.UI.WebControls.DataKey>オブジェクト。 通常、このプロパティは、キーとで指定されたフィールドの対応する値を取得する使用、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>プロパティです。  
  
> [!NOTE]
>  簡単な方法として使用することも、<xref:System.Web.UI.WebControls.FormView.SelectedValue%2A>で表示されている最初のキー フィールドの値を決定するプロパティ、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>プロパティです。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.DataKey%2A>キー フィールドの値を決定するプロパティです。  
  
 [!code-aspx-csharp[FormViewDataKey#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDataKey/CS/formviewdatakeycs.aspx#1)]
 [!code-aspx-vb[FormViewDataKey#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDataKey/VB/formviewdatakeyvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataKeyNames">
      <MemberSignature Language="C#" Value="public virtual string[] DataKeyNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DataKeyNames" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DataKeyNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Web.UI.WebControls.StringArrayConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはデータ ソース用のキー フィールドの名前を格納する配列を設定します。</summary>
        <value>データ ソース用のキー フィールドの名前を格納する配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>プロパティをデータ ソースの主キーを表すフィールド名のコンマ区切りのリストを指定します。 ときに、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>プロパティが設定されて、<xref:System.Web.UI.WebControls.FormView>コントロールが自動的に作成、<xref:System.Web.UI.WebControls.DataKey>の複数のフィールドに表示されているキー/値ペアを格納しているオブジェクト、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>現在のレコードのプロパティです。 <xref:System.Web.UI.WebControls.DataKey>オブジェクトに格納し、<xref:System.Web.UI.WebControls.FormView.DataKey%2A>プロパティです。  
  
> [!NOTE]
>  設定する必要があります、 <xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A> 、組み込みの更新、削除、および挿入の機能のプロパティ、<xref:System.Web.UI.WebControls.FormView>動作を制御します。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>データ ソースのキー フィールドを指定するプロパティにバインドされる、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMode">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewMode DefaultMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.FormViewMode DefaultMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DefaultMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、データ入力モードを<see cref="T:System.Web.UI.WebControls.FormView" />を挿入するか、操作を取り消して、更新後にコントロールを返します。</summary>
        <value><see cref="T:System.Web.UI.WebControls.FormViewMode" /> 値のいずれか。 既定値は、<see langword="FormViewMode.ReadOnly" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>プロパティを指定するかどうか、<xref:System.Web.UI.WebControls.FormView>コントロールに戻る編集、挿入、または読み取り専用モード、update、insert、またはキャンセル操作を実行します。 既定では、<xref:System.Web.UI.WebControls.FormView>読み取り専用モードに制御が返されます。 ただし、維持することができます、<xref:System.Web.UI.WebControls.FormView>編集の制御や、適切な値にこのプロパティを設定してモードを挿入します。 次の表は、さまざまなモード値を一覧表示します。  
  
|モード|説明|  
|----------|-----------------|  
|`FormViewMode.Edit`|<xref:System.Web.UI.WebControls.FormView>コントロールが編集モードは、レコードの値を更新することができます。|  
|`FormViewMode.Insert`|<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードは、データ ソースに新しいレコードを追加することができます。|  
|`FormViewMode.ReadOnly`|<xref:System.Web.UI.WebControls.FormView>コントロールが、通常の表示モードは、読み取り専用モードです。|  
  
 通常、このプロパティは際に使用される、<xref:System.Web.UI.WebControls.FormView>コントロールが、1 つの目的などのみを挿入またはレコードを編集します。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>を保持するプロパティ、<xref:System.Web.UI.WebControls.FormView>更新操作の後の編集モードで制御します。  
  
 [!code-aspx-csharp[FormViewDefaultMode#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDefaultMode/CS/formviewdefaultmodecs.aspx#1)]
 [!code-aspx-vb[FormViewDefaultMode#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDefaultMode/VB/formviewdefaultmodevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定した値が、<see cref="T:System.Web.UI.WebControls.FormViewMode" />列挙値。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteItem">
      <MemberSignature Language="C#" Value="public virtual void DeleteItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteItem() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.DeleteItem" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のレコードを削除、<see cref="T:System.Web.UI.WebControls.FormView" />データ ソースからです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.DeleteItem%2A>プログラムでの現在のレコードを削除するメソッドを<xref:System.Web.UI.WebControls.FormView>データ ソースからです。 外部から現在のレコードを削除する必要がある場合、このメソッドは通常使用、<xref:System.Web.UI.WebControls.FormView>など、ページ上の異なるコントロールから制御します。 このメソッドもが発生し、<xref:System.Web.UI.WebControls.FormView.ItemDeleted>と<xref:System.Web.UI.WebControls.FormView.ItemDeleting>イベント。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.DeleteItem%2A>プログラムでの現在のレコードを削除するメソッドを<xref:System.Web.UI.WebControls.FormView>データ ソースからです。  
  
 [!code-aspx-csharp[FormViewDeleteItem#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDeleteItem/CS/formviewdeleteitemcs.aspx#1)]
 [!code-aspx-vb[FormViewDeleteItem#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDeleteItem/VB/formviewdeleteitemvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteMethod">
      <MemberSignature Language="C#" Value="public virtual string DeleteMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DeleteMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.DeleteMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールが削除操作を実行するときに呼び出されるページ上のメソッドの名前を設定します。</summary>
        <value>コントロールが削除操作を実行するときに呼び出されるページ上のメソッドの名前です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web フォーム モデル バインディングの使用に関するチュートリアル シリーズは、次を参照してください。[モデル バインディング機能と Web フォーム](http://go.microsoft.com/fwlink/?LinkId=286117)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EditItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EditItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EditItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはアイテムのカスタム コンテンツを編集モードに設定します。</summary>
        <value>A<see cref="T:System.Web.UI.ITemplate" />データ用のカスタム コンテンツを格納しているときに行、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが編集モードになっています。 既定値は null で、このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>コントロールがコントロールの現在のモードに基づくデータ行の別のテンプレートを表示 (によって指定された、<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>プロパティ)。 次の表では、各モードで使用されるテンプレートを示します。  
  
|モード|表示されるテンプレート|  
|----------|-----------------------|  
|編集|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|  
|挿入|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|  
|読み取り専用|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|  
  
 使用して、<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>ときに行のデータの独自のユーザー インターフェイス (UI) を定義するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロールが編集モードになっています。 項目テンプレート編集にはには、通常、既存のレコードと同様のレコードを更新して、更新操作をキャンセル コマンド ボタンの値を更新するユーザーの入力コントロールが含まれています。  
  
 カスタム テンプレート、最初の場所を指定する`<EditItemTemplate>`タグ、開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、`<EditItemTemplate>`タグ。 双方向のバインド式を使用すると、フィールドを入力コントロールに関連付けることができます。 これにより、<xref:System.Web.UI.WebControls.FormView>編集モードに関連付けられた入力コントロールに自動的に元のフィールドの値を表示するコントロール。 レコードが更新されたときに、<xref:System.Web.UI.WebControls.FormView>コントロールでは、関連付けられた入力コントロールから、更新されたフィールドの値を自動的に抽出します。 双方向のバインド式の詳細については、次を参照してください。[データベースへのバインド](http://msdn.microsoft.com/en-us/ab7b2846-975b-4057-a948-45527497c742)です。 組み込みのキャンセルや更新操作を実行するコマンド ボタンを作成するには、テンプレートにコマンド ボタン コントロールを追加、`CommandName`プロパティの値のいずれかに設定が次の表に一覧表示します。  
  
|コマンド ボタンの種類|CommandName 値|  
|-------------------------|-----------------------|  
|キャンセル|[キャンセル]|  
|更新|[更新]|  
  
 使用して項目テンプレートの外観を制御することができます、<xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A>プロパティです。  
  
   
  
## Examples  
 次の例では、編集モードでのデータ行のカスタム テンプレートを定義する方法を示します。  
  
 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle EditRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle EditRowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EditRowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>参照を取得、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />ときに行のデータの外観を設定できるようにするオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが編集モードになっています。</summary>
        <value>参照を<see cref="T:System.Web.UI.WebControls.TableItemStyle" />あるを表すデータのスタイルの行の場合、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが編集モードになっています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A>プロパティは、データの外観を制御する行の場合、<xref:System.Web.UI.WebControls.FormView>コントロールが編集モードにします。 ときに、<xref:System.Web.UI.WebControls.FormView>コントロールが編集モードでは、データ行で指定されたユーザー定義コンテンツが表示されます、<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>プロパティです。 このプロパティは読み取り専用です。ただしのプロパティを設定することができます、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクトを返します。 プロパティを設定するには、次のいずれかを使用して宣言します。  
  
-   開始タグに属性を配置、<xref:System.Web.UI.WebControls.FormView>フォームでコントロール`Property-Subproperty`ここで、`Subproperty`のプロパティ、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクト (たとえば、 `EditRowStyle-ForeColor`)。  
  
-   入れ子、`<EditRowStyle>`要素開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 プロパティがフォームにプログラムで設定することもできます`Property.Subproperty`(たとえば、 `EditRowStyle.ForeColor`)。 通常、一般的な設定には、カスタムの背景色、前景色、およびフォントのプロパティが含まれます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.EditRowStyle%2A>プロパティをデータのカスタム スタイルを指定する行、<xref:System.Web.UI.WebControls.FormView>コントロールが編集モードにします。  
  
 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyDataRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle EmptyDataRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle EmptyDataRowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EmptyDataRowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>参照を取得、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />空のデータ行に、データ ソースにバインドされているときに表示の外観を設定できるようにするオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールにいくつかのレコードが含まれていません。</summary>
        <value>参照、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />空のデータ行の外観を設定することができます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>プロパティは空のデータの行の外観を制御する、<xref:System.Web.UI.WebControls.FormView>コントロール。 コントロールにバインドされているデータ ソースにいくつかのレコードが含まれていない場合は、空のデータ行が表示されます。 このプロパティは読み取り専用です。ただしのプロパティを設定することができます、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクトを返します。 プロパティを設定するには、次のいずれかを使用して宣言します。  
  
-   開始タグに属性を配置、<xref:System.Web.UI.WebControls.FormView>フォームでコントロール`Property-Subproperty`ここで、`Subproperty`のプロパティ、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクト (たとえば、 `EmptyDataRowStyle-ForeColor`)。  
  
-   入れ子、`<EmptyDataRowStyle>`要素開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 プロパティがフォームにプログラムで設定することもできます`Property.Subproperty`(たとえば、 `EmptyDataRowStyle.ForeColor`)。 通常、一般的な設定には、カスタムの背景色、前景色、およびフォントのプロパティが含まれます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>プロパティを空のデータ行には、ときに表示されるは、カスタム スタイルを指定する、<xref:System.Web.UI.WebControls.FormView>コントロールがいくつかのレコードがないデータ ソースにバインドされています。  
  
 [!code-aspx-csharp[FormViewEmptyDataText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEmptyDataText/CS/formviewemptydatatextcs.aspx#1)]
 [!code-aspx-vb[FormViewEmptyDataText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEmptyDataText/VB/formviewemptydatatextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyDataTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EmptyDataTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EmptyDataTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EmptyDataTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または空のデータ行が表示されるときに、ユーザー定義の内容を設定、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがいくつかのレコードがないデータ ソースにバインドされています。</summary>
        <value>A<see cref="T:System.Web.UI.ITemplate" />のカスタム コンテンツを空のデータ行を格納しています。 既定値は<see langword="null" />、このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 空のデータ行を表示する、<xref:System.Web.UI.WebControls.FormView>コントロールにバインドされているデータ ソースにいくつかのレコードが含まれていない場合を制御します。 使用して空のデータ行の独自のカスタム ユーザー インターフェイス (UI) を定義することができます、<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>プロパティです。 空のデータ行のカスタム テンプレートを指定するには、まず配置`<EmptyDataTemplate>`タグ、開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、`<EmptyDataTemplate>`タグ。 空のデータ行のスタイルを制御するを使用して、<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>プロパティです。 設定して、空のデータ行の組み込み UI を使用することができます、<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>このプロパティではなくプロパティです。  
  
> [!NOTE]
>  両方の<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>と<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>プロパティを設定、<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>プロパティが優先されます。  
  
   
  
## Examples  
 次の例では、空のデータ行には、ときに表示されるは、カスタム テンプレートを定義する方法、<xref:System.Web.UI.WebControls.FormView>コントロールがいくつかのレコードがないデータ ソースにバインドされています。  
  
 [!code-aspx-csharp[FormViewEmptyDataTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEmptyDataTemplate/CS/formviewemptydatatemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEmptyDataTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEmptyDataTemplate/VB/formviewemptydatatemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmptyDataText">
      <MemberSignature Language="C#" Value="public virtual string EmptyDataText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EmptyDataText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EmptyDataText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定が空のデータ行に表示するテキストが表示されるときに、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがいくつかのレコードがないデータ ソースにバインドされています。</summary>
        <value>空のデータ行に表示するテキストです。 既定値は空の文字列 ("") です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 空のデータ行を表示する、<xref:System.Web.UI.WebControls.FormView>コントロールにバインドされているデータ ソースにいくつかのレコードが含まれていない場合を制御します。 使用して、<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>プロパティを空のデータ行に表示するテキストを指定します。 空のデータ行のスタイルを制御するを使用して、<xref:System.Web.UI.WebControls.FormView.EmptyDataRowStyle%2A>プロパティです。 設定して、空のデータ行の独自のカスタム ユーザー インターフェイス (UI) を定義する代わりに、<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>このプロパティではなくプロパティです。  
  
> [!NOTE]
>  両方の<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>と<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>プロパティを設定、<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>プロパティが優先されます。  
  
 このプロパティの値を設定すると、デザイナーのツールを使用して、リソース ファイルに自動的に保存できます。 詳細については、次を参照してください。<xref:System.ComponentModel.LocalizableAttribute>と[グローバリゼーションとローカリゼーション](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>プロパティを空のデータ行に表示するテキストを指定します。  
  
 [!code-aspx-csharp[FormViewEmptyDataText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEmptyDataText/CS/formviewemptydatatextcs.aspx#1)]
 [!code-aspx-vb[FormViewEmptyDataText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEmptyDataText/VB/formviewemptydatatextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableModelValidation">
      <MemberSignature Language="C#" Value="public virtual bool EnableModelValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableModelValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.EnableModelValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または検証コントロールが更新操作または挿入中に発生する例外を処理するかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" />検証コントロールが例外を挿入中に発生するまたは更新の操作を処理する場合それ以外の場合、<see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureDataBound">
      <MemberSignature Language="C#" Value="protected override void EnsureDataBound ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void EnsureDataBound() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.EnsureDataBound" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>特定ようにするが、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが適切なタイミング データにバインドします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.EnsureDataBound%2A>メソッドで使用されるヘルパー メソッド、<xref:System.Web.UI.WebControls.FormView>特定できるようにするためのクラス、<xref:System.Web.UI.WebControls.FormView>コントロールが適切なタイミング データにバインドします。 <xref:System.Web.UI.WebControls.FormView.EnsureDataBound%2A>中にメソッドが呼び出されます通常、<xref:System.Web.UI.WebControls.BaseDataBoundControl.OnPreRender%2A>データ バインド コントロールがまだバインドされていないときに、データ ソースにコントロールをバインドするメソッドでは、データ バインディングが必要です。 このバージョンのメソッドは、データ バインディングの発生を防ぐためにオーバーライドされているときに、<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractRowValues">
      <MemberSignature Language="C#" Value="protected virtual void ExtractRowValues (System.Collections.Specialized.IOrderedDictionary fieldValues, bool includeKeys);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ExtractRowValues(class System.Collections.Specialized.IOrderedDictionary fieldValues, bool includeKeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.ExtractRowValues(System.Collections.Specialized.IOrderedDictionary,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldValues" Type="System.Collections.Specialized.IOrderedDictionary" />
        <Parameter Name="includeKeys" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fieldValues"><see cref="T:System.Collections.Specialized.IOrderedDictionary" />現在のデータ項目のフィールド値を格納するために使用します。</param>
        <param name="includeKeys">
          <see langword="true" />キー フィールドを含めるそれ以外の場合、<see langword="false" />です。</param>
        <summary>データ行内で宣言されている各フィールドの値を取得し、指定した保存<see cref="T:System.Collections.Specialized.IOrderedDictionary" />オブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.ExtractRowValues%2A>メソッドは、ヘルパー メソッドによって呼び出される、<xref:System.Web.UI.WebControls.FormView>コントロールがデータ行内で宣言されている各フィールドの値を取得します。 データ行には、現在のモードに基づく別のテンプレートが表示される、ために、このメソッドは、現在のモードに対応するテンプレートで宣言されているフィールド値のみを取得します。 次の表は、使用可能なモードと対応するテンプレートを示します。  
  
|モード|テンプレート|  
|----------|--------------|  
|挿入|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|  
|編集|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|  
|読み取り専用|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|  
  
 抽出された値を使用して、複数のキー フィールドを含めるかどうかを指定することができます、`includeKeys`パラメーター。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>拡張するとき、<see cref="T:System.Web.UI.WebControls.FormView" />クラス、フィールドの値を取得する独自のルーチンを作成するには、このメソッドをオーバーライドすることができます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FooterRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow FooterRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow FooterRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Web.UI.WebControls.FormViewRow" />のフッター行を表すオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>A<see cref="T:System.Web.UI.WebControls.FormViewRow" />のフッター行を表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下部でフッター行を表示する、<xref:System.Web.UI.WebControls.FormView>タイミングを制御、<xref:System.Web.UI.WebControls.FormView.FooterText%2A>または<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>プロパティを設定します。 使用して、<xref:System.Web.UI.WebControls.FormView.FooterRow%2A>プロパティにプログラムでアクセス、<xref:System.Web.UI.WebControls.FormViewRow>フッター行を表すオブジェクト。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.FooterRow%2A>プロパティは後にのみ使用可能な<xref:System.Web.UI.WebControls.FormView>コントロールのフッター行の作成、<xref:System.Web.UI.WebControls.FormView.ItemCreated>イベント。  
  
 たとえば、カスタム コンテンツを追加するときに、フッター行をプログラムで操作する必要がある場合、このプロパティは使用一般的です。 変更を加える、<xref:System.Web.UI.WebControls.FormView.FooterRow%2A>プロパティは、後に実行する必要があります、<xref:System.Web.UI.WebControls.FormView>レンダリングされた、それ以外のコントロールが表示された、<xref:System.Web.UI.WebControls.FormView>コントロールには、すべての変更が上書きされます。  
  
 フッター行のスタイルを制御するには、<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>プロパティです。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.FooterRow%2A>中にフッター行のプロパティをプログラムで変更するプロパティ、<xref:System.Web.UI.WebControls.FormView.ItemCreated>イベント。  
  
 [!code-aspx-csharp[FormViewFooterTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterTemplate/CS/formviewfootertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewFooterTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterTemplate/VB/formviewfootertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle FooterStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>参照を取得、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />のフッター行の外観を設定できるようにするオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>参照、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />のフッター行のスタイルを表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下部でフッター行を表示する、<xref:System.Web.UI.WebControls.FormView>タイミングを制御、<xref:System.Web.UI.WebControls.FormView.FooterText%2A>または<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>プロパティを設定します。 使用して、<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>プロパティ内のフッター行の外観を制御する、<xref:System.Web.UI.WebControls.FormView>コントロール。 このプロパティは読み取り専用です。ただしのプロパティを設定することができます、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクトを返します。 プロパティを設定するには、次のいずれかを使用して宣言します。  
  
-   開始タグに属性を配置、<xref:System.Web.UI.WebControls.FormView>フォームでコントロール`Property-Subproperty`ここで、`Subproperty`のプロパティ、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクト (たとえば、 `FooterStyle-ForeColor`)。  
  
-   入れ子、`<FooterStyle>`要素開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 プロパティがフォームにプログラムで設定することもできます`Property.Subproperty`(たとえば、 `FooterStyle.ForeColor`)。 通常、一般的な設定には、カスタムの背景色、前景色、およびフォントのプロパティが含まれます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>フッター行のカスタム スタイルを指定するプロパティです。  
  
 [!code-aspx-csharp[FormViewFooterText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterText/CS/formviewfootertextcs.aspx#1)]
 [!code-aspx-vb[FormViewFooterText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterText/VB/formviewfootertextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate FooterTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate FooterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、ユーザー定義のコンテンツのフッター行、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>A<see cref="T:System.Web.UI.ITemplate" />フッター行のカスタム コンテンツを格納しています。 既定値は<see langword="null" />、このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下部でフッター行を表示する、<xref:System.Web.UI.WebControls.FormView>タイミングを制御、<xref:System.Web.UI.WebControls.FormView.FooterText%2A>または<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>プロパティを設定します。 使用して、フッター行の独自のカスタム ユーザー インターフェイス (UI) を定義することができます、<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>プロパティです。 フッター行のカスタム テンプレートを指定するには、まず配置`<FooterTemplate>`タグ、開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、`<FooterTemplate>`タグ。 フッター行のスタイルを制御するには、<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>プロパティです。 または、単に表示できますテキスト フッター行に設定して、<xref:System.Web.UI.WebControls.FormView.FooterText%2A>このプロパティではなくプロパティです。  
  
> [!NOTE]
>  両方の<xref:System.Web.UI.WebControls.FormView.FooterText%2A>と<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>プロパティを設定、<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>プロパティが優先されます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>フッター行を表示するためにカスタム テンプレートを定義するプロパティです。  
  
 [!code-aspx-csharp[FormViewFooterTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterTemplate/CS/formviewfootertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewFooterTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterTemplate/VB/formviewfootertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterText">
      <MemberSignature Language="C#" Value="public virtual string FooterText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FooterText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.FooterText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のフッター行に表示するテキスト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>フッター行に表示するテキストです。 既定値は空の文字列 ("") です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下部でフッター行を表示する、<xref:System.Web.UI.WebControls.FormView>タイミングを制御、<xref:System.Web.UI.WebControls.FormView.FooterText%2A>または<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>プロパティを設定します。 使用して、<xref:System.Web.UI.WebControls.FormView.FooterText%2A>フッター行に表示するテキストを指定するプロパティです。 フッター行のスタイルを制御するには、<xref:System.Web.UI.WebControls.FormView.FooterStyle%2A>プロパティです。 設定して、ページ フッター行の独自のカスタム ユーザー インターフェイス (UI) を定義することができます、<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>このプロパティではなくプロパティです。  
  
> [!NOTE]
>  両方の<xref:System.Web.UI.WebControls.FormView.FooterText%2A>と<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>プロパティを設定、<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>プロパティが優先されます。  
  
 このプロパティの値を設定すると、デザイナーのツールを使用して、リソース ファイルに自動的に保存できます。 詳細については、次を参照してください。<xref:System.ComponentModel.LocalizableAttribute>と[グローバリゼーションとローカリゼーション](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.FooterText%2A>フッター行に表示するテキストを指定するプロパティです。  
  
 [!code-aspx-csharp[FormViewFooterText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewFooterText/CS/formviewfootertextcs.aspx#1)]
 [!code-aspx-vb[FormViewFooterText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewFooterText/VB/formviewfootertextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.GridLines GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.GridLines GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.GridLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridLines</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の枠線のスタイル、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value><see cref="T:System.Web.UI.WebControls.GridLines" /> 値のいずれか。 既定値は、<see langword="GridLines.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.GridLines%2A>の枠線のスタイルを指定するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。 次の表は、使用できるスタイルを示します。  
  
|スタイル|説明|  
|-----------|-----------------|  
|`GridLines.None`|グリッド線は表示されません。|  
|`GridLines.Horizontal`|水平グリッド線のみが表示されます。|  
|`GridLines.Vertical`|垂直方向のグリッド線のみが表示されます。|  
|`GridLines.Both`|水平方向および垂直のグリッドの線を表示します。|  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.GridLines%2A>垂直および水平方向のグリッドの線を表示するプロパティです。  
  
 [!code-aspx-csharp[FormViewCellPadding#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewCellPadding/CS/formviewcellpaddingcs.aspx#1)]
 [!code-aspx-vb[FormViewCellPadding#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewCellPadding/VB/formviewcellpaddingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow HeaderRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow HeaderRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Web.UI.WebControls.FormViewRow" />にヘッダー行を表すオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>A<see cref="T:System.Web.UI.WebControls.FormViewRow" />にヘッダー行を表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上部にヘッダー行が表示されます、<xref:System.Web.UI.WebControls.FormView>タイミングを制御、<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>または<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>プロパティを設定します。 使用して、<xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>プロパティにプログラムでアクセス、<xref:System.Web.UI.WebControls.FormViewRow>ヘッダー行を表すオブジェクト。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>プロパティは、使用した場合にのみ、<xref:System.Web.UI.WebControls.FormView>コントロールのヘッダー行の作成、<xref:System.Web.UI.WebControls.FormView.ItemCreated>イベント。  
  
 カスタム コンテンツを追加するときに、ヘッダー行をプログラムで操作する必要がある場合、このプロパティは使用一般的です。 変更を加える、<xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>プロパティは、後に実行する必要があります、<xref:System.Web.UI.WebControls.FormView>レンダリングされた、それ以外のコントロールが表示された、<xref:System.Web.UI.WebControls.FormView>コントロールには、すべての変更が上書きされます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>時にヘッダー行のプロパティをプログラムで変更するプロパティ、<xref:System.Web.UI.WebControls.FormView.ItemCreated>イベント。  
  
 [!code-aspx-csharp[FormViewHeaderTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderTemplate/CS/formviewheadertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderTemplate/VB/formviewheadertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>参照を取得、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />ヘッダー行の外観を設定できるようにするオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>参照、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />ヘッダー行のスタイルを表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上部にヘッダー行が表示されます、<xref:System.Web.UI.WebControls.FormView>タイミングを制御、<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>または<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>プロパティを設定します。 使用して、<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>ヘッダー行の外観を制御するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。 このプロパティは読み取り専用です。ただしのプロパティを設定することができます、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクトを返します。 プロパティを設定するには、次のいずれかを使用して宣言します。  
  
-   開始タグに属性を配置、<xref:System.Web.UI.WebControls.FormView>フォームでコントロール`Property-Subproperty`ここで、`Subproperty`のプロパティ、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクト (たとえば、 `HeaderStyle-ForeColor`)。  
  
-   入れ子、`<HeaderStyle>`要素開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 プロパティがフォームにプログラムで設定することもできます`Property.Subproperty`(たとえば、 `HeaderStyle.ForeColor`)。 通常、一般的な設定には、カスタムの背景色、前景色、およびフォントのプロパティが含まれます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>プロパティ ヘッダー行のカスタム スタイルを指定します。  
  
 [!code-aspx-csharp[FormViewHeaderText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderText/CS/formviewheadertextcs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderText/VB/formviewheadertextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate HeaderTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のユーザー定義のコンテンツにヘッダー行を<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>A<see cref="T:System.Web.UI.ITemplate" />ヘッダー行のカスタム コンテンツを格納しています。 既定値は<see langword="null" />、このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上部にヘッダー行が表示されます、<xref:System.Web.UI.WebControls.FormView>タイミングを制御、<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>または<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>プロパティを設定します。 使用して、ヘッダー行の独自のカスタム ユーザー インターフェイス (UI) を定義することができます、<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>プロパティです。 ヘッダー行のカスタム テンプレートを指定するには、まず配置`<HeaderTemplate>`タグ、開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、`<HeaderTemplate>`タグ。 ヘッダー行のスタイルを制御するを使用して、<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>プロパティです。 または、単に表示できますテキストのヘッダー行を設定して、<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>このプロパティではなくプロパティです。  
  
> [!NOTE]
>  両方の<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>と<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>プロパティを設定、<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>プロパティが優先されます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>ヘッダー行を表示するためにカスタム テンプレートを定義するプロパティです。  
  
 [!code-aspx-csharp[FormViewHeaderTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderTemplate/CS/formviewheadertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderTemplate/VB/formviewheadertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderText">
      <MemberSignature Language="C#" Value="public virtual string HeaderText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderText" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HeaderText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のヘッダー行に表示するテキスト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>ヘッダー行に表示するテキストです。 既定値は空の文字列 ("") です。このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上部にヘッダー行が表示されます、<xref:System.Web.UI.WebControls.FormView>タイミングを制御、<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>または<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>プロパティを設定します。 使用して、<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>プロパティ ヘッダー行に表示するテキストを指定します。 ヘッダー行のスタイルを制御するを使用して、<xref:System.Web.UI.WebControls.FormView.HeaderStyle%2A>プロパティです。 設定して、ヘッダー行の独自のカスタム ユーザー インターフェイス (UI) を定義することができます、<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>このプロパティではなくプロパティです。  
  
> [!NOTE]
>  両方の<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>と<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>プロパティを設定、<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>プロパティが優先されます。  
  
 このプロパティの値を設定すると、デザイナーのツールを使用して、リソース ファイルに自動的に保存できます。 詳細については、次を参照してください。<xref:System.ComponentModel.LocalizableAttribute>と[グローバリゼーションとローカリゼーション](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>プロパティ ヘッダー行に表示するテキストを指定します。  
  
 [!code-aspx-csharp[FormViewHeaderText#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHeaderText/CS/formviewheadertextcs.aspx#1)]
 [!code-aspx-vb[FormViewHeaderText#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHeaderText/VB/formviewheadertextvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlign">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.HorizontalAlign HorizontalAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.HorizontalAlign HorizontalAlign" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.HorizontalAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Layout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.HorizontalAlign</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の水平方向の配置、<see cref="T:System.Web.UI.WebControls.FormView" />ページ上のコントロールです。</summary>
        <value><see cref="T:System.Web.UI.WebControls.HorizontalAlign" /> 値のいずれか。 既定値は、<see langword="HorizontalAlign.NotSet" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.HorizontalAlign%2A>の水平方向の配置を指定するプロパティ、<xref:System.Web.UI.WebControls.FormView>ページ内のコントロールです。 次の表は、さまざまな水平方向の配置のスタイルを一覧表示します。  
  
|HorizontalAlign 値|説明|  
|---------------------------|-----------------|  
|`HorizontalAlign.NotSet`|水平方向の配置、<xref:System.Web.UI.WebControls.FormView>コントロールが設定されていません。|  
|`HorizontalAlign.Left`|<xref:System.Web.UI.WebControls.FormView>コントロールがページの左側に配置します。|  
|`HorizontalAlign.Center`|<xref:System.Web.UI.WebControls.FormView>コントロールがページの中央に配置します。|  
|`HorizontalAlign.Right`|<xref:System.Web.UI.WebControls.FormView>コントロールがページの右側に配置します。|  
|`HorizontalAlign.Justify`|<xref:System.Web.UI.WebControls.FormView>コントロールは、ページの左と右の余白に揃えられます。|  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.HorizontalAlign%2A>ことを指定するプロパティ、 <xref:System.Web.UI.WebControls.FormView>  ページで、コントロールを中央揃えにする必要があります。  
  
 [!code-aspx-csharp[FormViewHorizontalAlign#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewHorizontalAlign/CS/formviewhorizontalaligncs.aspx#1)]
 [!code-aspx-vb[FormViewHorizontalAlign#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewHorizontalAlign/VB/formviewhorizontalalignvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializePager">
      <MemberSignature Language="C#" Value="protected virtual void InitializePager (System.Web.UI.WebControls.FormViewRow row, System.Web.UI.WebControls.PagedDataSource pagedDataSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializePager(class System.Web.UI.WebControls.FormViewRow row, class System.Web.UI.WebControls.PagedDataSource pagedDataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.InitializePager(System.Web.UI.WebControls.FormViewRow,System.Web.UI.WebControls.PagedDataSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Web.UI.WebControls.FormViewRow" />
        <Parameter Name="pagedDataSource" Type="System.Web.UI.WebControls.PagedDataSource" />
      </Parameters>
      <Docs>
        <param name="row"><see cref="T:System.Web.UI.WebControls.FormViewRow" />ページャー行を格納しています。</param>
        <param name="pagedDataSource">A<see cref="T:System.Web.UI.WebControls.PagedDataSource" />現在のページのデータを格納しています。</param>
        <summary>ページャー行を作成、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.InitializePager%2A>メソッドは、ヘルパー メソッドによって呼び出される、<xref:System.Web.UI.WebControls.FormView>ページャー行を作成するコントロール。 作成、<xref:System.Web.UI.WebControls.TableCell>のプロパティを使用してナビゲーション コントロールを格納しているオブジェクト、<xref:System.Web.UI.WebControls.PagedDataSource>に含まれているオブジェクト、`pagedDataSource`パラメーター。 セルがで指定される行に追加し、`row`パラメーター。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>拡張するとき、<see cref="T:System.Web.UI.WebControls.FormView" />クラス、独自のページャー行を作成するには、このメソッドをオーバーライドすることができます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="InitializeRow">
      <MemberSignature Language="C#" Value="protected virtual void InitializeRow (System.Web.UI.WebControls.FormViewRow row);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeRow(class System.Web.UI.WebControls.FormViewRow row) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.InitializeRow(System.Web.UI.WebControls.FormViewRow)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Web.UI.WebControls.FormViewRow" />
      </Parameters>
      <Docs>
        <param name="row">初期化する <see cref="T:System.Web.UI.WebControls.FormViewRow" />。</param>
        <summary>指定された初期化<see cref="T:System.Web.UI.WebControls.FormViewRow" />オブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.InitializeRow%2A>メソッドは、ヘルパー メソッドによって呼び出される、<xref:System.Web.UI.WebControls.FormView>コントロールを指定された初期化<xref:System.Web.UI.WebControls.FormViewRow>オブジェクト。 <xref:System.Web.UI.WebControls.FormViewRow>で指定された行の状態と行型に基づくオブジェクトが初期化されてその<xref:System.Web.UI.WebControls.FormViewRow.RowType%2A>と<xref:System.Web.UI.WebControls.FormViewRow.RowState%2A>プロパティ、それぞれします。 適切なコンテンツに追加し、<xref:System.Web.UI.WebControls.FormViewRow>オブジェクト。 次の表では、各行型の初期化方法について説明します。  
  
|行の種類|説明|  
|--------------|-----------------|  
|データ行|内容、 <xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>、 <xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>、または<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>にプロパティを追加、<xref:System.Web.UI.WebControls.FormViewRow>オブジェクトの値に応じて、<xref:System.Web.UI.WebControls.FormViewRow.RowState%2A>プロパティです。|  
|空のデータ行|値、<xref:System.Web.UI.WebControls.FormView.EmptyDataText%2A>プロパティまたはの内容、<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>にプロパティが追加、<xref:System.Web.UI.WebControls.FormViewRow>プロパティの設定に応じて、オブジェクトです。 両方のプロパティが設定されている場合、<xref:System.Web.UI.WebControls.FormView.EmptyDataTemplate%2A>プロパティが優先されます。|  
|フッター行|値、<xref:System.Web.UI.WebControls.FormView.FooterText%2A>プロパティまたはの内容、<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>にプロパティが追加、<xref:System.Web.UI.WebControls.FormViewRow>プロパティの設定に応じて、オブジェクトです。 両方のプロパティが設定されている場合、<xref:System.Web.UI.WebControls.FormView.FooterTemplate%2A>プロパティが優先されます。|  
|ヘッダー行|値、<xref:System.Web.UI.WebControls.FormView.HeaderText%2A>プロパティまたはの内容、<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>にプロパティが追加、<xref:System.Web.UI.WebControls.FormViewRow>プロパティの設定に応じて、オブジェクトです。 両方のプロパティが設定されている場合、<xref:System.Web.UI.WebControls.FormView.HeaderTemplate%2A>プロパティが優先されます。|  
  
> [!NOTE]
>  このメソッドは、ページャー行を初期化できません。 ページャー行を作成するには、使用、<xref:System.Web.UI.WebControls.FormView.InitializePager%2A>メソッドです。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>拡張するとき、<see cref="T:System.Web.UI.WebControls.FormView" />クラス、独自のカスタム行を作成するには、このメソッドをオーバーライドすることができます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="public virtual void InsertItem (bool causesValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertItem(bool causesValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.InsertItem(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="causesValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="causesValidation">
          <see langword="true" />メソッドが呼び出されると; ページの検証を実行するにはそれ以外の場合、<see langword="false" />です。</param>
        <summary>データ ソースの現在のレコードを挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードを使用して、<xref:System.Web.UI.WebControls.FormView.InsertItem%2A>をプログラムでデータ ソースの現在のレコードを挿入する方法です。 外部から現在のレコードを挿入する必要がある場合、このメソッドは通常使用、<xref:System.Web.UI.WebControls.FormView>など、ページ上の異なるコントロールから制御します。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView>このメソッドが呼び出される、それ以外の場合に、コントロールが挿入モードである必要があります、<xref:System.Web.HttpException>がスローされます。  
  
 挿入操作の前にページの検証を実行するかどうかを指定するには、使用、`causesValidation`パラメーター。 このメソッドもが発生し、<xref:System.Web.UI.WebControls.FormView.ItemInserted>と<xref:System.Web.UI.WebControls.FormView.ItemInserting>イベント。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.InsertItem%2A>をプログラムでの現在のレコードを挿入する方法、<xref:System.Web.UI.WebControls.FormView>データ ソース内のコントロールです。  
  
 [!code-aspx-csharp[FormViewInsertItem#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItem/CS/formviewinsertitemcs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItem#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItem/VB/formviewinsertitemvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">このメソッドが呼び出されます、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが挿入モードではありません。  
  
 または  
  
 <see cref="T:System.Web.UI.DataSourceView" />オブジェクトに関連付けられている、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが null です。</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate InsertItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate InsertItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.InsertItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはアイテムのカスタム コンテンツを挿入モードに設定します。</summary>
        <value>A<see cref="T:System.Web.UI.ITemplate" />データ用のカスタム コンテンツを格納しているときに行、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが挿入モードにします。 既定値は null で、このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>コントロールがコントロールの現在のモードに基づくデータ行の別のテンプレートを表示 (によって指定された、<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>プロパティ)。 次の表では、各モードで使用されるテンプレートを示します。  
  
|モード|表示されるテンプレート|  
|----------|-----------------------|  
|編集|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|  
|挿入|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|  
|読み取り専用|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|  
  
 使用して、<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>ときに行のデータの独自のユーザー インターフェイス (UI) を定義するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードになっています。 挿入項目テンプレートには、通常、ユーザーを新しいレコードの値を入力できるだけでなく、コマンド ボタン、レコードを挿入すると、挿入操作をキャンセルするための入力コントロールが含まれています。  
  
 カスタム テンプレート、最初の場所を指定する`<InsertItemTemplate>`タグ、開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、`<InsertItemTemplate>`タグ。 双方向のバインド式を使用すると、フィールドを入力コントロールに関連付けることができます。 レコードが挿入されたときに、<xref:System.Web.UI.WebControls.FormView>コントロールでは、関連付けられた入力コントロールから、フィールドの値を自動的に抽出します。 双方向のバインド式の詳細については、次を参照してください。[データベースへのバインド](http://msdn.microsoft.com/en-us/ab7b2846-975b-4057-a948-45527497c742)です。 挿入操作、組み込みのキャンセルを実行するコマンド ボタンを作成するには、テンプレートにコマンド ボタン コントロールを追加、`CommandName`プロパティの値のいずれかに設定が次の表に一覧表示します。  
  
|コマンド ボタンの種類|CommandName 値|  
|-------------------------|-----------------------|  
|キャンセル|[キャンセル]|  
|挿入|"Insert"|  
  
 使用して項目テンプレートの外観を制御することができます、<xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A>プロパティです。  
  
   
  
## Examples  
 次の例では、挿入モードでのデータ行のカスタム テンプレートを定義する方法を示します。  
  
 [!code-aspx-csharp[FormViewInsertItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItemTemplate/CS/formviewinsertitemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItemTemplate/VB/formviewinsertitemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertMethod">
      <MemberSignature Language="C#" Value="public virtual string InsertMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InsertMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.InsertMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールが挿入操作を実行するときに呼び出されるページ上のメソッドの名前を設定します。</summary>
        <value>コントロールが挿入操作を実行するときに呼び出されるページ上のメソッドの名前です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web フォーム モデル バインディングの使用に関するチュートリアル シリーズは、次を参照してください。[モデル バインディング機能と Web フォーム](http://go.microsoft.com/fwlink/?LinkId=286117)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle InsertRowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle InsertRowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.InsertRowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>参照を取得、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />内のデータ行の外観を設定できるようにするオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが挿入モードの場合を制御します。</summary>
        <value>参照、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />内のデータ行のスタイルを表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが挿入モードの場合を制御します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A>プロパティは、データの外観を制御する行の場合、<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードにします。 ときに、<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードでは、データ行で指定されたユーザー定義コンテンツが表示されます、<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>プロパティです。 このプロパティは読み取り専用です。ただしのプロパティを設定することができます、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクトを返します。  
  
 プロパティを設定するには、次のいずれかを使用して宣言します。  
  
-   開始タグに属性を配置、<xref:System.Web.UI.WebControls.FormView>フォームでコントロール`Property-Subproperty`ここで、`Subproperty`のプロパティ、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクト (たとえば、 `InsertRowStyle-ForeColor`)。  
  
-   入れ子、`<InsertRowStyle>`要素開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 プロパティがフォームにプログラムで設定することもできます`Property.Subproperty`(たとえば、 `InsertRowStyle.ForeColor`)。 通常、一般的な設定には、カスタムの背景色、前景色、およびフォントのプロパティが含まれます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.InsertRowStyle%2A>プロパティをデータのカスタム スタイルを指定する行、<xref:System.Web.UI.WebControls.FormView>コントロールが挿入モードにします。  
  
 [!code-aspx-csharp[FormViewInsertItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertItemTemplate/CS/formviewinsertitemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewInsertItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertItemTemplate/VB/formviewinsertitemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBindableType">
      <MemberSignature Language="C#" Value="public virtual bool IsBindableType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsBindableType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.IsBindableType(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">A<see cref="T:System.Type" />を表すデータ型を確認します。</param>
        <summary>指定されたデータ型を内のフィールドにバインドできるかどうかを判断、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <returns>
          <see langword="true" />指定したデータ型のフィールドに連結することができます、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。 それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.IsBindableType%2A>メソッドは、ヘルパー メソッドによって呼び出される、<xref:System.Web.UI.WebControls.FormView>コントロール内のフィールドに指定されたデータ型をバインドできるかどうかを判断します。 <xref:System.Web.UI.WebControls.FormView>コントロールは、次のデータ型をサポートしています。  
  
-   などのすべてのプリミティブ データ型<xref:System.Boolean>、 <xref:System.Byte>、<xref:System.Int32>のようにします。  
  
-   <xref:System.DateTime>  
  
-   <xref:System.Decimal>  
  
-   <xref:System.Guid>  
  
-   <xref:System.String>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>拡張するとき、<see cref="T:System.Web.UI.WebControls.FormView" />クラスを追加またはで使用できるデータ型を制限するには、このメソッドをオーバーライドすることができます、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ItemCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewCommandEventHandler ItemCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewCommandEventHandler ItemCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内のボタンのときに発生、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールをクリックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.ItemCommand>イベントは内でのボタン、<xref:System.Web.UI.WebControls.FormView>コントロールをクリックします。 これにより、このイベントが発生するたびに、カスタム ルーチンを実行するイベント処理メソッドを提供できます。  
  
 内の各ボタン、<xref:System.Web.UI.WebControls.FormView>コントロールは、コントロールの組み込み機能の一部を呼び出すもことができます。 これらの操作のいずれかを実行するのには、設定、`CommandName`に次の表に、値のいずれかのボタンのプロパティです。  
  
|CommandName 値|説明|  
|-----------------------|-----------------|  
|[キャンセル]|編集または挿入操作をキャンセルしを返します、<xref:System.Web.UI.WebControls.FormView>コントロールによって指定されたモードを<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>プロパティです。 発生させる、<xref:System.Web.UI.WebControls.FormView.ModeChanged>と<xref:System.Web.UI.WebControls.FormView.ModeChanging>イベント。|  
|"削除"|現在のレコードを削除します。 発生させる、<xref:System.Web.UI.WebControls.FormView.ItemDeleted>と<xref:System.Web.UI.WebControls.FormView.ItemDeleting>イベント。|  
|"Edit"|配置、<xref:System.Web.UI.WebControls.FormView>編集モードで制御します。 発生させる、<xref:System.Web.UI.WebControls.FormView.ModeChanged>と<xref:System.Web.UI.WebControls.FormView.ModeChanging>イベント。|  
|"Insert"|データ ソースの現在のレコードを挿入します。 発生させる、<xref:System.Web.UI.WebControls.FormView.ItemInserted>と<xref:System.Web.UI.WebControls.FormView.ItemInserting>イベント。|  
|"New"|配置、<xref:System.Web.UI.WebControls.FormView>挿入モードで制御します。 発生させる、<xref:System.Web.UI.WebControls.FormView.ModeChanged>と<xref:System.Web.UI.WebControls.FormView.ModeChanging>イベント。|  
|"Page"|ページング操作を実行します。 設定、 `CommandArgument` "First「、"最後」にあるボタン、[次へ]、「前」、またはを実行するページング操作の種類を指定するページ番号のプロパティです。 発生させる、<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>と<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>イベント。|  
|[更新]|データ ソースの現在のレコードを更新します。 発生させる、<xref:System.Web.UI.WebControls.FormView.ItemUpdated>と<xref:System.Web.UI.WebControls.FormView.ItemUpdating>イベント。|  
  
 ただし、<xref:System.Web.UI.WebControls.FormView.ItemCommand>イベントは、前の表に一覧表示 ボタンがクリックされたときに、操作の表に示されているイベントを使用することをお勧めします。  
  
 A<xref:System.Web.UI.WebControls.FormViewCommandEventArgs>オブジェクトがクリックされたボタンのコマンドの引数とコマンドの名前を決定することができるイベント処理メソッドに渡されます。 コマンドの引数とコマンドの名前を確認するには<xref:System.Web.UI.WebControls.CommandEventArgs.CommandName%2A>と<xref:System.Web.UI.WebControls.CommandEventArgs.CommandArgument%2A>プロパティ、それぞれします。 使用してイベントを発生させたコントロールをアクセスすることも、<xref:System.Web.UI.WebControls.DetailsViewCommandEventArgs.CommandSource%2A>プロパティです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.ItemCommand>でボタンのクリックを処理するイベント、<xref:System.Web.UI.WebControls.FormView>コントロール。 現在表示されている項目を追加、ユーザーは、[追加] ボタンをクリックすると、<xref:System.Web.UI.WebControls.ListBox>コントロール。  
  
 [!code-aspx-csharp[FormViewItemCommandEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewItemCommandEventArgs/CS/formviewcommandeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewItemCommandEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewItemCommandEventArgs/VB/formviewcommandeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemCreated">
      <MemberSignature Language="C#" Value="public event EventHandler ItemCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ItemCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべての行で作成した後に発生する<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.ItemCreated>ですべての行が作成された後にイベントが発生した、<xref:System.Web.UI.WebControls.FormView>コントロール。 これは、コントロールが最初にレンダリングされるときに、またはユーザーが別のレコードに移動したときに発生します。 このイベントを使用するへの追加や、このイベントが発生するたびに、行の内容の変更など、カスタムのルーチンを実行するイベント処理メソッドを提供します。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.ItemCreated>イベントが発生する前に、<xref:System.Web.UI.WebControls.FormView>コントロールがデータにバインドします。 バインドされたフィールドの値を変更するには、使用、<xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBound>イベント。  
  
 ヘッダー、フッター、およびポケットベルの行にアクセスすることができます、<xref:System.Web.UI.WebControls.FormView>コントロールを使用して、 <xref:System.Web.UI.WebControls.FormView.HeaderRow%2A>、 <xref:System.Web.UI.WebControls.FormView.FooterRow%2A>、 <xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>、または<xref:System.Web.UI.WebControls.FormView.BottomPagerRow%2A>プロパティ、それぞれします。 データ行にアクセスするには、使用、<xref:System.Web.UI.WebControls.FormView.Row%2A>プロパティです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.ItemCreated>のテキストを更新するイベント、<xref:System.Web.UI.WebControls.Label>ページャー行に含まれるコントロール。  
  
 [!code-aspx-csharp[FormViewItemCreated#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewItemCreated/CS/formviewitemcreatedcs.aspx#1)]
 [!code-aspx-vb[FormViewItemCreated#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewItemCreated/VB/formviewitemcreatedvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDeleted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewDeletedEventHandler ItemDeleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewDeletedEventHandler ItemDeleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemDeleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewDeletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内の削除 ボタンのときに発生、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがクリックされたが、削除操作の完了後します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>制御を発生させます、<xref:System.Web.UI.WebControls.FormView.ItemDeleted>イベントと削除 ボタン (ボタンがその`CommandName`プロパティが"Delete"に設定) コントロール内でをクリックした後は、<xref:System.Web.UI.WebControls.FormView>コントロールには、レコードが削除されます。 これにより、このイベントが発生するたびに、削除操作の結果を確認するなど、カスタムのルーチンを実行するイベント処理メソッドを提供できます。  
  
 A<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs>とが発生する例外の影響を受けたレコードの数を決定することができるイベント処理メソッドにオブジェクトが渡されます。 削除操作によって影響を受けたレコードの数を調べるを使用して、<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.AffectedRows%2A>プロパティです。 使用して、<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Exception%2A>プロパティを任意の例外が発生したかどうかを判断します。 設定して、イベント処理メソッドで例外が処理されたかどうかを指定することも、<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.ExceptionHandled%2A>プロパティです。 キー フィールドと、削除したレコードの非キー フィールドの名前/値ペアにアクセスする場合を使用して、<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Keys%2A>と<xref:System.Web.UI.WebControls.FormViewDeletedEventArgs.Values%2A>プロパティ、それぞれします。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、 <xref:System.Web.UI.WebControls.FormView.ItemDeleted> delete 操作中に例外が発生したかどうかを決定するイベントです。  
  
 [!code-aspx-csharp[FormViewDeletedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDeletedEventArgs/CS/formviewdeletedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewDeletedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDeletedEventArgs/VB/formviewdeletedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDeleting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewDeleteEventHandler ItemDeleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewDeleteEventHandler ItemDeleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemDeleting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewDeleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内の削除 ボタンのときに発生、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがクリックされた削除操作の前にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>昇給を制御、<xref:System.Web.UI.WebControls.FormView.ItemDeleting>イベントと削除 ボタン (ボタンがその`CommandName`プロパティが"Delete"に設定) コントロール内でクリックすると、その前に、<xref:System.Web.UI.WebControls.FormView>コントロールには、レコードが削除されます。 これにより、このイベントが発生するたびに、削除する前にレコードを検査するなど、カスタムのルーチンを実行するイベント処理メソッドを提供できます。  
  
 A<xref:System.Web.UI.WebControls.FormViewDeleteEventArgs>オブジェクトは、削除されるレコードのインデックスを確認したり、削除操作を取り消す必要があることを示すために、イベント処理メソッドに渡されます。 レコードのインデックスを確認するを使用して、<xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.RowIndex%2A>プロパティです。 削除操作をキャンセルするには設定、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>プロパティを`true`です。 使用しても、キー フィールドと非キー フィールドにアクセスすることができます、<xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.Keys%2A>と<xref:System.Web.UI.WebControls.FormViewDeleteEventArgs.Values%2A>プロパティ、それぞれします。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、 <xref:System.Web.UI.WebControls.FormView.ItemDeleting> delete 操作をキャンセルするイベントです。  
  
 [!code-aspx-csharp[FormViewDeleteEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewDeleteEventArgs/CS/formviewdeleteeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewDeleteEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewDeleteEventArgs/VB/formviewdeleteeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemInserted">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewInsertedEventHandler ItemInserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewInsertedEventHandler ItemInserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemInserted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewInsertedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内で、[挿入] ボタンのときに発生、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがクリックされたが、挿入操作の完了後します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>制御を発生させます、<xref:System.Web.UI.WebControls.FormView.ItemInserted>挿入ボタンをクリックしたときにイベント (ボタンがその`CommandName`プロパティを"Insert"に設定) コントロール内でクリックすると、後で、<xref:System.Web.UI.WebControls.FormView>コントロールは、レコードを挿入します。 これにより、このイベントが発生するたびに、挿入操作の結果を確認するなど、カスタムのルーチンを実行するイベント処理メソッドを提供できます。  
  
 A<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs>とが発生する例外の影響を受けたレコードの数を決定することができるイベント処理メソッドにオブジェクトが渡されます。 挿入操作によって影響を受けたレコードの数を確認するには<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.AffectedRows%2A>プロパティです。 使用して、<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Exception%2A>プロパティを任意の例外が発生したかどうかを判断します。 設定して、イベント処理メソッドで例外が処理されたかどうかを指定することも、<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.ExceptionHandled%2A>プロパティです。 挿入されたレコードの値にアクセスする必要がある場合、<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.Values%2A>プロパティです。  
  
 既定では、<xref:System.Web.UI.WebControls.FormView>によって指定されたモードに制御が戻る、<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>挿入操作の後のプロパティです。 保持する、<xref:System.Web.UI.WebControls.FormView>挿入モードでコントロールを設定、<xref:System.Web.UI.WebControls.FormViewInsertedEventArgs.KeepInInsertMode%2A>プロパティを`true`です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.ItemInserted>挿入操作中に例外が発生したかどうかを決定するイベントです。  
  
 [!code-aspx-csharp[FormViewInsertedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertedEventArgs/CS/formviewinsertedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewInsertedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertedEventArgs/VB/formviewinsertedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemInserting">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewInsertEventHandler ItemInserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewInsertEventHandler ItemInserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemInserting" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewInsertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内で、[挿入] ボタンのときに発生、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールをクリックすると、挿入操作の前にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>制御を発生させます、<xref:System.Web.UI.WebControls.FormView.ItemInserting>挿入ボタンをクリックしたときにイベント (ボタンがその`CommandName`プロパティを"Insert"に設定) コントロール内でクリックすると、その前に、<xref:System.Web.UI.WebControls.FormView>コントロールは、レコードを挿入します。 これにより、このイベントが発生するたびに、データ ソースに挿入する前に、レコードの値をエンコード HTML などのカスタムのルーチンを実行するイベント処理メソッドを提供できます。  
  
 A<xref:System.Web.UI.WebControls.FormViewInsertEventArgs>オブジェクトが、省略可能なコマンドに渡す引数の値を決定することができるイベント処理メソッドに渡される、<xref:System.Web.UI.WebControls.FormView>コントロールと挿入操作を取り消す必要があることを指定します。 コマンドの引数の値に対応して、`CommandArgument`プロパティの挿入 をクリックします。 ときに、 `CommandArgument` [挿入] ボタンのプロパティの設定を使用して、<xref:System.Web.UI.WebControls.FormViewInsertEventArgs.CommandArgument%2A>コマンドの引数の値を決定するプロパティです。 挿入操作をキャンセルするには設定、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>プロパティを`true`です。 読み取りまたはを使用して、新しいレコードのフィールド値を変更することができますも、<xref:System.Web.UI.WebControls.FormViewInsertEventArgs.Values%2A>プロパティです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.ItemInserting>挿入操作をキャンセルするイベントです。  
  
 [!code-aspx-csharp[FormViewInsertEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewInsertEventArgs/CS/formviewinserteventargscs.aspx#1)]
 [!code-aspx-vb[FormViewInsertEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewInsertEventArgs/VB/formviewinserteventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.ItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView), System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のカスタム コンテンツ内のデータ行を<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが読み取り専用モードの場合を制御します。</summary>
        <value>A<see cref="T:System.Web.UI.ITemplate" />データ用のカスタム コンテンツを格納しているときに行、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが読み取り専用モードになっています。 既定値は null で、このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>コントロールがコントロールの現在のモードに基づくデータ行の別のテンプレートを表示 (によって指定された、<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>プロパティ)。 次の表では、各モードで使用されるテンプレートを示します。  
  
|モード|表示されるテンプレート|  
|----------|-----------------------|  
|編集|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|  
|挿入|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|  
|読み取り専用|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|  
  
 使用して、<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>ときに行のデータの独自のユーザー インターフェイス (UI) を定義するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロールが読み取り専用モードになっています。 通常、項目テンプレートをレコードのフィールド値を表示できるだけでなく、コマンドを編集、挿入、およびレコードを削除するボタン コントロールが含まれます。  
  
 カスタム テンプレート、最初の場所を指定する`<ItemTemplate>`タグ、開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、`<ItemTemplate>`タグ。 コントロールにバインドされているデータ ソースのフィールドの値を表示するには、データ バインディング式を使用します。 データ バインド式の詳細については、次を参照してください。[データ バインディング式の構文](http://msdn.microsoft.com/en-us/676beb1d-ddfa-4153-bba8-3c86dcb7ceca)です。 組み込みの削除、編集、および新しいレコードの操作を実行するコマンド ボタンを作成するには、テンプレートにコマンド ボタン コントロールを追加、`CommandName`プロパティの値のいずれかに設定が次の表に一覧表示します。  
  
|コマンド ボタンの種類|CommandName 値|  
|-------------------------|-----------------------|  
|削除|"削除"|  
|編集|"Edit"|  
|新規作成|"New"|  
  
 使用して項目テンプレートの外観を制御することができます、<xref:System.Web.UI.WebControls.FormView.RowStyle%2A>プロパティです。  
  
   
  
## Examples  
 次の例では、読み取り専用モードでのデータ行のカスタム テンプレートを定義する方法を示します。  
  
 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemUpdated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewUpdatedEventHandler ItemUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewUpdatedEventHandler ItemUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemUpdated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewUpdatedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内での更新ボタンときに発生、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがクリックされたが、更新操作の完了後します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>制御を発生させます、<xref:System.Web.UI.WebControls.FormView.ItemUpdated>更新ボタンをクリックしたときにイベント (ボタンをその`CommandName`プロパティが「更新」に設定) コントロール内でをクリックした後は、<xref:System.Web.UI.WebControls.FormView>コントロールは、レコードを更新します。 これにより、このイベントが発生するたびに、更新操作の結果を確認するなど、カスタムのルーチンを実行するイベント処理メソッドを提供できます。  
  
 A<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs>とが発生する例外の影響を受けたレコードの数を決定することができるイベント処理メソッドにオブジェクトが渡されます。 更新操作によって影響を受けたレコードの数を確認するには<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.AffectedRows%2A>プロパティです。 使用して、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Exception%2A>プロパティを任意の例外が発生したかどうかを判断します。 設定して、イベント処理メソッドで例外が処理されたかどうかを指定することも、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.ExceptionHandled%2A>プロパティです。 更新されたレコードのキー フィールドの値にアクセスする必要がある場合、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>プロパティです。 元と更新された非キー フィールドの値を使用してアクセスできる、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>と<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.NewValues%2A>プロパティ、それぞれします。  
  
 既定では、<xref:System.Web.UI.WebControls.FormView>によって指定されたモードに制御が戻る、<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>更新操作の後のプロパティです。 保持する、<xref:System.Web.UI.WebControls.FormView>編集モードでコントロールを設定、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.KeepInEditMode%2A>プロパティを`true`です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.ItemUpdated>更新操作中に例外が発生したかどうかを決定するイベントです。  
  
 [!code-aspx-csharp[FormViewUpdatedEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdatedEventArgs/CS/formviewupdatedeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdatedEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdatedEventArgs/VB/formviewupdatedeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemUpdating">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewUpdateEventHandler ItemUpdating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewUpdateEventHandler ItemUpdating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ItemUpdating" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewUpdateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内での更新ボタンときに発生、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールをクリックすると、更新操作の前にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>昇給を制御、<xref:System.Web.UI.WebControls.FormView.ItemUpdating>更新ボタンをクリックしたときにイベント (ボタンがその`CommandName`プロパティが「更新」に設定) コントロール内でクリックすると、その前に、<xref:System.Web.UI.WebControls.FormView>コントロールは、レコードを更新します。 これにより、このイベントが発生するたびに、データ ソースで更新する前に、レコードの値をエンコード HTML などのカスタムのルーチンを実行するイベント処理メソッドを提供できます。  
  
 A<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs>オブジェクトが、省略可能なコマンドに渡す引数の値を決定することができるイベント処理メソッドに渡される、<xref:System.Web.UI.WebControls.FormView>コントロールと更新操作を取り消す必要があることを指定します。 コマンドの引数の値に対応して、`CommandArgument`更新ボタンのプロパティです。 ときに、`CommandArgument`更新ボタンのプロパティの設定を使用して、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.CommandArgument%2A>コマンドの引数の値を決定するプロパティです。 更新操作をキャンセルするには設定、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>プロパティを`true`です。 読み取りまたはを使用して、ユーザーが入力した新しい値を変更することができますも、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.Keys%2A>と<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>プロパティです。 <xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.Keys%2A>プロパティには、キーのフィールドが含まれています。 中に、<xref:System.Web.UI.WebControls.FormViewUpdateEventArgs.NewValues%2A>プロパティには、非キー フィールドが含まれています。 元のキー以外のフィールド値にアクセスする必要がある場合、<xref:System.Web.UI.WebControls.FormViewUpdatedEventArgs.OldValues%2A>プロパティです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.ItemUpdating>更新操作をキャンセルするイベントです。  
  
 [!code-aspx-csharp[FormViewUpdateEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdateEventArgs/CS/formviewupdateeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewUpdateEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdateEventArgs/VB/formviewupdateeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadControlState">
      <MemberSignature Language="C#" Value="protected override void LoadControlState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void LoadControlState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.LoadControlState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Object" />の状態を表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</param>
        <summary>状態を読み込み、<see cref="T:System.Web.UI.WebControls.FormView" />場合でも、永続化する必要があるコントロールのプロパティ、<see cref="P:System.Web.UI.Control.EnableViewState" />プロパティに設定されている<see langword="false" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.LoadControlState%2A>の状態を読み込むメソッドを使用、<xref:System.Web.UI.WebControls.FormView>場合でも、永続化する必要があるコントロールのプロパティ、<xref:System.Web.UI.Control.EnableViewState%2A>プロパティに設定されている`false`です。  
  
> [!NOTE]
>  拡張する場合、このメソッドは、主にコントロールの開発者によって使用、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Object" />の状態を表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</param>
        <summary>以前に保存した <see cref="T:System.Web.UI.WebControls.FormView" /> コントロールのビュー ステートを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.LoadViewState%2A>メソッドはの以前に保存したビューステートの読み込みに使用、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
> [!NOTE]
>  拡張する場合、このメソッドは、主にコントロールの開発者によって使用、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ModeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、<see cref="T:System.Web.UI.WebControls.FormView" />編集、挿入、および読み取り専用モードの間ですが、モードが変更された後のスイッチを制御します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.ModeChanged>イベントが発生したときに、<xref:System.Web.UI.WebControls.FormView>コントロールが編集、挿入、および読み取り専用モードでは、間が、実際に変更すると、モードを切り替えるしようとしました。 これにより、同期など、カスタムのルーチンを実行するイベント処理メソッドを提供する、<xref:System.Web.UI.WebControls.FormView>このイベントが発生するたびに、別のコントロールでのコントロールです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.ModeChanged>のヘッダー行に現在のモードを表示するイベント、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 [!code-aspx-csharp[FormViewModeChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewModeChanged/CS/formviewmodechangedcs.aspx#1)]
 [!code-aspx-vb[FormViewModeChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewModeChanged/VB/formviewmodechangedvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModeChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewModeEventHandler ModeChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewModeEventHandler ModeChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.ModeChanging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewModeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに、<see cref="T:System.Web.UI.WebControls.FormView" />モードの変更の前にですが、編集、挿入、および読み取り専用モードの間でのスイッチを制御します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.ModeChanging>イベントが発生したときに、<xref:System.Web.UI.WebControls.FormView>コントロールは、モードが実際に変更前に、編集、挿入、および読み取り専用モードの間の切り替えを試行します。 これにより、構成など、カスタムのルーチンを実行するイベント処理メソッドを提供する、<xref:System.Web.UI.WebControls.FormView>特定のモードを制御したり、このイベントが発生するたびにモードの変更をキャンセルします。  
  
 A<xref:System.Web.UI.WebControls.FormViewModeEventArgs>するモードを決定することができるイベント処理メソッドにオブジェクトが渡される、<xref:System.Web.UI.WebControls.FormView>を決定するコントロールを切り替えるかどうか、<xref:System.Web.UI.WebControls.FormView.ModeChanging>編集操作を取り消すユーザーの結果として、または挿入操作を取り消す必要があることを示すために、イベントが発生しました。 新しいモードを確認するには<xref:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode%2A>プロパティです。 使用することも、<xref:System.Web.UI.WebControls.FormViewModeEventArgs.NewMode%2A>プロパティのいずれかに設定することによって別のモードに切り替えるには、<xref:System.Web.UI.WebControls.FormViewMode>列挙値。 使用して、<xref:System.Web.UI.WebControls.FormViewModeEventArgs.CancelingEdit%2A>プロパティをユーザーが編集操作を取り消すかどうかを判断します。 挿入操作をキャンセルするには設定、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>プロパティを`true`です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.ModeChanging>ポケットベルを非表示にするイベント行の場合、<xref:System.Web.UI.WebControls.FormView>編集モードに切り替え効果を制御します。  
  
 [!code-aspx-csharp[FormViewModeEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewModeEventArgs/CS/formviewmodeeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewModeEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewModeEventArgs/VB/formviewmodeeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifiedOuterTableStylePropertyName">
      <MemberSignature Language="C#" Value="protected virtual string ModifiedOuterTableStylePropertyName ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string ModifiedOuterTableStylePropertyName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.ModifiedOuterTableStylePropertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>テーブルに固有の CSS スタイル ルールに関連付けられているのかどうかを判断、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールは、既定値に設定されます。</summary>
        <returns>既定の CSS スタイル規則に関連付けられている、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 テーブルに固有の CSS スタイル規則が使用して、既定値に設定されて、 <xref:System.Web.UI.WebControls.FormView.BackImageUrl%2A>、 <xref:System.Web.UI.WebControls.FormView.CellPadding%2A>、 <xref:System.Web.UI.WebControls.FormView.CellSpacing%2A>、 <xref:System.Web.UI.WebControls.FormView.GridLines%2A>、<xref:System.Web.UI.WebControls.FormView.HorizontalAlign%2A>と<xref:System.Web.UI.WebControls.Style.Font%2A>プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBubbleEvent">
      <MemberSignature Language="C#" Value="protected override bool OnBubbleEvent (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnBubbleEvent(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnBubbleEvent(System.Object,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">イベントのソース。</param>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>コントロールの階層から渡されたイベントを処理します。</summary>
        <returns>
          <see langword="true" />イベントを示すために渡す必要があるコントロールの階層構造です。それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.Control.OnBubbleEvent%2A?displayProperty=nameWithType>コントロールによって必要に応じて、コントロールの階層から渡されたイベントを処理するメソッドが使用される、<xref:System.Web.UI.Control.RaiseBubbleEvent%2A>メソッドです。 プロパティを調べることで、イベントを処理するかどうかを決定が、<xref:System.EventArgs>に含まれているオブジェクト、`e`パラメーター。 イベントを処理する必要がある場合、メソッドは、適切な操作を実行します。 その他のイベントは無視され、コントロールの階層に渡されます。 このメソッドでは、その戻り値を使用してコントロールの階層構造でさらに、イベントを渡すかどうかを示します。  
  
 <xref:System.Web.UI.WebControls.FormView>コントロールがコントロールによって認識されるボタンのいずれかがクリックされたときに、適切な操作を実行するには、このメソッドの基本実装をオーバーライドします。 次の表のコマンドは、ボタン、<xref:System.Web.UI.WebControls.FormView>コントロールによって認識します。  
  
|ボタン|CommandName 値|説明|  
|------------|-----------------------|-----------------|  
|キャンセル|[キャンセル]|操作をキャンセルして、ユーザーが入力した値を破棄する更新操作または挿入に使用されます。 <xref:System.Web.UI.WebControls.FormView>によって指定されたモードを返しますの制御、<xref:System.Web.UI.WebControls.FormView.DefaultMode%2A>プロパティです。|  
|削除|"削除"|データ ソースから表示されているレコードを削除する削除操作で使用します。 発生させる、<xref:System.Web.UI.WebControls.FormView.ItemDeleting>と<xref:System.Web.UI.WebControls.FormView.ItemDeleted>イベント。|  
|編集|"Edit"|更新操作で配置するために使用、<xref:System.Web.UI.WebControls.FormView>編集モードで制御します。 指定されたコンテンツ、<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>データ行のプロパティが表示されます。|  
|挿入|"Insert"|挿入操作で、ユーザーが指定した値を使用して、データ ソースで新しいレコードを挿入しようとするために使用します。 発生させる、<xref:System.Web.UI.WebControls.FormView.ItemInserting>と<xref:System.Web.UI.WebControls.FormView.ItemInserted>イベント。|  
|新規作成|"New"|配置する挿入操作で使用される、<xref:System.Web.UI.WebControls.FormView>挿入モードで制御します。 指定されたコンテンツ、<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>データ行のプロパティが表示されます。|  
|ページ|"Page"|ページング操作でページングを実行する、ページャー ボタンを表すために使用します。 ページング操作を指定するには、設定、 `CommandArgument` [次へ]、「前」、"First"、「最新」、または移動先ページのインデックスにあるボタンのプロパティです。 発生させる、<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>と<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>イベント。 **注:**この種類のボタンは通常、ポケットベル テンプレートでのみ使用します。|  
|更新|[更新]|更新操作で、ユーザーが指定した値を使用して、データ ソースに表示されているレコードを更新しようとするために使用します。 発生させる、<xref:System.Web.UI.WebControls.FormView.ItemUpdating>と<xref:System.Web.UI.WebControls.FormView.ItemUpdated>イベント。|  
  
 このバージョンのメソッドを返します`true`は処理これらのボタンのいずれか。 イベントのバブルの詳細については、次を参照してください。 [NIB: イベントとデリゲート](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>拡張するとき、<see cref="T:System.Web.UI.WebControls.FormView" />クラス、独自のイベントを処理するには、このメソッドをオーバーライドすることができます。 イベントをコントロールの階層の上位に渡される必要があるかどうかを示すために、戻り値を使用することを確認してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.Control.Init" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnInit%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.Control.Init>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnInit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnInit(System.EventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCommand (System.Web.UI.WebControls.FormViewCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCommand(class System.Web.UI.WebControls.FormViewCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.FormViewCommandEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.ItemCommand" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemCommand%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.ItemCommand>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemCommand%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnItemCommand(System.Web.UI.WebControls.FormViewCommandEventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.ItemCreated" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemCreated%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.ItemCreated>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemCreated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnItemCreated(System.EventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDeleted">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDeleted (System.Web.UI.WebControls.FormViewDeletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDeleted(class System.Web.UI.WebControls.FormViewDeletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewDeletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.FormViewDeletedEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.ItemDeleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemDeleted%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.ItemDeleted>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemDeleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleted(System.Web.UI.WebControls.FormViewDeletedEventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDeleting">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDeleting (System.Web.UI.WebControls.FormViewDeleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDeleting(class System.Web.UI.WebControls.FormViewDeleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewDeleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.FormViewDeleteEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.ItemDeleting" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemDeleting%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.ItemDeleting>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemDeleting%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">このメソッドが呼び出されます、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがデータ ソース コントロールにバインドされていない、ユーザーが、削除操作をキャンセルしていないと、イベントのイベント ハンドラーが登録されていません。</exception>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnItemDeleting(System.Web.UI.WebControls.FormViewDeleteEventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemInserted">
      <MemberSignature Language="C#" Value="protected virtual void OnItemInserted (System.Web.UI.WebControls.FormViewInsertedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemInserted(class System.Web.UI.WebControls.FormViewInsertedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewInsertedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.FormViewInsertedEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.ItemInserted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemInserted%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.ItemInserted>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemInserted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserted(System.Web.UI.WebControls.FormViewInsertedEventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemInserting">
      <MemberSignature Language="C#" Value="protected virtual void OnItemInserting (System.Web.UI.WebControls.FormViewInsertEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemInserting(class System.Web.UI.WebControls.FormViewInsertEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewInsertEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.FormViewInsertEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.ItemInserting" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemInserting%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.ItemInserting>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemInserting%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">このメソッドが呼び出されます、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがデータ ソース コントロールにバインドされていない、ユーザーが、挿入操作をキャンセルしていないと、イベントのイベント ハンドラーが登録されていません。</exception>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnItemInserting(System.Web.UI.WebControls.FormViewInsertEventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemUpdated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemUpdated (System.Web.UI.WebControls.FormViewUpdatedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemUpdated(class System.Web.UI.WebControls.FormViewUpdatedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.FormViewUpdatedEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.ItemUpdated" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemUpdated%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.ItemUpdated>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemUpdated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdated(System.Web.UI.WebControls.FormViewUpdatedEventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemUpdating">
      <MemberSignature Language="C#" Value="protected virtual void OnItemUpdating (System.Web.UI.WebControls.FormViewUpdateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemUpdating(class System.Web.UI.WebControls.FormViewUpdateEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewUpdateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.FormViewUpdateEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.ItemUpdating" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnItemUpdating%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.ItemUpdating>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnItemUpdating%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">このメソッドが呼び出されます、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがデータ ソース コントロールにバインドされていない、ユーザーが、更新操作をキャンセルしていないと、イベントのイベント ハンドラーが登録されていません。</exception>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnItemUpdating(System.Web.UI.WebControls.FormViewUpdateEventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.ModeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnModeChanged%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.ModeChanged>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnModeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanged(System.EventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnModeChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnModeChanging (System.Web.UI.WebControls.FormViewModeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnModeChanging(class System.Web.UI.WebControls.FormViewModeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewModeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.FormViewModeEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.ModeChanging" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnModeChanging%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.ModeChanging>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnModeChanging%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">このメソッドが呼び出されます、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがデータ ソース コントロールにバインドされていない、モードの変更が取り消されないとイベントのイベント ハンドラーが登録されていません。</exception>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnModeChanging(System.Web.UI.WebControls.FormViewModeEventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPageIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPageIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPageIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanged%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanged(System.EventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPageIndexChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPageIndexChanging (System.Web.UI.WebControls.FormViewPageEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPageIndexChanging(class System.Web.UI.WebControls.FormViewPageEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.FormViewPageEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Web.UI.WebControls.FormViewPageEventArgs" />。</param>
        <summary><see cref="E:System.Web.UI.WebControls.FormView.PageIndexChanging" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanging%2A>メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>させるコントロール、<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>イベント。 通常は、使用コントロールの開発者によって拡張するとき、<xref:System.Web.UI.WebControls.FormView>クラスです。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)です。  
  
 <xref:System.Web.UI.WebControls.FormView.OnPageIndexChanging%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">このメソッドが呼び出されます、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールがデータ ソース コントロールにバインドされていない、ページング操作が取り消されないとイベントのイベント ハンドラーが登録されていません。</exception>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Web.UI.WebControls.FormView.OnPageIndexChanging(System.Web.UI.WebControls.FormViewPageEventArgs)" /> メソッドを呼び出してください。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PageCount">
      <MemberSignature Language="C#" Value="public virtual int PageCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PageCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ ソース内のすべてのレコードを表示するために必要なページの合計数を取得します。</summary>
        <value>基になるデータ ソース内の項目の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ページング機能が有効な場合 (ときに、<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>プロパティに設定されている`true`) を使用して、<xref:System.Web.UI.WebControls.FormView.PageCount%2A>プロパティを基になるデータ ソース内のレコードの合計数を決定します。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView>コントロールは、一度に 1 つのレコードを表示、この値は、データ ソース内のすべてのレコードを表示するために必要なページの合計数に対応しています。 データ バインディングが発生した後、この値はまで正確ではありません。  
  
 基になるデータ ソースから現在のレコードのインデックスを確認するを使用して、<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>プロパティです。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.PageCount%2A>プロパティをコントロールに表示されるレコードの合計数を決定します。  
  
 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageIndex">
      <MemberSignature Language="C#" Value="public virtual int PageIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PageIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PageIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または表示されるページのインデックスを設定します。</summary>
        <value>表示されているデータ項目の 0 から始まるインデックス、<see cref="T:System.Web.UI.WebControls.FormView" />基になるデータ ソースからです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ページング機能が有効な場合 (ときに、<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>プロパティに設定されている`true`) を使用して、<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>プロパティを現在表示されているレコードのインデックスを確認します。 このプロパティを使用して、プログラムで表示されているレコードを変更することができますも。  
  
> [!NOTE]
>  表示されます。 レコードのページ数を決定するのにこのプロパティを使用することができますページング機能を有効にすると、ただし、このプロパティは、0 から始まることに注意してください。  
  
 データ ソース内の項目の合計数を調べるを使用して、<xref:System.Web.UI.WebControls.FormView.PageCount%2A>プロパティです。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>プロパティを表示されているレコードのページ インデックスを確認します。  
  
 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">選択した値は、-1 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="PageIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PageIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PageIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.PageIndexChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときの値、<see cref="P:System.Web.UI.WebControls.FormView.PageIndex" />ページング操作の後にプロパティが変更されました。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>制御を発生させます、<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>ページャー ボタンをクリックしたときにイベント (ボタンをその`CommandName`プロパティを「ページ」に設定) コントロール内でをクリックした後は、<xref:System.Web.UI.WebControls.FormView>コントロールは、ページング操作を処理します。 これにより、このイベントが発生するたびに、カスタム ルーチンを実行するイベント処理メソッドを提供できます。  
  
> [!NOTE]
>  プログラムで設定すると、このイベントは発生しませんが、<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>プロパティです。  
  
 ページャー ボタンに通常のページャー行にある、<xref:System.Web.UI.WebControls.FormView>コントロール。 このイベントは、多くの場合、同期するために使用、<xref:System.Web.UI.WebControls.FormView>コントロールを<xref:System.Web.UI.WebControls.GridView>コントロールの動作を設定するか、<xref:System.Web.UI.WebControls.FormView>ページング操作の後に制御します。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.PageIndexChanged>に返すイベント、<xref:System.Web.UI.WebControls.FormView>ユーザーが別のレコードに移動したときの読み取り専用モードにします。  
  
 [!code-aspx-csharp[FormViewPageIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPageIndexChanged/CS/formviewpageindexchangedcs.aspx#1)]
 [!code-aspx-vb[FormViewPageIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPageIndexChanged/VB/formviewpageindexchangedvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageIndexChanging">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.FormViewPageEventHandler PageIndexChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.FormViewPageEventHandler PageIndexChanging" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.FormView.PageIndexChanging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewPageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときの値、<see cref="P:System.Web.UI.WebControls.FormView.PageIndex" />ページング操作の前にプロパティが変更されました。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView>昇給を制御、 <xref:System.Web.UI.WebControls.FormView.PageIndexChanging> 、ページャー ボタンをクリックしたときにイベント (ボタンがその`CommandName`プロパティを「ページ」に設定) コントロール内でクリックすると、その前に、<xref:System.Web.UI.WebControls.FormView>コントロールは、ページング操作を処理します。 これにより、このイベントが発生するたびに、ページング操作の取り消しなどのカスタムのルーチンを実行するイベント処理メソッドを提供できます。  
  
> [!NOTE]
>  プログラムで設定すると、このイベントは発生しませんが、<xref:System.Web.UI.WebControls.FormView.PageIndex%2A>プロパティです。  
  
 ページャー ボタンに通常のページャー行にある、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 A<xref:System.Web.UI.WebControls.FormViewPageEventArgs>オブジェクトが、ユーザーが選択したページのインデックスを確認したり、ページング操作を取り消す必要があることを示すために、イベント処理メソッドに渡されます。 ユーザーが選択したページのインデックスを確認するには<xref:System.Web.UI.WebControls.FormViewPageEventArgs.NewPageIndex%2A>プロパティです。 ページング操作をキャンセルするには設定、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Web.UI.WebControls.FormViewPageEventArgs>オブジェクトを`true`です。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)です。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.PageIndexChanging>ページング操作をキャンセルするイベントです。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスがあります。これにより、セキュリティが脆弱になる可能性があります。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、次を参照してください。[スクリプト悪用概要](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)です。  
  
 [!code-aspx-csharp[FormViewPageEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPageEventArgs/CS/formviewmodeeventargscs.aspx#1)]
 [!code-aspx-vb[FormViewPageEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPageEventArgs/VB/formviewmodeeventargsvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PagerSettings">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.PagerSettings PagerSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.PagerSettings PagerSettings" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PagerSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.PagerSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>参照を取得、<see cref="T:System.Web.UI.WebControls.PagerSettings" />でページャー ボタンのプロパティを設定できるようにするオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>参照、<see cref="T:System.Web.UI.WebControls.PagerSettings" />でページャー ボタンのプロパティを設定することができます、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.PagerSettings%2A>のページャー行の設定を制御するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。 ページャー行を表示すると、ページング機能が有効になっているときに (ときに、<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>プロパティに設定されている`true`)、ユーザーがコントロール内の別のレコードに移動できるようにするコントロールが含まれています。 このプロパティは読み取り専用です。ただしのプロパティを設定することができます、<xref:System.Web.UI.WebControls.PagerSettings>オブジェクトを返します。 フォームのプロパティを宣言して設定されることができます`Property-Subproperty`ここで、`Subproperty`のプロパティ、<xref:System.Web.UI.WebControls.PagerSettings>オブジェクト (たとえば、 `PagerSettings-Mode`)。 プロパティがフォームにプログラムで設定することもできます`Property.Subproperty`(たとえば、 `PagerSettings.Mode`)。 通常、一般的な設定には、ポケットベルによる行の表示モードとカスタム テキスト、またはナビゲーション コントロールのイメージが含まれます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.PagerSettings%2A>ページャー行のプロパティを指定するプロパティです。  
  
 [!code-aspx-csharp[FormViewAllowPaging#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewAllowPaging/CS/formviewallowpagingcs.aspx#1)]
 [!code-aspx-vb[FormViewAllowPaging#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewAllowPaging/VB/formviewallowpagingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PagerStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle PagerStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle PagerStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PagerStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>参照を取得、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />のページャー行の外観を設定できるようにするオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>参照、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />のページャー行のスタイルを表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>のページャー行の外観を制御するプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。 ページャー行を表示すると、ページング機能が有効になっているときに (ときに、<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>プロパティに設定されている`true`)、ユーザーがコントロール内の別のページに移動できるようにするコントロールが含まれています。 このプロパティは読み取り専用です。ただしのプロパティを設定することができます、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクトを返します。 プロパティを設定するには、次のいずれかを使用して宣言します。  
  
-   開始タグに属性を配置、<xref:System.Web.UI.WebControls.FormView>フォームでコントロール`Property-Subproperty`ここで、`Subproperty`のプロパティ、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクト (たとえば、 `PagerStyle-ForeColor`)。  
  
-   入れ子、`<PagerRowStyle>`要素開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 プロパティがフォームにプログラムで設定することもできます`Property.Subproperty`(たとえば、 `PagerStyle.ForeColor`)。 通常、一般的な設定には、カスタムの背景色、前景色、およびフォントのプロパティが含まれます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>ページャー行のスタイルの設定を指定するプロパティです。  
  
 [!code-aspx-csharp[FormViewAllowPaging#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewAllowPaging/CS/formviewallowpagingcs.aspx#1)]
 [!code-aspx-vb[FormViewAllowPaging#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewAllowPaging/VB/formviewallowpagingvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PagerTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate PagerTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate PagerTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.PagerTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.FormView))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のカスタム コンテンツのページャー行を<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>A<see cref="T:System.Web.UI.ITemplate" />ページャー行のカスタム コンテンツを格納しています。 既定値は null で、このプロパティが設定されていないことを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ページャー行が表示されます、<xref:System.Web.UI.WebControls.FormView>制御ページング機能が有効な場合 (ときに、<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>プロパティが設定を true に)。 ページャー行には、ユーザーがコントロール内の別のページに移動できるようにするコントロールが含まれています。 使用して、独自の UI を定義する組み込みのページャー行ユーザー インターフェイス (UI) を使用する代わりに、<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>プロパティです。  
  
> [!NOTE]
>  ときに、<xref:System.Web.UI.WebControls.FormView.PagerTemplate%2A>プロパティが設定されて、組み込みのページャー行 UI をオーバーライドします。  
  
 ページャー行用のカスタム テンプレートを指定するには、まず配置`<PagerTemplate>`タグ、開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。 開始タグと終了の間でテンプレートの内容の一覧を表示することができますし、`<PagerTemplate>`タグ。 ページャー行の外観を制御する、<xref:System.Web.UI.WebControls.FormView.PagerStyle%2A>プロパティです。  
  
 通常、ボタン コントロールは、ページング操作を実行するポケットベル テンプレートに追加されます。 <xref:System.Web.UI.WebControls.FormView>コントロールはときに、ボタン コントロールのページング操作を実行、 `CommandName` 「ページ」に設定するプロパティをクリックします。 ボタンの`CommandArgument`プロパティを実行するページング操作の種類を決定します。 次の表は、コマンド引数の値でサポートされている、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
|CommandArgument 値|説明|  
|---------------------------|-----------------|  
|[次へ]|次のページに移動します。|  
|「前」|前のページに移動します。|  
|"First"|最初のページに移動します。|  
|[最終]|最後のページに移動します。|  
|整数値|指定したページ番号に移動します。|  
  
   
  
## Examples  
 次の例では、ポケットベルのカスタム テンプレートを定義する方法を示します。  
  
 [!code-aspx-csharp[FormViewPagerTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewPagerTemplate/CS/formviewpagertemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewPagerTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewPagerTemplate/VB/formviewpagertemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformDataBinding">
      <MemberSignature Language="C#" Value="protected override void PerformDataBinding (System.Collections.IEnumerable data);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void PerformDataBinding(class System.Collections.IEnumerable data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.PerformDataBinding(System.Collections.IEnumerable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="data">データ ソースを表す <see cref="T:System.Collections.IEnumerable" />。</param>
        <summary>指定したデータ ソースへのバインド、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.PerformDataBinding%2A>メソッドは、ヘルパー メソッドによって呼び出される、<xref:System.Web.UI.WebControls.FormView>コントロールのコントロールに指定されたデータ ソースをバインドします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><see cref="M:System.Web.UI.WebControls.BaseDataBoundControl.DataBind" />メソッドはシールされているデータをバインドするときに、その他のタスクを実行する必要がある場合は、このメソッドをオーバーライドする必要があります。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PrepareControlHierarchy">
      <MemberSignature Language="C#" Value="protected virtual void PrepareControlHierarchy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void PrepareControlHierarchy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.PrepareControlHierarchy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールの上位階層の設定、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.PrepareControlHierarchy%2A>メソッドは、ヘルパー メソッドによって呼び出されます、<xref:System.Web.UI.WebControls.FormView>コントロールでコントロールの階層を設定する、<xref:System.Web.UI.WebControls.FormView>コントロールが表示される前に制御します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">作成元のイベントの引数、<see cref="T:System.Web.UI.WebControls.CommandEventArgs" />イベントかが発生するイベントです。</param>
        <summary>適切なイベントを発生させる、<see cref="T:System.Web.UI.WebControls.FormView" />サーバーへのポストバック時に制御します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ページの呼び出し、<xref:System.Web.UI.WebControls.FormView.RaisePostBackEvent%2A>ポストバック イベントが発生したときに、メソッドの適切なイベントを発生させる、<xref:System.Web.UI.WebControls.FormView>コントロール。 この呼び出しは、事前に発生する前に、読み込みと変更の通知が完了したら、ページのライフ サイクルで発生します。 作成するこのメソッドが実装されて、<xref:System.Web.UI.WebControls.CommandEventArgs>が発生するイベントのオブジェクト。  
  
> [!NOTE]
>  このメソッドが拡張するコントロールの開発者によって、主に使用、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><see cref="T:System.Web.UI.HtmlTextWriter" />クライアントで表示する出力ストリームを格納しています。</param>
        <summary>クライアントに <see cref="T:System.Web.UI.WebControls.FormView" /> コントロールを表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.Render%2A>メソッドを指定して、クライアントのブラウザーにサーバー コントロールの内容を表示するために使用<xref:System.Web.UI.HtmlTextWriter>オブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderOuterTable">
      <MemberSignature Language="C#" Value="public virtual bool RenderOuterTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderOuterTable" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.RenderOuterTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロールがでレンダリングされる HTML を囲むかどうかを示す値を設定、<see langword="table" />インライン スタイルを適用するために要素。</summary>
        <value>
          <see langword="true" />コントロールは、レンダリングされた HTML の場合、<see langword="table" />要素、それ以外の<see langword="false" />します。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ようなインライン スタイル プロパティを設定するために<xref:System.Web.UI.WebControls.WebControl.ForeColor%2A>コントロールに表示されるすべての HTML に適用されます、ASP.NET を囲むでレンダリングされる HTML、`table`要素。 場合は、外側しないようにする`table`レンダリングされる要素では、このプロパティを設定`false`です。 その場合は、インライン コントロール全体に適用されるスタイル プロパティを設定しようとすると、例外がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Row">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow Row { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow Row" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.Row" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Web.UI.WebControls.FormViewRow" />内のデータ行を表すオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value><see cref="T:System.Web.UI.WebControls.FormViewRow" />内のデータ行を表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.Row%2A>プロパティにプログラムでアクセス、<xref:System.Web.UI.WebControls.FormViewRow>データ行を表すオブジェクト。 データ行には現在のモードをレンダリングするテンプレートに基づくさまざまなコンテンツが含まれています (によって指定された、<xref:System.Web.UI.WebControls.FormView.CurrentMode%2A>プロパティ)。 現在のモードのテンプレートの内容のみアクセスできます。 次の表では、各モードで使用されるテンプレートを示します。  
  
|モード|表示されるテンプレート|  
|----------|-----------------------|  
|編集|<xref:System.Web.UI.WebControls.FormView.EditItemTemplate%2A>|  
|挿入|<xref:System.Web.UI.WebControls.FormView.InsertItemTemplate%2A>|  
|読み取り専用|<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>|  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.Row%2A>プロパティは、使用した場合にのみ、<xref:System.Web.UI.WebControls.FormView>コントロール内のデータ行の作成、<xref:System.Web.UI.WebControls.FormView.ItemCreated>イベント。  
  
 たとえば、カスタム コンテンツを追加するときに、データ行をプログラムで操作する必要がある場合、このプロパティは使用一般的です。 変更を加える、<xref:System.Web.UI.WebControls.FormView.Row%2A>プロパティは、後に実行する必要があります、<xref:System.Web.UI.WebControls.FormView>データ バインド、それ以外のコントロールが表示された、<xref:System.Web.UI.WebControls.FormView>コントロールには、すべての変更が上書きされます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.Row%2A>中に、データ行のプロパティにアクセスするプロパティ、<xref:System.Web.UI.WebControls.FormView.ItemCreated>イベント。  
  
 [!code-aspx-csharp[FormViewRow#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewRow/CS/formviewrowcs.aspx#1)]
 [!code-aspx-vb[FormViewRow#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewRow/VB/formviewrowvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowStyle">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.TableItemStyle RowStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle RowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.RowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>参照を取得、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />内のデータ行の外観を設定できるようにするオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが読み取り専用モードの場合を制御します。</summary>
        <value>参照、<see cref="T:System.Web.UI.WebControls.TableItemStyle" />内のデータ行のスタイルを表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが読み取り専用モードの場合を制御します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.WebControls.FormView.RowStyle%2A>プロパティは、データの外観を制御する行、<xref:System.Web.UI.WebControls.FormView>コントロールが読み取り専用 (表示) モードにします。 ときに、<xref:System.Web.UI.WebControls.FormView>コントロールが読み取り専用モードでは、データ行で指定されたユーザー定義コンテンツが表示されます、<xref:System.Web.UI.WebControls.FormView.ItemTemplate%2A>プロパティです。 このプロパティは読み取り専用です。ただしのプロパティを設定することができます、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクトを返します。 プロパティを設定するには、次のいずれかを使用して宣言します。  
  
-   開始タグに属性を配置、<xref:System.Web.UI.WebControls.FormView>フォームでコントロール`Property-Subproperty`ここで、`Subproperty`のプロパティ、<xref:System.Web.UI.WebControls.TableItemStyle>オブジェクト (たとえば、 `RowStyle-ForeColor`)。  
  
-   入れ子、`<RowStyle>`要素開始タグと終了タグの間、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 プロパティがフォームにプログラムで設定することもできます`Property.Subproperty`(たとえば、 `RowStyle.ForeColor`)。 通常、一般的な設定には、カスタムの背景色、前景色、およびフォントのプロパティが含まれます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.RowStyle%2A>行のプロパティをデータのカスタム スタイルを指定するときに、<xref:System.Web.UI.WebControls.FormView>コントロールが読み取り専用モードです。  
  
 [!code-aspx-csharp[FormViewEditItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewEditItemTemplate/CS/formviewedititemtemplatecs.aspx#1)]
 [!code-aspx-vb[FormViewEditItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewEditItemTemplate/VB/formviewedititemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveControlState">
      <MemberSignature Language="C#" Value="protected override object SaveControlState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object SaveControlState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.SaveControlState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>状態を保存、<see cref="T:System.Web.UI.WebControls.FormView" />場合でも、永続化する必要があるコントロールのプロパティ、<see cref="P:System.Web.UI.Control.EnableViewState" />プロパティに設定されている<see langword="false" />です。</summary>
        <returns>サーバー コントロールの現在のビューステートを返します。 コントロールに関連付けられているビューステートがない場合、メソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの状態を保存するために使用、<xref:System.Web.UI.WebControls.FormView>場合でも、永続化する必要があるコントロールのプロパティ、<xref:System.Web.UI.Control.EnableViewState%2A?displayProperty=nameWithType>プロパティに設定されている`false`です。  
  
> [!NOTE]
>  このメソッドが拡張するコントロールの開発者によって、主に使用、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のビューステートを保存、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <returns><see cref="T:System.Web.UI.WebControls.FormView" /> コントロールの保存された状態を格納している <see cref="T:System.Object" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.SaveViewState%2A>メソッドは、ヘルパー メソッドによって呼び出される、<xref:System.Web.UI.WebControls.FormView>コントロール、コントロールの状態を保存します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedValue">
      <MemberSignature Language="C#" Value="public object SelectedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.SelectedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のレコードのデータのキー値を取得、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>データのキー値の現在のレコード、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>プロパティが設定されて、<xref:System.Web.UI.WebControls.FormView>コントロールが自動的に作成、<xref:System.Web.UI.WebControls.DataKey>の複数のフィールドに表示されているキー/値ペアを格納しているオブジェクト、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>現在のレコードのプロパティです。 <xref:System.Web.UI.WebControls.DataKey>オブジェクトは、主キー フィールドまたは現在のレコードのフィールドを表しに格納されて、<xref:System.Web.UI.WebControls.FormView.DataKey%2A>プロパティです。 使用する代わりに、<xref:System.Web.UI.WebControls.FormView.DataKey%2A>データ キーの値にアクセスするプロパティを使用することができます、<xref:System.Web.UI.WebControls.FormView.SelectedValue%2A>ショートカット プロパティです。  
  
> [!NOTE]
>  ときに、<xref:System.Web.UI.WebControls.FormView.DataKeyNames%2A>プロパティには、複数のフィールドが一覧表示、このプロパティが表示されている最初のフィールドの値を返します。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.SelectedValue%2A>キー フィールドの値を決定するプロパティです。  
  
 [!code-aspx-csharp[FormViewSelectedValue#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewSelectedValue/CS/formviewselectedvaluecs.aspx#1)]
 [!code-aspx-vb[FormViewSelectedValue#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewSelectedValue/VB/formviewselectedvaluevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPageIndex">
      <MemberSignature Language="C#" Value="public void SetPageIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPageIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.SetPageIndex(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">設定するインデックス。</param>
        <summary>現在表示されているページのインデックスを設定、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataItemContainer.DataItemIndex">
      <MemberSignature Language="C#" Value="int System.Web.UI.IDataItemContainer.DataItemIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.IDataItemContainer.DataItemIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DataItemIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Web.UI.IDataItemContainer.DataItemIndex" />」をご覧ください。</summary>
        <value>表示インデックスを表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.FormView> のインスタンスが <xref:System.Web.UI.IDataItemContainer> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IDataItemContainer.DisplayIndex">
      <MemberSignature Language="C#" Value="int System.Web.UI.IDataItemContainer.DisplayIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.IDataItemContainer.DisplayIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#IDataItemContainer#DisplayIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメンバーの詳細については、「<see cref="P:System.Web.UI.IDataItemContainer.DisplayIndex" />」をご覧ください。</summary>
        <value>常に 0 を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.FormView> のインスタンスが <xref:System.Web.UI.IDataItemContainer> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">イベントの引数。</param>
        <summary>サーバーへのポストバック時に、<see cref="T:System.Web.UI.WebControls.FormView" /> コントロールのイベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ページの呼び出し、<xref:System.Web.UI.WebControls.FormView.System%23Web%23UI%23IPostBackEventHandler%23RaisePostBackEvent%2A>メソッドにポストバック イベントが発生するとします。 この呼び出しは、読み込みと変更の通知が完了したら後、ページがレンダリングされる前に、ページのライフ サイクルで発生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataKeyNames">
      <MemberSignature Language="C#" Value="string[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] System.Web.UI.WebControls.IDataBoundControl.DataKeyNames" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataKeyNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に表示される項目の主キー フィールドの名前を含む配列、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>表示される項目の主キー フィールドの名前を含む配列、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.FormView> のインスタンスが <xref:System.Web.UI.WebControls.IDataBoundControl> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataMember">
      <MemberSignature Language="C#" Value="string System.Web.UI.WebControls.IDataBoundControl.DataMember { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.UI.WebControls.IDataBoundControl.DataMember" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のデータ項目のリストの名前、<see cref="T:System.Web.UI.WebControls.FormView" />データ ソースには、データ項目の 1 つ以上の一覧が含まれている場合は、コントロールをバインドします。</summary>
        <value>データの一覧の名前が項目を<see cref="T:System.Web.UI.WebControls.FormView" />コントロールにバインドします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.FormView> のインスタンスが <xref:System.Web.UI.WebControls.IDataBoundControl> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSource">
      <MemberSignature Language="C#" Value="object System.Web.UI.WebControls.IDataBoundControl.DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Web.UI.WebControls.IDataBoundControl.DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定データの一覧を含むオブジェクトを<see cref="T:System.Web.UI.WebControls.FormView" />取得を制御します。</summary>
        <value>データの一覧を含むオブジェクトを<see cref="T:System.Web.UI.WebControls.FormView" />取得を制御します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.FormView> のインスタンスが <xref:System.Web.UI.WebControls.IDataBoundControl> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSourceID">
      <MemberSignature Language="C#" Value="string System.Web.UI.WebControls.IDataBoundControl.DataSourceID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.UI.WebControls.IDataBoundControl.DataSourceID" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定 ID データの一覧を含むデータ ソース コントロールの項目を<see cref="T:System.Web.UI.WebControls.FormView" />取得を制御します。</summary>
        <value>データの一覧を含むデータ ソース コントロールの ID の項目を<see cref="T:System.Web.UI.WebControls.FormView" />取得を制御します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.FormView> のインスタンスが <xref:System.Web.UI.WebControls.IDataBoundControl> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundControl.DataSourceObject">
      <MemberSignature Language="C#" Value="System.Web.UI.IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.IDataSource System.Web.UI.WebControls.IDataBoundControl.DataSourceObject" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundControl#DataSourceObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.IDataSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データを取得できる項目のデータの一覧を格納するソース オブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />取得を制御します。</summary>
        <value>データの一覧を含むデータ ソース オブジェクトの項目を<see cref="T:System.Web.UI.WebControls.FormView" />取得を制御します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.FormView> のインスタンスが <xref:System.Web.UI.WebControls.IDataBoundControl> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundItemControl.DataKey">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IDataBoundItemControl.DataKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataKey System.Web.UI.WebControls.IDataBoundItemControl.DataKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#DataKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内の行のデータ キーの値を表すオブジェクトを取得、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>内の行のデータ キーの値を表すオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.FormView> のインスタンスが <xref:System.Web.UI.WebControls.IDataBoundControl> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IDataBoundItemControl.Mode">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.DataBoundControlMode System.Web.UI.WebControls.IDataBoundItemControl.Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IDataBoundItemControl#Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataBoundControlMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のモードを取得、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>現在のモード、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Web.UI.WebControls.FormView> のインスタンスが <xref:System.Web.UI.WebControls.IDataBoundControl> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions">
      <MemberSignature Language="C#" Value="System.Web.UI.PostBackOptions IPostBackContainer.GetPostBackOptions (System.Web.UI.WebControls.IButtonControl buttonControl);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.PostBackOptions System.Web.UI.WebControls.IPostBackContainer.GetPostBackOptions(class System.Web.UI.WebControls.IButtonControl buttonControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.System#Web#UI#WebControls#IPostBackContainer#GetPostBackOptions(System.Web.UI.WebControls.IButtonControl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buttonControl" Type="System.Web.UI.WebControls.IButtonControl" />
      </Parameters>
      <Docs>
        <param name="buttonControl">ページに掲載されているボタン コントロールは、サーバーにバックアップします。</param>
        <summary>ポストバック イベントのオプションの決定、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <returns>ポストバック イベントのオプションは、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.System%23Web%23UI%23WebControls%23IPostBackContainer%23GetPostBackOptions%2A>メソッドが呼び出されるヘルパー メソッド、<xref:System.Web.UI.WebControls.FormView>コントロールを作成、<xref:System.Web.UI.PostBackOptions>コントロールのポストバック イベントのオプションを含むオブジェクトです。 <xref:System.Web.UI.PostBackOptions>オブジェクトは通常のパラメーターとして使用、<xref:System.Web.UI.Page.GetPostBackEventReference%2A>メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">含まれているオブジェクト、<paramref name="buttonControl" />パラメーターは<see langword="null" />します。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="buttonControl" /> の <see cref="P:System.Web.UI.WebControls.IButtonControl.CausesValidation" /> プロパティが <see langword="true" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Web.UI.HtmlTextWriterTag" /> コントロールの <see cref="T:System.Web.UI.WebControls.FormView" /> 値を取得します。</summary>
        <value>常に <see langword="HtmlTextWriterTag.Table" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.FormView.TagKey%2A>プロパティでは、出力ストリームの適切な HTML マークアップを記述する、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>指定するには、このプロパティをオーバーライドすることができます<see cref="T:System.Web.UI.HtmlTextWriterTag" />派生したコントロールに使用する値。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="TopPagerRow">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.FormViewRow TopPagerRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.FormViewRow TopPagerRow" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.TopPagerRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.FormViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、<see cref="T:System.Web.UI.WebControls.FormViewRow" />の上部に表示されるページャー行を表すオブジェクト、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <value>A<see cref="T:System.Web.UI.WebControls.FormViewRow" />の最上位のページャー行を表す、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ページングが有効な場合 (ときに、<xref:System.Web.UI.WebControls.FormView.AllowPaging%2A>プロパティに設定されている`true`)、ページャー行と呼ばれる追加の行がで自動的に表示されます、<xref:System.Web.UI.WebControls.FormView>コントロール。 ページャー行には、上部、下部、または両方の上部と下部コントロールの表示可能なユーザーが、他のレコードに移動できるようにするコントロールが含まれています。 使用して、<xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>プロパティにプログラムでアクセス、<xref:System.Web.UI.WebControls.FormViewRow>の最上位のページャー行を表すオブジェクト、<xref:System.Web.UI.WebControls.FormView>コントロール。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>プロパティは、使用した場合にのみ、<xref:System.Web.UI.WebControls.FormView>コントロールの最上位のページャー行を作成する、<xref:System.Web.UI.WebControls.FormView.ItemCreated>イベント。  
  
 カスタム コンテンツを追加する場合の例については、最上位のページャー行をプログラムで操作する必要がある場合、このプロパティは使用一般的です。 変更を加える、<xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>プロパティは、後に実行する必要があります、 <xref:System.Web.UI.WebControls.FormView> 、それ以外のデータにバインドされたコントロールが表示された、<xref:System.Web.UI.WebControls.FormView>コントロールには、すべての変更が上書きされます。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.TopPagerRow%2A>の上部に表示されるページャー行にアクセスするプロパティ、<xref:System.Web.UI.WebControls.FormView>コントロール。 他のコンテンツ ページの行が更新されます。  
  
 [!code-aspx-csharp[FormViewTopPagerRow#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewTopPagerRow/CS/formviewtoppagerrowcs.aspx#1)]
 [!code-aspx-vb[FormViewTopPagerRow#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewTopPagerRow/VB/formviewtoppagerrowvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.TrackViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>開始位置を示す追跡とビュー状態を保存中の変更開始位置をマーク、<see cref="T:System.Web.UI.WebControls.FormView" />コントロール。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドをオーバーライドして、コントロールのビュー ステートの一部としてコントロールに対する変更の追跡と保存を開始する開始点をマークします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateItem">
      <MemberSignature Language="C#" Value="public virtual void UpdateItem (bool causesValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateItem(bool causesValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormView.UpdateItem(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="causesValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="causesValidation">
          <see langword="true" />メソッドが呼び出されると; ページの検証を実行するにはそれ以外の場合<see langword="false" />です。</param>
        <summary>データ ソースの現在のレコードを更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Web.UI.WebControls.FormView>コントロールが編集モードを使用して、<xref:System.Web.UI.WebControls.FormView.UpdateItem%2A>メソッドをプログラムでデータ ソースの現在のレコードを更新します。 外部から現在のレコードを更新する必要がある場合、このメソッドは通常使用、<xref:System.Web.UI.WebControls.FormView>など、ページ上の異なるコントロールから制御します。  
  
> [!NOTE]
>  <xref:System.Web.UI.WebControls.FormView>このメソッドが呼び出される、それ以外の場合に、コントロールが編集モードにする必要があります、<xref:System.Web.HttpException>がスローされます。  
  
 更新操作の前にページの検証を実行するかどうかを指定するには、使用、`causesValidation`パラメーター。 このメソッドもが発生し、<xref:System.Web.UI.WebControls.FormView.ItemUpdated>と<xref:System.Web.UI.WebControls.FormView.ItemUpdating>イベント。  
  
   
  
## Examples  
 次の例で使用する方法、<xref:System.Web.UI.WebControls.FormView.UpdateItem%2A>にプログラムでの現在のレコードを更新する方法、<xref:System.Web.UI.WebControls.FormView>データ ソース内のコントロールです。  
  
 [!code-aspx-csharp[FormViewUpdateItem#1](~/samples/snippets/csharp/VS_Snippets_WebNet/FormViewUpdateItem/CS/formviewupdateitemcs.aspx#1)]
 [!code-aspx-vb[FormViewUpdateItem#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/FormViewUpdateItem/VB/formviewupdateitemvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">このメソッドが呼び出されます、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが編集モードではないです。  
  
 または  
  
 <see cref="T:System.Web.UI.DataSourceView" />オブジェクトに関連付けられている、<see cref="T:System.Web.UI.WebControls.FormView" />コントロールが null です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateMethod">
      <MemberSignature Language="C#" Value="public virtual string UpdateMethod { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UpdateMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormView.UpdateMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはコントロール更新操作を実行するときに呼び出されるページのメソッドの名前を設定します。</summary>
        <value>コントロールが、更新操作を実行するときに呼び出されるページ上のメソッドの名前です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Web フォーム モデル バインディングの使用に関するチュートリアル シリーズは、次を参照してください。[モデル バインディング機能と Web フォーム](http://go.microsoft.com/fwlink/?LinkId=286117)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
