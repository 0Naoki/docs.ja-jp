<Type Name="CryptoProvider" FullName="System.Security.RightsManagement.CryptoProvider">
  <TypeSignature Language="C#" Value="public class CryptoProvider : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CryptoProvider extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.RightsManagement.CryptoProvider" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>保護されたコンテンツを暗号化および復号化するデジタル著作権管理サービスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider>結果として作成された、<xref:System.Security.RightsManagement.UseLicense.Bind%2A>メソッドは管理されている、権限のバインドと<xref:System.Security.RightsManagement.UseLicense>を<xref:System.Security.RightsManagement.SecureEnvironment>です。  
  
 その他の同様<xref:System.Security.RightsManagement>型、<xref:System.Security.RightsManagement.CryptoProvider>は完全信頼アプリケーションで使用できるのみです。  
  
   
  
## Examples  
 次の例を使用する方法を示しています、<xref:System.Security.RightsManagement.CryptoProvider>クラスを作成する、<xref:System.IO.Packaging.EncryptedPackageEnvelope>です。  
  
 [!code-csharp[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedPackagePublish/CSharp/Window1.xaml.cs#rmpkgpubencrypt)]
 [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedPackagePublish/visualbasic/window1.xaml.vb#rmpkgpubencrypt)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BlockSize">
      <MemberSignature Language="C#" Value="public int BlockSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BlockSize" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.BlockSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>暗号ブロック サイズをバイト単位で取得します。</summary>
        <value>暗号ブロック サイズ (バイト単位)。  既定のブロック サイズ[!INCLUDE[TLA#tla_aes](~/includes/tlasharptla-aes-md.md)]は 8 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `clearText`と`cipherText`に渡されるバッファー<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>と<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>n * する必要があります<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>バイトの長さ、場所 'n' より大きいかを 1 に等しい整数値は、します。  
  
 場合<xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>は`false`に渡されるバッファー<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>に渡されるバッファーとして同じ長さにする必要があります<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>です。  
  
 場合<xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>は`true`に渡されるバッファー<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>に渡されるバッファーから別の長さを指定できます<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>(すべてのバッファー サイズの倍数である必要がありますが常に<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>バイトの長さ)。  
  
 A <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> 1 のことを示します、暗号ストリーム暗号; <xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A> 2 以上のブロック暗号を示します。  
  
   
  
## Examples  
 次の例を使用する方法を示しています、<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>クリア テキスト データを暗号化テキスト データに変換するプロパティです。  
  
 [!code-csharp[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentPublish/CSharp/Window1.xaml.cs#rmcontpubencrypt)]
 [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentPublish/visualbasic/window1.xaml.vb#rmcontpubencrypt)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundGrants">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.RightsManagement.ContentGrant&gt; BoundGrants { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Security.RightsManagement.ContentGrant&gt; BoundGrants" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.BoundGrants" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Security.RightsManagement.ContentGrant&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>検証に合格し、ユーザーに付与される権限を一覧表示するコレクションを取得します。</summary>
        <value>検証に合格し、する権限を列挙するコレクションは、ユーザーに付与されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を使用する方法を示しています、<xref:System.Security.RightsManagement.CryptoProvider.BoundGrants%2A>を通じて付与された権限の一覧を取得するプロパティ、<xref:System.Security.RightsManagement.UseLicense>です。  
  
 [!code-csharp[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentViewer/CSharp/Window1.xaml.cs#rmcontviewuselicense)]
 [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentViewer/visualbasic/window1.xaml.vb#rmcontviewuselicense)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanDecrypt">
      <MemberSignature Language="C#" Value="public bool CanDecrypt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanDecrypt" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが暗号化を解除する権限を持っているかどうかを示す値を取得します。</summary>
        <value>**true**場合、 <see cref="T:System.Security.RightsManagement.UseLicense" /> ; の暗号化を解除するユーザー権限を付与それ以外の場合、 **false**です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A>返します**true**場合、<xref:System.Security.RightsManagement.UseLicense>をこのバインド<xref:System.Security.RightsManagement.CryptoProvider>表示、編集、印刷、または所有者などの読み取りアクセス権をユーザーに付与します。  
  
   
  
## Examples  
 次の例を使用する方法を示しています、<xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A>復号化が許可されたかどうかを決定するプロパティです。  
  
 [!code-csharp[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentViewer/CSharp/Window1.xaml.cs#rmcontviewuselicense)]
 [!code-vb[RightsManagedContentViewer#RmContViewUseLicense](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentViewer/visualbasic/window1.xaml.vb#rmcontviewuselicense)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanEncrypt">
      <MemberSignature Language="C#" Value="public bool CanEncrypt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEncrypt" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが暗号化する権限を持っているかどうかを示す値を取得します。</summary>
        <value>**true**場合、 <see cref="T:System.Security.RightsManagement.UseLicense" /> ; の暗号化にユーザー権限を付与それ以外の場合、 **false**です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.CanDecrypt%2A>返します**true**場合、<xref:System.Security.RightsManagement.UseLicense>をこのバインド<xref:System.Security.RightsManagement.CryptoProvider>編集または所有者などの書き込みアクセス権をユーザーに付与します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanMergeBlocks">
      <MemberSignature Language="C#" Value="public bool CanMergeBlocks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanMergeBlocks" />
      <MemberSignature Language="DocId" Value="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか<see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />と<see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />とは異なるバッファー ブロック サイズの長さを受け取ることができます。</summary>
        <value>**true**に渡されたバッファー場合<see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />に渡されたバッファーから別の長さを指定できます<see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />、それ以外の**false**に渡されたバッファー場合<see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />と<see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />完全に同じ長さにする必要があります。  [!INCLUDE[TLA#tla_aes](~/includes/tlasharptla-aes-md.md)]既定値は**true**です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `clearText`と`cipherText`に渡されるバッファー<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>と<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>n * する必要があります<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>バイトの長さ、場所 'n' より大きいかを 1 に等しい整数値は、します。  
  
 場合<xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>は**false**に渡されるバッファー<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>に渡されるバッファーとして同じ長さにする必要があります<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>です。  
  
 場合<xref:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks%2A>は**true**に渡されるバッファー<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>に渡されるバッファーから別の長さを指定できます<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>(すべてのバッファー サイズの倍数である必要がありますが常に<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>バイトの長さ)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrypt">
      <MemberSignature Language="C#" Value="public byte[] Decrypt (byte[] cryptoText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Decrypt(unsigned int8[] cryptoText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cryptoText" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="cryptoText">暗号化を解除する暗号テキスト。</param>
        <summary>暗号テキストをクリア テキストを復号化します。</summary>
        <returns>テキストをオフに、暗号化が解除された<paramref name="cryptoText" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例を使用する方法を示しています、<xref:System.Security.RightsManagement.CryptoProvider.Decrypt%2A>暗号化されたデータを暗号化されていないデータに変換します。  
  
 [!code-csharp[RightsManagedContentViewer#RmContViewDecrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentViewer/CSharp/Window1.xaml.cs#rmcontviewdecrypt)]
 [!code-vb[RightsManagedContentViewer#RmContViewDecrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentViewer/visualbasic/window1.xaml.vb#rmcontviewdecrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cipherText" /> が null です。</exception>
        <exception cref="T:System.Security.RightsManagement.RightsManagementException">権限を与えない暗号化を解除します。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.RightsManagement.CryptoProvider" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>実行<xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(**true**)。  
  
 <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A> を使い終わったら <xref:System.Security.RightsManagement.CryptoProvider> を呼び出します。 <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A> メソッドによって、<xref:System.Security.RightsManagement.CryptoProvider> は使用不可の状態になります。 呼び出した後<xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>へのすべての参照を解放する必要があります、<xref:System.Security.RightsManagement.CryptoProvider>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Security.RightsManagement.CryptoProvider>占有されていた。 詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。  
  
> [!NOTE]
>  <xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A> への最後の参照を解放する前に、必ず <xref:System.Security.RightsManagement.CryptoProvider> を呼び出してください。 そうしないと、ガベージ コレクターが <xref:System.Security.RightsManagement.CryptoProvider> オブジェクトの `Finalize` メソッドを呼び出すまで、使用されているリソースは解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary><see cref="T:System.Security.RightsManagement.CryptoProvider" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッドです。 `Dispose()`プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。 <xref:System.Object.Finalize%2A>呼び出す`Dispose`で`disposing`'éý'`false`です。  
  
 ときに、`disposing`パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放します。 この<xref:System.Security.RightsManagement.CryptoProvider>参照します。 このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。 オーバーライドする場合<see langword="Dispose(Boolean)" />既に破棄されているを以前の呼び出しでオブジェクトを参照しないように注意する<see langword="Dispose" />です。 実装する方法の詳細についての<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。  
  
 詳細については<see langword="Dispose" />と<see cref="M:System.Object.Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)です。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Encrypt">
      <MemberSignature Language="C#" Value="public byte[] Encrypt (byte[] clearText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Encrypt(unsigned int8[] clearText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clearText" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="clearText">暗号化するクリア テキスト コンテンツ。</param>
        <summary>クリア テキストを暗号化テキストに暗号化します。</summary>
        <returns>指定された <paramref name="clearText" /> の暗号化済みの暗号化テキスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 バイト長、`clearText`バッファーは、暗号の倍数である必要があります<xref:System.Security.RightsManagement.CryptoProvider.BlockSize%2A>プロパティです。  
  
 デジタル rights 管理システムとは[!INCLUDE[TLA#tla_aes](~/includes/tlasharptla-aes-md.md)]暗号をブロックします。  [!INCLUDE[TLA2#tla_aes](~/includes/tla2sharptla-aes-md.md)]ブロックが暗号化されていない個別に同じクリア テキストの 2 つのブロックと同じ暗号化テキストの結果を生成するようにします。  独立したブロック暗号化からの復号化脅威を最小限に抑えるにアプリケーションが同じクリア テキストのブロックの暗号化を回避する、圧縮などのコンテンツを変更する方法を使用する必要があります。  
  
   
  
## Examples  
 次の例を使用する方法を示しています、<xref:System.Security.RightsManagement.CryptoProvider.Encrypt%2A>クリア テキスト データを暗号化テキストのデータに変換します。  
  
 [!code-csharp[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/csharp/VS_Snippets_Wpf/RightsManagedContentPublish/CSharp/Window1.xaml.cs#rmcontpubencrypt)]
 [!code-vb[RightsManagedContentPublish#RmContPubEncrypt](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RightsManagedContentPublish/visualbasic/window1.xaml.vb#rmcontpubencrypt)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="clearText" /> が null です。</exception>
        <exception cref="T:System.Security.RightsManagement.RightsManagementException">暗号化は許可されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CryptoProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.RightsManagement.CryptoProvider.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>インスタンスがガベージ コレクションによって回収される前にリソースを解放し、内部クリーンアップを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.RightsManagement.CryptoProvider.Finalize%2A>実行<xref:System.Security.RightsManagement.CryptoProvider.Dispose%2A>(**false**)。  
  
 このメソッドは<xref:System.Object.Finalize%2A>します。 アプリケーション コードではこのメソッドを呼び出す必要がありますいません。オブジェクトの`Finalize`への呼び出しによって、ガベージ コレクターによって終了処理が無効になっていない限り、ガベージ コレクション中にメソッドが自動的に起動、<xref:System.GC.SuppressFinalize%2A>メソッドです。  
  
 詳細については、次を参照してください。 [Finalize メソッドおよびデストラクター](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)、[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)、および[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
