<Type Name="DrawingAttributes" FullName="System.Windows.Ink.DrawingAttributes">
  <TypeSignature Language="C#" Value="public class DrawingAttributes : System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DrawingAttributes extends System.Object implements class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Ink.DrawingAttributes" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><see cref="T:System.Windows.Ink.Stroke" /> の外観を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Ink.Stroke.DrawingAttributes%2A>色、幅、透過性、およびのスタイラスの先端の形などの設定を指定するプロパティ、<xref:System.Windows.Ink.Stroke>です。  
  
 使用して、<xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A>に追加された線の描画属性を指定するプロパティ、<xref:System.Windows.Controls.InkCanvas>です。 後に追加される唯一のストロークの<xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A>更新された属性の変更の表示が行われます。 既にストロークの外観、<xref:System.Windows.Controls.InkCanvas>は変わりません。  
  
 <xref:System.Windows.Ink.DrawingAttributes> クラスのインスタンスの初期プロパティ値一覧については、<xref:System.Windows.Ink.DrawingAttributes> コンストラクターに関するトピックを参照してください。  
  
<a name="xamlTextUsage_DrawingAttributes"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用方法  
 通常、このクラスは XAML では使用されません。  
  
   
  
## Examples  
 次の例は、使用する 2 つの方法を示します<xref:System.Windows.Ink.DrawingAttributes>ペンと蛍光ペンを使用して、同じをシミュレートするためにオブジェクト<xref:System.Windows.Controls.InkCanvas>です。 この例では、XAML ファイルのルート要素は、<xref:System.Windows.Controls.DockPanel>と呼ばれる`root`です。 前提としていますが、<xref:System.Windows.Controls.Button>と呼ばれる`switchHighlighter`ことと、<xref:System.Windows.Controls.Primitives.ButtonBase.Click>イベントは、この例で定義されているイベント ハンドラーに関連付けられています。  
  
 [!code-csharp[DrawingAttributes#3](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#3)]
 [!code-vb[DrawingAttributes#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DrawingAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Ink.DrawingAttributes" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Ink.DrawingAttributes> クラスのインスタンスのプロパティの初期値を次の表に示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Windows.Ink.DrawingAttributes.Color%2A>|黒|  
|<xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.Height%2A>|2 つのデバイス非依存のピクセル (DIP)|  
|<xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>|<xref:System.Windows.Ink.StylusTip?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>|<xref:System.Windows.Media.Matrix.Identity%2A?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.Width%2A>|2 つの DIP|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPropertyData">
      <MemberSignature Language="C#" Value="public void AddPropertyData (Guid propertyDataId, object propertyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPropertyData(valuetype System.Guid propertyDataId, object propertyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
        <Parameter Name="propertyData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyDataId"><see cref="T:System.Guid" />カスタム プロパティに関連付けます。</param>
        <param name="propertyData">カスタム プロパティの値です。 <c>propertyData</c>型でなければなりません<see cref="T:System.Char" />、 <see cref="T:System.Byte" />、 <see cref="T:System.Int16" />、 <see cref="T:System.UInt16" />、 <see cref="T:System.Int32" />、 <see cref="T:System.UInt32" />、 <see cref="T:System.Int64" />、 <see cref="T:System.UInt64" />、 <see cref="T:System.Single" />、 <see cref="T:System.Double" />、 <see cref="T:System.DateTime" />、 <see cref="T:System.Boolean" />、 <see cref="T:System.String" />、 <see cref="T:System.Decimal" /> 、またはこれらのデータの配列型以外の型の配列をすることはできませんただし<see cref="T:System.String" />です。</param>
        <summary>カスタム プロパティを追加、<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Ink.DrawingAttributes.AddPropertyData%2A>メソッドでは、カスタム プロパティを追加することができます、<xref:System.Windows.Ink.DrawingAttributes>オブジェクト。 これは、機能は、独自のストロークを描画し、追加情報を提供する場合に便利です。  
  
   
  
## Examples  
 次の例で追加してからカスタム プロパティを取得する方法、<xref:System.Windows.Ink.DrawingAttributes>オブジェクト。 この例を示すプロパティを追加するかどうか、<xref:System.Windows.Ink.DrawingAttributes>オブジェクトは、ペンまたは蛍光ペン。 内のコード、`ChangeColors_Click`上のイベント ハンドラーのストロークの新しい色の表示、<xref:System.Windows.Controls.InkCanvas>を使用する、<xref:System.Windows.Ink.DrawingAttributes>オブジェクト、`inkDA`です。 この例では、<xref:System.Windows.Controls.InkCanvas>という`inkCanvas1`、ことは、2 つと<xref:System.Windows.Ink.DrawingAttributes>という名前のオブジェクト`inkDA`、および`highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyData" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" /> が空の <see cref="T:System.Guid" /> です。  
  
 または  
  
 <paramref name="propertyData" />使用できるデータ型のいずれかではない、<see langword="Parameters" />セクションです。</exception>
      </Docs>
    </Member>
    <Member MemberName="AttributeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内のプロパティのときに発生、<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクトに対する変更。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例のハンドル、<xref:System.Windows.Ink.DrawingAttributes.AttributeChanged>イベント。 この例では、<xref:System.Windows.Ink.DrawingAttributes>と呼ばれるオブジェクト`inkDA`ことと、<xref:System.Windows.Ink.DrawingAttributes.AttributeChanged>イベントは、この例で定義されているイベント ハンドラーに関連付けられています。  
  
 [!code-csharp[DrawingAttributes#6](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#6)]
 [!code-vb[DrawingAttributes#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Ink.DrawingAttributes Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Ink.DrawingAttributes Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.DrawingAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コピー、<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクト。</summary>
        <returns>コピー、<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Ink.DrawingAttributes.Clone%2A>メソッドが新たに作成<xref:System.Windows.Ink.DrawingAttributes>オブジェクトし、現在のオブジェクトと同じ値に設定します。 任意のカスタム プロパティがコピーされます。  
  
   
  
## Examples  
 次の例をコピーする方法を示しています、<xref:System.Windows.Ink.DrawingAttributes>オブジェクト。  
  
 [!code-csharp[DrawingAttributes#8](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#8)]
 [!code-vb[DrawingAttributes#8](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の色、<see cref="T:System.Windows.Ink.Stroke" />です。</summary>
        <value>色、<see cref="T:System.Windows.Ink.Stroke" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_Color"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用方法  
 通常、このプロパティは XAML では使用されません。  
  
   
  
## Examples  
 次の例は、設定する方法を示します、<xref:System.Windows.Ink.DrawingAttributes.Color%2A>プロパティです。 この例では、アプリケーションに、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`、および 2 つ<xref:System.Windows.Ink.DrawingAttributes>と呼ばれるオブジェクト`inkDA`と`highlighterDA`です。 完全な例については、<xref:System.Windows.Ink.DrawingAttributes>クラスの概要です。  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsPropertyData">
      <MemberSignature Language="C#" Value="public bool ContainsPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.ContainsPropertyData(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId"><see cref="T:System.Guid" />内で検索する、<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクト。</param>
        <summary>データの指定したプロパティの識別子がであるかどうかを示す値を返します、<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクト。</summary>
        <returns>
          <see langword="true" />データの指定したプロパティの識別子がの場合、<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクト。 それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例で追加してからカスタム プロパティを取得する方法、<xref:System.Windows.Ink.DrawingAttributes>オブジェクト。 この例を示すプロパティを追加するかどうか、<xref:System.Windows.Ink.DrawingAttributes>オブジェクトは、ペンまたは蛍光ペン。 `ChangeColors_Click`イベント ハンドラーに配置されているすべてのストロークの変更、<xref:System.Windows.Controls.InkCanvas>で、<xref:System.Windows.Ink.DrawingAttributes>と呼ばれる`inkDA`新しい色にします。 この例では、<xref:System.Windows.Controls.InkCanvas>という`inkCanvas1`、ことは、2 つと<xref:System.Windows.Ink.DrawingAttributes>という名前のオブジェクト`inkDA`、および`highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><see cref="T:System.Windows.Ink.DrawingAttributes" />現在と比較するオブジェクト<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクト。</param>
        <summary>決定するかどうか、指定した<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクトが現在<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクト。</summary>
        <returns>
          オブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 つ<xref:System.Windows.Ink.DrawingAttributes>オブジェクトが、次のプロパティが等しい場合は等しい。  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
> [!NOTE]
>  <xref:System.Windows.Ink.DrawingAttributes.Equals%2A>メソッドは、カスタム プロパティを等しいかどうかをチェックしません。  
  
   
  
## Examples  
 次の例では、2 つを比較して<xref:System.Windows.Ink.DrawingAttributes>オブジェクトが等しいかどうか。 <xref:System.Windows.Ink.DrawingAttributes.Color%2A>、 <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>、 <xref:System.Windows.Ink.DrawingAttributes.Height%2A>、および<xref:System.Windows.Ink.DrawingAttributes.Width%2A>プロパティを`attributes1`と`attributes2`"DrawingAttributes と等しい"メッセージが表示される値と同じに設定されます。  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#12](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#12)]
[!code-vb[DrawingAttributes#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FitToCurve">
      <MemberSignature Language="C#" Value="public bool FitToCurve { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FitToCurve" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.FitToCurve" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはベジエ スムージングを表示するために使用するかどうかを示す値を設定、<see cref="T:System.Windows.Ink.Stroke" />です。</summary>
        <value>
          <see langword="true" />表示するためにスムージング ベジエを使用する、<see cref="T:System.Windows.Ink.Stroke" />それ以外の<see langword="false" />します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_FitToCurve"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用方法  
 通常、このプロパティは XAML では使用されません。  
  
   
  
## Examples  
 次の例は、設定する方法を示します、<xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>プロパティです。 この例では、アプリケーションに、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`、および 2 つ<xref:System.Windows.Ink.DrawingAttributes>と呼ばれるオブジェクト`inkDA`と`highlighterDA`です。 完全な例については、<xref:System.Windows.Ink.DrawingAttributes>クラスの概要です。  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>特定の型のハッシュ関数として機能します。</summary>
        <returns>現在の <see cref="T:System.Object" /> のハッシュ コード。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyData">
      <MemberSignature Language="C#" Value="public object GetPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyData(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId"><see cref="T:System.Guid" />取得するカスタム プロパティに関連付けられています。</param>
        <summary>指定したに関連付けられているカスタム プロパティの値を取得<see cref="T:System.Guid" />です。</summary>
        <returns>指定したに関連付けられているカスタム プロパティの値<see cref="T:System.Guid" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A>に追加したカスタム プロパティにアクセスするメソッド、<xref:System.Windows.Ink.DrawingAttributes>オブジェクト。 <xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A>値が設定されていない場合は、組み込みのプロパティの既定値を返します。  
  
   
  
## Examples  
 次の例で追加してからカスタム プロパティを取得する方法、<xref:System.Windows.Ink.DrawingAttributes>オブジェクト。 この例を示すプロパティを追加するかどうか、<xref:System.Windows.Ink.DrawingAttributes>オブジェクトは、ペンまたは蛍光ペン。 内のコード、`ChangeColors_Click`上のイベント ハンドラーのストロークの新しい色の表示、<xref:System.Windows.Controls.InkCanvas>を使用する、<xref:System.Windows.Ink.DrawingAttributes>オブジェクト、`inkDA`です。 この例では、<xref:System.Windows.Controls.InkCanvas>という`inkCanvas1`、ことは、2 つと<xref:System.Windows.Ink.DrawingAttributes>という名前のオブジェクト`inkDA`、および`highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" />カスタム プロパティに関連付けられていない、<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクト。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyDataIds">
      <MemberSignature Language="C#" Value="public Guid[] GetPropertyDataIds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid[] GetPropertyDataIds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyDataIds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのカスタム プロパティに関連付けられている Guid を返します、<see cref="T:System.Windows.Ink.StrokeCollection" />です。</summary>
        <returns>型の配列<see cref="T:System.Guid" />を表すプロパティのデータの識別子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 組み込みのプロパティの Guid、<xref:System.Windows.Ink.DrawingAttributes>クラスは、<xref:System.Windows.Ink.DrawingAttributeIds>クラスです。  
  
   
  
## Examples  
 次の例からプロパティのデータの識別子を取得する方法を示します、<xref:System.Windows.Ink.DrawingAttributes>オブジェクト。 この例では、<xref:System.Windows.Ink.DrawingAttributes>と呼ばれる`inkDA`は宣言されています。  
  
 [!code-csharp[DrawingAttributes#7](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#7)]
 [!code-vb[DrawingAttributes#7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を描画するために使用するペンの高さ、<see cref="T:System.Windows.Ink.Stroke" />です。</summary>
        <value>描画するために使用するペンの高さを示す値、<see cref="T:System.Windows.Ink.Stroke" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の要因の影響の幅と高さを<xref:System.Windows.Ink.Stroke>が、表示する際の値ではなく、<xref:System.Windows.Ink.DrawingAttributes.Height%2A>プロパティです。  
  
-   スタイラスに適用される負荷の量と、<xref:System.Windows.Ink.Stroke>を描画します。  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> プロパティの値。  
  
 設定した場合、<xref:System.Windows.Ink.DrawingAttributes.Height%2A>プロパティに 0 デバイス非依存ピクセル (DIP)、2 つの DIP に変更されます。  
  
<a name="xamlTextUsage_Height"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用方法  
 通常、このプロパティは XAML では使用されません。  
  
   
  
## Examples  
 次の例は、設定する方法を示します、<xref:System.Windows.Ink.DrawingAttributes.Height%2A>プロパティです。 この例では、アプリケーションに、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`、および 2 つ<xref:System.Windows.Ink.DrawingAttributes>と呼ばれるオブジェクト`inkDA`と`highlighterDA`です。 完全な例については、<xref:System.Windows.Ink.DrawingAttributes>クラスの概要です。  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Windows.Ink.DrawingAttributes.Height" />プロパティより小さい<see cref="F:System.Double.Epsilon" />または<see cref="F:System.Double.NaN" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnorePressure">
      <MemberSignature Language="C#" Value="public bool IgnorePressure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnorePressure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IgnorePressure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、レンダリングの太さ<see cref="T:System.Windows.Ink.Stroke" />適用される負荷の量に従って変更します。</summary>
        <value>
          <see langword="true" />ストロークの太さが均一であることを示します<see langword="false" />ことを示す、レンダリングの太さ<see cref="T:System.Windows.Ink.Stroke" />筆圧を高くとが増加します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_IgnorePressure"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用方法  
 通常、このプロパティは XAML では使用されません。  
  
   
  
## Examples  
 次の例は、設定する方法を示します、<xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>プロパティです。 この例では、アプリケーションに、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`、および 2 つ<xref:System.Windows.Ink.DrawingAttributes>と呼ばれるオブジェクト`inkDA`と`highlighterDA`です。 完全な例については、<xref:System.Windows.Ink.DrawingAttributes>クラスの概要です。  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHighlighter">
      <MemberSignature Language="C#" Value="public bool IsHighlighter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHighlighter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IsHighlighter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、<see cref="T:System.Windows.Ink.Stroke" />蛍光ペンのようになります。</summary>
        <value>
          <see langword="true" />表示するために、<see cref="T:System.Windows.Ink.Stroke" />蛍光ペン; としてそれ以外の場合、<see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>プロパティに設定されている`true`、<xref:System.Windows.Ink.Stroke>がわずかに透明によりの下に線を表示します。  
  
<a name="xamlTextUsage_IsHighlighter"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用方法  
 通常、このプロパティは XAML では使用されません。  
  
   
  
## Examples  
 次の例は、設定する方法を示します、<xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>プロパティです。 この例では、アプリケーションに、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`、および 2 つ<xref:System.Windows.Ink.DrawingAttributes>と呼ばれるオブジェクト`inkDA`と`highlighterDA`です。 完全な例については、<xref:System.Windows.Ink.DrawingAttributes>クラスの概要です。  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public static readonly double MaxHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>許容される最大値を指定します、<see cref="P:System.Windows.Ink.DrawingAttributes.Height" />プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Ink.DrawingAttributes.MaxHeight>値が許可されて制限内でかどうかを確認するフィールド、<xref:System.Windows.Ink.DrawingAttributes.Height%2A>プロパティです。 値は制約のないユーザーの入力など、不明なソースから取得されている場合に実行します。  
  
   
  
## Examples  
 次の例で、<xref:System.Windows.Ink.DrawingAttributes.Height%2A>のプロパティ、<xref:System.Windows.Ink.DrawingAttributes>が有効な値に設定します。 この例では、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`です。  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public static readonly double MaxWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxWidth" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>許容される最大値を指定します、<see cref="P:System.Windows.Ink.DrawingAttributes.Width" />プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Ink.DrawingAttributes.MaxWidth>値が許可されて制限内でかどうかを確認するフィールド、<xref:System.Windows.Ink.DrawingAttributes.Width%2A>プロパティです。 値は制約のないユーザーの入力など、不明なソースから取得されている場合に実行します。  
  
   
  
## Examples  
 次の例で、<xref:System.Windows.Ink.DrawingAttributes.Width%2A>のプロパティ、<xref:System.Windows.Ink.DrawingAttributes>が有効な値に設定します。 この例では、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`です。  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public static readonly double MinHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>許容される最小値を指定します、<see cref="P:System.Windows.Ink.DrawingAttributes.Height" />プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Ink.DrawingAttributes.MinHeight>値が許可されて制限内でかどうかを確認するフィールド、<xref:System.Windows.Ink.DrawingAttributes.Height%2A>プロパティです。 値は制約のないユーザーの入力など、不明なソースから取得されている場合に実行します。  
  
   
  
## Examples  
 次の例で、<xref:System.Windows.Ink.DrawingAttributes.Height%2A>のプロパティ、<xref:System.Windows.Ink.DrawingAttributes>が有効な値に設定します。 この例では、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`です。  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public static readonly double MinWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinWidth" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>許容される最小値を指定します、<see cref="P:System.Windows.Ink.DrawingAttributes.Width" />プロパティです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Ink.DrawingAttributes.MinWidth>値が許可されて制限内でかどうかを確認するフィールド、<xref:System.Windows.Ink.DrawingAttributes.Width%2A>プロパティです。 値は制約のないユーザーの入力など、不明なソースから取得されている場合に実行します。  
  
   
  
## Examples  
 次の例で、<xref:System.Windows.Ink.DrawingAttributes.Width%2A>のプロパティ、<xref:System.Windows.Ink.DrawingAttributes>が有効な値に設定します。 この例では、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`です。  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAttributeChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAttributeChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。  
  
 <xref:System.Windows.Ink.DrawingAttributes.OnAttributeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />呼び出し派生クラスでは、<see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />を登録されているデリゲートがイベントを受け取れるように、基本クラスのメソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.ComponentModel.PropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(class System.ComponentModel.PropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">EventArgs</param>
        <summary>されたときに発生<see cref="T:System.Windows.Ink.DrawingAttributes" />プロパティが変更されました。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyDataChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyDataChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyDataChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。  
  
 <xref:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 これは、イベントを処理するための手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />呼び出し派生クラスでは、<see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />登録されているデリゲートがイベントを受け取れるように、基本クラスのメソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Equality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">比較する最初の <see cref="T:System.Windows.Ink.DrawingAttributes" /> オブジェクト。</param>
        <param name="second">比較する 2 番目の <see cref="T:System.Windows.Ink.DrawingAttributes" /> オブジェクト。</param>
        <summary>決定するかどうか、指定した<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクトが等しい。</summary>
        <returns>
          オブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 つ<xref:System.Windows.Ink.DrawingAttributes>オブジェクトが、次のプロパティが等しい場合は等しい。  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  <xref:System.Windows.Ink.DrawingAttributes.op_Equality%2A>メソッドは、カスタム プロパティを等しいかどうかをチェックしません。  
  
 この演算子を同等の方法は<xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>します。  
  
## Examples  
 次の例では、2 つを比較して<xref:System.Windows.Ink.DrawingAttributes>オブジェクトが等しいかどうか。 <xref:System.Windows.Ink.DrawingAttributes.Color%2A>、 <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>、 <xref:System.Windows.Ink.DrawingAttributes.Height%2A>、および<xref:System.Windows.Ink.DrawingAttributes.Width%2A>プロパティを`attributes1`と`attributes2`"DrawingAttributes と等しい"メッセージが表示される値と同じに設定されます。  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#11](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#11)]
[!code-vb[DrawingAttributes#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Inequality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">比較する最初の <see cref="T:System.Windows.Ink.DrawingAttributes" /> オブジェクト。</param>
        <param name="second">比較する 2 番目の <see cref="T:System.Windows.Ink.DrawingAttributes" /> オブジェクト。</param>
        <summary>指定するかどうか、指定した<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクトが等しくないです。</summary>
        <returns>
          <see langword="true" />オブジェクトが等しくない場合それ以外の場合、<see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 2 つ<xref:System.Windows.Ink.DrawingAttributes>オブジェクトが、次のプロパティが等しくない場合は等しくないです。  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  <xref:System.Windows.Ink.DrawingAttributes.op_Inequality%2A>メソッドは、カスタム プロパティを等しいかどうかをチェックしません。  
  
 この演算子を同等の方法の否定である<xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>です。  
  
## Examples  
 次の例では、2 つを比較して<xref:System.Windows.Ink.DrawingAttributes>の非等値オブジェクトです。 <xref:System.Windows.Ink.DrawingAttributes.Color%2A>、 <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>、 <xref:System.Windows.Ink.DrawingAttributes.Height%2A>、および<xref:System.Windows.Ink.DrawingAttributes.Width%2A>プロパティを`attributes1`と`attributes2`"DrawingAttributes と等しい"メッセージが表示される値と同じに設定されます。  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#13](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#13)]
[!code-vb[DrawingAttributes#13](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDataChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プロパティのデータを追加または削除するときに発生、<see cref="T:System.Windows.Ink.StrokeCollection" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、3 次元効果を描画できるカスタムのストロークの一部です。 線を定義しと呼ばれるカスタム プロパティを格納`Shadowed`に属している<xref:System.Windows.Ink.Stroke.DrawingAttributes%2A>です。 ときに、`Shadowed`プロパティの変更、<xref:System.Windows.Ink.DrawingAttributes.PropertyDataChanged>イベント ハンドラーの呼び出し、<xref:System.Windows.Ink.Stroke.OnInvalidated%2A>メソッドは、これにより、再描画される線です。  
  
 [!code-csharp[StrokeCollectionShadow#1](~/samples/snippets/csharp/VS_Snippets_Wpf/StrokeCollectionShadow/CSharp/CustomRenderedStroke.cs#1)]
 [!code-vb[StrokeCollectionShadow#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StrokeCollectionShadow/VisualBasic/CustomRenderedStroke.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePropertyData">
      <MemberSignature Language="C#" Value="public void RemovePropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemovePropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.RemovePropertyData(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId"><see cref="T:System.Guid" />を削除するカスタム プロパティに関連付けられています。</param>
        <summary>指定したに関連付けられているカスタム プロパティを削除<see cref="T:System.Guid" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例からカスタム プロパティを削除する方法を示します、<xref:System.Windows.Ink.DrawingAttributes>オブジェクト。  
  
 [!code-csharp[DrawingAttributes#9](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#9)]
 [!code-vb[DrawingAttributes#9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" />カスタム プロパティに関連付けられていない、<see cref="T:System.Windows.Ink.DrawingAttributes" />オブジェクト。</exception>
      </Docs>
    </Member>
    <Member MemberName="StylusTip">
      <MemberSignature Language="C#" Value="public System.Windows.Ink.StylusTip StylusTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Ink.StylusTip StylusTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.StylusTip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を描画するために使用するペンの図形、<see cref="T:System.Windows.Ink.Stroke" />です。</summary>
        <value><see cref="T:System.Windows.Ink.StylusShape" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_StylusTip"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用方法  
 通常、このプロパティは XAML では使用されません。  
  
   
  
## Examples  
 次の例は、設定する方法を示します、<xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>プロパティです。 この例では、アプリケーションに、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`、および 2 つ<xref:System.Windows.Ink.DrawingAttributes>と呼ばれるオブジェクト`inkDA`と`highlighterDA`です。 完全な例については、<xref:System.Windows.Ink.DrawingAttributes>クラスの概要です。  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusTipTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Matrix StylusTipTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Matrix StylusTipTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、<see cref="T:System.Windows.Media.Matrix" />スタイラスの先端で実行する変換を指定します。</summary>
        <value>A<see cref="T:System.Windows.Media.Matrix" />スタイラスの先端で実行する変換を指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>プロパティを回転、傾斜、またはスタイラスの先端を拡大します。  
  
<a name="xamlTextUsage_StylusTipTransform"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用方法  
 通常、このプロパティは XAML では使用されません。  
  
   
  
## Examples  
 次の例は、設定する方法を示します、<xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>プロパティです。 この例では、アプリケーションに、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`、および 2 つ<xref:System.Windows.Ink.DrawingAttributes>と呼ばれるオブジェクト`inkDA`と`highlighterDA`です。 完全な例については、<xref:System.Windows.Ink.DrawingAttributes>クラスの概要です。  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定するマトリックス<see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" />反転できるマトリックスではありません。  
  
 または  
  
 <see cref="P:System.Windows.Media.Matrix.OffsetX" />または<see cref="P:System.Windows.Media.Matrix.OffsetY" />マトリックスのプロパティが 0 ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を描画するために使用するペンの幅、<see cref="T:System.Windows.Ink.Stroke" />です。</summary>
        <value>描画するために使用するペンの幅、<see cref="T:System.Windows.Ink.Stroke" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の要因の影響の幅と高さを<xref:System.Windows.Ink.Stroke>が、表示する際の値ではなく、<xref:System.Windows.Ink.DrawingAttributes.Width%2A>プロパティです。  
  
-   スタイラスに適用される負荷の量と、<xref:System.Windows.Ink.Stroke>を描画します。  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> プロパティの値。  
  
 設定した場合、<xref:System.Windows.Ink.DrawingAttributes.Width%2A>プロパティに 0 デバイス非依存ピクセル (DIP)、2 つの DIP に変更されます。  
  
<a name="xamlTextUsage_Width"></a>   
## <a name="xaml-text-usage"></a>XAML テキストの使用方法  
 通常、このプロパティは XAML では使用されません。  
  
   
  
## Examples  
 次の例は、設定する方法を示します、<xref:System.Windows.Ink.DrawingAttributes.Width%2A>プロパティです。 この例では、アプリケーションに、<xref:System.Windows.Controls.InkCanvas>と呼ばれる`inkCanvas1`、および 2 つ<xref:System.Windows.Ink.DrawingAttributes>と呼ばれるオブジェクト`inkDA`と`highlighterDA`です。 完全な例については、<xref:System.Windows.Ink.DrawingAttributes>クラスの概要です。  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Windows.Ink.DrawingAttributes.Width" />プロパティより小さい<see cref="F:System.Double.Epsilon" />または<see cref="F:System.Double.NaN" />です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
