### YamlMime:YamlDocument
documentType: Tutorial
title: '<span data-ttu-id="bd6d6-101">C# のコレクション</span><span class="sxs-lookup"><span data-stu-id="bd6d6-101">Collections in C#</span></span>'
metadata:
  title: '<span data-ttu-id="bd6d6-102">C# のコレクション。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-102">Collections in C#.</span></span> <span data-ttu-id="bd6d6-103">C# のシーケンスとコレクションの使用方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-103">Learn to use sequences and collections in C#.</span></span>'
  description: '<span data-ttu-id="bd6d6-104">このチュートリアルでは、ブラウザーを使用して C# を対話形式で学習できます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-104">In this tutorial, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="bd6d6-105">C# コードを記述し、ブラウザーで直接コードをコンパイルして実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-105">You write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="bd6d6-106">このチュートリアルでは C# を対話形式で学習できます。ブラウザーを使用して C# を記述し、コードをコンパイルして実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-106">This tutorial teaches you C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="bd6d6-107">このチュートリアルには、コレクションと配列を作成、変更、確認する一連のレッスンが含まれています。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-107">It contains a series of lessons that create, modify and explore collections and arrays.</span></span>
  - title: <span data-ttu-id="bd6d6-108">リストを作成する</span><span class="sxs-lookup"><span data-stu-id="bd6d6-108">Create lists</span></span>
    durationInMinutes: 2
    content: |
      <span data-ttu-id="bd6d6-109">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="bd6d6-110">そのためには、対話型ウィンドウで次のコード ブロックを入力し ("<name>" を自分の名前に置き換えて)、**[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-110">To do that, type the following code block in the interactive window (replace "<name>" with your name) and click the **Run** button:</span></span>

      ```csharp
      var names = new List<string> { "<name>", "Ana", "Felipe" };
      foreach (var name in names)
      {
        Console.WriteLine($"Hello {name.ToUpper()}!");
      }
      ```

      <span data-ttu-id="bd6d6-111">文字列のリストを作成し、そのリストに 3 つの名前を追加し、それらの名前をすべて大文字で出力しました。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-111">You've just created a list of strings, added three names to that list, and printed out the names in all CAPS.</span></span> <span data-ttu-id="bd6d6-112">先のクイック スタートで学習した概念を使用して、リストをループしています。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-112">You're using concepts that you've learned in earlier quick starts to loop through the list.</span></span>

      <span data-ttu-id="bd6d6-113">名前を表示するコードは、**補間文字列**を使用します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-113">The code to display names makes use of **interpolated strings**.</span></span>  <span data-ttu-id="bd6d6-114">`string` の前に文字 `$` を配置すると、文字列宣言に C# コードを埋め込むことができます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-114">When you precede a `string` with the `$` character, you can embed C# code in the string declaration.</span></span> <span data-ttu-id="bd6d6-115">実際の文字列は、生成する値でその C# コードを置き換えます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-115">The actual string replaces that C# code with the value it generates.</span></span> <span data-ttu-id="bd6d6-116">この例では、<xref:System.String.ToUpper%2A> メソッドを呼び出したため、文字列は `{name.ToUpper()}` をそれぞれの名前に置き換え、文字を大文字に変換しています。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-116">In this example, it replaces the `{name.ToUpper()}` with each name, converted to capital letters, because you called the <xref:System.String.ToUpper%2A> method.</span></span>

      <span data-ttu-id="bd6d6-117">続けて確認していきましょう。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-117">Let's keep exploring.</span></span>

      > [!NOTE]
      > <span data-ttu-id="bd6d6-118">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-118">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bd6d6-119">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-119">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="bd6d6-120">リスト コンテンツを変更する</span><span class="sxs-lookup"><span data-stu-id="bd6d6-120">Modify list contents</span></span>
    durationInMinutes: 3
    content: |
      <span data-ttu-id="bd6d6-121">作成したコレクションは <xref:System.Collections.Generic.List%601> 型を使用します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-121">The collection you created uses the <xref:System.Collections.Generic.List%601> type.</span></span> <span data-ttu-id="bd6d6-122">この型は、要素のシーケンスを格納します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-122">This type stores sequences of elements.</span></span> <span data-ttu-id="bd6d6-123">要素の型を山かっこの内側で指定します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-123">You specify the type of the elements between the angle brackets.</span></span>

      <span data-ttu-id="bd6d6-124">この <xref:System.Collections.Generic.List%601> 型の重要な点は増減が可能で、要素を追加したり削除したりできることです。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-124">One important aspect of this <xref:System.Collections.Generic.List%601> type is that it can grow or shrink, enabling you to add or remove elements.</span></span> <span data-ttu-id="bd6d6-125">既に記述したコードの下に、次のコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-125">Add the following code below the code you've already written:</span></span>

      ```csharp
      Console.WriteLine();
      names.Add("Maria");
      names.Add("Bill");
      names.Remove("Ana");
      foreach (var name in names)
      {
        Console.WriteLine($"Hello {name.ToUpper()}!");
      }
      ```

      <span data-ttu-id="bd6d6-126">さらに 2 つの名前をリストの末尾に追加しました。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-126">You've added two more names to the end of the list.</span></span> <span data-ttu-id="bd6d6-127">また、1 つを削除しました。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-127">You've also removed one as well.</span></span>

      <span data-ttu-id="bd6d6-128"><xref:System.Collections.Generic.List%601> を使用すると、**インデックス**でも個々の項目を参照できます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-128">The <xref:System.Collections.Generic.List%601> enables you to reference individual items by **index** as well.</span></span> <span data-ttu-id="bd6d6-129">`[` と `]` のトークンを使用して項目にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-129">You access items using the `[` and `]` tokens.</span></span> <span data-ttu-id="bd6d6-130">既に記述したコードの下に、次のコードを追加して試してみます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-130">Add the following code below what you've already written and try it:</span></span>

      ```csharp
      Console.WriteLine($"My name is {names[0]}.");
      Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");
      ```

      <span data-ttu-id="bd6d6-131">リストの末尾を越えてアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-131">You're not allowed to access past the end of the list.</span></span> <span data-ttu-id="bd6d6-132"><xref:System.Collections.Generic.List%601.Count%2A> プロパティを使用すれば、リストの長さを確認できます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-132">You can check how long the list is using the <xref:System.Collections.Generic.List%601.Count%2A> property.</span></span> <span data-ttu-id="bd6d6-133">次のコードを追加して試してみます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-133">Add the following code to try it:</span></span>

      ```csharp
      Console.WriteLine($"The list has {names.Count} people in it");
      ```

      <span data-ttu-id="bd6d6-134">もう一度 **[実行]** をクリックして結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-134">Click **Run** again to see the results.</span></span> <span data-ttu-id="bd6d6-135">C# ではインデックスは 0 から始まるため、有効なインデックスの最大値はリスト内の項目の数より 1 小さくなります。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-135">In C#, indices start at 0, so the largest valid index is one less than the number of items in the list.</span></span>

      > [!NOTE]
      > <span data-ttu-id="bd6d6-136">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-136">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bd6d6-137">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-137">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="bd6d6-138">リストを検索して並び替える</span><span class="sxs-lookup"><span data-stu-id="bd6d6-138">Search and sort lists</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="bd6d6-139">サンプルでは比較的小さいリストを使用していますが、ご利用のアプリケーションでは、より多くの (場合によっては何千もの) 要素が含まれるリストを作成することもよくあるかもしれません。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-139">Our samples use relatively small lists, but your applications may often create lists with many more elements, sometimes numbering in the thousands.</span></span> <span data-ttu-id="bd6d6-140">そうした大規模なコレクションの中から要素を見つけるには、別々の項目をリストで検索する必要があります。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-140">To find elements in these larger collections, you need to search the list for different items.</span></span> <span data-ttu-id="bd6d6-141"><xref:System.Collections.Generic.List%601.IndexOf%2A> メソッドは項目を検索し、その項目のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-141">The <xref:System.Collections.Generic.List%601.IndexOf%2A> method searches for an item and returns the index of the item.</span></span> <span data-ttu-id="bd6d6-142">これを試して動作を確認してください。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-142">Try this to see how it works.</span></span>  <span data-ttu-id="bd6d6-143">これまでに記述したコードの下に、次のコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-143">Add the following code below what you've written so far:</span></span>

      ```csharp
      var index = names.IndexOf("Felipe");
      if (index != -1)
        Console.WriteLine($"The name {names[index]} is at index {index}");

      var notFound = names.IndexOf("Not Found");
        Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
      ```

      <span data-ttu-id="bd6d6-144">リストに項目があるかどうかわからないこともあるため、常に <xref:System.Collections.Generic.List%601.IndexOf%2A> によって返されるインデックスをチェックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-144">You may not know if an item is in the list, so you should always check the index returned by <xref:System.Collections.Generic.List%601.IndexOf%2A>.</span></span> <span data-ttu-id="bd6d6-145">それが -1 だった場合は、項目が見つからなかったことを意味します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-145">If it is -1, the item was not found.</span></span>

      <span data-ttu-id="bd6d6-146">同じように、リスト内の項目を並び替えできます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-146">The items in your list can be sorted as well.</span></span> <span data-ttu-id="bd6d6-147"><xref:System.Collections.Generic.List%601.Sort%2A> メソッドは、リスト内のすべての項目を正規順序 (文字列の場合はアルファベット順) で並び替えます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-147">The <xref:System.Collections.Generic.List%601.Sort%2A> method sorts all the items in the list in their normal order (alphabetically in the case of strings).</span></span> <span data-ttu-id="bd6d6-148">次のコードを追加し、もう一度実行します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-148">Add this code and run again:</span></span>

      ```csharp
      names.Sort();
      foreach (var name in names)
      {
        Console.WriteLine($"Hello {name.ToUpper()}!");
      }
      ```

      > [!NOTE]
      > <span data-ttu-id="bd6d6-149">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-149">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bd6d6-150">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-150">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="bd6d6-151">その他の型のリスト</span><span class="sxs-lookup"><span data-stu-id="bd6d6-151">Lists of other types</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="bd6d6-152">ここまでは、リスト内で `string` 型を使用してきました。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-152">You've been using the `string` type in lists so far.</span></span> <span data-ttu-id="bd6d6-153">別の型を使用して <xref:System.Collections.Generic.List%601> を作成してみましょう。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-153">Let's make a <xref:System.Collections.Generic.List%601> using a different type.</span></span> <span data-ttu-id="bd6d6-154">数値のセットを作成します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-154">Let's build a set of numbers.</span></span> <span data-ttu-id="bd6d6-155">これまでに記述したコードを削除し、次のコードに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-155">Delete the code you wrote so far, and replace it with this:</span></span>

      ```csharp
      var fibonacciNumbers = new List<int> {1, 1};
      ```

      <span data-ttu-id="bd6d6-156">これにより整数のリストが作成され、最初の 2 つの整数が値 1 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-156">That creates a list of integers, and sets the first two integers to the value 1.</span></span> <span data-ttu-id="bd6d6-157">これらは、数列の 1 つである*フィボナッチ数列*の最初の 2 つの値です。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-157">These are the first two values of a *Fibonacci Sequence*, a sequence of numbers.</span></span> <span data-ttu-id="bd6d6-158">次のフィボナッチ数はそれぞれ、その直前の 2 つの数値の合計を取得することによって得られます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-158">Each next Fibonacci number is found by taking the sum of the previous two numbers.</span></span> <span data-ttu-id="bd6d6-159">このコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-159">Add this code:</span></span>

      ```csharp
      var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
      var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

      fibonacciNumbers.Add(previous + previous2);

      foreach(var item in fibonacciNumbers)
          Console.WriteLine(item);
      ```

      <span data-ttu-id="bd6d6-160">**[実行]** をクリックして結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-160">Press **Run** to see the results;</span></span>

      > [!NOTE]
      > <span data-ttu-id="bd6d6-161">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-161">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bd6d6-162">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-162">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="bd6d6-163">課題</span><span class="sxs-lookup"><span data-stu-id="bd6d6-163">Challenge</span></span>
    durationInMinutes: 10
    content: |
      <span data-ttu-id="bd6d6-164">このレッスンと以前のレッスンの中から、いくつかのレッスンの内容をまとめて理解できているかどうかを確認してみましょう。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-164">See if you can put together some of the lessons from this and earlier lessons.</span></span> <span data-ttu-id="bd6d6-165">ここまでフィボナッチ数を使用して作成してきたコードを使ってください。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-165">Expand on what you've built so far with Fibonacci Numbers.</span></span> <span data-ttu-id="bd6d6-166">シーケンスの最初の 20 個の数を生成するコードを記述してみましょう。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-166">Try and write the code to generate the first 20 numbers in the sequence.</span></span>

      > [!NOTE]
      > <span data-ttu-id="bd6d6-167">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-167">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bd6d6-168">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-168">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="bd6d6-169">課題完了</span><span class="sxs-lookup"><span data-stu-id="bd6d6-169">Complete challenge</span></span>
    durationInMinutes: 3
    content: |
      <span data-ttu-id="bd6d6-170">コードは次のようになりましたか? </span><span class="sxs-lookup"><span data-stu-id="bd6d6-170">Did you come up with something like this?</span></span>

      ```csharp
      var fibonacciNumbers = new List<int> {1, 1};

      while (fibonacciNumbers.Count < 20)
      {
          var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
          var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];
          
          fibonacciNumbers.Add(previous + previous2);
      }
      foreach(var item in fibonacciNumbers)
          Console.WriteLine(item);
      ```

      <span data-ttu-id="bd6d6-171">ループの繰り返しごとに、リストの最後の 2 つの整数を取得して合計し、その値をリストに追加しています。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-171">With each iteration of the loop, you're taking the last two integers in the list, summing them, and adding that value to the list.</span></span> <span data-ttu-id="bd6d6-172">このループは、20 個の項目がリストに追加されるまで繰り返されます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-172">The loop repeats until you've added 20 items to the list.</span></span>

      > [!NOTE]
      > <span data-ttu-id="bd6d6-173">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-173">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bd6d6-174">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-174">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - content: |
      <span data-ttu-id="bd6d6-175">リストについてのチュートリアルはこれで終了です。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-175">You've completed the list tutorial.</span></span>

      <span data-ttu-id="bd6d6-176">`List` 型の使用方法の詳細については、[.NET ガイド](../../standard/index.md)の[コレクション](../../standard/collections/index.md)に関するトピックで学習できます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-176">You can learn more about working with the `List` type in the [.NET Guide](../../standard/index.md) topic on [collections](../../standard/collections/index.md).</span></span> <span data-ttu-id="bd6d6-177">その他の多くのコレクション型についても学習できます。</span><span class="sxs-lookup"><span data-stu-id="bd6d6-177">You'll also learn about many other collection types.</span></span>