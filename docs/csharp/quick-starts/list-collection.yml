### YamlMime:YamlDocument
documentType: Tutorial
title: "<span data-ttu-id=\"2113c-101\">C# のコレクション</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-101\">Collections in C#</span></span>"
metadata:
  title: "C# のコレクション。 C# のシーケンスとコレクションの使用方法について説明します。"
  description: "このチュートリアルでは、ブラウザーを使用して C# を対話形式で学習できます。 C# コードを記述し、ブラウザーで直接コードをコンパイルして、実行した結果を確認します。"
  audience: Developer
  ms.custom: mvc
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: e00cf6badcbd39cc1e9320095169d86efb9cad8f
  ms.sourcegitcommit: 401c4427a3ec0d1263543033b3084039278509dc
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 12/07/2017
items:
- durationInMinutes: 1
  content: "<span data-ttu-id=\"2113c-106\">このクイック スタートでは C# を対話形式で学習できます。ブラウザーを使用して C# コードを記述し、コードをコンパイルして実行した結果を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-106\">This quick start teaches you C# interactively, using your browser to write C# code and see the results of compiling and running your code.</span></span> <span data-ttu-id=\"2113c-107\">このチュートリアルには、コレクションと配列を作成、変更、確認する一連のレッスンが含まれています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-107\">It contains a series of lessons that create, modify and explore collections and arrays.</span></span>\n"
- title: "<span data-ttu-id=\"2113c-108\">リストを作成する</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-108\">Create lists</span></span>"
  durationInMinutes: 2
  content: "<span data-ttu-id=\"2113c-109\">対話型ウィンドウで次のコードを実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-109\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"2113c-110\">そのためには、対話型ウィンドウで次のコード ブロックを入力し (\"<name>\" を自分の名前に置き換えて)、**[実行]** をクリックします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-110\">To do that, type the following code block in the interactive window (replace \"<name>\" with your name) and click the **Run** button:</span></span>\n\n```csharp\nvar names = new List<string> { \"<name>\", \"Ana\", \"Felipe\" };\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\n<span data-ttu-id=\"2113c-111\">文字列のリストを作成し、そのリストに 3 つの名前を追加し、それらの名前をすべて大文字で出力しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-111\">You've just created a list of strings, added three names to that list, and printed out the names in all CAPS.</span></span> <span data-ttu-id=\"2113c-112\">先のクイック スタートで学習した概念を使用して、リストをループしています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-112\">You're using concepts that you've learned in earlier quick starts to loop through the list.</span></span>\n\n<span data-ttu-id=\"2113c-113\">名前を表示するコードは、**補間文字列**を使用します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-113\">The code to display names makes use of **interpolated strings**.</span></span>  <span data-ttu-id=\"2113c-114\">`string` の前に文字 `$` を配置すると、文字列宣言に C# コードを埋め込むことができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-114\">When you precede a `string` with the `$` character, you can embed C# code in the string declaration.</span></span> <span data-ttu-id=\"2113c-115\">実際の文字列は、生成する値でその C# コードを置き換えます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-115\">The actual string replaces that C# code with the value it generates.</span></span> <span data-ttu-id=\"2113c-116\">この例では、<xref:System.String.ToUpper%2A> メソッドを呼び出したため、文字列は `{name.ToUpper()}` をそれぞれの名前に置き換え、文字を大文字に変換しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-116\">In this example, it replaces the `{name.ToUpper()}` with each name, converted to capital letters, because you called the <xref:System.String.ToUpper%2A> method.</span></span>\n\n<span data-ttu-id=\"2113c-117\">続けて確認していきましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-117\">Let's keep exploring.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"2113c-118\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-118\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"2113c-119\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-119\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"2113c-120\">リスト コンテンツを変更する</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-120\">Modify list contents</span></span>"
  durationInMinutes: 3
  content: "<span data-ttu-id=\"2113c-121\">作成したコレクションは <xref:System.Collections.Generic.List%601> 型を使用します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-121\">The collection you created uses the <xref:System.Collections.Generic.List%601> type.</span></span> <span data-ttu-id=\"2113c-122\">この型は、要素のシーケンスを格納します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-122\">This type stores sequences of elements.</span></span> <span data-ttu-id=\"2113c-123\">要素の型を山かっこの内側で指定します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-123\">You specify the type of the elements between the angle brackets.</span></span>\n\n<span data-ttu-id=\"2113c-124\">この <xref:System.Collections.Generic.List%601> 型の重要な点は増減が可能で、要素を追加したり削除したりできることです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-124\">One important aspect of this <xref:System.Collections.Generic.List%601> type is that it can grow or shrink, enabling you to add or remove elements.</span></span> <span data-ttu-id=\"2113c-125\">既に記述したコードの下に、次のコードを追加します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-125\">Add the following code below the code you've already written:</span></span>\n\n```csharp\nConsole.WriteLine();\nnames.Add(\"Maria\");\nnames.Add(\"Bill\");\nnames.Remove(\"Ana\");\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\n<span data-ttu-id=\"2113c-126\">さらに 2 つの名前をリストの末尾に追加しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-126\">You've added two more names to the end of the list.</span></span> <span data-ttu-id=\"2113c-127\">また、1 つを削除しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-127\">You've also removed one as well.</span></span>\n\n<span data-ttu-id=\"2113c-128\"><xref:System.Collections.Generic.List%601> を使用すると、**インデックス**でも個々の項目を参照できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-128\">The <xref:System.Collections.Generic.List%601> enables you to reference individual items by **index** as well.</span></span> <span data-ttu-id=\"2113c-129\">`[` と `]` のトークンを使用して項目にアクセスします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-129\">You access items using the `[` and `]` tokens.</span></span> <span data-ttu-id=\"2113c-130\">既に記述したコードの下に、次のコードを追加して試してみます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-130\">Add the following code below what you've already written and try it:</span></span>\n\n```csharp\nConsole.WriteLine($\"My name is {names[0]}.\");\nConsole.WriteLine($\"I've added {names[2]} and {names[3]} to the list.\");\n```\n\n<span data-ttu-id=\"2113c-131\">リストの末尾を越えてアクセスすることはできません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-131\">You're not allowed to access past the end of the list.</span></span> <span data-ttu-id=\"2113c-132\"><xref:System.Collections.Generic.List%601.Count%2A> プロパティを使用すれば、リストの長さを確認できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-132\">You can check how long the list is using the <xref:System.Collections.Generic.List%601.Count%2A> property.</span></span> <span data-ttu-id=\"2113c-133\">次のコードを追加して試してみます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-133\">Add the following code to try it:</span></span>\n\n```csharp\nConsole.WriteLine($\"The list has {names.Count} people in it\");\n```\n\n<span data-ttu-id=\"2113c-134\">もう一度 **[実行]** をクリックして結果を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-134\">Click **Run** again to see the results.</span></span> <span data-ttu-id=\"2113c-135\">C# ではインデックスは 0 から始まるため、有効なインデックスの最大値はリスト内の項目の数より 1 小さくなります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-135\">In C#, indices start at 0, so the largest valid index is one less than the number of items in the list.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"2113c-136\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-136\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"2113c-137\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-137\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"2113c-138\">リストを検索して並び替える</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-138\">Search and sort lists</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"2113c-139\">サンプルでは比較的小さいリストを使用していますが、ご利用のアプリケーションでは、より多くの (場合によっては何千もの) 要素が含まれるリストを作成することもよくあるかもしれません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-139\">Our samples use relatively small lists, but your applications may often create lists with many more elements, sometimes numbering in the thousands.</span></span> <span data-ttu-id=\"2113c-140\">そうした大規模なコレクションの中から要素を見つけるには、別々の項目をリストで検索する必要があります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-140\">To find elements in these larger collections, you need to search the list for different items.</span></span> <span data-ttu-id=\"2113c-141\"><xref:System.Collections.Generic.List%601.IndexOf%2A> メソッドは項目を検索し、その項目のインデックスを返します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-141\">The <xref:System.Collections.Generic.List%601.IndexOf%2A> method searches for an item and returns the index of the item.</span></span> <span data-ttu-id=\"2113c-142\">これを試して動作を確認してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-142\">Try this to see how it works.</span></span>  <span data-ttu-id=\"2113c-143\">これまでに記述したコードの下に、次のコードを追加します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-143\">Add the following code below what you've written so far:</span></span>\n\n```csharp\nvar index = names.IndexOf(\"Felipe\");\nif (index != -1)\n  Console.WriteLine($\"The name {names[index]} is at index {index}\");\n\nvar notFound = names.IndexOf(\"Not Found\");\n  Console.WriteLine($\"When an item is not found, IndexOf returns {notFound}\");\n```\n\n<span data-ttu-id=\"2113c-144\">リストに項目があるかどうかわからないこともあるため、常に <xref:System.Collections.Generic.List%601.IndexOf%2A> によって返されるインデックスをチェックする必要があります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-144\">You may not know if an item is in the list, so you should always check the index returned by <xref:System.Collections.Generic.List%601.IndexOf%2A>.</span></span> <span data-ttu-id=\"2113c-145\">それが -1 だった場合は、項目が見つからなかったことを意味します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-145\">If it is -1, the item was not found.</span></span>\n\n<span data-ttu-id=\"2113c-146\">同じように、リスト内の項目を並び替えできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-146\">The items in your list can be sorted as well.</span></span> <span data-ttu-id=\"2113c-147\"><xref:System.Collections.Generic.List%601.Sort%2A> メソッドは、リスト内のすべての項目を正規順序 (文字列の場合はアルファベット順) で並び替えます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-147\">The <xref:System.Collections.Generic.List%601.Sort%2A> method sorts all the items in the list in their normal order (alphabetically in the case of strings).</span></span> <span data-ttu-id=\"2113c-148\">次のコードを追加し、もう一度実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-148\">Add this code and run again:</span></span>\n\n```csharp\nnames.Sort();\nforeach (var name in names)\n{\n  Console.WriteLine($\"Hello {name.ToUpper()}!\");\n}\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"2113c-149\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-149\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"2113c-150\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-150\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"2113c-151\">その他の型のリスト</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-151\">Lists of other types</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"2113c-152\">ここまでは、リスト内で `string` 型を使用してきました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-152\">You've been using the `string` type in lists so far.</span></span> <span data-ttu-id=\"2113c-153\">別の型を使用して <xref:System.Collections.Generic.List%601> を作成してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-153\">Let's make a <xref:System.Collections.Generic.List%601> using a different type.</span></span> <span data-ttu-id=\"2113c-154\">数値のセットを作成します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-154\">Let's build a set of numbers.</span></span> <span data-ttu-id=\"2113c-155\">これまでに記述したコードを削除し、次のコードに置き換えます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-155\">Delete the code you wrote so far, and replace it with this:</span></span>\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n```\n\n<span data-ttu-id=\"2113c-156\">これにより整数のリストが作成され、最初の 2 つの整数が値 1 に設定されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-156\">That creates a list of integers, and sets the first two integers to the value 1.</span></span> <span data-ttu-id=\"2113c-157\">これらは、数列の 1 つである*フィボナッチ数列*の最初の 2 つの値です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-157\">These are the first two values of a *Fibonacci Sequence*, a sequence of numbers.</span></span> <span data-ttu-id=\"2113c-158\">次のフィボナッチ数はそれぞれ、その直前の 2 つの数値の合計を取得することによって得られます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-158\">Each next Fibonacci number is found by taking the sum of the previous two numbers.</span></span> <span data-ttu-id=\"2113c-159\">このコードを追加します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-159\">Add this code:</span></span>\n\n```csharp\nvar previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\nvar previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n\nfibonacciNumbers.Add(previous + previous2);\n\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\n<span data-ttu-id=\"2113c-160\">**[実行]** をクリックして結果を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-160\">Press **Run** to see the results;</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"2113c-161\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-161\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"2113c-162\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-162\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"2113c-163\">課題</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-163\">Challenge</span></span>"
  durationInMinutes: 10
  content: "<span data-ttu-id=\"2113c-164\">このレッスンと以前のレッスンの中から、いくつかのレッスンの内容をまとめて理解できているかどうかを確認してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-164\">See if you can put together some of the lessons from this and earlier lessons.</span></span> <span data-ttu-id=\"2113c-165\">ここまでフィボナッチ数を使用して作成してきたコードを使ってください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-165\">Expand on what you've built so far with Fibonacci Numbers.</span></span> <span data-ttu-id=\"2113c-166\">シーケンスの最初の 20 個の数を生成するコードを記述してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-166\">Try and write the code to generate the first 20 numbers in the sequence.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"2113c-167\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-167\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"2113c-168\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-168\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"2113c-169\">課題完了</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-169\">Complete challenge</span></span>"
  durationInMinutes: 3
  content: "<span data-ttu-id=\"2113c-170\">コードは次のようになりましたか? </span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-170\">Did you come up with something like this?</span></span>\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n\nwhile (fibonacciNumbers.Count < 20)\n{\n    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\n    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n    \n    fibonacciNumbers.Add(previous + previous2);\n}\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\n<span data-ttu-id=\"2113c-171\">ループの繰り返しごとに、リストの最後の 2 つの整数を取得して合計し、その値をリストに追加しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-171\">With each iteration of the loop, you're taking the last two integers in the list, summing them, and adding that value to the list.</span></span> <span data-ttu-id=\"2113c-172\">このループは、20 個の項目がリストに追加されるまで繰り返されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-172\">The loop repeats until you've added 20 items to the list.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"2113c-173\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-173\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"2113c-174\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-174\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"2113c-175\">リストのクイック スタートはこれで終了です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-175\">You've completed the list quick start.</span></span> <span data-ttu-id=\"2113c-176\">このクイック スタートは、最後の対話型クイック スタートです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-176\">This quick start is the final interactive quick start.</span></span> <span data-ttu-id=\"2113c-177\">これまでのクイック スタートを、ご自身の開発環境でも使い続けることができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-177\">You can continue these quickstarts on your own development environment.</span></span> <span data-ttu-id=\"2113c-178\">ローカルの開発環境の設定手順については、.NET の [10 分でわかる概要](https://www.microsoft.com/net/core)に関するトピックに記載されています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-178\">The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment.</span></span> <span data-ttu-id=\"2113c-179\">設定が完了したら、ローカルの開発環境で「[Introduction to classes](introduction-to-classes.md)」(クラスの概要) を進めてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-179\">Once you've done that, continue with [Introduction to classes](introduction-to-classes.md) in your local environment.</span></span>\n\n<span data-ttu-id=\"2113c-180\">`List` 型の使用方法の詳細については、[.NET ガイド](../../standard/index.md)の[コレクション](../../standard/collections/index.md)に関するトピックで学習できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-180\">You can learn more about working with the `List` type in the [.NET Guide](../../standard/index.md) topic on [collections](../../standard/collections/index.md).</span></span> <span data-ttu-id=\"2113c-181\">その他の多くのコレクション型についても学習できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"2113c-181\">You'll also learn about many other collection types.</span></span>\0"
