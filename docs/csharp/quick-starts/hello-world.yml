### YamlMime:Tutorial
title: <span data-ttu-id="a9d86-101">Hello C#</span><span class="sxs-lookup"><span data-stu-id="a9d86-101">Hello C#</span></span>
metadata:
  title: Hello World C# の対話形式チュートリアル - C# クイックスタート
  description: このクイックスタートでは、ブラウザーを使用して C# を対話形式で学習できます。 C# コードを記述し、ブラウザーで直接コードをコンパイルして、実行した結果を確認します。
  audience: Developer
  level: Beginner
  ms.topic: quickstart
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: <span data-ttu-id="a9d86-105">C# の数値</span><span class="sxs-lookup"><span data-stu-id="a9d86-105">Numbers in C#</span></span>
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 395ed81b5845047063d84469d91e3d03f17f12ae
  ms.sourcegitcommit: 54231aa56fca059e9297888a96fbca1d4cf3746c
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/25/2018
  ms.locfileid: "34549673"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="a9d86-106">このクイックスタートでは C# を対話形式で学習できます。ブラウザーを使用して C# を記述し、コードをコンパイルして実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="a9d86-106">This quickstart teaches you C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="a9d86-107">このチュートリアルには、"Hello World" プログラムを開始する一連のレッスンが含まれています。</span><span class="sxs-lookup"><span data-stu-id="a9d86-107">It contains a series of lessons that begin with a "Hello World" program.</span></span> <span data-ttu-id="a9d86-108">これらのレッスンでは、C# 言語の基本を説明します。</span><span class="sxs-lookup"><span data-stu-id="a9d86-108">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="a9d86-109">最初の C# プログラムの実行</span><span class="sxs-lookup"><span data-stu-id="a9d86-109">Run your first C# program</span></span>
  durationInMinutes: 2
  content: "<span data-ttu-id=\"a9d86-110\">対話型ウィンドウで次のコードを実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"a9d86-111\">そのためには、対話型ウィンドウで次のコード ブロックを入力し、**[実行]** をクリックします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-111\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\n<span data-ttu-id=\"a9d86-112\">おめでとうございます! </span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-112\">Congratulations!</span></span> <span data-ttu-id=\"a9d86-113\">最初の C# プログラムを実行しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-113\">You've run your first C# program.</span></span> <span data-ttu-id=\"a9d86-114\">これは \"Hello World!\" というメッセージを出力する単純なプログラムです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-114\">It's a simple program that prints the message \"Hello World!\".</span></span> <span data-ttu-id=\"a9d86-115\"><xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドを使用してこのメッセージを出力しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-115\">It used the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method to print that message.</span></span> <span data-ttu-id=\"a9d86-116\">`Console` は、コンソール ウィンドウを表す型です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-116\">`Console` is a type that represents the console window.</span></span> <span data-ttu-id=\"a9d86-117\">`WriteLine` は、そのテキスト コンソールに 1 行のテキストを出力する `Console` 型の 1 つのメソッドです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-117\">`WriteLine` is a method of the `Console` type that prints a line of text to that text console.</span></span>\n\n<span data-ttu-id=\"a9d86-118\">次に進んで、さらに詳しく見てみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-118\">Let's move on and explore more.</span></span> <span data-ttu-id=\"a9d86-119\">このレッスンの残りの部分では、C# においてテキストを表す `string` 型の機能を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-119\">The rest of this lesson explores working with the `string` type, which represents text in C#.</span></span> <span data-ttu-id=\"a9d86-120\">`Console` 型と同じように、`string` 型にもメソッドがあります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-120\">Like the `Console` type, the `string` type has methods.</span></span> <span data-ttu-id=\"a9d86-121\">`string` メソッドはテキストを処理します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-121\">The `string` methods work with text.</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"a9d86-122\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-122\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a9d86-123\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-123\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="a9d86-124">変数の宣言と使用</span><span class="sxs-lookup"><span data-stu-id="a9d86-124">Declare and use variables</span></span>
  durationInMinutes: 3
  content: "<span data-ttu-id=\"a9d86-125\">最初のプログラムでは、`string` の \"Hello World!\" を</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-125\">Your first program printed the `string` \"Hello World!\"</span></span> <span data-ttu-id=\"a9d86-126\">画面に出力しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-126\">on the screen.</span></span> \n\n> [!TIP]\n> <span data-ttu-id=\"a9d86-127\">C# (または何らかのプログラミング言語) について詳しく学習するに従い、コードを記述する際にミスをすることもあるでしょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-127\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"a9d86-128\">**コンパイラ**は、そうしたエラーを発見して報告します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-128\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"a9d86-129\">エラー メッセージが出力された場合は、例のコードをよく確認して、対話型ウィンドウで修正すべきコードを見つけます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-129\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"a9d86-130\">こうした実習が C# コードの構造を理解するのに役立ちます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-130\">That exercise will help you learn the structure of C# code.</span></span> \n\n<span data-ttu-id=\"a9d86-131\">最初のプログラムは、1 つのメッセージしか出力できません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-131\">Your first program is limited to printing one message.</span></span> <span data-ttu-id=\"a9d86-132\">**変数**を使用すると、もっと役立つプログラムを記述できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-132\">You can write more useful programs by using **variables**.</span></span> <span data-ttu-id=\"a9d86-133\">**変数**は、同じコードを別の値で実行するのに使用できる記号です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-133\">A **variable** is a symbol you can use to run the same code with different values.</span></span> <span data-ttu-id=\"a9d86-134\">試してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-134\">Let's try it!</span></span> <span data-ttu-id=\"a9d86-135\">対話型ウィンドウで記述したコードを次のコードに置き換えます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-135\">Replace the code you've written in the interactive window with the following code:</span></span>\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\n<span data-ttu-id=\"a9d86-136\">最初の行で変数 `aFriend` を宣言し、その変数に \"Bill\" という値を代入しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-136\">The first line declares a variable, `aFriend` and assigns it a value, \"Bill\".</span></span> <span data-ttu-id=\"a9d86-137\">2 番目の行でその名前を出力しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-137\">The second line prints out the name.</span></span>\n\n<span data-ttu-id=\"a9d86-138\">宣言した変数に別の値を代入できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-138\">You can assign different values to any variable you declare.</span></span> <span data-ttu-id=\"a9d86-139\">この名前を友人の名前に変更できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-139\">You can change the name to one of your friends.</span></span> <span data-ttu-id=\"a9d86-140\">対話型ウィンドウで、先ほど追加したコードのあとに次の 2 行を追加します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-140\">Add these two lines in the interactive window following the code you've already added:</span></span>\n\n```csharp\naFriend = \"Maira\";\nConsole.WriteLine(aFriend);\n```\n\n<span data-ttu-id=\"a9d86-141\">`aFriend` 変数に格納された値に基づいて、コードの同じ行に 2 つの異なるメッセージが表示されていることに注目してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-141\">Notice that the same line of code prints two different messages, based on the value stored in the `aFriend` variable.</span></span>\n\n<span data-ttu-id=\"a9d86-142\">お気付きかと思いますが、最後の 2 つのメッセージから \"Hello\" という言葉がなくなっています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-142\">You may have also noticed that the word \"Hello\" was missing in the last two messages.</span></span> <span data-ttu-id=\"a9d86-143\">修正しましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-143\">Let's fix that now.</span></span>  <span data-ttu-id=\"a9d86-144\">メッセージを出力する行を次のように変更します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-144\">Modify the lines that print the message to the following:</span></span>\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\n<span data-ttu-id=\"a9d86-145\">もう一度 **[実行]** をクリックして結果を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-145\">Click **Run** again to see the results.</span></span>\n\n<span data-ttu-id=\"a9d86-146\">さらに進めると、`+` を利用して出力する文字列の作成が難しくなります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-146\">As we progress, creating strings to print using `+` becomes cumbersome.</span></span> <span data-ttu-id=\"a9d86-147\">[文字列補間](../language-reference/tokens/interpolated.md)を利用すれば、より簡潔で読みやすい方法で文字列をつなぎ合わせることができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-147\">[String interpolation](../language-reference/tokens/interpolated.md) lets you piece together strings in a more concise and readable way.</span></span>\n\n<span data-ttu-id=\"a9d86-148\">文字列の開始引用符の前に `$` を追加する場合、中かっこの文字列の内部に、`aFriend` 変数など、式を含めることができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-148\">If you add a `$` before the opening quote of the string, you can then include expressions, like the `aFriend` variable, inside the string in curly brackets.</span></span>\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\n<span data-ttu-id=\"a9d86-149\">もう一度 **[実行]** をクリックして結果を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-149\">Click **Run** again to see the results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"a9d86-150\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-150\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a9d86-151\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-151\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="a9d86-152">文字列の処理</span><span class="sxs-lookup"><span data-stu-id="a9d86-152">Work with strings</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="a9d86-153">先ほどの編集を通して、文字列を使って何ができるかを初めて確認しました。</span><span class="sxs-lookup"><span data-stu-id="a9d86-153">Your last edit was our first look at what you can do with strings.</span></span> <span data-ttu-id="a9d86-154">さらに詳しく見てみましょう。</span><span class="sxs-lookup"><span data-stu-id="a9d86-154">Let's explore more.</span></span>


    <span data-ttu-id="a9d86-155">`+` は C# において演算子と呼ばれるものの 1 つです。</span><span class="sxs-lookup"><span data-stu-id="a9d86-155">The `+` is called an operator in C#.</span></span> <span data-ttu-id="a9d86-156">`firstString + secondString` のように文字列に適用すると、1 つ目のテキストに 2 つ目のテキストが続く新しいテキストが作成されます。</span><span class="sxs-lookup"><span data-stu-id="a9d86-156">When applied to strings like `firstString + secondString`, a new string is created with the text from the first followed by the text from the second.</span></span> <span data-ttu-id="a9d86-157">これを*文字列の連結*と言います。</span><span class="sxs-lookup"><span data-stu-id="a9d86-157">This is referred to as *string concatenation*.</span></span> <span data-ttu-id="a9d86-158">文字列変数も含めて、文字列をいくつでも連結できます。</span><span class="sxs-lookup"><span data-stu-id="a9d86-158">You can combine any number of strings, including string variables.</span></span>  <span data-ttu-id="a9d86-159">これを試してみます。</span><span class="sxs-lookup"><span data-stu-id="a9d86-159">Try this:</span></span>


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    <span data-ttu-id="a9d86-160">文字列についてさらに詳しく見ていきます。`Length` を使用して文字列の長さを知ることができます。</span><span class="sxs-lookup"><span data-stu-id="a9d86-160">As you explore more with strings, you can find the length of a string using `Length`.</span></span> <span data-ttu-id="a9d86-161">`Length` は文字列の**プロパティ**であり、その文字列の文字数を返します。</span><span class="sxs-lookup"><span data-stu-id="a9d86-161">`Length` is a **property** of a string and it returns the number of characters in that string.</span></span> <span data-ttu-id="a9d86-162">対話型ウィンドウの下部に次のコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="a9d86-162">Add the following code at the bottom of the interactive window:</span></span>


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > <span data-ttu-id="a9d86-163">このあたりで、自分で試してみるといいでしょう。</span><span class="sxs-lookup"><span data-stu-id="a9d86-163">This is a good time to explore on your own.</span></span> <span data-ttu-id="a9d86-164">`Console.WriteLine()` を使用して画面にテキストを出力できることを学習しました。</span><span class="sxs-lookup"><span data-stu-id="a9d86-164">You've learned that `Console.WriteLine()` writes text to the screen.</span></span> <span data-ttu-id="a9d86-165">変数を宣言して文字列同士を連結する方法についても学習しました。</span><span class="sxs-lookup"><span data-stu-id="a9d86-165">You've learned how to declare variables and concatenate strings together.</span></span> <span data-ttu-id="a9d86-166">対話型ウィンドウで実際に確認してみてください。</span><span class="sxs-lookup"><span data-stu-id="a9d86-166">Experiment in the interactive window.</span></span> <span data-ttu-id="a9d86-167">自分でより多くのメッセージを記述してみるとよいでしょう。</span><span class="sxs-lookup"><span data-stu-id="a9d86-167">Write some more messages yourself.</span></span> <span data-ttu-id="a9d86-168">`+` 演算子を使用して文字列を作成してください。</span><span class="sxs-lookup"><span data-stu-id="a9d86-168">Build strings using the `+` operator.</span></span>


    > [!NOTE]

    > <span data-ttu-id="a9d86-169">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="a9d86-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a9d86-170">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="a9d86-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="a9d86-171">文字列の追加操作</span><span class="sxs-lookup"><span data-stu-id="a9d86-171">Do more with strings</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"a9d86-172\">メッセージを出力するのに <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> **メソッド**を使用してきました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-172\">You've been using a **method**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, to print messages.</span></span> <span data-ttu-id=\"a9d86-173\">**メソッド**は、何らかのアクションを実装したコードのブロックです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-173\">A **method** is a block of code that implements some action.</span></span> <span data-ttu-id=\"a9d86-174\">メソッドに名前があることで、それにアクセスできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-174\">It has a name, so you can access it.</span></span> \n\n<span data-ttu-id=\"a9d86-175\">`string` 型には多くの便利なメソッドがあります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-175\">The `string` type has many useful methods.</span></span> <span data-ttu-id=\"a9d86-176\"><xref:System.String.Trim%2A> メソッドと、それに関連した <xref:System.String.TrimStart%2A> と <xref:System.String.TrimEnd%2A> メソッドを使ってみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-176\">Let's explore the <xref:System.String.Trim%2A> method, and related methods <xref:System.String.TrimStart%2A> and <xref:System.String.TrimEnd%2A>.</span></span> <span data-ttu-id=\"a9d86-177\">これらのメソッドは、先頭と末尾にあるスペースを削除します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-177\">These methods remove leading and trailing spaces:</span></span>\n\n```csharp\nstring greeting = \"      Hello World!       \";\nConsole.WriteLine($\"[{greeting}]\");\n\nstring trimmedGreeting = greeting.TrimStart();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.TrimEnd();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.Trim();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n```\n\n<span data-ttu-id=\"a9d86-178\">このサンプルでは、文字列を処理するための重要な概念のいくつかを説明しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-178\">This sample reinforces a couple of important concepts for working with strings.</span></span> <span data-ttu-id=\"a9d86-179\">文字列を操作するメソッドは、定位置に変更を加えるのではなく、新しい文字列オブジェクトを返します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-179\">The methods that manipulate strings return new string objects rather than making modifications in place.</span></span> <span data-ttu-id=\"a9d86-180\">`Trim` メソッドのいずれかに対する各呼び出しは新しい文字列を返すが元のメッセージを変更しない、ということが確認できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-180\">You can see that each call to any of the `Trim` methods returns a new string, but does not change the original message.</span></span>\n\n<span data-ttu-id=\"a9d86-181\">文字列を処理するメソッドは他にもあります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-181\">There are other methods available to work with a string.</span></span> <span data-ttu-id=\"a9d86-182\">たとえば、エディターやワード プロセッサで検索と置換のコマンドを使用したことがあるかもしれません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-182\">For example, you've probably used a search and replace command in an editor or word processor.</span></span> <span data-ttu-id=\"a9d86-183\"><xref:System.String.Replace%2A> メソッドはそれと似た処理を `string` で行います。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-183\">The <xref:System.String.Replace%2A> method does something similar in a `string`.</span></span> <span data-ttu-id=\"a9d86-184\">このメソッドは部分文字列を検索し、それを別のテキストに置き換えます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-184\">It searches for a substring, and replaces it with different text.</span></span> <span data-ttu-id=\"a9d86-185\"><xref:System.String.Replace%2A> メソッドは、2 つの**パラメーター**を受け取ります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-185\">The <xref:System.String.Replace%2A> method takes two **parameters**.</span></span> <span data-ttu-id=\"a9d86-186\">パラメーターは丸かっこ内の文字列です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-186\">These are the strings between the parentheses.</span></span> <span data-ttu-id=\"a9d86-187\">最初の文字列は、検索対象のテキストです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-187\">The first string is the text to search for.</span></span> <span data-ttu-id=\"a9d86-188\">2 つ目の文字列は、置換後のテキストです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-188\">The second string is the text to replace it with.</span></span> <span data-ttu-id=\"a9d86-189\">ご自分で試してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-189\">Try it for yourself.</span></span> <span data-ttu-id=\"a9d86-190\">このコードを追加します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-190\">Add this code:</span></span>\n\n```csharp\nstring sayHello = \"Hello World!\";\nConsole.WriteLine(sayHello);\nsayHello = sayHello.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(sayHello);\n```\n\n<span data-ttu-id=\"a9d86-191\">その他にも役立つメソッドが 2 つあり、1 つは文字列のすべてを大文字にし、もう 1 つは文字列のすべてを小文字にします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-191\">Two other useful methods make a string ALL CAPS or all lower case.</span></span> <span data-ttu-id=\"a9d86-192\">次のコードを試してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-192\">Try the following code:</span></span>\n\n```csharp\nConsole.WriteLine(sayHello.ToUpper());\nConsole.WriteLine(sayHello.ToLower());\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"a9d86-193\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-193\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a9d86-194\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-194\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="a9d86-195">検索文字列</span><span class="sxs-lookup"><span data-stu-id="a9d86-195">Search strings</span></span>
  durationInMinutes: 10
  content: "<span data-ttu-id=\"a9d86-196\">*検索と置換*の演算子は他にも、文字列内のテキストを検索できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-196\">The other part of a *search and replace* operation is to find text in a string.</span></span> <span data-ttu-id=\"a9d86-197\">検索には <xref:System.String.Contains%2A> メソッドを使用できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-197\">You can use the  <xref:System.String.Contains%2A> method for searching.</span></span> <span data-ttu-id=\"a9d86-198\">これにより、文字列内に部分文字列が含まれているかどうかを確認できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-198\">It tells you if a string contains a substring inside it.</span></span> <span data-ttu-id=\"a9d86-199\">次のコードを試してみて、<xref:System.String.Contains%2A> を確認してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-199\">Try the following code to explore <xref:System.String.Contains%2A>:</span></span>\n\n```csharp\nstring songLyrics = \"You say goodbye, and I say hello\";\nConsole.WriteLine(songLyrics.Contains(\"goodbye\"));\nConsole.WriteLine(songLyrics.Contains(\"greetings\"));\n```\n\n<span data-ttu-id=\"a9d86-200\"><xref:System.String.Contains%2A> メソッドは**ブール値**を返し、検索した文字列が見つかったかどうかを知らせます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-200\">The <xref:System.String.Contains%2A> method returns a **boolean** value which tells you if the string you were searching for was found.</span></span> <span data-ttu-id=\"a9d86-201\">**ブール値**は `true` か `false` どちらかの値を格納します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-201\">A **boolean** stores either a `true` or a `false` value.</span></span> <span data-ttu-id=\"a9d86-202\">**ブール値**については、この後のレッスンで詳しく学習します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-202\">You'll learn more about **boolean** values in a later lesson.</span></span>\n\n<span data-ttu-id=\"a9d86-203\">***課題***</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-203\">***Challenge***</span></span>\n\n<span data-ttu-id=\"a9d86-204\">似たような 2 つのメソッドがあり、<xref:System.String.StartsWith%2A> と <xref:System.String.EndsWith%2A> も文字列内の部分文字列を検索します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-204\">There are two similar methods, <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> that also search for sub-strings in a string.</span></span> <span data-ttu-id=\"a9d86-205\">これらは文字列の先頭または末尾の部分文字列を検索します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-205\">These find a substring at the beginning or the end of the string.</span></span> <span data-ttu-id=\"a9d86-206\">先述のサンプルを変更して、<xref:System.String.Contains%2A> の代わりに <xref:System.String.StartsWith%2A> と <xref:System.String.EndsWith%2A> を使用してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-206\">Try to modify the previous sample to use <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> instead of <xref:System.String.Contains%2A>.</span></span> <span data-ttu-id=\"a9d86-207\">文字列の先頭にある \"You\" または \"goodbye\" を検索します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-207\">Search for \"You\" or \"goodbye\" at the beginning of a string.</span></span> <span data-ttu-id=\"a9d86-208\">文字列の末尾にある \"hello\" または \"goodbye\" を検索します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-208\">Search for \"hello\" or \"goodbye\" at the end of a string.</span></span>\n\n> [!Note]\n> <span data-ttu-id=\"a9d86-209\">文字列の末尾にあるテキストをテストするときは、句読点に注意します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-209\">Watch your punctuation when you test for the text at the end of the string.</span></span> <span data-ttu-id=\"a9d86-210\">文字列が句点で終わる場合は、末尾に句点を含めた文字列を検索する必要があります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-210\">If the string ends with a period, you must check for a string that ends with a period.</span></span>\n\n<span data-ttu-id=\"a9d86-211\">先頭が \"You\" で末尾が \"hello\" の場合は `true`、先頭または末尾が \"goodbye\" の場合は false になります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-211\">You should get `true` for starting with \"You\" and ending with \"hello\" and false for starting with or ending with \"goodbye\".</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"a9d86-212\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-212\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a9d86-213\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a9d86-213\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="a9d86-214">課題完了</span><span class="sxs-lookup"><span data-stu-id="a9d86-214">Complete challenge</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="a9d86-215">コードは次のようになりましたか?</span><span class="sxs-lookup"><span data-stu-id="a9d86-215">Did you come up with something like this?</span></span>


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > <span data-ttu-id="a9d86-216">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="a9d86-216">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a9d86-217">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="a9d86-217">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="a9d86-218">"Hello C#" クイックスタートはこれで終了です。</span><span class="sxs-lookup"><span data-stu-id="a9d86-218">You've completed the "Hello C#" quickstart.</span></span>


    <span data-ttu-id="a9d86-219">`string` 型の機能の詳細については、「[C# プログラミング ガイド](../programming-guide/index.md)」の[文字列](../programming-guide/strings/index.md)に関するトピックで学習できます。</span><span class="sxs-lookup"><span data-stu-id="a9d86-219">You can learn more about working with the `string` type in the [C# Programming Guide](../programming-guide/index.md) topic on [strings](../programming-guide/strings/index.md).</span></span>

    <span data-ttu-id="a9d86-220">[文字列の処理に関するヒント](../how-to/index.md#working-with-strings)もご覧ください。</span><span class="sxs-lookup"><span data-stu-id="a9d86-220">[How to tips on working with strings](../how-to/index.md#working-with-strings).</span></span>
