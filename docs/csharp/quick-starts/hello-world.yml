### YamlMime:Tutorial
title: <span data-ttu-id="5a33a-101">Hello C#</span><span class="sxs-lookup"><span data-stu-id="5a33a-101">Hello C#</span></span>
metadata:
  title: "Hello C#。 C# 言語の最初の導入です。"
  description: "このクイック スタートでは、ブラウザーを使用して C# を対話形式で学習できます。 C# コードを記述し、ブラウザーで直接コードをコンパイルして、実行した結果を確認します。"
  audience: Developer
  level: Beginner
  ms.topic: get-started-article
  nextTutorialHref: numbers-in-csharp
  nextTutorialTitle: "<span data-ttu-id=\"5a33a-106\">C# の数値</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-106\">Numbers in C#</span></span>"
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.openlocfilehash: ca5fbcd903c5fd3aae35a4a1c4842f488d66fcf0
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 1
  content: "<span data-ttu-id=\"5a33a-107\">このクイック スタートでは C# を対話形式で学習できます。ブラウザーを使用して C# を記述し、コードをコンパイルして実行した結果を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-107\">This quick start teaches you C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id=\"5a33a-108\">このチュートリアルには、\"Hello World\" プログラムを開始する一連のレッスンが含まれています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-108\">It contains a series of lessons that begin with a \"Hello World\" program.</span></span> <span data-ttu-id=\"5a33a-109\">これらのレッスンでは、C# 言語の基本を説明します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-109\">These lessons teach you the fundamentals of the C# language.</span></span>\n"
- title: "<span data-ttu-id=\"5a33a-110\">最初の C# プログラムの実行</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-110\">Run your first C# program</span></span>"
  durationInMinutes: 2
  content: "<span data-ttu-id=\"5a33a-111\">対話型ウィンドウで次のコードを実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-111\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"5a33a-112\">そのためには、対話型ウィンドウで次のコード ブロックを入力し、**[実行]** をクリックします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-112\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\n<span data-ttu-id=\"5a33a-113\">おめでとうございます! </span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-113\">Congratulations!</span></span> <span data-ttu-id=\"5a33a-114\">最初の C# プログラムを実行しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-114\">You've run your first C# program.</span></span> <span data-ttu-id=\"5a33a-115\">これは \"Hello World!\" というメッセージを出力する単純なプログラムです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-115\">It's a simple program that prints the message \"Hello World!\".</span></span> <span data-ttu-id=\"5a33a-116\"><xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドを使用してこのメッセージを出力しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-116\">It used the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method to print that message.</span></span> <span data-ttu-id=\"5a33a-117\">`Console` は、コンソール ウィンドウを表す型です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-117\">`Console` is a type that represents the console window.</span></span> <span data-ttu-id=\"5a33a-118\">`WriteLine` は、そのテキスト コンソールに 1 行のテキストを出力する `Console` 型の 1 つのメソッドです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-118\">`WriteLine` is a method of the `Console` type that prints a line of text to that text console.</span></span>\n\n<span data-ttu-id=\"5a33a-119\">次に進んで、さらに詳しく見てみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-119\">Let's move on and explore more.</span></span> <span data-ttu-id=\"5a33a-120\">このレッスンの残りの部分では、C# においてテキストを表す `string` 型の機能を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-120\">The rest of this lesson explores working with the `string` type, which represents text in C#.</span></span> <span data-ttu-id=\"5a33a-121\">`Console` 型と同じように、`string` 型にもメソッドがあります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-121\">Like the `Console` type, the `string` type has methods.</span></span> <span data-ttu-id=\"5a33a-122\">`string` メソッドはテキストを処理します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-122\">The `string` methods work with text.</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"5a33a-123\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-123\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"5a33a-124\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-124\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"5a33a-125\">変数の宣言と使用</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-125\">Declare and use variables</span></span>"
  durationInMinutes: 3
  content: "<span data-ttu-id=\"5a33a-126\">最初のプログラムでは、`string` の \"Hello World!\" を</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-126\">Your first program printed the `string` \"Hello World!\"</span></span> <span data-ttu-id=\"5a33a-127\">画面に出力しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-127\">on the screen.</span></span> \n\n> [!TIP]\n> <span data-ttu-id=\"5a33a-128\">C# (または何らかのプログラミング言語) について詳しく学習するに従い、コードを記述する際にミスをすることもあるでしょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-128\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"5a33a-129\">**コンパイラ**は、そうしたエラーを発見して報告します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-129\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"5a33a-130\">エラー メッセージが出力された場合は、例のコードをよく確認して、対話型ウィンドウで修正すべきコードを見つけます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-130\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"5a33a-131\">こうした実習が C# コードの構造を理解するのに役立ちます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-131\">That exercise will help you learn the structure of C# code.</span></span> \n\n<span data-ttu-id=\"5a33a-132\">最初のプログラムは、1 つのメッセージしか出力できません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-132\">Your first program is limited to printing one message.</span></span> <span data-ttu-id=\"5a33a-133\">**変数**を使用すると、もっと役立つプログラムを記述できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-133\">You can write more useful programs by using **variables**.</span></span> <span data-ttu-id=\"5a33a-134\">**変数**は、同じコードを別の値で実行するのに使用できる記号です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-134\">A **variable** is a symbol you can use to run the same code with different values.</span></span> <span data-ttu-id=\"5a33a-135\">試してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-135\">Let's try it!</span></span> <span data-ttu-id=\"5a33a-136\">対話型ウィンドウで記述したコードを次のコードに置き換えます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-136\">Replace the code you've written in the interactive window with the following code:</span></span>\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\n<span data-ttu-id=\"5a33a-137\">最初の行で変数 `aFriend` を宣言し、その変数に \"Bill\" という値を代入しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-137\">The first line declares a variable, `aFriend` and assigns it a value, \"Bill\".</span></span> <span data-ttu-id=\"5a33a-138\">2 番目の行でその名前を出力しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-138\">The second line prints out the name.</span></span>\n\n<span data-ttu-id=\"5a33a-139\">宣言した変数に別の値を代入できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-139\">You can assign different values to any variable you declare.</span></span> <span data-ttu-id=\"5a33a-140\">この名前を友人の名前に変更できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-140\">You can change the name to one of your friends.</span></span> <span data-ttu-id=\"5a33a-141\">対話型ウィンドウで、先ほど追加したコードのあとに次の 2 行を追加します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-141\">Add these two lines in the interactive window following the code you've already added:</span></span>\n\n```csharp\naFriend = \"Maria\";\nConsole.WriteLine(aFriend);\n```\n\n<span data-ttu-id=\"5a33a-142\">`aFriend` 変数に格納された値に基づいて、コードの同じ行に 2 つの異なるメッセージが表示されていることに注目してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-142\">Notice that the same line of code prints two different messages, based on the value stored in the `aFriend` variable.</span></span>\n\n<span data-ttu-id=\"5a33a-143\">お気付きかと思いますが、最後の 2 つのメッセージから \"Hello\" という言葉がなくなっています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-143\">You may have also noticed that the word \"Hello\" was missing in the last two messages.</span></span> <span data-ttu-id=\"5a33a-144\">修正しましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-144\">Let's fix that now.</span></span>  <span data-ttu-id=\"5a33a-145\">メッセージを出力する行を次のように変更します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-145\">Modify the lines that print the message to the following:</span></span>\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\n<span data-ttu-id=\"5a33a-146\">もう一度 **[実行]** をクリックして結果を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-146\">Click **Run** again to see the results.</span></span>\n\n<span data-ttu-id=\"5a33a-147\">さらに進めると、`+` を利用して出力する文字列の作成が難しくなります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-147\">As we progress, creating strings to print using `+` becomes cumbersome.</span></span> <span data-ttu-id=\"5a33a-148\">文字列補間を利用すれば、より簡潔で読みやすい方法で文字列をつなぎ合わせることができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-148\">String interpolation lets you piece together strings in a more concise and readable way.</span></span>\n\n<span data-ttu-id=\"5a33a-149\">文字列の開始引用符の前に `$` を追加する場合、中かっこの文字列の内部に、`aFriend` 変数など、文字列式を含めることができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-149\">If you add a `$` before the opening quotes of the string, you can then include string expressions, like the `aFriend` variable, inside the string in curly brackets.</span></span>\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\n<span data-ttu-id=\"5a33a-150\">もう一度 **[実行]** をクリックして結果を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-150\">Click **Run** again to see the results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"5a33a-151\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-151\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"5a33a-152\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-152\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"5a33a-153\">文字列の処理</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-153\">Work with strings</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"5a33a-154\">先ほどの編集を通して、文字列を使って何ができるかを初めて確認しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-154\">Your last edit was our first look at what you can do with strings.</span></span> <span data-ttu-id=\"5a33a-155\">さらに詳しく見てみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-155\">Let's explore more.</span></span>\n\n<span data-ttu-id=\"5a33a-156\">`+` は C# において演算子と呼ばれるものの 1 つです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-156\">The `+` is called an operator in C#.</span></span> <span data-ttu-id=\"5a33a-157\">`firstString + secondString` のように文字列に適用すると、1 つ目のテキストに 2 つ目のテキストが続く新しいテキストが作成されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-157\">When applied to strings like `firstString + secondString`, a new string is created with the text from the first followed by the text from the second.</span></span> <span data-ttu-id=\"5a33a-158\">これを*文字列の連結*と言います。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-158\">This is referred to as *string concatenation*.</span></span> <span data-ttu-id=\"5a33a-159\">文字列変数も含めて、文字列をいくつでも連結できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-159\">You can combine any number of strings, including string variables.</span></span>  <span data-ttu-id=\"5a33a-160\">これを試してみます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-160\">Try this:</span></span>\n\n```csharp\nstring firstFriend = \"Maria\";\nstring secondFriend = \"Sage\";\nConsole.WriteLine($\"My friends are {firstFriend} and {secondFriend}\");\n```\n\n<span data-ttu-id=\"5a33a-161\">文字列についてさらに詳しく見ていきます。`Length` を使用して文字列の長さを知ることができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-161\">As you explore more with strings, you can find the length of a string using `Length`.</span></span> <span data-ttu-id=\"5a33a-162\">`Length` は文字列の**プロパティ**であり、その文字列の文字数を返します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-162\">`Length` is a **property** of a string and it returns the number of characters in that string.</span></span> <span data-ttu-id=\"5a33a-163\">対話型ウィンドウの下部に次のコードを追加します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-163\">Add the following code at the bottom of the interactive window:</span></span>\n\n```csharp\nConsole.WriteLine($\"The name {firstFriend} has {firstFriend.Length} letters.\");\nConsole.WriteLine($\"The name {secondFriend} has {secondFriend.Length} letters.\");\n```\n\n> [!TIP]\n> <span data-ttu-id=\"5a33a-164\">このあたりで、自分で試してみるといいでしょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-164\">This is a good time to explore on your own.</span></span> <span data-ttu-id=\"5a33a-165\">`Console.WriteLine()` を使用して画面にテキストを出力できることを学習しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-165\">You've learned that `Console.WriteLine()` writes text to the screen.</span></span> <span data-ttu-id=\"5a33a-166\">変数を宣言して文字列同士を連結する方法についても学習しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-166\">You've learned how to declare variables and concatenate strings together.</span></span> <span data-ttu-id=\"5a33a-167\">対話型ウィンドウで実際に確認してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-167\">Experiment in the interactive window.</span></span> <span data-ttu-id=\"5a33a-168\">自分でより多くのメッセージを記述してみるとよいでしょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-168\">Write some more messages yourself.</span></span> <span data-ttu-id=\"5a33a-169\">`+` 演算子を使用して文字列を作成してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-169\">Build strings using the `+` operator.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"5a33a-170\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-170\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"5a33a-171\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-171\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"5a33a-172\">文字列の追加操作</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-172\">Do more with strings</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"5a33a-173\">メッセージを出力するのに <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> **メソッド**を使用してきました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-173\">You've been using a **method**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, to print messages.</span></span> <span data-ttu-id=\"5a33a-174\">**メソッド**は、何らかのアクションを実装したコードのブロックです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-174\">A **method** is a block of code that implements some action.</span></span> <span data-ttu-id=\"5a33a-175\">メソッドに名前があることで、それにアクセスできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-175\">It has a name, so you can access it.</span></span> \n\n<span data-ttu-id=\"5a33a-176\">`string` 型には多くの便利なメソッドがあります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-176\">The `string` type has many useful methods.</span></span> <span data-ttu-id=\"5a33a-177\"><xref:System.String.Trim%2A> メソッドと、それに関連した <xref:System.String.TrimStart%2A> と <xref:System.String.TrimEnd%2A> メソッドを使ってみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-177\">Let's explore the <xref:System.String.Trim%2A> method, and related methods <xref:System.String.TrimStart%2A> and <xref:System.String.TrimEnd%2A>.</span></span> <span data-ttu-id=\"5a33a-178\">これらのメソッドは、先頭と末尾にあるスペースを削除します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-178\">These methods remove leading and trailing spaces:</span></span>\n\n```csharp\nstring message = \"      Hello World!       \";\nConsole.WriteLine($\"[{message}]\");\n\nstring trimmedMessage = message.TrimStart();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n\ntrimmedMessage = message.TrimEnd();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n\ntrimmedMessage = message.Trim();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n```\n\n<span data-ttu-id=\"5a33a-179\">このサンプルでは、文字列を処理するための重要な概念のいくつかを説明しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-179\">This sample reinforces a couple of important concepts for working with strings.</span></span> <span data-ttu-id=\"5a33a-180\">文字列を操作するメソッドは、定位置に変更を加えるのではなく、新しい文字列オブジェクトを返します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-180\">The methods that manipulate strings return new string objects rather than making modifications in place.</span></span> <span data-ttu-id=\"5a33a-181\">`Trim` メソッドのいずれかに対する各呼び出しは新しい文字列を返すが元のメッセージを変更しない、ということが確認できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-181\">You can see that each call to any of the `Trim` methods returns a new string, but does not change the original message.</span></span>\n\n<span data-ttu-id=\"5a33a-182\">文字列を処理するメソッドは他にもあります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-182\">There are other methods available to work with a string.</span></span> <span data-ttu-id=\"5a33a-183\">たとえば、エディターやワード プロセッサで検索と置換のコマンドを使用したことがあるかもしれません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-183\">For example, you've probably used a search and replace command in an editor or word processor.</span></span> <span data-ttu-id=\"5a33a-184\"><xref:System.String.Replace%2A> メソッドはそれと似た処理を `string` で行います。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-184\">The <xref:System.String.Replace%2A> method does something similar in a `string`.</span></span> <span data-ttu-id=\"5a33a-185\">このメソッドは部分文字列を検索し、それを別のテキストに置き換えます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-185\">It searches for a substring, and replaces it with different text.</span></span> <span data-ttu-id=\"5a33a-186\"><xref:System.String.Replace%2A> メソッドは、2 つの**パラメーター**を受け取ります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-186\">The <xref:System.String.Replace%2A> method takes two **parameters**.</span></span> <span data-ttu-id=\"5a33a-187\">パラメーターは丸かっこ内の文字列です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-187\">These are the strings between the parentheses.</span></span> <span data-ttu-id=\"5a33a-188\">最初の文字列は、検索対象のテキストです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-188\">The first string is the text to search for.</span></span> <span data-ttu-id=\"5a33a-189\">2 つ目の文字列は、置換後のテキストです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-189\">The second string is the text to replace it with.</span></span> <span data-ttu-id=\"5a33a-190\">ご自分で試してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-190\">Try it for yourself.</span></span> <span data-ttu-id=\"5a33a-191\">このコードを追加します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-191\">Add this code:</span></span>\n\n```csharp\nstring message = \"Hello World!\";\nConsole.WriteLine(message);\nmessage = message.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(message);\n```\n\n<span data-ttu-id=\"5a33a-192\">その他にも役立つメソッドが 2 つあり、1 つは文字列のすべてを大文字にし、もう 1 つは文字列のすべてを小文字にします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-192\">Two other useful methods make a string ALL CAPS or all lower case.</span></span> <span data-ttu-id=\"5a33a-193\">次のコードを試してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-193\">Try the following code:</span></span>\n\n```csharp\nstring message = \"Hello World!\";\nConsole.WriteLine(message);\nConsole.WriteLine(message.ToUpper());\nConsole.WriteLine(message.ToLower());\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"5a33a-194\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-194\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"5a33a-195\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-195\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"5a33a-196\">検索文字列</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-196\">Search strings</span></span>"
  durationInMinutes: 10
  content: "<span data-ttu-id=\"5a33a-197\">*検索と置換*の演算子は他にも、文字列内のテキストを検索できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-197\">The other part of a *search and replace* operation is to find text in a string.</span></span> <span data-ttu-id=\"5a33a-198\">検索には <xref:System.String.Contains%2A> メソッドを使用できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-198\">You can use the  <xref:System.String.Contains%2A> method for searching.</span></span> <span data-ttu-id=\"5a33a-199\">これにより、文字列内に部分文字列が含まれているかどうかを確認できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-199\">It tells you if a string contains a substring inside it.</span></span> <span data-ttu-id=\"5a33a-200\">次のコードを試してみて、<xref:System.String.Contains%2A> を確認してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-200\">Try the following code to explore <xref:System.String.Contains%2A>:</span></span>\n\n```csharp\nstring message = \"You say goodbye, and I say hello\";\nConsole.WriteLine(message.Contains(\"goodbye\"));\nConsole.WriteLine(message.Contains(\"greetings\"));\n```\n\n<span data-ttu-id=\"5a33a-201\"><xref:System.String.Contains%2A> メソッドは**ブール値**を返し、検索した文字列が見つかったかどうかを知らせます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-201\">The <xref:System.String.Contains%2A> method returns a **boolean** value which tells you if the string you were searching for was found.</span></span> <span data-ttu-id=\"5a33a-202\">**ブール値**は `true` か `false` どちらかの値を格納します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-202\">A **boolean** stores either a `true` or a `false` value.</span></span> <span data-ttu-id=\"5a33a-203\">**ブール値**については、この後のレッスンで詳しく学習します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-203\">You'll learn more about **boolean** values in a later lesson.</span></span>\n\n<span data-ttu-id=\"5a33a-204\">***課題***</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-204\">***Challenge***</span></span>\n\n<span data-ttu-id=\"5a33a-205\">似たような 2 つのメソッドがあり、<xref:System.String.StartsWith%2A> と <xref:System.String.EndsWith%2A> も文字列内の部分文字列を検索します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-205\">There are two similar methods, <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> that also search for sub-strings in a string.</span></span> <span data-ttu-id=\"5a33a-206\">これらは文字列の先頭または末尾の部分文字列を検索します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-206\">These find a substring at the beginning or the end of the string.</span></span> <span data-ttu-id=\"5a33a-207\">先述のサンプルを変更して、<xref:System.String.Contains%2A> の代わりに <xref:System.String.StartsWith%2A> と <xref:System.String.EndsWith%2A> を使用してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-207\">Try to modify the previous sample to use <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> instead of <xref:System.String.Contains%2A>.</span></span> <span data-ttu-id=\"5a33a-208\">文字列の先頭にある \"You\" または \"goodbye\" を検索します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-208\">Search for \"You\" or \"goodbye\" at the beginning of a string.</span></span> <span data-ttu-id=\"5a33a-209\">文字列の末尾にある \"hello\" または \"goodbye\" を検索します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-209\">Search for \"hello\" or \"goodbye\" at the end of a string.</span></span>\n\n> [!Note]\n> <span data-ttu-id=\"5a33a-210\">文字列の末尾にあるテキストをテストするときは、句読点に注意します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-210\">Watch your punctuation when you test for the text at the end of the string.</span></span> <span data-ttu-id=\"5a33a-211\">文字列が句点で終わる場合は、末尾に句点を含めた文字列を検索する必要があります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-211\">If the string ends with a period, you must check for a string that ends with a period.</span></span>\n\n<span data-ttu-id=\"5a33a-212\">先頭が \"You\" で末尾が \"hello\" の場合は `true`、先頭または末尾が \"goodbye\" の場合は false になります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-212\">You should get `true` for starting with \"You\" and ending with \"hello\" and false for starting with or ending with \"goodbye\".</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"5a33a-213\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-213\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"5a33a-214\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-214\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"5a33a-215\">課題完了</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-215\">Complete challenge</span></span>"
  durationInMinutes: 3
  content: "<span data-ttu-id=\"5a33a-216\">コードは次のようになりましたか?</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-216\">Did you come up with something like this?</span></span>\n\n```csharp\nstring message = \"You say goodbye, and I say hello\";\nConsole.WriteLine(message.StartsWith(\"You\"));\nConsole.WriteLine(message.StartsWith(\"goodbye\"));\n\nConsole.WriteLine(message.EndsWith(\"hello\"));\nConsole.WriteLine(message.EndsWith(\"goodbye\"));\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"5a33a-217\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-217\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"5a33a-218\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-218\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"5a33a-219\">\"Hello C#\" クイック スタートはこれで終了です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-219\">You've completed the \"Hello C#\" quick start.</span></span>\n\n<span data-ttu-id=\"5a33a-220\">`string` 型の機能の詳細については、「[C# プログラミング ガイド](../programming-guide/index.md)」の[文字列](../programming-guide/strings/index.md)に関するトピックで学習できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-220\">You can learn more about working with the `string` type in the [C# Programming Guide](../programming-guide/index.md) topic on [strings](../programming-guide/strings/index.md).</span></span>\n<span data-ttu-id=\"5a33a-221\">[文字列のヒント](../how-to/index.md#strings)に関するページを参照してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"5a33a-221\">[How to tips on strings](../how-to/index.md#strings).</span></span>\0"
