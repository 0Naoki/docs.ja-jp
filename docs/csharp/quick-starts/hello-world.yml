### YamlMime:YamlDocument
documentType: Tutorial
title: 'Hello C#'
metadata:
  title: '<span data-ttu-id="df785-102">Hello C#。</span><span class="sxs-lookup"><span data-stu-id="df785-102">Hello C#.</span></span> <span data-ttu-id="df785-103">C# 言語の最初の導入です。</span><span class="sxs-lookup"><span data-stu-id="df785-103">Your first introduction to the C# language.</span></span>'
  description: '<span data-ttu-id="df785-104">このチュートリアルでは、ブラウザーを使用して C# を対話形式で学習できます。</span><span class="sxs-lookup"><span data-stu-id="df785-104">In this tutorial, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="df785-105">C# コードを記述し、ブラウザーで直接コードをコンパイルして、実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="df785-105">You write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  nextTutorialHref: numbers-in-csharp
  nextTutorialTitle: 'Numbers in C#'
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="df785-106">このチュートリアルでは C# を対話形式で学習できます。ブラウザーを使用して C# を記述し、コードをコンパイルして実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="df785-106">This tutorial teaches you C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="df785-107">このチュートリアルには、"Hello World" プログラムを開始する一連のレッスンが含まれています。</span><span class="sxs-lookup"><span data-stu-id="df785-107">It contains a series of lessons that begin with a "Hello World" program.</span></span> <span data-ttu-id="df785-108">これらのレッスンでは、C# 言語の基本を説明します。</span><span class="sxs-lookup"><span data-stu-id="df785-108">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: '<span data-ttu-id="df785-109">最初の C# プログラムの実行</span><span class="sxs-lookup"><span data-stu-id="df785-109">Run your first C# program</span></span>'
    durationInMinutes: 2
    content: |
      <span data-ttu-id="df785-110">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="df785-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="df785-111">そのためには、対話型ウィンドウで次のコード ブロックを入力し、**[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="df785-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      Console.WriteLine("Hello World!");
      ```

      <span data-ttu-id="df785-112">おめでとうございます! </span><span class="sxs-lookup"><span data-stu-id="df785-112">Congratulations!</span></span> <span data-ttu-id="df785-113">最初の C# プログラムを実行しました。</span><span class="sxs-lookup"><span data-stu-id="df785-113">You've run your first C# program.</span></span> <span data-ttu-id="df785-114">これは "Hello World!" というメッセージを出力する単純なプログラムです。</span><span class="sxs-lookup"><span data-stu-id="df785-114">It's a simple program that prints the message "Hello World!".</span></span> <span data-ttu-id="df785-115"><xref:System.Console.WriteLine%2A?displayProperty=nameWithType> メソッドを使用してこのメッセージを出力しました。</span><span class="sxs-lookup"><span data-stu-id="df785-115">It used the <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> method to print that message.</span></span> <span data-ttu-id="df785-116">`Console` は、コンソール ウィンドウを表す型です。</span><span class="sxs-lookup"><span data-stu-id="df785-116">`Console` is a type that represents the console window.</span></span> <span data-ttu-id="df785-117">`WriteLine` は、そのテキスト コンソールに 1 行のテキストを出力する `Console` 型の 1 つのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="df785-117">`WriteLine` is a method of the `Console` type that prints a line of text to that text console.</span></span>

      <span data-ttu-id="df785-118">次に進んで、さらに詳しく見てみましょう。</span><span class="sxs-lookup"><span data-stu-id="df785-118">Let's move on and explore more.</span></span> <span data-ttu-id="df785-119">このレッスンの残りの部分では、C# においてテキストを表す `string` 型の機能を確認します。</span><span class="sxs-lookup"><span data-stu-id="df785-119">The rest of this lesson explores working with the `string` type, which represents text in C#.</span></span> <span data-ttu-id="df785-120">`Console` 型と同じように、`string` 型にもメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="df785-120">Like the `Console` type, the `string` type has methods.</span></span> <span data-ttu-id="df785-121">`string` メソッドはテキストを処理します。</span><span class="sxs-lookup"><span data-stu-id="df785-121">The `string` methods work with text.</span></span> 

      > [!NOTE]
      > <span data-ttu-id="df785-122">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="df785-122">This online coding experience is in preview mode.</span></span> <span data-ttu-id="df785-123">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="df785-123">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="df785-124">変数の宣言と使用</span><span class="sxs-lookup"><span data-stu-id="df785-124">Declare and use variables</span></span>
    durationInMinutes: 3
    content: |
      <span data-ttu-id="df785-125">最初のプログラムでは、`string` の "Hello World!" を</span><span class="sxs-lookup"><span data-stu-id="df785-125">Your first program printed the `string` "Hello World!"</span></span> <span data-ttu-id="df785-126">画面に出力しました。</span><span class="sxs-lookup"><span data-stu-id="df785-126">on the screen.</span></span> 

      > [!TIP]
      > <span data-ttu-id="df785-127">C# (または何らかのプログラミング言語) について詳しく学習するに従い、コードを記述する際にミスをすることもあるでしょう。</span><span class="sxs-lookup"><span data-stu-id="df785-127">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="df785-128">**コンパイラ**は、そうしたエラーを発見して報告します。</span><span class="sxs-lookup"><span data-stu-id="df785-128">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="df785-129">エラー メッセージが出力された場合は、例のコードをよく確認して、対話型ウィンドウで修正すべきコードを見つけます。</span><span class="sxs-lookup"><span data-stu-id="df785-129">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="df785-130">こうした実習が C# コードの構造を理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="df785-130">That exercise will help you learn the structure of C# code.</span></span> 

      <span data-ttu-id="df785-131">最初のプログラムは、1 つのメッセージしか出力できません。</span><span class="sxs-lookup"><span data-stu-id="df785-131">Your first program is limited to printing one message.</span></span> <span data-ttu-id="df785-132">**変数**を使用すると、もっと役立つプログラムを記述できます。</span><span class="sxs-lookup"><span data-stu-id="df785-132">You can write more useful programs by using **variables**.</span></span> <span data-ttu-id="df785-133">**変数**は、同じコードを別の値で実行するのに使用できる記号です。</span><span class="sxs-lookup"><span data-stu-id="df785-133">A **variable** is a symbol you can use to run the same code with different values.</span></span> <span data-ttu-id="df785-134">試してみましょう。</span><span class="sxs-lookup"><span data-stu-id="df785-134">Let's try it!</span></span> <span data-ttu-id="df785-135">対話型ウィンドウで記述したコードを次のコードに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="df785-135">Replace the code you've written in the interactive window with the following code:</span></span>

      ```csharp
      string aFriend = "Bill";
      Console.WriteLine(aFriend);
      ```

      <span data-ttu-id="df785-136">最初の行で変数 `aFriend` を宣言し、その変数に "Bill" という値を代入しています。</span><span class="sxs-lookup"><span data-stu-id="df785-136">The first line declares a variable, `aFriend` and assigns it a value, "Bill".</span></span> <span data-ttu-id="df785-137">2 番目の行でその名前を出力しています。</span><span class="sxs-lookup"><span data-stu-id="df785-137">The second line prints out the name.</span></span>

      <span data-ttu-id="df785-138">宣言した変数に別の値を代入できます。</span><span class="sxs-lookup"><span data-stu-id="df785-138">You can assign different values to any variable you declare.</span></span> <span data-ttu-id="df785-139">この名前を友人の名前に変更できます。</span><span class="sxs-lookup"><span data-stu-id="df785-139">You can change the name to one of your friends.</span></span> <span data-ttu-id="df785-140">対話型ウィンドウで、先ほど追加したコードのあとに次の 2 行を追加します。</span><span class="sxs-lookup"><span data-stu-id="df785-140">Add these two lines in the interactive window following the code you've already added:</span></span>

      ```csharp
      aFriend = "Maria";
      Console.WriteLine(aFriend);
      ```

      <span data-ttu-id="df785-141">`aFriend` 変数に格納された値に基づいて、コードの同じ行に 2 つの異なるメッセージが表示されていることに注目してください。</span><span class="sxs-lookup"><span data-stu-id="df785-141">Notice that the same line of code prints two different messages, based on the value stored in the `aFriend` variable.</span></span>

      <span data-ttu-id="df785-142">お気付きかと思いますが、最後の 2 つのメッセージから "Hello" という言葉がなくなっています。</span><span class="sxs-lookup"><span data-stu-id="df785-142">You may have also noticed that the word "Hello" was missing in the last two messages.</span></span> <span data-ttu-id="df785-143">修正しましょう。</span><span class="sxs-lookup"><span data-stu-id="df785-143">Let's fix that now.</span></span>  <span data-ttu-id="df785-144">メッセージを出力する行を次のように変更します。</span><span class="sxs-lookup"><span data-stu-id="df785-144">Modify the lines that print the message to the following:</span></span>

      ```csharp
      Console.WriteLine("Hello " + aFriend);
      ```

      <span data-ttu-id="df785-145">もう一度 **[実行]** をクリックして結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="df785-145">Click **Run** again to see the results.</span></span>

      > [!NOTE]
      > <span data-ttu-id="df785-146">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="df785-146">This online coding experience is in preview mode.</span></span> <span data-ttu-id="df785-147">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="df785-147">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="df785-148">文字列の処理</span><span class="sxs-lookup"><span data-stu-id="df785-148">Work with strings</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="df785-149">先ほどの編集を通して、文字列を使って何ができるかを初めて確認しました。</span><span class="sxs-lookup"><span data-stu-id="df785-149">Your last edit was our first look at what you can do with strings.</span></span> <span data-ttu-id="df785-150">さらに詳しく見てみましょう。</span><span class="sxs-lookup"><span data-stu-id="df785-150">Let's explore more.</span></span>

      <span data-ttu-id="df785-151">`+` は C# において演算子と呼ばれるものの 1 つです。</span><span class="sxs-lookup"><span data-stu-id="df785-151">The `+` is called an operator in C#.</span></span> <span data-ttu-id="df785-152">`firstString + secondString` のように文字列に適用すると、1 つ目のテキストに 2 つ目のテキストが続く新しいテキストが作成されます。</span><span class="sxs-lookup"><span data-stu-id="df785-152">When applied to strings like `firstString + secondString`, a new string is created with the text from the first followed by the text from the second.</span></span> <span data-ttu-id="df785-153">これを*文字列の連結*と言います。</span><span class="sxs-lookup"><span data-stu-id="df785-153">This is referred to as *string concatenation*.</span></span> <span data-ttu-id="df785-154">文字列変数も含めて、文字列をいくつでも連結できます。</span><span class="sxs-lookup"><span data-stu-id="df785-154">You can combine any number of strings, including string variables.</span></span>  <span data-ttu-id="df785-155">これを試してみます。</span><span class="sxs-lookup"><span data-stu-id="df785-155">Try this:</span></span>

      ```csharp
      string firstFriend = "Maria";
      string secondFriend = "Sage";
      Console.WriteLine("My friends are " + firstFriend + " and " + secondFriend);
      ```

      <span data-ttu-id="df785-156">文字列についてさらに詳しく見ていきます。`Length` を使用して文字列の長さを知ることができます。</span><span class="sxs-lookup"><span data-stu-id="df785-156">As you explore more with strings, you can find the length of a string using `Length`.</span></span> <span data-ttu-id="df785-157">`Length` は文字列の**プロパティ**であり、その文字列の文字数を返します。</span><span class="sxs-lookup"><span data-stu-id="df785-157">`Length` is a **property** of a string and it returns the number of characters in that string.</span></span> <span data-ttu-id="df785-158">対話型ウィンドウの下部に次のコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="df785-158">Add the following code at the bottom of the interactive window:</span></span>

      ```csharp
      Console.WriteLine("The name " + firstFriend + " has " + firstFriend.Length + " letters.");
      Console.WriteLine("The name " + secondFriend + " has " + secondFriend.Length + " letters.");
      ```

      > [!TIP]
      > <span data-ttu-id="df785-159">このあたりで、自分で試してみるといいでしょう。</span><span class="sxs-lookup"><span data-stu-id="df785-159">This is a good time to explore on your own.</span></span> <span data-ttu-id="df785-160">`Console.WriteLine()` を使用して画面にテキストを出力できることを学習しました。</span><span class="sxs-lookup"><span data-stu-id="df785-160">You've learned that `Console.WriteLine()` writes text to the screen.</span></span> <span data-ttu-id="df785-161">変数を宣言して文字列同士を連結する方法についても学習しました。</span><span class="sxs-lookup"><span data-stu-id="df785-161">You've learned how to declare variables and concatenate strings together.</span></span> <span data-ttu-id="df785-162">対話型ウィンドウで実際に確認してみてください。</span><span class="sxs-lookup"><span data-stu-id="df785-162">Experiment in the interactive window.</span></span> <span data-ttu-id="df785-163">自分でより多くのメッセージを記述してみるとよいでしょう。</span><span class="sxs-lookup"><span data-stu-id="df785-163">Write some more messages yourself.</span></span> <span data-ttu-id="df785-164">`+` 演算子を使用して文字列を作成してください。</span><span class="sxs-lookup"><span data-stu-id="df785-164">Build strings using the `+` operator.</span></span>

      > [!NOTE]
      > <span data-ttu-id="df785-165">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="df785-165">This online coding experience is in preview mode.</span></span> <span data-ttu-id="df785-166">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="df785-166">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="df785-167">文字列の追加操作</span><span class="sxs-lookup"><span data-stu-id="df785-167">Do more with strings</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="df785-168">メッセージを出力するのに <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> **メソッド**を使用してきました。</span><span class="sxs-lookup"><span data-stu-id="df785-168">You've been using a **method**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, to print messages.</span></span> <span data-ttu-id="df785-169">**メソッド**は、何らかのアクションを実装したコードのブロックです。</span><span class="sxs-lookup"><span data-stu-id="df785-169">A **method** is a block of code that implements some action.</span></span> <span data-ttu-id="df785-170">メソッドに名前があることで、それにアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="df785-170">It has a name, so you can access it.</span></span> 

      <span data-ttu-id="df785-171">`string` 型には多くの便利なメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="df785-171">The `string` type has many useful methods.</span></span> <span data-ttu-id="df785-172"><xref:System.String.Trim%2A> メソッドと、それに関連した <xref:System.String.TrimStart%2A> と <xref:System.String.TrimEnd%2A> メソッドを使ってみましょう。</span><span class="sxs-lookup"><span data-stu-id="df785-172">Let's explore the <xref:System.String.Trim%2A> method, and related methods <xref:System.String.TrimStart%2A> and <xref:System.String.TrimEnd%2A>.</span></span> <span data-ttu-id="df785-173">これらのメソッドは、先頭と末尾にあるスペースを削除します。</span><span class="sxs-lookup"><span data-stu-id="df785-173">These methods remove leading and trailing spaces:</span></span>

      ```csharp
      string message = "      Hello World!       ";
      Console.WriteLine("[" + message + "]");

      string trimmedMessage = message.TrimStart();
      Console.WriteLine("[" + trimmedMessage + "]");

      trimmedMessage = message.TrimEnd();
      Console.WriteLine("[" + trimmedMessage + "]");

      trimmedMessage = message.Trim();
      Console.WriteLine("[" + trimmedMessage + "]");
      ```

      <span data-ttu-id="df785-174">このサンプルでは、文字列を処理するための重要な概念のいくつかを説明しています。</span><span class="sxs-lookup"><span data-stu-id="df785-174">This sample reinforces a couple of important concepts for working with strings.</span></span> <span data-ttu-id="df785-175">文字列を操作するメソッドは、定位置に変更を加えるのではなく、新しい文字列オブジェクトを返します。</span><span class="sxs-lookup"><span data-stu-id="df785-175">The methods that manipulate strings return new string objects rather than making modifications in place.</span></span> <span data-ttu-id="df785-176">`Trim` メソッドのいずれかに対する各呼び出しは新しい文字列を返すが元のメッセージを変更しない、ということが確認できます。</span><span class="sxs-lookup"><span data-stu-id="df785-176">You can see that each call to any of the `Trim` methods returns a new string, but does not change the original message.</span></span>

      <span data-ttu-id="df785-177">文字列を処理するメソッドは他にもあります。</span><span class="sxs-lookup"><span data-stu-id="df785-177">There are other methods available to work with a string.</span></span> <span data-ttu-id="df785-178">たとえば、エディターやワード プロセッサで検索と置換のコマンドを使用したことがあるかもしれません。</span><span class="sxs-lookup"><span data-stu-id="df785-178">For example, you've probably used a search and replace command in an editor or word processor.</span></span> <span data-ttu-id="df785-179"><xref:System.String.Replace%2A> メソッドはそれと似た処理を `string` で行います。</span><span class="sxs-lookup"><span data-stu-id="df785-179">The <xref:System.String.Replace%2A> method does something similar in a `string`.</span></span> <span data-ttu-id="df785-180">このメソッドは部分文字列を検索し、それを別のテキストに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="df785-180">It searches for a substring, and replaces it with different text.</span></span> <span data-ttu-id="df785-181"><xref:System.String.Replace%2A> メソッドは、2 つの**パラメーター**を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="df785-181">The <xref:System.String.Replace%2A> method takes two **parameters**.</span></span> <span data-ttu-id="df785-182">パラメーターは丸かっこ内の文字列です。</span><span class="sxs-lookup"><span data-stu-id="df785-182">These are the strings between the parentheses.</span></span> <span data-ttu-id="df785-183">最初の文字列は、検索対象のテキストです。</span><span class="sxs-lookup"><span data-stu-id="df785-183">The first string is the text to search for.</span></span> <span data-ttu-id="df785-184">2 つ目の文字列は、置換後のテキストです。</span><span class="sxs-lookup"><span data-stu-id="df785-184">The second string is the text to replace it with.</span></span> <span data-ttu-id="df785-185">ご自分で試してみてください。</span><span class="sxs-lookup"><span data-stu-id="df785-185">Try it for yourself.</span></span> <span data-ttu-id="df785-186">このコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="df785-186">Add this code:</span></span>

      ```csharp
      string message = "Hello World!";
      Console.WriteLine(message);
      message = message.Replace("Hello", "Greetings");
      Console.WriteLine(message);
      ```

      <span data-ttu-id="df785-187">その他にも役立つメソッドが 2 つあり、1 つは文字列のすべてを大文字にし、もう 1 つは文字列のすべてを小文字にします。</span><span class="sxs-lookup"><span data-stu-id="df785-187">Two other useful methods make a string ALL CAPS or all lower case.</span></span> <span data-ttu-id="df785-188">次のコードを試してみてください。</span><span class="sxs-lookup"><span data-stu-id="df785-188">Try the following code:</span></span>

      ```csharp
      string message = "Hello World!";
      Console.WriteLine(message);
      Console.WriteLine(message.ToUpper());
      Console.WriteLine(message.ToLower());
      ```

      > [!NOTE]
      > <span data-ttu-id="df785-189">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="df785-189">This online coding experience is in preview mode.</span></span> <span data-ttu-id="df785-190">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="df785-190">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="df785-191">検索文字列</span><span class="sxs-lookup"><span data-stu-id="df785-191">Search strings</span></span>
    durationInMinutes: 10
    content: |
      <span data-ttu-id="df785-192">*検索と置換*の演算子は他にも、文字列内のテキストを検索できます。</span><span class="sxs-lookup"><span data-stu-id="df785-192">The other part of a *search and replace* operation is to find text in a string.</span></span> <span data-ttu-id="df785-193">検索には <xref:System.String.Contains%2A> メソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="df785-193">You can use the  <xref:System.String.Contains%2A> method for searching.</span></span> <span data-ttu-id="df785-194">これにより、文字列内に部分文字列が含まれているかどうかを確認できます。</span><span class="sxs-lookup"><span data-stu-id="df785-194">It tells you if a string contains a substring inside it.</span></span> <span data-ttu-id="df785-195">次のコードを試してみて、<xref:System.String.Contains%2A> を確認してください。</span><span class="sxs-lookup"><span data-stu-id="df785-195">Try the following code to explore <xref:System.String.Contains%2A>:</span></span>

      ```csharp
      string message = "You say goodbye, and I say hello";
      Console.WriteLine(message.Contains("goodbye"));
      Console.WriteLine(message.Contains("greetings"));
      ```

      <span data-ttu-id="df785-196"><xref:System.String.Contains%2A> メソッドは**ブール値**を返し、検索した文字列が見つかったかどうかを知らせます。</span><span class="sxs-lookup"><span data-stu-id="df785-196">The <xref:System.String.Contains%2A> method returns a **boolean** value which tells you if the string you were searching for was found.</span></span> <span data-ttu-id="df785-197">**ブール値**は `true` か `false` どちらかの値を格納します。</span><span class="sxs-lookup"><span data-stu-id="df785-197">A **boolean** stores either a `true` or a `false` value.</span></span> <span data-ttu-id="df785-198">**ブール値**については、この後のレッスンで詳しく学習します。</span><span class="sxs-lookup"><span data-stu-id="df785-198">You'll learn more about **boolean** values in a later lesson.</span></span>

      <span data-ttu-id="df785-199">***課題***</span><span class="sxs-lookup"><span data-stu-id="df785-199">***Challenge***</span></span>

      <span data-ttu-id="df785-200">似たような 2 つのメソッドがあり、<xref:System.String.StartsWith%2A> と <xref:System.String.EndsWith%2A> も文字列内の部分文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="df785-200">There are two similar methods, <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> that also search for sub-strings in a string.</span></span> <span data-ttu-id="df785-201">これらは文字列の先頭または末尾の部分文字列を検索します。</span><span class="sxs-lookup"><span data-stu-id="df785-201">These find a substring at the beginning or the end of the string.</span></span> <span data-ttu-id="df785-202">先述のサンプルを変更して、<xref:System.String.Contains%2A> の代わりに <xref:System.String.StartsWith%2A> と <xref:System.String.EndsWith%2A> を使用してみてください。</span><span class="sxs-lookup"><span data-stu-id="df785-202">Try to modify the previous sample to use <xref:System.String.StartsWith%2A> and <xref:System.String.EndsWith%2A> instead of <xref:System.String.Contains%2A>.</span></span> <span data-ttu-id="df785-203">文字列の先頭にある "You" または "goodbye" を検索します。</span><span class="sxs-lookup"><span data-stu-id="df785-203">Search for "You" or "goodbye" at the beginning of a string.</span></span> <span data-ttu-id="df785-204">文字列の末尾にある "hello" または "goodbye" を検索します。</span><span class="sxs-lookup"><span data-stu-id="df785-204">Search for "hello" or "goodbye" at the end of a string.</span></span>

      > [!Note]
      > <span data-ttu-id="df785-205">文字列の末尾にあるテキストをテストするときは、句読点に注意します。</span><span class="sxs-lookup"><span data-stu-id="df785-205">Watch your punctuation when you test for the text at the end of the string.</span></span> <span data-ttu-id="df785-206">文字列が句点で終わる場合は、末尾に句点を含めた文字列を検索する必要があります。</span><span class="sxs-lookup"><span data-stu-id="df785-206">If the string ends with a period, you must check for a string that ends with a period.</span></span>

      > [!NOTE]
      > <span data-ttu-id="df785-207">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="df785-207">This online coding experience is in preview mode.</span></span> <span data-ttu-id="df785-208">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="df785-208">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="df785-209">課題完了</span><span class="sxs-lookup"><span data-stu-id="df785-209">Complete challenge</span></span>
    durationInMinutes: 3
    content: |
      <span data-ttu-id="df785-210">コードは次のようになりましたか?</span><span class="sxs-lookup"><span data-stu-id="df785-210">Did you come up with something like this?</span></span>

      ```csharp
      string message = "You say goodbye, and I say hello";
      Console.WriteLine(message.StartsWith("You"));
      Console.WriteLine(message.StartsWith("goodbye"));

      Console.WriteLine(message.EndsWith("hello"));
      Console.WriteLine(message.EndsWith("goodbye"));
      ```

      > [!NOTE]
      > <span data-ttu-id="df785-211">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="df785-211">This online coding experience is in preview mode.</span></span> <span data-ttu-id="df785-212">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="df785-212">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - content: |
      <span data-ttu-id="df785-213">"Hello C#" チュートリアルはこれで終了です。</span><span class="sxs-lookup"><span data-stu-id="df785-213">You've completed the "Hello C#" tutorial.</span></span>

      <span data-ttu-id="df785-214">`string` 型の機能の詳細については、「[C# プログラミング ガイド](../programming-guide/index.md)」の[文字列](../programming-guide/strings/index.md)に関するトピックで学習できます。</span><span class="sxs-lookup"><span data-stu-id="df785-214">You can learn more about working with the `string` type in the [C# Programming Guide](../programming-guide/index.md) topic on [strings](../programming-guide/strings/index.md).</span></span>