### YamlMime:Tutorial
title: "<span data-ttu-id=\"a7981-101\">C# の挿入文字列</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-101\">Interpolated strings in C#</span></span>"
metadata:
  title: "C# の挿入文字列です。 日付や数字など、他の値を含む文字列を構築する方法を学習します。"
  description: "このチュートリアルでは、ブラウザーを使用して、対話形式で C# の挿入文字列機能を使用します。 C# コードを記述し、ブラウザーで直接コードをコンパイルして、実行した結果を確認します。"
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: "<span data-ttu-id=\"a7981-106\">C# のコレクション</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-106\">Collections in C#</span></span>"
  ms.openlocfilehash: f54d8e5e3703556b333155fd9541f9d7c7e7fd1b
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 2
  content: "<span data-ttu-id=\"a7981-107\">このクイック スタートでは、C# で挿入文字列を使用して、対話形式で単一の出力文字列に値を挿入する方法を説明します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-107\">This quick start teaches you how to use interpolated strings in C# to insert values into a single ouput string interactively.</span></span> <span data-ttu-id=\"a7981-108\">ブラウザーを使用して C# コードを記述し、コードのコンパイルと実行の結果をすぐに確認することができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-108\">You use your browser to write C# code and can immediately see the results of compiling and running your code.</span></span> <span data-ttu-id=\"a7981-109\">クイック スタートには、文字列を連結し、値を文字列に挿入し、それらの値の書式をさまざまな方法で設定する、一連のレッスンが含まれています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-109\">The quick start contains a series of lessons that concatenate strings, insert values into strings, and format those values in different ways.</span></span>\n"
- title: "<span data-ttu-id=\"a7981-110\">挿入文字列を作成する</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-110\">Create an interpolated string</span></span>"
  durationInMinutes: 2
  content: "<span data-ttu-id=\"a7981-111\">対話型ウィンドウで次のコードを実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-111\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"a7981-112\">そのためには、対話型ウィンドウで次のコード ブロックを入力し (\"\\<name>\" を自分の名前に置き換える)、**[実行]** ボタンをクリックします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-112\">To do that, type the following code block in the interactive window (replace \"\\<name>\" with your name) and click the **Run** button:</span></span>\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\n<span data-ttu-id=\"a7981-113\">プログラムを実行すると、あいさつ文に自分の名前を含む単一の文字列が表示されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-113\">When you run the program, it displays a single string that includes your name in the greeting.</span></span> <span data-ttu-id=\"a7981-114\"><xref:System.Console.WriteLine%2A> メソッド呼び出しに含まれる文字列は、*挿入文字列*です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-114\">The string included in the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id=\"a7981-115\">これは、埋め込みコードを含む文字列から (*結果文字列*という) 単一の文字列を構築できる一種のテンプレートです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-115\">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id=\"a7981-116\">挿入文字列は、文字列に値を挿入したり、文字列を (結合) 連結したりする場合に特に便利です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-116\">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) strings.</span></span> \n\n<span data-ttu-id=\"a7981-117\">この簡単な例には、すべての挿入文字列に含める必要がある次の 2 つの要素が含まれています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-117\">This simple example contains the two elements that every interpolated string must have:</span></span> \n\n- <span data-ttu-id=\"a7981-118\">始まりの引用符文字の前の `$` で始まる文字列リテラル。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-118\">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id=\"a7981-119\">`$` シンボルと引用符文字の間にスペースを挿入することはできません </span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-119\">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id=\"a7981-120\">(スペースが含まれている場合の動作を確認したい場合は、対話型ウィンドウで `$` 文字の後にスペースを挿入し、**[実行]** ボタンをクリックします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-120\">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and click the **Run** button.</span></span> <span data-ttu-id=\"a7981-121\">C# コンパイラには \"予期しない '$' 文字です\" と示されます)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-121\">The C# compiler complains, \"Unexpected character '$'\".)</span></span> \n\n- <span data-ttu-id=\"a7981-122\">1 つ以上の*挿入式*。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-122\">One or more *interpolated expressions*.</span></span> <span data-ttu-id=\"a7981-123\">挿入式は、始めかっこと終わりかっこ (`{` と `}`) で示されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-123\">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id=\"a7981-124\">かっこ内に (`null` を含む) 値を返す C# 式を配置できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-124\">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span> \n\n<span data-ttu-id=\"a7981-125\">その他のいくつかのデータ型を持つ挿入文字列の例をさらにいくつか試してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-125\">Let's try a few more interpolated string examples with some other data types.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"a7981-126\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-126\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a7981-127\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-127\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"a7981-128\">さまざまなデータ型を含める</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-128\">Include different data types</span></span>"
  durationInMinutes: 3
  content: "<span data-ttu-id=\"a7981-129\">前のクイック スタートでは、挿入文字列を使用して、1 つの文字列内に別の文字列を挿入しましたが、</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-129\">In the previous quick start, you used an interpolated string to insert one string inside of another.</span></span> <span data-ttu-id=\"a7981-130\">挿入文字列式を任意のデータ型にすることもできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-130\">An interpolated string expression can be any data type, though.</span></span> <span data-ttu-id=\"a7981-131\">複数のデータ型の値を持つ挿入文字列を試してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-131\">Let's try an interpolated string that has values of multiple data types.</span></span> \n\n<span data-ttu-id=\"a7981-132\">次の例には、`Vegetable` オブジェクト、`Unit` 列挙型のメンバー、<xref:System.DateTime> 値、<xref:System.Decimal> 値を持つ挿入式が含まれています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-132\">The following example includes interpolated expressions with a `Vegetable` object, a member of the `Unit` enumeration, a <xref:System.DateTime> value, and a <xref:System.Decimal> value.</span></span> <span data-ttu-id=\"a7981-133\">これを対話型ウィンドウで実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-133\">Run it in the interactive window.</span></span>\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\n<span data-ttu-id=\"a7981-134\">挿入式の 1 つには、コンソールに表示される結果文字列の `item` オブジェクトが含まれており、この場合、\"eggplant\" という文字列が結果文字列に挿入されることに注意してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-134\">Note that one of the interpolated expressions includes the `item` object in the result string that's displayed to the console, and in this case the string \"eggplant\" is inserted into the result string.</span></span> <span data-ttu-id=\"a7981-135\">これは、挿入式の型が文字列でない場合、C# コンパイラでは次の処理が行われるためです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-135\">That's because, when the type of an interpolated expression is not a string, the C# compiler does the following:</span></span>\n\n- <span data-ttu-id=\"a7981-136\">挿入式が `null` の場合、挿入式は空の文字列 (\"\"、または <xref:System.String.Empty?displayProperty=nameWithType>) を返します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-136\">If the interpolated expression is `null`, the interpolated expression returns an empty string (\"\", or <xref:System.String.Empty?displayProperty=nameWithType>).</span></span>\n\n- <span data-ttu-id=\"a7981-137\">挿入式が `null` でない場合、挿入式の型の `ToString` メソッドが呼び出されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-137\">If the interpolated expression is not `null`, the `ToString` method of the type of the interpolated expression is called.</span></span> <span data-ttu-id=\"a7981-138\">コメント シンボル (`//`) を前に配置して、例の `Vegetable.ToString` メソッドの定義をコメント アウトすることで、これをテストできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-138\">You can test this by commenting out the definition of the `Vegetable.ToString` method in the example by putting a comment symbol (`//`) in front of it.</span></span> <span data-ttu-id=\"a7981-139\">出力では、\"eggplant\" という文字列が完全修飾型名 (型名と共に C# REPL によって定義される名前空間) に置き換えられます。これは、<xref:System.Object.ToString?displayProperty=nameWithType> メソッドの既定の動作です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-139\">In the output, the string \"eggplant\" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span>   \n\n<span data-ttu-id=\"a7981-140\">この例の出力では、日付の精度が高すぎ (エッグプラントの価格が 2 つ目の値により変化しない)、価格の値は通貨の単位を示していません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-140\">In the output from this example, the date is too precise (the price of eggplant does not vary by the second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id=\"a7981-141\">次の手順では、挿入式によって返される文字列の形式を制御することで、こうした問題を修正する方法について説明します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-141\">In the next step, you'll learn how to fix those issues by controlling the format of strings returned by interpolated expressions.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"a7981-142\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-142\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a7981-143\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-143\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"a7981-144\">挿入式の書式設定を制御する</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-144\">Control the formatting of interpolated expressions</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"a7981-145\">前のレッスンでは、適切に書式設定されていない 2 つの文字列が結果文字列に挿入されました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-145\">In the previous lesson, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id=\"a7981-146\">1 つは、日付のみが適切な日時の値でした。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-146\">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id=\"a7981-147\">もう 1 つは、通貨単位を示さない価格でした。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-147\">The second was a price that did not indicate its unit of currency.</span></span> <span data-ttu-id=\"a7981-148\">両方の問題には簡単に対処することができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-148\">Both issues are easy to address.</span></span> <span data-ttu-id=\"a7981-149\">挿入式に、特定の型の書式設定を制御する*書式指定文字列*を含めることができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-149\">Interpolated expressions can include *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id=\"a7981-150\">前の例の `Console.WriteLine` 呼び出しを変更し、次の行に示すように、日付と価格のフィールドの書式指定子を含めます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-150\">Modify the call to `Console.WriteLine` from the previous example to include the format specifier for the date and price fields as shown in the following line:</span></span>\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\n<span data-ttu-id=\"a7981-151\">コロンと書式指定文字列を持つ挿入式に従って、書式指定文字列を指定します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-151\">You specify a format string by following the interpolated expression with a colon and the format string.</span></span> <span data-ttu-id=\"a7981-152\">\"d\" は、短い日付形式を表す[標準の日時書式設定文字列](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-152\">\"d\" is a [standard date and time format string](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id=\"a7981-153\">\"C2\" は、小数点以下が 2 桁の通貨値として数値を表す[標準の数値書式指定文字列](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-153\">\"C2\" is a  [standard numeric format string](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>\n\n<span data-ttu-id=\"a7981-154\">.NET Standard ライブラリの多くの型で、定義済みの書式指定文字列セットがサポートされています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-154\">A number of types in the .NET Standard libraries support a predefined set of format strings.</span></span> <span data-ttu-id=\"a7981-155\">これらには、数値型と日時型がすべて含まれます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-155\">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id=\"a7981-156\">書式指定文字列をサポートする型の完全なリストについては、「[.Net 型の書式設定](../../standard/base-types/formatting-types.md)」記事の「[.NET クラス ライブラリの型および書式指定文字列](../../standard/base-types/formatting-types.md#stringRef)」を参照してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-156\">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span> <span data-ttu-id=\"a7981-157\">どの型でも書式指定文字列セットをサポートすることができ、既存の型のカスタム書式指定を提供するカスタム書式指定拡張機能を開発することもできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-157\">Any type can support a set of format strings, and you can also develop custom formatting extensions that provide custom formatting for existing types.</span></span> <span data-ttu-id=\"a7981-158\"><xref:System.ICustomFormatter> 実装を提供することによるカスタム書式指定については、「[.Net 型の書式設定](../../standard/base-types/formatting-types.md)」記事の「[ICustomFormatter を使用したカスタム書式設定](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter)」を参照してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-158\">For information on custom formatting by providing an <xref:System.ICustomFormatter> implementation, see [Custom Formatting with ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter) in the [Formatting Types in .NET](../../standard/base-types/formatting-types.md) article.</span></span>\n\n<span data-ttu-id=\"a7981-159\">**.NET エディター**で書式指定文字列を変更してみて、日時と数値の書式設定にどのように影響するかを確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-159\">Try modifying the the format strings in the **.NET Editor** to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id=\"a7981-160\">`{date:d}` の \"d\" を \"t\" (短い時刻形式を表示する)、\"y\" (年と月を表示する)、\"yyyy\" (4 桁の数字として年を表示する) に変更します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-160\">Change the \"d\" in `{date:d}` to \"t\" (to display the short time format), \"y\" (to display the year and month), and \"yyyy\" (to display the year as a four-digit number).</span></span> <span data-ttu-id=\"a7981-161\">`{price:C2}` \"C2\" を \"e\" (指数表記の場合) と \"F3\" (小数点以下が 3 桁の数値の場合) に変更します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-161\">Change the \"C2\" in `{price:C2}` to \"e\" (for exponential notation) and \"F3\" (for a numeric value with three digits after the decimal point).</span></span>\n\n<span data-ttu-id=\"a7981-162\">書式設定を制御するだけでなく、挿入式によって返される文字列のフィールドの幅と配置を制御することもできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-162\">In addition to controlling formatting, you can also control the field width and alignment of the strings returned by an interpolated expression.</span></span> <span data-ttu-id=\"a7981-163\">次の手順では、この方法を説明します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-163\">In the next step, you'll learn how to do this.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"a7981-164\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-164\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a7981-165\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-165\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"a7981-166\">挿入式のフィールドの幅と配置を制御する</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-166\">Control the field width and alignment of interpolated expressions</span></span>"
  durationInMinutes: 6
  content: "<span data-ttu-id=\"a7981-167\">通常、挿入式によって返される文字列が結果文字列に含まれている場合、先頭スペースも末尾スペースもありません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-167\">Ordinarily, when the string returned by an interpolated expression is included in a result string, it has no leading or trailing spaces.</span></span> <span data-ttu-id=\"a7981-168\">特にデータ セットを処理する場合、挿入式ではフィールドの幅とその配置を指定することができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-168\">Particularly for instances in which you are working with a set of data, interpolated expressions let you specify a field width and its alignment.</span></span> <span data-ttu-id=\"a7981-169\">そのためには、次のコードを実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-169\">To see this, run the following code.</span></span>\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\n<span data-ttu-id=\"a7981-170\">項目名は左揃えになり、その数量は右揃えになります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-170\">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id=\"a7981-171\">式の後にコンマ (\",\") を追加し、フィールドの幅を指定して、配置を指定します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-171\">You specify the alignment by adding a comma (\",\") after the expression and designating the field width.</span></span> <span data-ttu-id=\"a7981-172\">次のようにフィールドの幅が正数の場合、フィールドは右揃えになります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-172\">If the field width is a positive number, the field is right-aligned:</span></span>\n\n```text\n{expression, width}\n```\n\n<span data-ttu-id=\"a7981-173\">次のようにフィールドの幅が負数の場合、フィールドは左揃えになります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-173\">If the field width is a negative number, the field is left-aligned:</span></span>\n\n```text\n{expression, -width}\n```\n<span data-ttu-id=\"a7981-174\">`{\"Item\",-25}` と `{item.Key,-25}` の挿入式から負号を削除してみて、例を再実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-174\">Try removing the negative signs from the `{\"Item\",-25}` and `{item.Key,-25}` interpolated expressions and run the example again.</span></span> <span data-ttu-id=\"a7981-175\">この場合、項目名は右揃えになります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-175\">This time, the item name is right-aligned.</span></span>\n\n<span data-ttu-id=\"a7981-176\">フィールドの幅と書式指定文字列を組み合わせて単一の挿入式にまとめることができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-176\">You can combine a field width and a format string in a single interpolated expression.</span></span> <span data-ttu-id=\"a7981-177\">最初にフィールドの幅が配置され、その後にコロンと書式指定文字列が続きます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-177\">The field width comes first, followed by a colon and the format string.</span></span> <span data-ttu-id=\"a7981-178\">フィールド幅が定義された 3 つの書式指定された文字列を表示する、次の簡単なプログラムを試します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-178\">Try the following simple program that displays three formatted strings with defined field widths.</span></span>\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"a7981-179\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-179\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"a7981-180\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-180\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: "<span data-ttu-id=\"a7981-181\">挿入文字列のクイック スタートはこれで終了です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-181\">You've completed the interpolated strings quick start.</span></span> \n\n<span data-ttu-id=\"a7981-182\">これまでのクイック スタートを、ご自身のローカル開発環境でも引き続き使用できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-182\">You can continue these quick starts on your own local development environment.</span></span> <span data-ttu-id=\"a7981-183\">[ローカル開発](local-environment.md)の基本を学習してから、クイック スタートを選択してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-183\">Learn the basics of [local development](local-environment.md) and then pick a quick start.</span></span> <span data-ttu-id=\"a7981-184\">これと同じ演習を試すことも、次のクイック スタートに直接移動することも、再度「[C# の数値](numbers-in-csharp-local.md)」クイック スタートから始めることもできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-184\">You can try this same exercise, move directly to the next quick start, or start again with the [numbers in C#](numbers-in-csharp-local.md) quickstart.</span></span>\n\n<span data-ttu-id=\"a7981-185\">挿入文字列の機能の詳細については、C# リファレンスの[挿入文字列](../language-reference/keywords/interpolated-strings.md)に関するトピックで学習できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"a7981-185\">You can learn more about working with interpolated strings in the [Interpolated Strings](../language-reference/keywords/interpolated-strings.md) topic in the C# Reference.</span></span>\0"
