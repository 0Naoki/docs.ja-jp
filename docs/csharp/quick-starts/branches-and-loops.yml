### YamlMime:YamlDocument
documentType: Tutorial
title: <span data-ttu-id="199b2-101">分岐とループ</span><span class="sxs-lookup"><span data-stu-id="199b2-101">Branches and loops</span></span>
metadata:
  title: <span data-ttu-id="199b2-102">分岐とループ</span><span class="sxs-lookup"><span data-stu-id="199b2-102">Branches and loops</span></span>
  description: '<span data-ttu-id="199b2-103">このチュートリアルでは、ブラウザーを使用して C# の分岐とループについて対話形式で学習できます。</span><span class="sxs-lookup"><span data-stu-id="199b2-103">In this tutorial about branches and loops, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="199b2-104">C# コードを記述し、ブラウザーで直接コードをコンパイルして実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="199b2-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: 'Arrays and colletions in C#'
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="199b2-105">このチュートリアルでは、変数を調べてその変数に基づいて実行パスを変更するコードを記述する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="199b2-105">This tutorial teaches you about how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="199b2-106">ブラウザーを使用して対話形式で C# を記述し、コードをコンパイルして実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="199b2-106">You'll write C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="199b2-107">このチュートリアルには、C# における分岐構造とループ構造を確認する一連のレッスンが含まれています。</span><span class="sxs-lookup"><span data-stu-id="199b2-107">It contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="199b2-108">これらのレッスンでは、C# 言語の基本を説明します。</span><span class="sxs-lookup"><span data-stu-id="199b2-108">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="199b2-109">if ステートメントを使用した条件判断</span><span class="sxs-lookup"><span data-stu-id="199b2-109">Make decisions using the if statement</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="199b2-110">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="199b2-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="199b2-111">そのためには、対話型ウィンドウで次のコード ブロックを入力し、**[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="199b2-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 5;
      int b = 6;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10.");
      ```

      <span data-ttu-id="199b2-112">合計が 10 未満になるように `b` の宣言を変更します。</span><span class="sxs-lookup"><span data-stu-id="199b2-112">Modify the declaration of `b` so that the sum is less than 10:</span></span> 

      ```csharp
      int b = 3;
      ```

      <span data-ttu-id="199b2-113">もう一度 **[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="199b2-113">Click the **Run** button again.</span></span> <span data-ttu-id="199b2-114">計算結果が 10 未満であるため、何も出力されません。</span><span class="sxs-lookup"><span data-stu-id="199b2-114">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="199b2-115">判定中の**条件**が false になっています。</span><span class="sxs-lookup"><span data-stu-id="199b2-115">The **condition** you're testing is false.</span></span> <span data-ttu-id="199b2-116">`if` ステートメントの考えられる分岐の 1 つである true 分岐のみを記述したため、実行すべきコードがありません。</span><span class="sxs-lookup"><span data-stu-id="199b2-116">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>

      > [!TIP]
      > <span data-ttu-id="199b2-117">C# (または何らかのプログラミング言語) について詳しく学習するに従い、コードを記述する際にミスをすることもあるでしょう。</span><span class="sxs-lookup"><span data-stu-id="199b2-117">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="199b2-118">**コンパイラ**は、そうしたエラーを発見して報告します。</span><span class="sxs-lookup"><span data-stu-id="199b2-118">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="199b2-119">エラー メッセージが出力された場合は、例のコードをよく確認して、対話型ウィンドウで修正すべきコードを見つけます。</span><span class="sxs-lookup"><span data-stu-id="199b2-119">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="199b2-120">こうした実習が C# コードの構造を理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="199b2-120">That exercise will help you learn the structure of C# code.</span></span>     

      <span data-ttu-id="199b2-121">この最初のサンプルは、`if` とブール型の機能を示しています。</span><span class="sxs-lookup"><span data-stu-id="199b2-121">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="199b2-122">*ブール値*は、`true` または `false` という 2 つの値のいずれかを持つことができる変数です。</span><span class="sxs-lookup"><span data-stu-id="199b2-122">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="199b2-123">C# ではブール変数の `bool` という特殊な型を定義しています。</span><span class="sxs-lookup"><span data-stu-id="199b2-123">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="199b2-124">`if` ステートメントは、`bool` の値を確認します。</span><span class="sxs-lookup"><span data-stu-id="199b2-124">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="199b2-125">値が `true` の場合、`if` に続くステートメントを実行します。</span><span class="sxs-lookup"><span data-stu-id="199b2-125">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="199b2-126">それ以外の場合はスキップします。</span><span class="sxs-lookup"><span data-stu-id="199b2-126">Otherwise, it is skipped.</span></span> 

      <span data-ttu-id="199b2-127">条件を確認してその条件に基づいてステートメントを実行するというこのプロセスは非常に機能的です。</span><span class="sxs-lookup"><span data-stu-id="199b2-127">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="199b2-128">さらに詳しく見てみましょう。</span><span class="sxs-lookup"><span data-stu-id="199b2-128">Let's explore more.</span></span>

      > [!NOTE]
      > <span data-ttu-id="199b2-129">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="199b2-129">This online coding experience is in preview mode.</span></span> <span data-ttu-id="199b2-130">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="199b2-130">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="199b2-131">if と else を組み合わせた使用</span><span class="sxs-lookup"><span data-stu-id="199b2-131">Make if and else work together</span></span>
    durationInMinutes: 10
    content: |

      <span data-ttu-id="199b2-132">true 分岐と false 分岐で別々のコードを実行するには、条件が false のときに実行する `else` 分岐を作成します。</span><span class="sxs-lookup"><span data-stu-id="199b2-132">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id="199b2-133">これを試してみます。</span><span class="sxs-lookup"><span data-stu-id="199b2-133">Try this:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10");
      else
          Console.WriteLine("The answer is not greater than 10");
      ```

      <span data-ttu-id="199b2-134">`else` キーワードに続くステートメントは、判定中の条件が `false` のときにのみ実行されます。</span><span class="sxs-lookup"><span data-stu-id="199b2-134">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id="199b2-135">`if` と `else` をブール条件と組み合わせれば、必要な機能がすべて整います。</span><span class="sxs-lookup"><span data-stu-id="199b2-135">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="199b2-136">`if` と `else` のステートメント内にあるインデントは、人が読みやすいようにするためのものです。</span><span class="sxs-lookup"><span data-stu-id="199b2-136">The indentation under the `if` and `else` statements is for human readers.</span></span>
      > <span data-ttu-id="199b2-137">C# 言語はインデントや空白文字を重要なものとして扱いません。</span><span class="sxs-lookup"><span data-stu-id="199b2-137">The C# language doesn't treat indentation or whitespace as significant.</span></span> <span data-ttu-id="199b2-138">`if` や `else` のキーワードに続くステートメントは、条件に基づいて実行されます。</span><span class="sxs-lookup"><span data-stu-id="199b2-138">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id="199b2-139">このチュートリアルでは、すべてのサンプルで一般的な記述方法を採用し、実行する行ごとにインデントを挿入しています。</span><span class="sxs-lookup"><span data-stu-id="199b2-139">All the samples in this tutorial follow a common practice to indent lines based on execution.</span></span>

      <span data-ttu-id="199b2-140">インデントは重要ではないため、条件に基づいて実行するブロック内に 1 つ以上のステートメントがある場合には、`{` と `}` を使用して示します。</span><span class="sxs-lookup"><span data-stu-id="199b2-140">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id="199b2-141">通常、C# プログラマーは `if` と `else` の句にはこの中かっこを使用します。</span><span class="sxs-lookup"><span data-stu-id="199b2-141">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id="199b2-142">次の例は、さきほど作成したものと同じ内容です。</span><span class="sxs-lookup"><span data-stu-id="199b2-142">The following example is the same as what you just created.</span></span> <span data-ttu-id="199b2-143">試してみてください。</span><span class="sxs-lookup"><span data-stu-id="199b2-143">Try it.</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
      {
          Console.WriteLine("The answer is greater than 10");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
      }
      ```

      > [!TIP]
      > <span data-ttu-id="199b2-144">このチュートリアルの残りの箇所では、一般に認められている記述方法に従って、すべてのコード サンプルで中かっこを使用しています。</span><span class="sxs-lookup"><span data-stu-id="199b2-144">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>

      <span data-ttu-id="199b2-145">さらに複雑な条件を判定できます。</span><span class="sxs-lookup"><span data-stu-id="199b2-145">You can test more complicated conditions:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) && (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("And the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("Or the first number is not greater than the second");
      }
      ```

      <span data-ttu-id="199b2-146">`&&` は "and" (および) を表します。</span><span class="sxs-lookup"><span data-stu-id="199b2-146">The `&&` represents "and".</span></span> <span data-ttu-id="199b2-147">これは、true 分岐でステートメントを実行するには、両方の条件が true になる必要があることを意味しています。</span><span class="sxs-lookup"><span data-stu-id="199b2-147">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id="199b2-148">また、これらの例では、ステートメントが `{` と `}` で囲まれていれば、各条件分岐に複数のステートメントを持つことができることを示しています。</span><span class="sxs-lookup"><span data-stu-id="199b2-148">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>

      <span data-ttu-id="199b2-149">"or" (または) を表すために `||` を使用することもできます。</span><span class="sxs-lookup"><span data-stu-id="199b2-149">You can also use  `||` to represent "or":</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) || (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("Or the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("And the first number is not greater than the second");
      }
      ```

      > [!NOTE]
      > <span data-ttu-id="199b2-150">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="199b2-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="199b2-151">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="199b2-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="199b2-152">ループを使用した処理の繰り返し</span><span class="sxs-lookup"><span data-stu-id="199b2-152">Use loops to repeat operations</span></span>
    durationInMinutes: 6
    content: |
      <span data-ttu-id="199b2-153">大規模なプログラムを作成する上でもう 1 つ重要な概念は、**ループ**です。</span><span class="sxs-lookup"><span data-stu-id="199b2-153">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="199b2-154">複数回実行したいステートメントは、ループを使用して繰り返します。</span><span class="sxs-lookup"><span data-stu-id="199b2-154">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="199b2-155">対話型ウィンドウで次のコードを試します。</span><span class="sxs-lookup"><span data-stu-id="199b2-155">Try this code in the interactive window:</span></span>

      ```csharp
      int counter = 0;
      while (counter < 10)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      }
      ```

      <span data-ttu-id="199b2-156">`while` ステートメントは、条件を確認して `while` に続くステートメントを実行します。</span><span class="sxs-lookup"><span data-stu-id="199b2-156">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="199b2-157">条件が false になるまで、条件の確認とステートメントの実行を繰り返します。</span><span class="sxs-lookup"><span data-stu-id="199b2-157">It will repeat checking the condition and executing those statements until the condition is false.</span></span>

      <span data-ttu-id="199b2-158">この例では、もう 1 つ新しい演算子が使用されています。</span><span class="sxs-lookup"><span data-stu-id="199b2-158">There's one other new operator in this example.</span></span> <span data-ttu-id="199b2-159">`counter` 変数のあとにある `++` は、**インクリメント**演算子です。</span><span class="sxs-lookup"><span data-stu-id="199b2-159">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="199b2-160">counter の値に 1 を追加し、その値を counter 変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="199b2-160">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="199b2-161">コードを実行したときに `while` のループ条件が false に切り替わることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="199b2-161">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="199b2-162">それ以外の場合は、プログラムが終了することのない**無限ループ**を作成します。</span><span class="sxs-lookup"><span data-stu-id="199b2-162">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="199b2-163">これについては実演しません。コードを実行するエンジンがタイムアウトしてプログラムから何も出力されないからです。</span><span class="sxs-lookup"><span data-stu-id="199b2-163">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>

      <span data-ttu-id="199b2-164">`while` ループは、条件を判定してから `while` に続くコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="199b2-164">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="199b2-165">`do` ... `while` ループは、最初にコードを実行してからその条件を確認します。</span><span class="sxs-lookup"><span data-stu-id="199b2-165">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="199b2-166">次のようになります。</span><span class="sxs-lookup"><span data-stu-id="199b2-166">It looks like this:</span></span>

      ```csharp
      int counter = 0;
      do
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      } while (counter < 10);
      ```

      <span data-ttu-id="199b2-167">この `do` ループと先述の `while` ループは同じ機能を持っています。</span><span class="sxs-lookup"><span data-stu-id="199b2-167">This `do` loop and the earlier `while` loop work the same.</span></span> 

      <span data-ttu-id="199b2-168">では、最後のループ ステートメントの確認に移りましょう。</span><span class="sxs-lookup"><span data-stu-id="199b2-168">Let's move on to one last loop statement.</span></span>

      > [!NOTE]
      > <span data-ttu-id="199b2-169">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="199b2-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="199b2-170">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="199b2-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="199b2-171">for ループの処理</span><span class="sxs-lookup"><span data-stu-id="199b2-171">Work with the for loop</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="199b2-172">C# コードでよく目にするもう 1 つのループ ステートメントは、`for` ループです。</span><span class="sxs-lookup"><span data-stu-id="199b2-172">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="199b2-173">対話型ウィンドウで次のコードを試します。</span><span class="sxs-lookup"><span data-stu-id="199b2-173">Try this code in the interactive window:</span></span>

      ```csharp
      for(int counter = 0; counter < 10; counter++)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
      } 
      ```

      <span data-ttu-id="199b2-174">このループは、既に使用した `while` ループや `do` ループと同じ機能を持っています。</span><span class="sxs-lookup"><span data-stu-id="199b2-174">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="199b2-175">`for` ステートメントは 3 つの部分に分かれてその機能を制御します。</span><span class="sxs-lookup"><span data-stu-id="199b2-175">The `for` statement has three parts that control how it works.</span></span> 

      <span data-ttu-id="199b2-176">最初の部分は、**for 初期化子**です。`for counter = 0;` は、`counter` がループ変数であることを宣言し、その初期値を `0` に設定しています。</span><span class="sxs-lookup"><span data-stu-id="199b2-176">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>

      <span data-ttu-id="199b2-177">2 つ目の部分は、**for 条件**です。`counter < 10` は、counter の値が 10 未満である間は `for` ループが実行され続けることを宣言しています。</span><span class="sxs-lookup"><span data-stu-id="199b2-177">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>

      <span data-ttu-id="199b2-178">最後の部分は、**for 反復子**です。`counter++` は、`for` ステートメントに続くブロックを実行したあとにループ変数を変更する方法を指定しています。</span><span class="sxs-lookup"><span data-stu-id="199b2-178">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="199b2-179">ここでは、ブロックが実行されるごとに `counter` が 1 ずつ増加するよう指定しています。</span><span class="sxs-lookup"><span data-stu-id="199b2-179">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>

      <span data-ttu-id="199b2-180">ご自身でこれを実行してみてください。</span><span class="sxs-lookup"><span data-stu-id="199b2-180">Experiment with these yourself.</span></span> <span data-ttu-id="199b2-181">以下をそれぞれ試してみます。</span><span class="sxs-lookup"><span data-stu-id="199b2-181">Try each of the following:</span></span>

      - <span data-ttu-id="199b2-182">初期化子を変更して別の値で開始する。</span><span class="sxs-lookup"><span data-stu-id="199b2-182">Change the initializer to start at a different value.</span></span>
      - <span data-ttu-id="199b2-183">条件を変更して別の値で停止する。</span><span class="sxs-lookup"><span data-stu-id="199b2-183">Change the condition to stop at a different value.</span></span>

      <span data-ttu-id="199b2-184">完了したら次に進み、学習したことを使用して自分でいくつかのコードを記述してみましょう。</span><span class="sxs-lookup"><span data-stu-id="199b2-184">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>

      > [!NOTE]
      > <span data-ttu-id="199b2-185">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="199b2-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="199b2-186">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="199b2-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="199b2-187">分岐とループの組み合わせ</span><span class="sxs-lookup"><span data-stu-id="199b2-187">Combining branches and loops</span></span>
    durationInMinutes: 12
    content: |
      <span data-ttu-id="199b2-188">C# 言語における `if` ステートメントとループ構造を見てきました。では、1 から 20 の整数のうち 3 で割り切れる数の合計を求める C# コードを記述できるか確認してみましょう。</span><span class="sxs-lookup"><span data-stu-id="199b2-188">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="199b2-189">次にいくつかヒントを示します。</span><span class="sxs-lookup"><span data-stu-id="199b2-189">Here are a few hints:</span></span>

      - <span data-ttu-id="199b2-190">`%` 演算子は、除算演算の剰余を算出します。</span><span class="sxs-lookup"><span data-stu-id="199b2-190">The `%` operator gives you the remainder of a division operation.</span></span>
      - <span data-ttu-id="199b2-191">`if` ステートメントは、合計に入れるべき数かどうかを確認する条件を作ります。</span><span class="sxs-lookup"><span data-stu-id="199b2-191">The `if` statement givesx you the condition to see if a number should be part of the sum.</span></span>
      - <span data-ttu-id="199b2-192">`for` ループは、1 から 20 までのすべての数を 1 つずつ確認する一連の手順を繰り返すのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="199b2-192">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>

      <span data-ttu-id="199b2-193">ご自身で試してみてください。</span><span class="sxs-lookup"><span data-stu-id="199b2-193">Try it yourself.</span></span> <span data-ttu-id="199b2-194">そして自分がとった方法を確認してください。</span><span class="sxs-lookup"><span data-stu-id="199b2-194">Then check how you did.</span></span>

      > [!NOTE]
      > <span data-ttu-id="199b2-195">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="199b2-195">This online coding experience is in preview mode.</span></span> <span data-ttu-id="199b2-196">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="199b2-196">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="199b2-197">課題完了</span><span class="sxs-lookup"><span data-stu-id="199b2-197">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="199b2-198">これで "分岐とループ" に関するチュートリアルは終了です。</span><span class="sxs-lookup"><span data-stu-id="199b2-198">You've completed the "branches and loops" tutorial.</span></span> <span data-ttu-id="199b2-199">次のトピックでこれらの概念の詳細を学習できます。</span><span class="sxs-lookup"><span data-stu-id="199b2-199">You can learn more about these concepts in these topics:</span></span>

      <span data-ttu-id="199b2-200">[if と else ステートメント](../language-reference/keywords/if-else.md) </span><span class="sxs-lookup"><span data-stu-id="199b2-200">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  
      <span data-ttu-id="199b2-201">[while ステートメント](../language-reference/keywords/while.md) </span><span class="sxs-lookup"><span data-stu-id="199b2-201">[While statement](../language-reference/keywords/while.md) </span></span>  
      <span data-ttu-id="199b2-202">[do ステートメント](../language-reference/keywords/do.md) </span><span class="sxs-lookup"><span data-stu-id="199b2-202">[Do statement](../language-reference/keywords/do.md) </span></span>  
      [<span data-ttu-id="199b2-203">for ステートメント</span><span class="sxs-lookup"><span data-stu-id="199b2-203">For statement</span></span>](../language-reference/keywords/for.md)