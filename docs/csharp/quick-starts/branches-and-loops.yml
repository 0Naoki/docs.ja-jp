### YamlMime:YamlDocument
documentType: Tutorial
title: <span data-ttu-id="53bd9-101">分岐とループ</span><span class="sxs-lookup"><span data-stu-id="53bd9-101">Branches and loops</span></span>
metadata:
  title: <span data-ttu-id="53bd9-102">分岐とループ</span><span class="sxs-lookup"><span data-stu-id="53bd9-102">Branches and loops</span></span>
  description: '<span data-ttu-id="53bd9-103">分岐とループに関するこのチュートリアルでは、c# の対話形式で学習するのにお使いのブラウザーを使用します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-103">In this tutorial about branches and loops, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="53bd9-104">しようとしている c# コードを記述してコンパイルして、ブラウザーで直接実行するコードの結果を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53bd9-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: 'Arrays and colletions in C#'
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="53bd9-105">このチュートリアルでは、変数を検査し、それらの変数に基づいて実行パスを変更するコードを記述する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-105">This tutorial teaches you about how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="53bd9-106">記述 (C#)、対話的にお使いのブラウザーを使用して c# を記述しをコンパイルして、コードの実行の結果を参照してください。</span><span class="sxs-lookup"><span data-stu-id="53bd9-106">You'll write C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="53bd9-107">一連分岐構造やループ構造 (C#) を探索するレッスンにはが含まれています。</span><span class="sxs-lookup"><span data-stu-id="53bd9-107">It contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="53bd9-108">これらのレッスンでは、c# 言語の基本を学習します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-108">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="53bd9-109">場合を使用して決定ステートメント</span><span class="sxs-lookup"><span data-stu-id="53bd9-109">Make decisions using the if statement</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="53bd9-110">対話型のウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="53bd9-111">手順を実行する対話型ウィンドウで次のコード ブロックを入力し、をクリックして、**実行**ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="53bd9-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 5;
      int b = 6;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10.");
      ```

      <span data-ttu-id="53bd9-112">宣言を変更`b`合計が 10 未満であるようにします。</span><span class="sxs-lookup"><span data-stu-id="53bd9-112">Modify the declaration of `b` so that the sum is less than 10:</span></span> 

      ```csharp
      int b = 3;
      ```

      <span data-ttu-id="53bd9-113">クリックして、**実行**を再度クリックします。</span><span class="sxs-lookup"><span data-stu-id="53bd9-113">Click the **Run** button again.</span></span> <span data-ttu-id="53bd9-114">答えが 10 未満であるため、何も出力されません。</span><span class="sxs-lookup"><span data-stu-id="53bd9-114">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="53bd9-115">**条件**できたらテストは、false を指定します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-115">The **condition** you're testing is false.</span></span> <span data-ttu-id="53bd9-116">のみを作成したの考えられる分岐のいずれかを実行するためのコードがない、`if`ステートメント: true の分岐。</span><span class="sxs-lookup"><span data-stu-id="53bd9-116">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>

      > [!TIP]
      > <span data-ttu-id="53bd9-117">C# (または任意のプログラミング言語) を探索するよう、コードを記述するときに、間違いを行うします。</span><span class="sxs-lookup"><span data-stu-id="53bd9-117">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="53bd9-118">**コンパイラ**はそれらのエラーを見つけてに報告します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-118">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="53bd9-119">出力には、エラー メッセージが含まれている、よく見る、コード例では、そして修正内容を表示する対話型ウィンドウ内のコード。</span><span class="sxs-lookup"><span data-stu-id="53bd9-119">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="53bd9-120">その手順を使用すると、c# コードの構造を学習できます。</span><span class="sxs-lookup"><span data-stu-id="53bd9-120">That exercise will help you learn the structure of C# code.</span></span>     

      <span data-ttu-id="53bd9-121">この最初の例は、の機能を示しています`if`およびブール型です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-121">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="53bd9-122">A*ブール*変数 2 つの値のいずれかです:`true`または`false`です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-122">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="53bd9-123">C# の場合、特殊な種類の定義`bool`ブール値変数。</span><span class="sxs-lookup"><span data-stu-id="53bd9-123">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="53bd9-124">`if`ステートメントの値を調べて、`bool`です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-124">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="53bd9-125">値が`true`、次のステートメント、`if`を実行します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-125">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="53bd9-126">それ以外の場合はスキップされます。</span><span class="sxs-lookup"><span data-stu-id="53bd9-126">Otherwise, it is skipped.</span></span> 

      <span data-ttu-id="53bd9-127">条件をチェックし、これらの条件に基づいて、ステートメントを実行するには、このプロセスは非常に強力です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-127">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="53bd9-128">詳しく見てみましょう。</span><span class="sxs-lookup"><span data-stu-id="53bd9-128">Let's explore more.</span></span>

      > [!NOTE]
      > <span data-ttu-id="53bd9-129">このオンライン コーディング エクスペリエンスはプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="53bd9-129">This online coding experience is in preview mode.</span></span> <span data-ttu-id="53bd9-130">問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-130">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="53bd9-131">場合し、連携するそれ以外の場合</span><span class="sxs-lookup"><span data-stu-id="53bd9-131">Make if and else work together</span></span>
    durationInMinutes: 10
    content: |

      <span data-ttu-id="53bd9-132">別のコードを実行するには、true と false の両方の分岐内に作成、`else`条件が false の場合に実行する分岐です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-132">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id="53bd9-133">これを行います。</span><span class="sxs-lookup"><span data-stu-id="53bd9-133">Try this:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10");
      else
          Console.WriteLine("The answer is not greater than 10");
      ```

      <span data-ttu-id="53bd9-134">ステートメント、`else`キーワードは、テストされた条件がのときだけ実行される`false`です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-134">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id="53bd9-135">結合`if`と`else`とブール値条件により、すべて必要があります。</span><span class="sxs-lookup"><span data-stu-id="53bd9-135">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="53bd9-136">インデント、`if`と`else`ヒューマン リーダーのステートメントは、します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-136">The indentation under the `if` and `else` statements is for human readers.</span></span>
      > <span data-ttu-id="53bd9-137">C# 言語がインデント設定、または空白文字ものとして扱います。</span><span class="sxs-lookup"><span data-stu-id="53bd9-137">The C# language doesn't treat indentation or whitespace as significant.</span></span> <span data-ttu-id="53bd9-138">ステートメント、`if`または`else`キーワードは、条件に基づいて実行されます。</span><span class="sxs-lookup"><span data-stu-id="53bd9-138">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id="53bd9-139">このチュートリアルでは、すべてのサンプルでは、実行に基づく行をインデントする一般的な方法に従います。</span><span class="sxs-lookup"><span data-stu-id="53bd9-139">All the samples in this tutorial follow a common practice to indent lines based on execution.</span></span>

      <span data-ttu-id="53bd9-140">インデントが重要でないため、使用する必要があります。`{`と`}`をする必要がある場合、条件付きで実行されるブロックの一部として複数のステートメントを示します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-140">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id="53bd9-141">C# プログラマは、すべてこれらの中かっこを使用する通常`if`と`else`句。</span><span class="sxs-lookup"><span data-stu-id="53bd9-141">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id="53bd9-142">次の例では、作成したものと同じです。</span><span class="sxs-lookup"><span data-stu-id="53bd9-142">The following example is the same as what you just created.</span></span> <span data-ttu-id="53bd9-143">お試しください。</span><span class="sxs-lookup"><span data-stu-id="53bd9-143">Try it.</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
      {
          Console.WriteLine("The answer is greater than 10");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
      }
      ```

      > [!TIP]
      > <span data-ttu-id="53bd9-144">このチュートリアルの残りの部分からすべてのコード サンプルは、後に、中かっこを含めるプラクティスを受け入れられます。</span><span class="sxs-lookup"><span data-stu-id="53bd9-144">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>

      <span data-ttu-id="53bd9-145">複雑な条件をテストすることができます。</span><span class="sxs-lookup"><span data-stu-id="53bd9-145">You can test more complicated conditions:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) && (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("And the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("Or the first number is not greater than the second");
      }
      ```

      <span data-ttu-id="53bd9-146">`&&`を表す「と」です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-146">The `&&` represents "and".</span></span> <span data-ttu-id="53bd9-147">これは、両方の条件は、true の分岐でステートメントを実行する場合は true である必要がありますを意味します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-147">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id="53bd9-148">これらの例もを表示することができます各条件付き分岐の複数のステートメントで囲んで指定`{`と`}`です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-148">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>

      <span data-ttu-id="53bd9-149">使用することも`||`を表す「または」。</span><span class="sxs-lookup"><span data-stu-id="53bd9-149">You can also use  `||` to represent "or":</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) || (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("Or the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("And the first number is not greater than the second");
      }
      ```

      > [!NOTE]
      > <span data-ttu-id="53bd9-150">このオンライン コーディング エクスペリエンスはプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="53bd9-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="53bd9-151">問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="53bd9-152">ループを使用して、操作を繰り返します</span><span class="sxs-lookup"><span data-stu-id="53bd9-152">Use loops to repeat operations</span></span>
    durationInMinutes: 6
    content: |
      <span data-ttu-id="53bd9-153">大規模なプログラムを作成するもう 1 つの重要な概念は**ループ**です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-153">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="53bd9-154">複数回実行するステートメントを繰り返すループを使用します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-154">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="53bd9-155">対話型のウィンドウでこのコードを試してください。</span><span class="sxs-lookup"><span data-stu-id="53bd9-155">Try this code in the interactive window:</span></span>

      ```csharp
      int counter = 0;
      while (counter < 10)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      }
      ```

      <span data-ttu-id="53bd9-156">`while`ステートメントは、条件をチェックして、ステートメントの実行、`while`です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-156">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="53bd9-157">条件を確認し、条件が false になるまで、これらのステートメントを実行する繰り返されます。</span><span class="sxs-lookup"><span data-stu-id="53bd9-157">It will repeat checking the condition and executing those statements until the condition is false.</span></span>

      <span data-ttu-id="53bd9-158">この例ではその他の 1 つの新しい演算子があります。</span><span class="sxs-lookup"><span data-stu-id="53bd9-158">There's one other new operator in this example.</span></span> <span data-ttu-id="53bd9-159">`++`後、`counter`変数は、**インクリメント**演算子。</span><span class="sxs-lookup"><span data-stu-id="53bd9-159">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="53bd9-160">カウンターの値に 1 を加算し、カウンター変数にその値を格納します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-160">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="53bd9-161">確認して、`while`ループの条件が false に切り替えるはコードを実行するとします。</span><span class="sxs-lookup"><span data-stu-id="53bd9-161">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="53bd9-162">作成するそれ以外の場合、**無限ループ**しないで、プログラムの終了位置。</span><span class="sxs-lookup"><span data-stu-id="53bd9-162">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="53bd9-163">それでは、エンジンが実行されるため、コードはタイムアウトが発生するとします出力が得られますなし、プログラムからは示しません。</span><span class="sxs-lookup"><span data-stu-id="53bd9-163">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>

      <span data-ttu-id="53bd9-164">`while`ループでは、条件をテスト コードの次を実行する前に、`while`です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-164">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="53bd9-165">`do`しています.`while`ループに最初に、コードを実行し、条件をチェックします。</span><span class="sxs-lookup"><span data-stu-id="53bd9-165">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="53bd9-166">次のようにします。</span><span class="sxs-lookup"><span data-stu-id="53bd9-166">It looks like this:</span></span>

      ```csharp
      int counter = 0;
      do
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      } while (counter < 10);
      ```

      <span data-ttu-id="53bd9-167">これは、`do`ループと以前`while`ループは、同じ動作です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-167">This `do` loop and the earlier `while` loop work the same.</span></span> 

      <span data-ttu-id="53bd9-168">最後の 1 つのループ ステートメントに進みましょう。</span><span class="sxs-lookup"><span data-stu-id="53bd9-168">Let's move on to one last loop statement.</span></span>

      > [!NOTE]
      > <span data-ttu-id="53bd9-169">このオンライン コーディング エクスペリエンスはプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="53bd9-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="53bd9-170">問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="53bd9-171">使用、for ループ</span><span class="sxs-lookup"><span data-stu-id="53bd9-171">Work with the for loop</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="53bd9-172">C# コードで表示される別の一般的な loop ステートメントは、`for`ループします。</span><span class="sxs-lookup"><span data-stu-id="53bd9-172">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="53bd9-173">対話型のウィンドウでこのコードを試してください。</span><span class="sxs-lookup"><span data-stu-id="53bd9-173">Try this code in the interactive window:</span></span>

      ```csharp
      for(int counter = 0; counter < 10; counter++)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
      } 
      ```

      <span data-ttu-id="53bd9-174">同じ作業は、`while`ループと`do`ループが既に使用しています。</span><span class="sxs-lookup"><span data-stu-id="53bd9-174">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="53bd9-175">`for`ステートメントではその動作を制御する 3 つの部分です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-175">The `for` statement has three parts that control how it works.</span></span> 

      <span data-ttu-id="53bd9-176">最初の部分は、**初期化子の**:`for counter = 0;`を宣言する`counter`ループ変数は、その初期値に設定`0`です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-176">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>

      <span data-ttu-id="53bd9-177">中間部品、**条件の**:`counter < 10`宣言この`for`ループがカウンターの値が 10 未満である限りの実行を継続します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-177">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>

      <span data-ttu-id="53bd9-178">最後の部分は、**反復子の**:`counter++`ブロック次を実行した後、ループ変数を変更する方法を指定します、`for`ステートメントです。</span><span class="sxs-lookup"><span data-stu-id="53bd9-178">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="53bd9-179">ここでは、ことを指定`counter`ブロックが実行されるたびに 1 つずつ増加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="53bd9-179">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>

      <span data-ttu-id="53bd9-180">自分で試してください。</span><span class="sxs-lookup"><span data-stu-id="53bd9-180">Experiment with these yourself.</span></span> <span data-ttu-id="53bd9-181">次のそれぞれの操作を行います。</span><span class="sxs-lookup"><span data-stu-id="53bd9-181">Try each of the following:</span></span>

      - <span data-ttu-id="53bd9-182">開始点が、別の値に初期化子を変更します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-182">Change the initializer to start at a different value.</span></span>
      - <span data-ttu-id="53bd9-183">別の値で停止する条件を変更します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-183">Change the condition to stop at a different value.</span></span>

      <span data-ttu-id="53bd9-184">完了したらに移動してみましょう書き込みにあるコードが自分で学習した内容を使用します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-184">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>

      > [!NOTE]
      > <span data-ttu-id="53bd9-185">このオンライン コーディング エクスペリエンスはプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="53bd9-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="53bd9-186">問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="53bd9-187">結合の分岐とループ</span><span class="sxs-lookup"><span data-stu-id="53bd9-187">Combining branches and loops</span></span>
    durationInMinutes: 12
    content: |
      <span data-ttu-id="53bd9-188">これで、見たこと、`if`ステートメントとループ構造、c# 言語のかどうかは、1 ~ 3 で割り切れる 20 のすべての整数の合計を検索する c# コードを記述することができますを参照してください。</span><span class="sxs-lookup"><span data-stu-id="53bd9-188">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="53bd9-189">次に、いくつかのヒントを示します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-189">Here are a few hints:</span></span>

      - <span data-ttu-id="53bd9-190">`%`演算子は、除算演算の余りを提供します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-190">The `%` operator gives you the remainder of a division operation.</span></span>
      - <span data-ttu-id="53bd9-191">`if`ステートメント givesx する条件が、数が合計の一部にする必要があるかどうかを参照してください。</span><span class="sxs-lookup"><span data-stu-id="53bd9-191">The `if` statement givesx you the condition to see if a number should be part of the sum.</span></span>
      - <span data-ttu-id="53bd9-192">`for`ループを使用して、すべての数値 1 20 からの一連の手順を繰り返してできます。</span><span class="sxs-lookup"><span data-stu-id="53bd9-192">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>

      <span data-ttu-id="53bd9-193">試してみよう自分でします。</span><span class="sxs-lookup"><span data-stu-id="53bd9-193">Try it yourself.</span></span> <span data-ttu-id="53bd9-194">した方法を確認します。</span><span class="sxs-lookup"><span data-stu-id="53bd9-194">Then check how you did.</span></span>

      > [!NOTE]
      > <span data-ttu-id="53bd9-195">このオンライン コーディング エクスペリエンスはプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="53bd9-195">This online coding experience is in preview mode.</span></span> <span data-ttu-id="53bd9-196">問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。</span><span class="sxs-lookup"><span data-stu-id="53bd9-196">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="53bd9-197">完全なチャレンジ</span><span class="sxs-lookup"><span data-stu-id="53bd9-197">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="53bd9-198">「分岐とループ」チュートリアルを完了しました。</span><span class="sxs-lookup"><span data-stu-id="53bd9-198">You've completed the "branches and loops" tutorial.</span></span> <span data-ttu-id="53bd9-199">次のトピックでこれらの概念の詳細を学習できます。</span><span class="sxs-lookup"><span data-stu-id="53bd9-199">You can learn more about these concepts in these topics:</span></span>

      <span data-ttu-id="53bd9-200">[場合、else ステートメント](../language-reference/keywords/if-else.md) </span><span class="sxs-lookup"><span data-stu-id="53bd9-200">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  
      <span data-ttu-id="53bd9-201">[While ステートメント](../language-reference/keywords/while.md) </span><span class="sxs-lookup"><span data-stu-id="53bd9-201">[While statement](../language-reference/keywords/while.md) </span></span>  
      <span data-ttu-id="53bd9-202">[Do ステートメント](../language-reference/keywords/do.md) </span><span class="sxs-lookup"><span data-stu-id="53bd9-202">[Do statement](../language-reference/keywords/do.md) </span></span>  
      [<span data-ttu-id="53bd9-203">For ステートメント</span><span class="sxs-lookup"><span data-stu-id="53bd9-203">For statement</span></span>](../language-reference/keywords/for.md)