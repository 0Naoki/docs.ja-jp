### YamlMime:YamlDocument
documentType: Tutorial
title: 分岐とループ
metadata:
  title: 分岐とループ
  description: '分岐とループに関するこのチュートリアルでは、c# の対話形式で学習するのにお使いのブラウザーを使用します。 しようとしている c# コードを記述してコンパイルして、ブラウザーで直接実行するコードの結果を参照してください。'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: 'Arrays and colletions in C#'
items:
  - durationInMinutes: 1
    content: |
      このチュートリアルでは、変数を検査し、それらの変数に基づいて実行パスを変更するコードを記述する方法について説明します。 記述 (C#)、対話的にお使いのブラウザーを使用して c# を記述しをコンパイルして、コードの実行の結果を参照してください。 一連分岐構造やループ構造 (C#) を探索するレッスンにはが含まれています。 これらのレッスンでは、c# 言語の基本を学習します。
  - title: 場合を使用して決定ステートメント
    durationInMinutes: 4
    content: |
      対話型のウィンドウで次のコードを実行します。 手順を実行する対話型ウィンドウで次のコード ブロックを入力し、をクリックして、**実行**ボタンをクリックします。

      ```csharp
      int a = 5;
      int b = 6;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10.");
      ```

      宣言を変更`b`合計が 10 未満であるようにします。 

      ```csharp
      int b = 3;
      ```

      クリックして、**実行**を再度クリックします。 答えが 10 未満であるため、何も出力されません。 **条件**できたらテストは、false を指定します。 のみを作成したの考えられる分岐のいずれかを実行するためのコードがない、`if`ステートメント: true の分岐。

      > [!TIP]
      > C# (または任意のプログラミング言語) を探索するよう、コードを記述するときに、間違いを行うします。 **コンパイラ**はそれらのエラーを見つけてに報告します。 出力には、エラー メッセージが含まれている、よく見る、コード例では、そして修正内容を表示する対話型ウィンドウ内のコード。
      > その手順を使用すると、c# コードの構造を学習できます。     

      この最初の例は、の機能を示しています`if`およびブール型です。 A*ブール*変数 2 つの値のいずれかです:`true`または`false`です。 C# の場合、特殊な種類の定義`bool`ブール値変数。 `if`ステートメントの値を調べて、`bool`です。 値が`true`、次のステートメント、`if`を実行します。 それ以外の場合はスキップされます。 

      条件をチェックし、これらの条件に基づいて、ステートメントを実行するには、このプロセスは非常に強力です。 詳しく見てみましょう。

      > [!NOTE]
      > このオンライン コーディング エクスペリエンスはプレビュー モードです。 問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。
  - title: 場合し、連携するそれ以外の場合
    durationInMinutes: 10
    content: |

      別のコードを実行するには、true と false の両方の分岐内に作成、`else`条件が false の場合に実行する分岐です。 これを行います。

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10");
      else
          Console.WriteLine("The answer is not greater than 10");
      ```

      ステートメント、`else`キーワードは、テストされた条件がのときだけ実行される`false`です。 結合`if`と`else`とブール値条件により、すべて必要があります。

      > [!IMPORTANT]
      > インデント、`if`と`else`ヒューマン リーダーのステートメントは、します。
      > C# 言語がインデント設定、または空白文字ものとして扱います。 ステートメント、`if`または`else`キーワードは、条件に基づいて実行されます。 このチュートリアルでは、すべてのサンプルでは、実行に基づく行をインデントする一般的な方法に従います。

      インデントが重要でないため、使用する必要があります。`{`と`}`をする必要がある場合、条件付きで実行されるブロックの一部として複数のステートメントを示します。 C# プログラマは、すべてこれらの中かっこを使用する通常`if`と`else`句。 次の例では、作成したものと同じです。 お試しください。

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
      {
          Console.WriteLine("The answer is greater than 10");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
      }
      ```

      > [!TIP]
      > このチュートリアルの残りの部分からすべてのコード サンプルは、後に、中かっこを含めるプラクティスを受け入れられます。

      複雑な条件をテストすることができます。

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) && (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("And the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("Or the first number is not greater than the second");
      }
      ```

      `&&`を表す「と」です。 これは、両方の条件は、true の分岐でステートメントを実行する場合は true である必要がありますを意味します。  これらの例もを表示することができます各条件付き分岐の複数のステートメントで囲んで指定`{`と`}`です。

      使用することも`||`を表す「または」。

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) || (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("Or the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("And the first number is not greater than the second");
      }
      ```

      > [!NOTE]
      > このオンライン コーディング エクスペリエンスはプレビュー モードです。 問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。
  - title: ループを使用して、操作を繰り返します
    durationInMinutes: 6
    content: |
      大規模なプログラムを作成するもう 1 つの重要な概念は**ループ**です。 複数回実行するステートメントを繰り返すループを使用します。 対話型のウィンドウでこのコードを試してください。

      ```csharp
      int counter = 0;
      while (counter < 10)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      }
      ```

      `while`ステートメントは、条件をチェックして、ステートメントの実行、`while`です。 条件を確認し、条件が false になるまで、これらのステートメントを実行する繰り返されます。

      この例ではその他の 1 つの新しい演算子があります。 `++`後、`counter`変数は、**インクリメント**演算子。 カウンターの値に 1 を加算し、カウンター変数にその値を格納します。

      > [!IMPORTANT]
      > 確認して、`while`ループの条件が false に切り替えるはコードを実行するとします。 作成するそれ以外の場合、**無限ループ**しないで、プログラムの終了位置。 それでは、エンジンが実行されるため、コードはタイムアウトが発生するとします出力が得られますなし、プログラムからは示しません。

      `while`ループでは、条件をテスト コードの次を実行する前に、`while`です。 `do`しています.`while`ループに最初に、コードを実行し、条件をチェックします。 次のようにします。

      ```csharp
      int counter = 0;
      do
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      } while (counter < 10);
      ```

      これは、`do`ループと以前`while`ループは、同じ動作です。 

      最後の 1 つのループ ステートメントに進みましょう。

      > [!NOTE]
      > このオンライン コーディング エクスペリエンスはプレビュー モードです。 問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。
  - title: 使用、for ループ
    durationInMinutes: 5
    content: |
      C# コードで表示される別の一般的な loop ステートメントは、`for`ループします。 対話型のウィンドウでこのコードを試してください。

      ```csharp
      for(int counter = 0; counter < 10; counter++)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
      } 
      ```

      同じ作業は、`while`ループと`do`ループが既に使用しています。 `for`ステートメントではその動作を制御する 3 つの部分です。 

      最初の部分は、**初期化子の**:`for counter = 0;`を宣言する`counter`ループ変数は、その初期値に設定`0`です。

      中間部品、**条件の**:`counter < 10`宣言この`for`ループがカウンターの値が 10 未満である限りの実行を継続します。

      最後の部分は、**反復子の**:`counter++`ブロック次を実行した後、ループ変数を変更する方法を指定します、`for`ステートメントです。 ここでは、ことを指定`counter`ブロックが実行されるたびに 1 つずつ増加する必要があります。

      自分で試してください。 次のそれぞれの操作を行います。

      - 開始点が、別の値に初期化子を変更します。
      - 別の値で停止する条件を変更します。

      完了したらに移動してみましょう書き込みにあるコードが自分で学習した内容を使用します。

      > [!NOTE]
      > このオンライン コーディング エクスペリエンスはプレビュー モードです。 問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。
  - title: 結合の分岐とループ
    durationInMinutes: 12
    content: |
      これで、見たこと、`if`ステートメントとループ構造、c# 言語のかどうかは、1 ~ 3 で割り切れる 20 のすべての整数の合計を検索する c# コードを記述することができますを参照してください。  次に、いくつかのヒントを示します。

      - `%`演算子は、除算演算の余りを提供します。
      - `if`ステートメント givesx する条件が、数が合計の一部にする必要があるかどうかを参照してください。
      - `for`ループを使用して、すべての数値 1 20 からの一連の手順を繰り返してできます。

      試してみよう自分でします。 した方法を確認します。

      > [!NOTE]
      > このオンライン コーディング エクスペリエンスはプレビュー モードです。 問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。
  - title: 完全なチャレンジ
    durationInMinutes: 1
    content: |
      「分岐とループ」チュートリアルを完了しました。 次のトピックでこれらの概念の詳細を学習できます。

      [場合、else ステートメント](../language-reference/keywords/if-else.md)   
      [While ステートメント](../language-reference/keywords/while.md)   
      [Do ステートメント](../language-reference/keywords/do.md)   
      [For ステートメント](../language-reference/keywords/for.md)