documentType: Tutorial
title: "<span data-ttu-id=\"fe26a-101\">分岐とループ</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-101\">Branches and loops</span></span>"
metadata:
  title: "分岐とループ"
  description: "分岐とループに関するこのクイック スタートでは、対話的に c# について学習するのにお使いのブラウザーを使用します。 C# コードを記述をし、コンパイルして、ブラウザーで直接実行するコードの結果を参照してください。"
  audience: Developer
  level: Beginner
  ms.custom: mvc
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: "<span data-ttu-id=\"fe26a-105\">配列およびコレクション (C#)</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-105\">Arrays and collections in C#</span></span>"
items:
- durationInMinutes: 1
  content: "<span data-ttu-id=\"fe26a-106\">このクイック スタートでは、変数を検査し、それらの変数に基づいて実行パスを変更するコードを記述する方法を説明します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-106\">This quick start teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id=\"fe26a-107\">C# を対話形式で記述しをコンパイルして、コードの実行の結果を参照してください。 お使いのブラウザーを使用します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-107\">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id=\"fe26a-108\">このクイック スタートには、一連分岐構造やループ構造 (C#) を探索するレッスンにはが含まれています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-108\">This quick start contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id=\"fe26a-109\">これらのレッスンでは、C# 言語の基本を説明します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-109\">These lessons teach you the fundamentals of the C# language.</span></span>\n"
  ms.openlocfilehash: d86203d6e95f82f9db355b087e9abc669ffffac8
  ms.sourcegitcommit: 43c656811dd38a66a6672084c65d10c0cbbf2015
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/22/2017
- title: "<span data-ttu-id=\"fe26a-110\">if ステートメントを使用した条件判断</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-110\">Make decisions using the if statement</span></span>"
  durationInMinutes: 4
  content: "<span data-ttu-id=\"fe26a-111\">対話型ウィンドウで次のコードを実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-111\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"fe26a-112\">そのためには、対話型ウィンドウで次のコード ブロックを入力し、**[実行]** をクリックします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-112\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\n<span data-ttu-id=\"fe26a-113\">合計が 10 未満になるように `b` の宣言を変更します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-113\">Modify the declaration of `b` so that the sum is less than 10:</span></span> \n\n```csharp\nint b = 3;\n```\n\n<span data-ttu-id=\"fe26a-114\">もう一度 **[実行]** をクリックします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-114\">Click the **Run** button again.</span></span> <span data-ttu-id=\"fe26a-115\">計算結果が 10 未満であるため、何も出力されません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-115\">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id=\"fe26a-116\">判定中の**条件**が false になっています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-116\">The **condition** you're testing is false.</span></span> <span data-ttu-id=\"fe26a-117\">`if` ステートメントの考えられる分岐の 1 つである true 分岐のみを記述したため、実行すべきコードがありません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-117\">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"fe26a-118\">C# (または何らかのプログラミング言語) について詳しく学習するに従い、コードを記述する際にミスをすることもあるでしょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-118\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"fe26a-119\">**コンパイラ**は、そうしたエラーを発見して報告します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-119\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"fe26a-120\">エラー メッセージが出力された場合は、例のコードをよく確認して、対話型ウィンドウで修正すべきコードを見つけます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-120\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"fe26a-121\">こうした実習が C# コードの構造を理解するのに役立ちます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-121\">That exercise will help you learn the structure of C# code.</span></span>     \n\n<span data-ttu-id=\"fe26a-122\">この最初のサンプルは、`if` とブール型の機能を示しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-122\">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id=\"fe26a-123\">*ブール値*は、`true` または `false` という 2 つの値のいずれかを持つことができる変数です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-123\">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id=\"fe26a-124\">C# ではブール変数の `bool` という特殊な型を定義しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-124\">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id=\"fe26a-125\">`if` ステートメントは、`bool` の値を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-125\">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id=\"fe26a-126\">値が `true` の場合、`if` に続くステートメントを実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-126\">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id=\"fe26a-127\">それ以外の場合はスキップします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-127\">Otherwise, it is skipped.</span></span> \n\n<span data-ttu-id=\"fe26a-128\">条件を確認してその条件に基づいてステートメントを実行するというこのプロセスは非常に機能的です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-128\">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id=\"fe26a-129\">さらに詳しく見てみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-129\">Let's explore more.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"fe26a-130\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-130\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"fe26a-131\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-131\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"fe26a-132\">if と else を組み合わせた使用</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-132\">Make if and else work together</span></span>"
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"fe26a-133\">true 分岐と false 分岐で別々のコードを実行するには、条件が false のときに実行する `else` 分岐を作成します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"fe26a-134\">これを試してみます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"fe26a-135\">`else` キーワードに続くステートメントは、判定中の条件が `false` のときにのみ実行されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"fe26a-136\">`if` と `else` をブール条件と組み合わせれば、必要な機能がすべて整います。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"fe26a-137\">`if` と `else` のステートメント内にあるインデントは、人が読みやすいようにするためのものです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"fe26a-138\">C# 言語はインデントや空白文字を重要なものとして扱いません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-138\">The C# language doesn't treat indentation or whitespace as significant.</span></span> <span data-ttu-id=\"fe26a-139\">`if` や `else` のキーワードに続くステートメントは、条件に基づいて実行されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"fe26a-140\">このクイック スタートのすべてのサンプルでは、ステートメントの制御フローに基づく行をインデントする一般的な方法に従います。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-140\">All the samples in this quick start follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"fe26a-141\">インデントは重要ではないため、条件に基づいて実行するブロック内に 1 つ以上のステートメントがある場合には、`{` と `}` を使用して示します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"fe26a-142\">通常、C# プログラマーは `if` と `else` の句にはこの中かっこを使用します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"fe26a-143\">次の例は、さきほど作成したものと同じ内容です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"fe26a-144\">試してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"fe26a-145\">このクイック スタートの残りの部分からすべてのコード サンプルは、後に、中かっこを含めるプラクティスを受け入れられます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-145\">Through the rest of this quick start, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"fe26a-146\">さらに複雑な条件を判定できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\n<span data-ttu-id=\"fe26a-147\">`&&` は \"and\" (および) を表します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-147\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"fe26a-148\">これは、true 分岐でステートメントを実行するには、両方の条件が true になる必要があることを意味しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-148\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"fe26a-149\">また、これらの例では、ステートメントが `{` と `}` で囲まれていれば、各条件分岐に複数のステートメントを持つことができることを示しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-149\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"fe26a-150\">\"or\" (または) を表すために `||` を使用することもできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-150\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> <span data-ttu-id=\"fe26a-151\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-151\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"fe26a-152\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-152\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"fe26a-153\">ループを使用した処理の繰り返し</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-153\">Use loops to repeat operations</span></span>"
  durationInMinutes: 6
  content: "<span data-ttu-id=\"fe26a-154\">大規模なプログラムを作成する上でもう 1 つ重要な概念は、**ループ**です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-154\">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id=\"fe26a-155\">複数回実行したいステートメントは、ループを使用して繰り返します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-155\">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id=\"fe26a-156\">対話型ウィンドウで次のコードを試します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-156\">Try this code in the interactive window:</span></span>\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\n<span data-ttu-id=\"fe26a-157\">`while` ステートメントは、条件を確認して `while` に続くステートメントを実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-157\">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id=\"fe26a-158\">条件が false になるまで、条件の確認とステートメントの実行を繰り返します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-158\">It will repeat checking the condition and executing those statements until the condition is false.</span></span>\n\n<span data-ttu-id=\"fe26a-159\">この例では、もう 1 つ新しい演算子が使用されています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-159\">There's one other new operator in this example.</span></span> <span data-ttu-id=\"fe26a-160\">`counter` 変数のあとにある `++` は、**インクリメント**演算子です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-160\">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id=\"fe26a-161\">counter の値に 1 を追加し、その値を counter 変数に格納します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-161\">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"fe26a-162\">コードを実行したときに `while` のループ条件が false に切り替わることを確認してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-162\">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id=\"fe26a-163\">それ以外の場合は、プログラムが終了することのない**無限ループ**を作成します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-163\">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id=\"fe26a-164\">これについては実演しません。コードを実行するエンジンがタイムアウトしてプログラムから何も出力されないからです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-164\">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>\n\n<span data-ttu-id=\"fe26a-165\">`while` ループは、条件を判定してから `while` に続くコードを実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-165\">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id=\"fe26a-166\">`do` ... `while` ループは、最初にコードを実行してからその条件を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-166\">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id=\"fe26a-167\">次のようになります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-167\">It looks like this:</span></span>\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\n<span data-ttu-id=\"fe26a-168\">この `do` ループと先述の `while` ループは同じ機能を持っています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-168\">This `do` loop and the earlier `while` loop work the same.</span></span> \n\n<span data-ttu-id=\"fe26a-169\">では、最後のループ ステートメントの確認に移りましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-169\">Let's move on to one last loop statement.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"fe26a-170\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-170\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"fe26a-171\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-171\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"fe26a-172\">for ループの処理</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-172\">Work with the for loop</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"fe26a-173\">C# コードでよく目にするもう 1 つのループ ステートメントは、`for` ループです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-173\">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id=\"fe26a-174\">対話型ウィンドウで次のコードを試します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-174\">Try this code in the interactive window:</span></span>\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\n<span data-ttu-id=\"fe26a-175\">このループは、既に使用した `while` ループや `do` ループと同じ機能を持っています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-175\">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id=\"fe26a-176\">`for` ステートメントは 3 つの部分に分かれてその機能を制御します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-176\">The `for` statement has three parts that control how it works.</span></span> \n\n<span data-ttu-id=\"fe26a-177\">最初の部分は、**for 初期化子**です。`for counter = 0;` は、`counter` がループ変数であることを宣言し、その初期値を `0` に設定しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-177\">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>\n\n<span data-ttu-id=\"fe26a-178\">2 つ目の部分は、**for 条件**です。`counter < 10` は、counter の値が 10 未満である間は `for` ループが実行され続けることを宣言しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-178\">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>\n\n<span data-ttu-id=\"fe26a-179\">最後の部分は、**for 反復子**です。`counter++` は、`for` ステートメントに続くブロックを実行したあとにループ変数を変更する方法を指定しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-179\">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id=\"fe26a-180\">ここでは、ブロックが実行されるごとに `counter` が 1 ずつ増加するよう指定しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-180\">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>\n\n<span data-ttu-id=\"fe26a-181\">ご自身でこれを実行してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-181\">Experiment with these yourself.</span></span> <span data-ttu-id=\"fe26a-182\">以下をそれぞれ試してみます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-182\">Try each of the following:</span></span>\n\n- <span data-ttu-id=\"fe26a-183\">初期化子を変更して別の値で開始する。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-183\">Change the initializer to start at a different value.</span></span>\n- <span data-ttu-id=\"fe26a-184\">条件を変更して別の値で停止する。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-184\">Change the condition to stop at a different value.</span></span>\n\n<span data-ttu-id=\"fe26a-185\">完了したら次に進み、学習したことを使用して自分でいくつかのコードを記述してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-185\">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"fe26a-186\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-186\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"fe26a-187\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-187\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"fe26a-188\">分岐とループを結合します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-188\">Combine branches and loops</span></span>"
  durationInMinutes: 12
  content: "<span data-ttu-id=\"fe26a-189\">C# 言語における `if` ステートメントとループ構造を見てきました。では、1 から 20 の整数のうち 3 で割り切れる数の合計を求める C# コードを記述できるか確認してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-189\">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id=\"fe26a-190\">次にいくつかヒントを示します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-190\">Here are a few hints:</span></span>\n\n- <span data-ttu-id=\"fe26a-191\">`%` 演算子は、除算演算の剰余を算出します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-191\">The `%` operator gives you the remainder of a division operation.</span></span>\n- <span data-ttu-id=\"fe26a-192\">`if` ステートメントは、合計に入れるべき数かどうかを確認する条件を作ります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-192\">The `if` statement givesx you the condition to see if a number should be part of the sum.</span></span>\n- <span data-ttu-id=\"fe26a-193\">`for` ループは、1 から 20 までのすべての数を 1 つずつ確認する一連の手順を繰り返すのに役立ちます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-193\">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>\n\n<span data-ttu-id=\"fe26a-194\">ご自身で試してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-194\">Try it yourself.</span></span> <span data-ttu-id=\"fe26a-195\">そして自分がとった方法を確認してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-195\">Then check how you did.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"fe26a-196\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-196\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"fe26a-197\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-197\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"fe26a-198\">課題完了</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-198\">Complete challenge</span></span>"
  durationInMinutes: 1
  content: "<span data-ttu-id=\"fe26a-199\">「ループおよび分岐」のクイック スタートが完了しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-199\">You've completed the \"branches and loops\" quick start.</span></span> \n\n<span data-ttu-id=\"fe26a-200\">独自の開発環境でこれらのクイック スタートを続行することができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-200\">You can continue these quick starts on your own development environment.</span></span> <span data-ttu-id=\"fe26a-201\">.NET トピック[10 分後に開始](https://www.microsoft.com/net/core)ローカル開発環境の設定の説明が記載されています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-201\">The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment.</span></span> <span data-ttu-id=\"fe26a-202\">終了したら後で継続[リスト コレクションのクイック スタート](arrays-and-collections.md)ローカル環境でします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-202\">Once you've done that, continue with [List collection quickstart](arrays-and-collections.md) in your local environment.</span></span>\n\n<span data-ttu-id=\"fe26a-203\">次のトピックでこれらの概念の詳細を学習できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-203\">You can learn more about these concepts in these topics:</span></span>\n\n<span data-ttu-id=\"fe26a-204\">[if と else ステートメント](../language-reference/keywords/if-else.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-204\">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  \n<span data-ttu-id=\"fe26a-205\">[while ステートメント](../language-reference/keywords/while.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-205\">[While statement](../language-reference/keywords/while.md) </span></span>  \n<span data-ttu-id=\"fe26a-206\">[do ステートメント](../language-reference/keywords/do.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-206\">[Do statement](../language-reference/keywords/do.md) </span></span>  \n[<span data-ttu-id=\"fe26a-207\">for ステートメント</span><span class=\"sxs-lookup\"><span data-stu-id=\"fe26a-207\">For statement</span></span>](../language-reference/keywords/for.md)\0"
