### YamlMime:YamlDocument
documentType: Tutorial
title: '<span data-ttu-id="8e5df-101">C# での数値</span><span class="sxs-lookup"><span data-stu-id="8e5df-101">Numbers in C#</span></span>'
metadata:
  title: '<span data-ttu-id="8e5df-102">C# での数値</span><span class="sxs-lookup"><span data-stu-id="8e5df-102">Numbers in C#</span></span>'
  description: '<span data-ttu-id="8e5df-103">数値型に関するこのチュートリアルでは、ブラウザーを使用して、対話的に c# について学習します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-103">In this tutorial about numeric types, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="8e5df-104">しようとしている c# コードを記述してコンパイルして、ブラウザーで直接実行するコードの結果を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8e5df-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: 'Branches and loops in C#'
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="8e5df-105">このチュートリアルで説明する c# での数値型は、対話的にお使いのブラウザーを使用して c# を記述しをコンパイルして、コードの実行の結果を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8e5df-105">This tutorial teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="8e5df-106">一連数字と c# での算術演算を探索するレッスンにはが含まれています。</span><span class="sxs-lookup"><span data-stu-id="8e5df-106">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="8e5df-107">これらのレッスンでは、c# 言語の基本を学習します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-107">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="8e5df-108">整数の数値演算を調査します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-108">Explore integer math</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="8e5df-109">対話型のウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="8e5df-110">手順を実行する対話型ウィンドウで次のコード ブロックを入力し、をクリックして、**実行**ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="8e5df-110">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 18;
      int b = 6;
      int c = a + b;
      Console.WriteLine(c);
      ```

      <span data-ttu-id="8e5df-111">整数と基本的な算術演算の 1 つだけ見てきました。</span><span class="sxs-lookup"><span data-stu-id="8e5df-111">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="8e5df-112">`int`型を表す、**整数**、正または負の整数。</span><span class="sxs-lookup"><span data-stu-id="8e5df-112">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="8e5df-113">使用する、`+`のシンボルを追加します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-113">You use the `+` symbol for addition.</span></span> <span data-ttu-id="8e5df-114">整数の他の一般的な数値演算は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="8e5df-114">Other common mathematical operations for integers include:</span></span>

      - <span data-ttu-id="8e5df-115">`-`減算</span><span class="sxs-lookup"><span data-stu-id="8e5df-115">`-` for subtraction</span></span>
      - <span data-ttu-id="8e5df-116">`*`乗算の</span><span class="sxs-lookup"><span data-stu-id="8e5df-116">`*` for multiplication</span></span>
      - <span data-ttu-id="8e5df-117">`/`除算の</span><span class="sxs-lookup"><span data-stu-id="8e5df-117">`/` for division</span></span>

      > [!TIP]
      > <span data-ttu-id="8e5df-118">このチュートリアルでは、対話型のウィンドウで作成したコードを修正して、自分で調べることができます。</span><span class="sxs-lookup"><span data-stu-id="8e5df-118">Throughout this tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="8e5df-119">このチュートリアルでは、各ステップで試用できる例を示します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-119">This tutorial provides examples that you can try at each step.</span></span>

      <span data-ttu-id="8e5df-120">これらのさまざまな操作を表示することによって開始します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-120">Start by exploring those different operations.</span></span> <span data-ttu-id="8e5df-121">これらの各操作を再試行してくださいに 3 行目を変更します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-121">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="8e5df-122">各編集の後にクリックして、**実行**ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="8e5df-122">After each edit, click the **Run** button.</span></span>

      <span data-ttu-id="8e5df-123">減算します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-123">Subtraction:</span></span>

      ```csharp
      int c = a - b;
      ```

      <span data-ttu-id="8e5df-124">乗算します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-124">Multiplication:</span></span>

      ```csharp
      int c = a * b;
      ```

      <span data-ttu-id="8e5df-125">除算します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-125">Division:</span></span> 

      ```csharp
      int c = a / b;
      ```

      <span data-ttu-id="8e5df-126">希望の場合は、同一の行に複数の数学演算を実行することによってすることもできます。</span><span class="sxs-lookup"><span data-stu-id="8e5df-126">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>

      > [!TIP]
      > <span data-ttu-id="8e5df-127">C# (または任意のプログラミング言語) を探索するよう、コードを記述するときに、間違いを行うします。</span><span class="sxs-lookup"><span data-stu-id="8e5df-127">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="8e5df-128">**コンパイラ**はそれらのエラーを見つけてに報告します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-128">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="8e5df-129">出力には、エラー メッセージが含まれている、よく見る、コード例では、そして修正内容を表示する対話型ウィンドウ内のコード。</span><span class="sxs-lookup"><span data-stu-id="8e5df-129">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="8e5df-130">その手順を使用すると、c# コードの構造を学習できます。</span><span class="sxs-lookup"><span data-stu-id="8e5df-130">That exercise will help you learn the structure of C# code.</span></span>     

      > [!NOTE]
      > <span data-ttu-id="8e5df-131">このオンライン コーディング エクスペリエンスはプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="8e5df-131">This online coding experience is in preview mode.</span></span> <span data-ttu-id="8e5df-132">問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-132">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="8e5df-133">操作の順序を表示します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-133">Explore order of operations</span></span>
    durationInMinutes: 7
    content: |
      <span data-ttu-id="8e5df-134">C# 言語では、数学で学習したルールのルールに一貫性のあるさまざまな数学操作の優先順位を定義します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-134">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>
      <span data-ttu-id="8e5df-135">乗算と除算優先加算と減算します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-135">Multiplication and division take precedence over addition and subtraction.</span></span>
      <span data-ttu-id="8e5df-136">対話型ウィンドウで、次のコードを実行している従ってください。</span><span class="sxs-lookup"><span data-stu-id="8e5df-136">Explore that by running the following code in the interactive window:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = a + b * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="8e5df-137">出力は、追加する前に、乗算が実行されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-137">The output demonstrates that the multiplication is performed before the addition.</span></span>

      <span data-ttu-id="8e5df-138">操作の別の順序を強制するには、操作を囲むかっこを追加することで、または対象の操作が最初に実行します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-138">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = (a  + b) * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="8e5df-139">さまざまな操作を組み合わせることによってよりについて説明します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-139">Explore more by combining many different operations.</span></span> <span data-ttu-id="8e5df-140">次のように上記の 4 行目に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="8e5df-140">Replace the fourth line above with something like this:</span></span>

      ```csharp
      int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;
      ```

      <span data-ttu-id="8e5df-141">お気付きの整数について注目に値する動作です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-141">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="8e5df-142">常に整数の除算は、数学的な結果には、10 進数または分数部分にが含まれます場合でも、結果の整数値を生成します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-142">Integer division always produces an integer result, even when the mathematical result would include a decimal or fraction portion.</span></span>

      <span data-ttu-id="8e5df-143">この動作を目にしていない場合は、次の操作を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="8e5df-143">If you haven't seen this behavior, try the following:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="8e5df-144">をクリックして**実行**結果を表示するには、もう一度です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-144">Click **Run** again to see the results.</span></span>

      > [!NOTE]
      > <span data-ttu-id="8e5df-145">このオンライン コーディング エクスペリエンスはプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="8e5df-145">This online coding experience is in preview mode.</span></span> <span data-ttu-id="8e5df-146">問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-146">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="8e5df-147">整数の有効桁数および制限を探索します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-147">Explore integer precision and limits</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="8e5df-148">最後のサンプルでは、整数の除算では、結果が切り捨てられますを示しました。</span><span class="sxs-lookup"><span data-stu-id="8e5df-148">That last sample showed you that integer division truncates the result.</span></span>
      <span data-ttu-id="8e5df-149">取得することができます、**剰余**を使用して、**剰余**、演算子、`%`文字。</span><span class="sxs-lookup"><span data-stu-id="8e5df-149">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      int e = (a + b) % c;
      Console.WriteLine("quotient: " + d);
      Console.WriteLine("remainder: " + e);
      ```

      <span data-ttu-id="8e5df-150">他の方法の 1 つの数学的な整数とは異なる整数型 (C#):`int`型が最小と最大値。</span><span class="sxs-lookup"><span data-stu-id="8e5df-150">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="8e5df-151">これらの制限を表示する対話型のウィンドウでこのコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-151">Run this code in the interactive window to see those limits:</span></span>

      ```csharp
      int max = int.MaxValue;
      int min = int.MinValue;
      Console.WriteLine("The range of integers is " + min + " to " + max);
      ```

      <span data-ttu-id="8e5df-152">ある場合は、計算では、これらの制限を超える値を生成、**アンダー フロー**または**オーバーフロー**条件。</span><span class="sxs-lookup"><span data-stu-id="8e5df-152">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="8e5df-153">別の 1 つの制限をラップする、応答が表示されます。</span><span class="sxs-lookup"><span data-stu-id="8e5df-153">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="8e5df-154">例を参照する対話型ウィンドウに 2 つの行を追加します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-154">Add these two lines to the interactive window to see an example:</span></span>

      ```csharp
      int what = max + 3;
      Console.WriteLine("An example of overflow: " + what);
      ```

      <span data-ttu-id="8e5df-155">答えが (負) 最小の整数に近い非常にことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8e5df-155">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="8e5df-156">同じである`min + 2`です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-156">It's the same as `min + 2`.</span></span> <span data-ttu-id="8e5df-157">加算演算**がオーバーフローした**整数の許容値。</span><span class="sxs-lookup"><span data-stu-id="8e5df-157">The addition operation **overflowed** the allowed values for integers.</span></span>
      <span data-ttu-id="8e5df-158">回答は非常に大きい負の数値をオーバーフロー「周りで折り返されます」可能な整数の最大値から最小にためです。</span><span class="sxs-lookup"><span data-stu-id="8e5df-158">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>

      <span data-ttu-id="8e5df-159">さまざまな制限と有効桁数が使用するときにその他の数値型がある、`int`型は、お客様のニーズを満たしていません。</span><span class="sxs-lookup"><span data-stu-id="8e5df-159">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="8e5df-160">その次へ を見てみましょう。</span><span class="sxs-lookup"><span data-stu-id="8e5df-160">Let's explore those next.</span></span>

      > [!NOTE]
      > <span data-ttu-id="8e5df-161">このオンライン コーディング エクスペリエンスはプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="8e5df-161">This online coding experience is in preview mode.</span></span> <span data-ttu-id="8e5df-162">問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-162">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="8e5df-163">Double 型を動作します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-163">Work with the double type</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="8e5df-164">`double`数値型が倍精度浮動小数点数を表します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-164">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="8e5df-165">これらの用語は、初めて使用する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="8e5df-165">Those terms may be new to you.</span></span> <span data-ttu-id="8e5df-166">A**浮動小数点**数が非常に大きいまたは大きさにすることは整数以外の数値を表すに便利です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-166">A **floating point** number is useful to represent non-integral numbers that may be very large, or small in magnitude.</span></span> <span data-ttu-id="8e5df-167">**倍精度**より大きい有効桁数を使用してこれらの数値を格納することを意味**単精度**です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-167">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="8e5df-168">最近のコンピューターは単精度の数値よりも倍精度を使用する方が一般的です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-168">On modern computers, it is more common to use double precision than single precision numbers.</span></span>
      <span data-ttu-id="8e5df-169">見てみましょう。</span><span class="sxs-lookup"><span data-stu-id="8e5df-169">Let's explore.</span></span> <span data-ttu-id="8e5df-170">対話型のウィンドウで次のコードと結果を参照してください。</span><span class="sxs-lookup"><span data-stu-id="8e5df-170">Try the following code in the interactive window and see the result:</span></span>

      ```csharp
      double a = 5;
      double b = 4;
      double c = 2;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="8e5df-171">商の小数部分が、応答に含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="8e5df-171">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="8e5df-172">1 個の double を少し複雑な式を試してください。</span><span class="sxs-lookup"><span data-stu-id="8e5df-172">Try a slightly more complicated expression with doubles:</span></span>

      ```csharp
      double a = 19;
      double b = 23;
      double c = 8;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="8e5df-173">Double 型の値の範囲は、整数値よりもかなり大きくします。</span><span class="sxs-lookup"><span data-stu-id="8e5df-173">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="8e5df-174">対話型のウィンドウで次のコードを試してください。</span><span class="sxs-lookup"><span data-stu-id="8e5df-174">Try the following code in the interactive window:</span></span>

      ```csharp
      double max = double.MaxValue;
      double min = double.MinValue;
      Console.WriteLine("The range of double is " + min + " to " + max);
      ```

      <span data-ttu-id="8e5df-175">科学的表記法を表すには、これらの値が出力されます。</span><span class="sxs-lookup"><span data-stu-id="8e5df-175">These values are printed out to represent scientific notation.</span></span> <span data-ttu-id="8e5df-176">左側には、番号、`E`は、重要です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-176">The number to the left of the `E` is the significant.</span></span> <span data-ttu-id="8e5df-177">右側の数は、10 の累乗で、指数部です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-177">The number to the right is the exponent, as a power of 10.</span></span> <span data-ttu-id="8e5df-178">内部的には、これらの番号は、同様が、バイナリ形式で表されます。</span><span class="sxs-lookup"><span data-stu-id="8e5df-178">Internally, these numbers are represented similarly, but in a binary form.</span></span> <span data-ttu-id="8e5df-179">1 つの部分では、バイナリの桁数を表します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-179">One part represents the significant binary digits.</span></span>
      <span data-ttu-id="8e5df-180">別の部分では、その有効桁数の基準としたバイナリ ポイント (小数点の位置に似ています) を配置する場所を表します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-180">Another part represents where to place the binary point (analogous to a decimal point) relative to those significant digits.</span></span>

      <span data-ttu-id="8e5df-181">数値演算の 10 進数と同じように丸め誤差個の double (C#) ことができます。</span><span class="sxs-lookup"><span data-stu-id="8e5df-181">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="8e5df-182">このコードを試してください。</span><span class="sxs-lookup"><span data-stu-id="8e5df-182">Try this code:</span></span>

      ```csharp
      double third = 1.0 / 3.0;
      Console.WriteLine(third);
      ```

      <span data-ttu-id="8e5df-183">わかって`0.3`繰り返しが正確に一致しないと同じ`1/3`です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-183">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>

      <span data-ttu-id="8e5df-184">***チャレンジ***</span><span class="sxs-lookup"><span data-stu-id="8e5df-184">***Challenge***</span></span>

      <span data-ttu-id="8e5df-185">数値が大きい、小さい数値、乗算と除算を使用した他の計算を再試行してください、`double`型です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-185">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="8e5df-186">複雑な計算を再試行してください。</span><span class="sxs-lookup"><span data-stu-id="8e5df-186">Try more complicated calculations.</span></span>

      > [!NOTE]
      > <span data-ttu-id="8e5df-187">このオンライン コーディング エクスペリエンスはプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="8e5df-187">This online coding experience is in preview mode.</span></span> <span data-ttu-id="8e5df-188">問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-188">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="8e5df-189">固定小数点型を操作します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-189">Work with fixed point types</span></span>
    durationInMinutes: 8
    content: |
      <span data-ttu-id="8e5df-190">C# では、基本的な数値型を見てきました。 整数と倍です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-190">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="8e5df-191">については、その他の 1 つの型がある:`decimal`型です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-191">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="8e5df-192">`decimal`型には、範囲が狭いより大きい有効桁数が`double`です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-192">The `decimal` type has a smaller range, but greater precision than `double`.</span></span> <span data-ttu-id="8e5df-193">用語**ポイントを固定**小数点 (またはバイナリのポイント) に移動しないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-193">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="8e5df-194">見てみましょう。</span><span class="sxs-lookup"><span data-stu-id="8e5df-194">Let's take a look:</span></span>

      ```csharp
      decimal min = decimal.MinValue;
      decimal max = decimal.MaxValue;
      Console.WriteLine("The range of the decimal type is " + min + " to " + max);
      ```

      <span data-ttu-id="8e5df-195">範囲がよりも小さいことに注意してください、`double`型です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-195">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="8e5df-196">次のコードを試行することで、decimal 型をさらに高い精度を確認できます。</span><span class="sxs-lookup"><span data-stu-id="8e5df-196">You can see the greater precision with the decimal type by trying the following code:</span></span>

      ```csharp
      double a = 1.0;
      double b = 3.0;
      Console.WriteLine(a / b);

      decimal c = 1.0M;
      decimal d = 3.0M;
      Console.WriteLine(c / d);
      ```

      <span data-ttu-id="8e5df-197">`M`番号のサフィックスが定数を使用することを指定する方法では、`decimal`型です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-197">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>

      <span data-ttu-id="8e5df-198">10 進数型を使用して数値演算の小数点の右側にある複数の数字であることを確認します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-198">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> 

      <span data-ttu-id="8e5df-199">***チャレンジ***</span><span class="sxs-lookup"><span data-stu-id="8e5df-199">***Challenge***</span></span>

      <span data-ttu-id="8e5df-200">別の数値型を確認したらは、円の半径は 2.50 インチの面積を計算するコードを記述します。</span><span class="sxs-lookup"><span data-stu-id="8e5df-200">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 inches.</span></span> <span data-ttu-id="8e5df-201">覚えて PI を掛けた円の領域が乗 radius であります。</span><span class="sxs-lookup"><span data-stu-id="8e5df-201">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="8e5df-202">1 つのヒント: c# PI の定数が含まれる:`Math.PI`の値に対して使用することができます。</span><span class="sxs-lookup"><span data-stu-id="8e5df-202">One hint: C# contains a constant for PI: `Math.PI` that you can use for that value.</span></span> 

      > [!NOTE]
      > <span data-ttu-id="8e5df-203">このオンライン コーディング エクスペリエンスはプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="8e5df-203">This online coding experience is in preview mode.</span></span> <span data-ttu-id="8e5df-204">問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。</span><span class="sxs-lookup"><span data-stu-id="8e5df-204">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="8e5df-205">完全なチャレンジ</span><span class="sxs-lookup"><span data-stu-id="8e5df-205">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="8e5df-206">「番号で c#」チュートリアルをを完了しました。 します</span><span class="sxs-lookup"><span data-stu-id="8e5df-206">You've completed the "Numbers in C#" tutorial.</span></span> <span data-ttu-id="8e5df-207">C# では、次のトピックでの番号の詳細を学習できます。</span><span class="sxs-lookup"><span data-stu-id="8e5df-207">You can learn more about numbers in C# in the following topics:</span></span>

      <span data-ttu-id="8e5df-208">[整数型の一覧表](../language-reference/keywords/integral-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="8e5df-208">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  
      <span data-ttu-id="8e5df-209">[浮動小数点型の一覧表](../language-reference/keywords/floating-point-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="8e5df-209">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  
      <span data-ttu-id="8e5df-210">[組み込み型の一覧表](../language-reference/keywords/built-in-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="8e5df-210">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  
      <span data-ttu-id="8e5df-211">[暗黙的な数値変換の一覧表](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class="sxs-lookup"><span data-stu-id="8e5df-211">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  
      [<span data-ttu-id="8e5df-212">明示的な数値変換の一覧表</span><span class="sxs-lookup"><span data-stu-id="8e5df-212">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)