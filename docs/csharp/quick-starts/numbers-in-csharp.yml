### YamlMime:YamlDocument
documentType: Tutorial
title: "C# の数値"
metadata:
  title: "C# の数値"
  description: "数値型のこのクイック スタートでは、c# の対話形式で学習するのにお使いのブラウザーを使用します。 C# コードを記述し、ブラウザーで直接コードをコンパイルして実行した結果を確認します。"
  audience: Developer
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: "分岐と c# でのループ"
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: bc859589078d1e2d16145125a80e738837c1ebf9
  ms.sourcegitcommit: 43c656811dd38a66a6672084c65d10c0cbbf2015
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/22/2017
items:
- durationInMinutes: 1
  content: "このクイック スタートを説明 c# での数値型は、対話的にお使いのブラウザーを使用して c# を記述しをコンパイルして、コードの実行の結果を表示します。 このチュートリアルには、C# の数値と算術演算に関する一連のレッスンが含まれています。 これらのレッスンでは、C# 言語の基本を説明します。\n"
- title: "整数の演算の確認"
  durationInMinutes: 4
  content: "対話型ウィンドウで次のコードを実行します。 そのためには、対話型ウィンドウで次のコード ブロックを入力し、**[実行]** をクリックします。\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\n整数を使用した基本的な算術演算の 1 つを確認しました。 `int` 型は、**整数**を表します (正の整数、または負の整数)。 加算には `+` 記号を使用します。 他の一般的な整数の算術演算には次のものがあります。\n\n- `-`: 減算\n- `*`: 乗算\n- `/`: 除算\n\n> [!TIP]\n> このクイック スタートでは、対話型のウィンドウで作成したコードを変更することにより、自分で調べることができます。 このクイック スタートでは、各ステップで試用できる例を示します。\n\nまずは、上記の各種演算を実行してみます。 3 行目を変更して、各演算を試します。 編集が終わるごとに、**[実行]** をクリックします。\n\n減算：\n\n```csharp\nint c = a - b;\n```\n\n乗算：\n\n```csharp\nint c = a * b;\n```\n\n除算： \n\n```csharp\nint c = a / b;\n```\n\n好みで、同じ行で複数の算術演算を実行することもできます。\n\n> [!TIP]\n> C# (または何らかのプログラミング言語) について詳しく学習するに従い、コードを記述する際にミスをすることもあるでしょう。 **コンパイラ**は、そうしたエラーを発見して報告します。 エラー メッセージが出力された場合は、例のコードをよく確認して、対話型ウィンドウで修正すべきコードを見つけます。\n> こうした実習が C# コードの構造を理解するのに役立ちます。     \n\n> [!NOTE]\n> このオンライン コーディング体験はプレビュー モードです。 問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。\n"
- title: "演算の順序の確認"
  durationInMinutes: 7
  content: "C# 言語は、数学で学んだ規則と同じ規則で各演算の優先順位を定義します。\n乗算と除算は、加算と減算よりも優先されます。\n対話型ウィンドウで次のコードを実行して、実際に確認しましょう。\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\n出力を見ると、加算の前に乗算が実行されていることがわかります。\n\n演算の周りに丸かっこを追加する、または最初に実行したい演算を追加することで、演算の順序を変えることができます。\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\nさまざまな演算を多数組み合わせて、他にも試してみましょう。 上記の 4 行目を次のように置き換えます。\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\n整数について面白い動作をしていることに気づいたでしょうか。 常に整数の除算は、10 進数または分数部分を含めるように結果が期待する場合でも、結果の整数値を生成します。\n\nこの動作を確認できない場合は、次のコードを試してください。\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\nもう一度 **[実行]** をクリックして結果を確認します。\n\n> [!NOTE]\n> このオンライン コーディング体験はプレビュー モードです。 問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。\n"
- title: "整数の有効桁数と制限の確認"
  durationInMinutes: 5
  content: "この最後のサンプルでは、整数の除算における結果の切り捨てについて確認します。\n**modulo** 演算子 (`%` 文字) を使用して、**剰余**を得ることができます。\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\nC# の整数型は算術における整数ともう 1 つ異なる点があります。それは `int` 型には最小値と最大値の制限があるということです。 対話型ウィンドウでこのコードを実行し、これらの制限を確認しましょう。\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\n計算によってこれらの制限を超える値が作られると、**アンダーフロー**または**オーバーフロー**の状態になります。 計算の結果が 1 つの制限からもう 1 つの制限に折り返されているように見えます。 対話型ウィンドウに次の 2 行を追加して、例を確認します。\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\n計算の結果が最小値の (負の) 整数に極めて近いことに注目してください。 これは `min + 2` と同じです。 加算演算が許容された整数値を**オーバーフロー**しました。\n整数がオーバーフローして最大値から最小値に ”折り返され” たため、計算結果が非常に大きな負の値になっています。\n\n他にもさまざまな制限や有効桁数を持つ数値型があり、`int` 型がご自分のニーズと合わない場合は、そちらも使用できます。 次はその別の数値型を見ていきます。\n\n> [!NOTE]\n> このオンライン コーディング体験はプレビュー モードです。 問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。\n"
- title: "double 型の処理"
  durationInMinutes: 5
  content: "`double` 数値型は、倍精度浮動小数点数を表します。 こうした用語を初めて見た人もいるかもしれません。 A**浮動小数点**数が非常に大規模なまたは大きさに小規模にすることがあります整数以外の数値を表すに便利です。 **倍精度**は、そうした数値が**単精度**よりも大きな有効桁数を使用して格納されることを意味しています。 最近のコンピューターでは、単精度よりも倍精度の数値を使用する方が一般的です。\n確認してみましょう。 対話型ウィンドウで次のコードを実行して結果を確認します。\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n計算結果に商の小数部分が含まれていることに注目してください。 double 型を使用して、もう少し複雑な式を試します。\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\ndouble 値は整数値よりも範囲が大きくなります。 対話型ウィンドウで次のコードを実行します。\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nこれらの値は、科学的表記法で出力されます。 左側には、番号、`E`の有効桁がします。 右側の数値は指数であり、10 の累乗です。 \n\n算術における 10 進数と同じように、C# における double には丸め誤差が発生することがあります。 次のコードを試してみましょう。\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\n`0.3` の循環小数は `1/3` と完全に同じではありません。\n\n***課題***\n\n`double` 型を使用して、大きい値や小さい値、乗算、除算などの計算してみましょう。  もっと複雑な計算を試してみてください。\n\n> [!NOTE]\n> このオンライン コーディング体験はプレビュー モードです。 問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。\n"
- title: "固定小数点型の処理"
  durationInMinutes: 8
  content: "C# の基本的な数値型である整数と double について見てきました。  もう 1 つ知っておくべき型として、`decimal` 型があります。 `decimal`型がより大きい有効桁数が、範囲を小さく`double`です。 **固定小数点**という用語は、小数点 (またはバイナリの小数点) が動かないことを意味しています。 では、始めましょう。\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\n`double` 型よりも範囲が小さいことに注目してください。 次のコードを実行すると、decimal 型では有効桁数がより大きいことを確認できます。\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n数値の末尾の `M` は、定数では `decimal` 型を使用する必要があることを示しています。\n\ndecimal 型を使用した演算では、小数点の右側の桁数がより多いことに注目してください。 \n\n***課題***\n\nさまざまな数値型を確認したので、次は半径が 2.50 インチの円の面積を計算するコードを記述してみます。 円の面積は、半径の 2 乗 x 円周率です。 1 つのヒント: c# PI の定数が含まれる<xref:System.Math.PI?displayProperty=nameWithType>の値に対して使用することができます。 \n\n> [!NOTE]\n> このオンライン コーディング体験はプレビュー モードです。 問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。\n"
- title: "課題完了"
  durationInMinutes: 1
  content: "\"番号で c#\"クイック スタートが完了しました。 \n\n独自の開発環境でこれらのクイック スタートを続行することができます。 .NET トピック[10 分後に開始](https://www.microsoft.com/net/core)ローカル開発環境の設定の説明が記載されています。 終了したら後で継続[分岐とループ](branches-and-loops-local.md)ローカル環境でします。\n\nC# の数値の詳細については、次のトピックで学習できます。\n\n[整数型の一覧表](../language-reference/keywords/integral-types-table.md)   \n[浮動小数点型の一覧表](../language-reference/keywords/floating-point-types-table.md)   \n[組み込み型の一覧表](../language-reference/keywords/built-in-types-table.md)   \n[暗黙的な数値変換の一覧表](../language-reference/keywords/implicit-numeric-conversions-table.md)   \n[明示的な数値変換の一覧表](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
