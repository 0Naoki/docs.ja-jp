### YamlMime:YamlDocument
documentType: Tutorial
title: "<span data-ttu-id=\"eb00d-101\">C# の数値</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-101\">Numbers in C#</span></span>"
metadata:
  title: "C# の数値"
  description: "数値型に関するこのクイック スタートでは、ブラウザーを使用して、対話形式で C# を学習します。 C# コードを記述し、ブラウザーで直接コードをコンパイルして実行した結果を確認します。"
  audience: Developer
  ms.custom: mvc
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: "<span data-ttu-id=\"eb00d-105\">C# の分岐とループ</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-105\">Branches and loops in C#</span></span>"
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: bc859589078d1e2d16145125a80e738837c1ebf9
  ms.sourcegitcommit: 401c4427a3ec0d1263543033b3084039278509dc
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 12/07/2017
items:
- durationInMinutes: 1
  content: "<span data-ttu-id=\"eb00d-106\">このクイック スタートでは C# の数値型について対話形式で学習できます。ブラウザーを使用して C# を記述し、コードをコンパイルして実行した結果を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-106\">This quick start teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id=\"eb00d-107\">このチュートリアルには、C# の数値と算術演算に関する一連のレッスンが含まれています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-107\">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id=\"eb00d-108\">これらのレッスンでは、C# 言語の基本を説明します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-108\">These lessons teach you the fundamentals of the C# language.</span></span>\n"
- title: "<span data-ttu-id=\"eb00d-109\">整数の演算の確認</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-109\">Explore integer math</span></span>"
  durationInMinutes: 4
  content: "<span data-ttu-id=\"eb00d-110\">対話型ウィンドウで次のコードを実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"eb00d-111\">そのためには、対話型ウィンドウで次のコード ブロックを入力し、**[実行]** をクリックします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-111\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\n<span data-ttu-id=\"eb00d-112\">整数を使用した基本的な算術演算の 1 つを確認しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-112\">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id=\"eb00d-113\">`int` 型は、**整数**を表します (正の整数、または負の整数)。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-113\">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id=\"eb00d-114\">加算には `+` 記号を使用します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-114\">You use the `+` symbol for addition.</span></span> <span data-ttu-id=\"eb00d-115\">他の一般的な整数の算術演算には次のものがあります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-115\">Other common mathematical operations for integers include:</span></span>\n\n- <span data-ttu-id=\"eb00d-116\">`-`: 減算</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-116\">`-` for subtraction</span></span>\n- <span data-ttu-id=\"eb00d-117\">`*`: 乗算</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-117\">`*` for multiplication</span></span>\n- <span data-ttu-id=\"eb00d-118\">`/`: 除算</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-118\">`/` for division</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"eb00d-119\">このクイック スタートでは、対話型ウィンドウで作成したコードを変更して、自分で確認できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-119\">Throughout this quick start, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id=\"eb00d-120\">このクイック スタートでは、各ステップで実際に試すことができる例を用意しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-120\">This quick start provides examples that you can try at each step.</span></span>\n\n<span data-ttu-id=\"eb00d-121\">まずは、上記の各種演算を実行してみます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-121\">Start by exploring those different operations.</span></span> <span data-ttu-id=\"eb00d-122\">3 行目を変更して、各演算を試します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-122\">Modify the third line to try each of these operations.</span></span> <span data-ttu-id=\"eb00d-123\">編集が終わるごとに、**[実行]** をクリックします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-123\">After each edit, click the **Run** button.</span></span>\n\n<span data-ttu-id=\"eb00d-124\">減算：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-124\">Subtraction:</span></span>\n\n```csharp\nint c = a - b;\n```\n\n<span data-ttu-id=\"eb00d-125\">乗算：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-125\">Multiplication:</span></span>\n\n```csharp\nint c = a * b;\n```\n\n<span data-ttu-id=\"eb00d-126\">除算：</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-126\">Division:</span></span> \n\n```csharp\nint c = a / b;\n```\n\n<span data-ttu-id=\"eb00d-127\">好みで、同じ行で複数の算術演算を実行することもできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-127\">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"eb00d-128\">C# (または何らかのプログラミング言語) について詳しく学習するに従い、コードを記述する際にミスをすることもあるでしょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-128\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"eb00d-129\">**コンパイラ**は、そうしたエラーを発見して報告します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-129\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"eb00d-130\">エラー メッセージが出力された場合は、例のコードをよく確認して、対話型ウィンドウで修正すべきコードを見つけます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-130\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"eb00d-131\">こうした実習が C# コードの構造を理解するのに役立ちます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-131\">That exercise will help you learn the structure of C# code.</span></span>     \n\n> [!NOTE]\n> <span data-ttu-id=\"eb00d-132\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-132\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eb00d-133\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-133\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"eb00d-134\">演算の順序の確認</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-134\">Explore order of operations</span></span>"
  durationInMinutes: 7
  content: "<span data-ttu-id=\"eb00d-135\">C# 言語は、数学で学んだ規則と同じ規則で各演算の優先順位を定義します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-135\">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>\n<span data-ttu-id=\"eb00d-136\">乗算と除算は、加算と減算よりも優先されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-136\">Multiplication and division take precedence over addition and subtraction.</span></span>\n<span data-ttu-id=\"eb00d-137\">対話型ウィンドウで次のコードを実行して、実際に確認しましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-137\">Explore that by running the following code in the interactive window:</span></span>\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = a + b * c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"eb00d-138\">出力を見ると、加算の前に乗算が実行されていることがわかります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-138\">The output demonstrates that the multiplication is performed before the addition.</span></span>\n\n<span data-ttu-id=\"eb00d-139\">演算の周りに丸かっこを追加する、または最初に実行したい演算を追加することで、演算の順序を変えることができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-139\">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>\n\n```csharp\nint a = 5;\nint b = 4;\nint c = 2;\nint d = (a  + b) * c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"eb00d-140\">さまざまな演算を多数組み合わせて、他にも試してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-140\">Explore more by combining many different operations.</span></span> <span data-ttu-id=\"eb00d-141\">上記の 4 行目を次のように置き換えます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-141\">Replace the fourth line above with something like this:</span></span>\n\n```csharp\nint d = (a + b) - 6 * c + (12 * 4) / 3 + 12;\n```\n\n<span data-ttu-id=\"eb00d-142\">整数について面白い動作をしていることに気づいたでしょうか。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-142\">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id=\"eb00d-143\">結果に小数点や小数部分が含まれると予想される場合でも、整数の除算は常に整数の結果を算出します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-143\">Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</span></span>\n\n<span data-ttu-id=\"eb00d-144\">この動作を確認できない場合は、次のコードを試してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-144\">If you haven't seen this behavior, try the following:</span></span>\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"eb00d-145\">もう一度 **[実行]** をクリックして結果を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-145\">Click **Run** again to see the results.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"eb00d-146\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-146\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eb00d-147\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-147\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"eb00d-148\">整数の有効桁数と制限の確認</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-148\">Explore integer precision and limits</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"eb00d-149\">この最後のサンプルでは、整数の除算における結果の切り捨てについて確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-149\">That last sample showed you that integer division truncates the result.</span></span>\n<span data-ttu-id=\"eb00d-150\">**modulo** 演算子 (`%` 文字) を使用して、**剰余**を得ることができます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-150\">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>\n\n```csharp\nint a = 7;\nint b = 4;\nint c = 3;\nint d = (a  + b) / c;\nint e = (a + b) % c;\nConsole.WriteLine($\"quotient: {d}\");\nConsole.WriteLine($\"remainder: {e}\");\n```\n\n<span data-ttu-id=\"eb00d-151\">C# の整数型は算術における整数ともう 1 つ異なる点があります。それは `int` 型には最小値と最大値の制限があるということです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-151\">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id=\"eb00d-152\">対話型ウィンドウでこのコードを実行し、これらの制限を確認しましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-152\">Run this code in the interactive window to see those limits:</span></span>\n\n```csharp\nint max = int.MaxValue;\nint min = int.MinValue;\nConsole.WriteLine($\"The range of integers is {min} to {max}\");\n```\n\n<span data-ttu-id=\"eb00d-153\">計算によってこれらの制限を超える値が作られると、**アンダーフロー**または**オーバーフロー**の状態になります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-153\">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id=\"eb00d-154\">計算の結果が 1 つの制限からもう 1 つの制限に折り返されているように見えます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-154\">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id=\"eb00d-155\">対話型ウィンドウに次の 2 行を追加して、例を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-155\">Add these two lines to the interactive window to see an example:</span></span>\n\n```csharp\nint what = max + 3;\nConsole.WriteLine($\"An example of overflow: {what}\");\n```\n\n<span data-ttu-id=\"eb00d-156\">計算の結果が最小値の (負の) 整数に極めて近いことに注目してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-156\">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id=\"eb00d-157\">これは `min + 2` と同じです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-157\">It's the same as `min + 2`.</span></span> <span data-ttu-id=\"eb00d-158\">加算演算が許容された整数値を**オーバーフロー**しました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-158\">The addition operation **overflowed** the allowed values for integers.</span></span>\n<span data-ttu-id=\"eb00d-159\">整数がオーバーフローして最大値から最小値に ”折り返され” たため、計算結果が非常に大きな負の値になっています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-159\">The answer is a very large negative number because an overflow \"wraps around\" from the largest possible integer value to the smallest.</span></span>\n\n<span data-ttu-id=\"eb00d-160\">他にもさまざまな制限や有効桁数を持つ数値型があり、`int` 型がご自分のニーズと合わない場合は、そちらも使用できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-160\">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id=\"eb00d-161\">次はその別の数値型を見ていきます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-161\">Let's explore those next.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"eb00d-162\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-162\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eb00d-163\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-163\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"eb00d-164\">double 型の処理</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-164\">Work with the double type</span></span>"
  durationInMinutes: 5
  content: "<span data-ttu-id=\"eb00d-165\">`double` 数値型は、倍精度浮動小数点数を表します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-165\">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id=\"eb00d-166\">こうした用語を初めて見た人もいるかもしれません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-166\">Those terms may be new to you.</span></span> <span data-ttu-id=\"eb00d-167\">**浮動小数点**数は、非常に大きな、または非常に小さな、整数ではない数値を表すのに役立ちます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-167\">A **floating point** number is useful to represent non-integral numbers that may be very large or small in magnitude.</span></span> <span data-ttu-id=\"eb00d-168\">**倍精度**は、そうした数値が**単精度**よりも大きな有効桁数を使用して格納されることを意味しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-168\">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id=\"eb00d-169\">最近のコンピューターでは、単精度よりも倍精度の数値を使用する方が一般的です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-169\">On modern computers, it is more common to use double precision than single precision numbers.</span></span>\n<span data-ttu-id=\"eb00d-170\">確認してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-170\">Let's explore.</span></span> <span data-ttu-id=\"eb00d-171\">対話型ウィンドウで次のコードを実行して結果を確認します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-171\">Try the following code in the interactive window and see the result:</span></span>\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"eb00d-172\">計算結果に商の小数部分が含まれていることに注目してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-172\">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id=\"eb00d-173\">double 型を使用して、もう少し複雑な式を試します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-173\">Try a slightly more complicated expression with doubles:</span></span>\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"eb00d-174\">double 値は整数値よりも範囲が大きくなります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-174\">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id=\"eb00d-175\">対話型ウィンドウで次のコードを実行します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-175\">Try the following code in the interactive window:</span></span>\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\n<span data-ttu-id=\"eb00d-176\">これらの値は指数表記で出力されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-176\">These values are printed out in scientific notation.</span></span> <span data-ttu-id=\"eb00d-177\">`E` の左側は有効数字です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-177\">The number to the left of the `E` is the significand.</span></span> <span data-ttu-id=\"eb00d-178\">右側の数値は指数であり、10 の累乗です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-178\">The number to the right is the exponent, as a power of 10.</span></span> \n\n<span data-ttu-id=\"eb00d-179\">算術における 10 進数と同じように、C# における double には丸め誤差が発生することがあります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-179\">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id=\"eb00d-180\">次のコードを試してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-180\">Try this code:</span></span>\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\n<span data-ttu-id=\"eb00d-181\">`0.3` の循環小数は `1/3` と完全に同じではありません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-181\">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>\n\n<span data-ttu-id=\"eb00d-182\">***課題***</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-182\">***Challenge***</span></span>\n\n<span data-ttu-id=\"eb00d-183\">`double` 型を使用して、大きい値や小さい値、乗算、除算などの計算してみましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-183\">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id=\"eb00d-184\">もっと複雑な計算を試してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-184\">Try more complicated calculations.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"eb00d-185\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-185\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eb00d-186\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-186\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"eb00d-187\">固定小数点型の処理</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-187\">Work with fixed point types</span></span>"
  durationInMinutes: 8
  content: "<span data-ttu-id=\"eb00d-188\">C# の基本的な数値型である整数と double について見てきました。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-188\">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id=\"eb00d-189\">もう 1 つ知っておくべき型として、`decimal` 型があります。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-189\">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id=\"eb00d-190\">`decimal` 型は、`double` 型よりも範囲は小さいですが、有効桁数が大きい型です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-190\">The `decimal` type has a smaller range but greater precision than `double`.</span></span> <span data-ttu-id=\"eb00d-191\">**固定小数点**という用語は、小数点 (またはバイナリの小数点) が動かないことを意味しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-191\">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id=\"eb00d-192\">では、始めましょう。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-192\">Let's take a look:</span></span>\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\n<span data-ttu-id=\"eb00d-193\">`double` 型よりも範囲が小さいことに注目してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-193\">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id=\"eb00d-194\">次のコードを実行すると、decimal 型では有効桁数がより大きいことを確認できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-194\">You can see the greater precision with the decimal type by trying the following code:</span></span>\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n<span data-ttu-id=\"eb00d-195\">数値の末尾の `M` は、定数では `decimal` 型を使用する必要があることを示しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-195\">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>\n\n<span data-ttu-id=\"eb00d-196\">decimal 型を使用した演算では、小数点の右側の桁数がより多いことに注目してください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-196\">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> \n\n<span data-ttu-id=\"eb00d-197\">***課題***</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-197\">***Challenge***</span></span>\n\n<span data-ttu-id=\"eb00d-198\">さまざまな数値型を確認したので、次は半径が 2.50 インチの円の面積を計算するコードを記述してみます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-198\">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 inches.</span></span> <span data-ttu-id=\"eb00d-199\">円の面積は、半径の 2 乗 x 円周率です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-199\">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id=\"eb00d-200\">ヒント: C# には <xref:System.Math.PI?displayProperty=nameWithType> という円周率の定数があり、その値を使用できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-200\">One hint: C# contains a constant for PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"eb00d-201\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-201\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"eb00d-202\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-202\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: "<span data-ttu-id=\"eb00d-203\">課題完了</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-203\">Complete challenge</span></span>"
  durationInMinutes: 1
  content: "<span data-ttu-id=\"eb00d-204\">これで \"C# の数値\" に関するクイック スタートは終了です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-204\">You've completed the \"Numbers in C#\" quick start.</span></span> \n\n<span data-ttu-id=\"eb00d-205\">これまでのクイック スタートを、ご自身の開発環境でも行ってください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-205\">You can continue these quick starts on your own development environment.</span></span> <span data-ttu-id=\"eb00d-206\">ローカルの開発環境の設定手順については、.NET の [10 分でわかる概要](https://www.microsoft.com/net/core)に関するトピックに記載されています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-206\">The .NET topic [Get Started in 10 minutes](https://www.microsoft.com/net/core) has instructions for setting up your local development environment.</span></span> <span data-ttu-id=\"eb00d-207\">設定が完了したら、ローカルの開発環境で「[分岐とループ](branches-and-loops-local.md)」を進めてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-207\">Once you've done that, continue with [Branches and loops](branches-and-loops-local.md) in your local environment.</span></span>\n\n<span data-ttu-id=\"eb00d-208\">C# の数値の詳細については、次のトピックで学習できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-208\">You can learn more about numbers in C# in the following topics:</span></span>\n\n<span data-ttu-id=\"eb00d-209\">[整数型の一覧表](../language-reference/keywords/integral-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-209\">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  \n<span data-ttu-id=\"eb00d-210\">[浮動小数点型の一覧表](../language-reference/keywords/floating-point-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-210\">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  \n<span data-ttu-id=\"eb00d-211\">[組み込み型の一覧表](../language-reference/keywords/built-in-types-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-211\">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  \n<span data-ttu-id=\"eb00d-212\">[暗黙的な数値変換の一覧表](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-212\">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  \n[<span data-ttu-id=\"eb00d-213\">明示的な数値変換の一覧表</span><span class=\"sxs-lookup\"><span data-stu-id=\"eb00d-213\">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)\0"
