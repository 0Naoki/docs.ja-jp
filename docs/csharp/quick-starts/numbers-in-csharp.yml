### YamlMime:YamlDocument
documentType: Tutorial
title: '<span data-ttu-id="a91d1-101">C# の数値</span><span class="sxs-lookup"><span data-stu-id="a91d1-101">Numbers in C#</span></span>'
metadata:
  title: '<span data-ttu-id="a91d1-102">C# の数値</span><span class="sxs-lookup"><span data-stu-id="a91d1-102">Numbers in C#</span></span>'
  description: '<span data-ttu-id="a91d1-103">数値型に関するこのチュートリアルでは、ブラウザーを使用して、対話形式で C# を学習します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-103">In this tutorial about numeric types, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="a91d1-104">C# コードを記述し、ブラウザーで直接コードをコンパイルして実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: 'Branches and loops in C#'
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="a91d1-105">このチュートリアルでは C# の数値型について対話形式で学習できます。ブラウザーを使用して C# を記述し、コードをコンパイルして実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-105">This tutorial teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="a91d1-106">このチュートリアルには、C# の数値と算術演算に関する一連のレッスンが含まれています。</span><span class="sxs-lookup"><span data-stu-id="a91d1-106">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="a91d1-107">これらのレッスンでは、C# 言語の基本を説明します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-107">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="a91d1-108">整数の演算の確認</span><span class="sxs-lookup"><span data-stu-id="a91d1-108">Explore integer math</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="a91d1-109">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="a91d1-110">そのためには、対話型ウィンドウで次のコード ブロックを入力し、**[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="a91d1-110">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 18;
      int b = 6;
      int c = a + b;
      Console.WriteLine(c);
      ```

      <span data-ttu-id="a91d1-111">整数を使用した基本的な算術演算の 1 つを確認しました。</span><span class="sxs-lookup"><span data-stu-id="a91d1-111">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="a91d1-112">`int` 型は、**整数**を表します (正の整数、または負の整数)。</span><span class="sxs-lookup"><span data-stu-id="a91d1-112">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="a91d1-113">加算には `+` 記号を使用します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-113">You use the `+` symbol for addition.</span></span> <span data-ttu-id="a91d1-114">他の一般的な整数の算術演算には次のものがあります。</span><span class="sxs-lookup"><span data-stu-id="a91d1-114">Other common mathematical operations for integers include:</span></span>

      - <span data-ttu-id="a91d1-115">`-`: 減算</span><span class="sxs-lookup"><span data-stu-id="a91d1-115">`-` for subtraction</span></span>
      - <span data-ttu-id="a91d1-116">`*`: 乗算</span><span class="sxs-lookup"><span data-stu-id="a91d1-116">`*` for multiplication</span></span>
      - <span data-ttu-id="a91d1-117">`/`: 除算</span><span class="sxs-lookup"><span data-stu-id="a91d1-117">`/` for division</span></span>

      > [!TIP]
      > <span data-ttu-id="a91d1-118">このチュートリアルでは、対話型ウィンドウで作成したコードを変更して、自分で確認できます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-118">Throughout this tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="a91d1-119">このチュートリアルでは、各ステップで実際に試すことができる例を用意しています。</span><span class="sxs-lookup"><span data-stu-id="a91d1-119">This tutorial provides examples that you can try at each step.</span></span>

      <span data-ttu-id="a91d1-120">まずは、上記の各種演算を実行してみます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-120">Start by exploring those different operations.</span></span> <span data-ttu-id="a91d1-121">3 行目を変更して、各演算を試します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-121">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="a91d1-122">編集が終わるごとに、**[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="a91d1-122">After each edit, click the **Run** button.</span></span>

      <span data-ttu-id="a91d1-123">減算：</span><span class="sxs-lookup"><span data-stu-id="a91d1-123">Subtraction:</span></span>

      ```csharp
      int c = a - b;
      ```

      <span data-ttu-id="a91d1-124">乗算：</span><span class="sxs-lookup"><span data-stu-id="a91d1-124">Multiplication:</span></span>

      ```csharp
      int c = a * b;
      ```

      <span data-ttu-id="a91d1-125">除算：</span><span class="sxs-lookup"><span data-stu-id="a91d1-125">Division:</span></span> 

      ```csharp
      int c = a / b;
      ```

      <span data-ttu-id="a91d1-126">好みで、同じ行で複数の算術演算を実行することもできます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-126">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>

      > [!TIP]
      > <span data-ttu-id="a91d1-127">C# (または何らかのプログラミング言語) について詳しく学習するに従い、コードを記述する際にミスをすることもあるでしょう。</span><span class="sxs-lookup"><span data-stu-id="a91d1-127">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="a91d1-128">**コンパイラ**は、そうしたエラーを発見して報告します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-128">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="a91d1-129">エラー メッセージが出力された場合は、例のコードをよく確認して、対話型ウィンドウで修正すべきコードを見つけます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-129">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="a91d1-130">こうした実習が C# コードの構造を理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-130">That exercise will help you learn the structure of C# code.</span></span>     

      > [!NOTE]
      > <span data-ttu-id="a91d1-131">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="a91d1-131">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a91d1-132">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="a91d1-132">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="a91d1-133">演算の順序の確認</span><span class="sxs-lookup"><span data-stu-id="a91d1-133">Explore order of operations</span></span>
    durationInMinutes: 7
    content: |
      <span data-ttu-id="a91d1-134">C# 言語は、数学で学んだ規則と同じ規則で各演算の優先順位を定義します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-134">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>
      <span data-ttu-id="a91d1-135">乗算と除算は、加算と減算よりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-135">Multiplication and division take precedence over addition and subtraction.</span></span>
      <span data-ttu-id="a91d1-136">対話型ウィンドウで次のコードを実行して、実際に確認しましょう。</span><span class="sxs-lookup"><span data-stu-id="a91d1-136">Explore that by running the following code in the interactive window:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = a + b * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="a91d1-137">出力を見ると、加算の前に乗算が実行されていることがわかります。</span><span class="sxs-lookup"><span data-stu-id="a91d1-137">The output demonstrates that the multiplication is performed before the addition.</span></span>

      <span data-ttu-id="a91d1-138">演算の周りに丸かっこを追加する、または最初に実行したい演算を追加することで、演算の順序を変えることができます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-138">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = (a  + b) * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="a91d1-139">さまざまな演算を多数組み合わせて、他にも試してみましょう。</span><span class="sxs-lookup"><span data-stu-id="a91d1-139">Explore more by combining many different operations.</span></span> <span data-ttu-id="a91d1-140">上記の 4 行目を次のように置き換えます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-140">Replace the fourth line above with something like this:</span></span>

      ```csharp
      int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;
      ```

      <span data-ttu-id="a91d1-141">整数について面白い動作をしていることに気づいたでしょうか。</span><span class="sxs-lookup"><span data-stu-id="a91d1-141">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="a91d1-142">算術の結果に小数点や小数部分が含まれていても、整数の除算は常に整数の結果を算出します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-142">Integer division always produces an integer result, even when the mathematical result would include a decimal or fraction portion.</span></span>

      <span data-ttu-id="a91d1-143">この動作を確認できない場合は、次のコードを試してください。</span><span class="sxs-lookup"><span data-stu-id="a91d1-143">If you haven't seen this behavior, try the following:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="a91d1-144">もう一度 **[実行]** をクリックして結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-144">Click **Run** again to see the results.</span></span>

      > [!NOTE]
      > <span data-ttu-id="a91d1-145">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="a91d1-145">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a91d1-146">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="a91d1-146">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="a91d1-147">整数の有効桁数と制限の確認</span><span class="sxs-lookup"><span data-stu-id="a91d1-147">Explore integer precision and limits</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="a91d1-148">この最後のサンプルでは、整数の除算における結果の切り捨てについて確認します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-148">That last sample showed you that integer division truncates the result.</span></span>
      <span data-ttu-id="a91d1-149">**modulo** 演算子 (`%` 文字) を使用して、**剰余**を得ることができます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-149">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      int e = (a + b) % c;
      Console.WriteLine("quotient: " + d);
      Console.WriteLine("remainder: " + e);
      ```

      <span data-ttu-id="a91d1-150">C# の整数型は算術における整数ともう 1 つ異なる点があります。それは `int` 型には最小値と最大値の制限があるということです。</span><span class="sxs-lookup"><span data-stu-id="a91d1-150">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="a91d1-151">対話型ウィンドウでこのコードを実行し、これらの制限を確認しましょう。</span><span class="sxs-lookup"><span data-stu-id="a91d1-151">Run this code in the interactive window to see those limits:</span></span>

      ```csharp
      int max = int.MaxValue;
      int min = int.MinValue;
      Console.WriteLine("The range of integers is " + min + " to " + max);
      ```

      <span data-ttu-id="a91d1-152">計算によってこれらの制限を超える値が作られると、**アンダーフロー**または**オーバーフロー**の状態になります。</span><span class="sxs-lookup"><span data-stu-id="a91d1-152">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="a91d1-153">計算の結果が 1 つの制限からもう 1 つの制限に折り返されているように見えます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-153">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="a91d1-154">対話型ウィンドウに次の 2 行を追加して、例を確認します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-154">Add these two lines to the interactive window to see an example:</span></span>

      ```csharp
      int what = max + 3;
      Console.WriteLine("An example of overflow: " + what);
      ```

      <span data-ttu-id="a91d1-155">計算の結果が最小値の (負の) 整数に極めて近いことに注目してください。</span><span class="sxs-lookup"><span data-stu-id="a91d1-155">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="a91d1-156">これは `min + 2` と同じです。</span><span class="sxs-lookup"><span data-stu-id="a91d1-156">It's the same as `min + 2`.</span></span> <span data-ttu-id="a91d1-157">加算演算が許容された整数値を**オーバーフロー**しました。</span><span class="sxs-lookup"><span data-stu-id="a91d1-157">The addition operation **overflowed** the allowed values for integers.</span></span>
      <span data-ttu-id="a91d1-158">整数がオーバーフローして最大値から最小値に ”折り返され” たため、計算結果が非常に大きな負の値になっています。</span><span class="sxs-lookup"><span data-stu-id="a91d1-158">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>

      <span data-ttu-id="a91d1-159">他にもさまざまな制限や有効桁数を持つ数値型があり、`int` 型がご自分のニーズと合わない場合は、そちらも使用できます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-159">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="a91d1-160">次はその別の数値型を見ていきます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-160">Let's explore those next.</span></span>

      > [!NOTE]
      > <span data-ttu-id="a91d1-161">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="a91d1-161">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a91d1-162">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="a91d1-162">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="a91d1-163">double 型の処理</span><span class="sxs-lookup"><span data-stu-id="a91d1-163">Work with the double type</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="a91d1-164">`double` 数値型は、倍精度浮動小数点数を表します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-164">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="a91d1-165">こうした用語を初めて見た人もいるかもしれません。</span><span class="sxs-lookup"><span data-stu-id="a91d1-165">Those terms may be new to you.</span></span> <span data-ttu-id="a91d1-166">**浮動小数点**数は、非常に大きな、または非常に小さな、整数でない数値を表すのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-166">A **floating point** number is useful to represent non-integral numbers that may be very large, or small in magnitude.</span></span> <span data-ttu-id="a91d1-167">**倍精度**は、そうした数値が**単精度**よりも大きな有効桁数を使用して格納されることを意味しています。</span><span class="sxs-lookup"><span data-stu-id="a91d1-167">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="a91d1-168">最近のコンピューターでは、単精度よりも倍精度の数値を使用する方が一般的です。</span><span class="sxs-lookup"><span data-stu-id="a91d1-168">On modern computers, it is more common to use double precision than single precision numbers.</span></span>
      <span data-ttu-id="a91d1-169">確認してみましょう。</span><span class="sxs-lookup"><span data-stu-id="a91d1-169">Let's explore.</span></span> <span data-ttu-id="a91d1-170">対話型ウィンドウで次のコードを実行して結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-170">Try the following code in the interactive window and see the result:</span></span>

      ```csharp
      double a = 5;
      double b = 4;
      double c = 2;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="a91d1-171">計算結果に商の小数部分が含まれていることに注目してください。</span><span class="sxs-lookup"><span data-stu-id="a91d1-171">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="a91d1-172">double 型を使用して、もう少し複雑な式を試します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-172">Try a slightly more complicated expression with doubles:</span></span>

      ```csharp
      double a = 19;
      double b = 23;
      double c = 8;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="a91d1-173">double 値は整数値よりも範囲が大きくなります。</span><span class="sxs-lookup"><span data-stu-id="a91d1-173">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="a91d1-174">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="a91d1-174">Try the following code in the interactive window:</span></span>

      ```csharp
      double max = double.MaxValue;
      double min = double.MinValue;
      Console.WriteLine("The range of double is " + min + " to " + max);
      ```

      <span data-ttu-id="a91d1-175">これらの値は指数表記で出力されます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-175">These values are printed out to represent scientific notation.</span></span> <span data-ttu-id="a91d1-176">`E` の左側は有効数字です。</span><span class="sxs-lookup"><span data-stu-id="a91d1-176">The number to the left of the `E` is the significant.</span></span> <span data-ttu-id="a91d1-177">右側の数値は指数であり、10 の累乗です。</span><span class="sxs-lookup"><span data-stu-id="a91d1-177">The number to the right is the exponent, as a power of 10.</span></span> <span data-ttu-id="a91d1-178">これらの数値は同じように表されていても、内部的にはバイナリ形式になっています。</span><span class="sxs-lookup"><span data-stu-id="a91d1-178">Internally, these numbers are represented similarly, but in a binary form.</span></span> <span data-ttu-id="a91d1-179">一方は、有効バイナリ桁数を表しています。</span><span class="sxs-lookup"><span data-stu-id="a91d1-179">One part represents the significant binary digits.</span></span>
      <span data-ttu-id="a91d1-180">もう一方は、この有効桁数に対してバイナリの小数点の位置を表しています。</span><span class="sxs-lookup"><span data-stu-id="a91d1-180">Another part represents where to place the binary point (analogous to a decimal point) relative to those significant digits.</span></span>

      <span data-ttu-id="a91d1-181">算術における 10 進数と同じように、C# における double には丸め誤差が発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="a91d1-181">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="a91d1-182">次のコードを試してみましょう。</span><span class="sxs-lookup"><span data-stu-id="a91d1-182">Try this code:</span></span>

      ```csharp
      double third = 1.0 / 3.0;
      Console.WriteLine(third);
      ```

      <span data-ttu-id="a91d1-183">`0.3` の循環小数は `1/3` と完全に同じではありません。</span><span class="sxs-lookup"><span data-stu-id="a91d1-183">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>

      <span data-ttu-id="a91d1-184">***課題***</span><span class="sxs-lookup"><span data-stu-id="a91d1-184">***Challenge***</span></span>

      <span data-ttu-id="a91d1-185">`double` 型を使用して、大きい値や小さい値、乗算、除算などの計算してみましょう。</span><span class="sxs-lookup"><span data-stu-id="a91d1-185">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="a91d1-186">もっと複雑な計算を試してみてください。</span><span class="sxs-lookup"><span data-stu-id="a91d1-186">Try more complicated calculations.</span></span>

      > [!NOTE]
      > <span data-ttu-id="a91d1-187">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="a91d1-187">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a91d1-188">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="a91d1-188">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="a91d1-189">固定小数点型の処理</span><span class="sxs-lookup"><span data-stu-id="a91d1-189">Work with fixed point types</span></span>
    durationInMinutes: 8
    content: |
      <span data-ttu-id="a91d1-190">C# の基本的な数値型である整数と double について見てきました。</span><span class="sxs-lookup"><span data-stu-id="a91d1-190">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="a91d1-191">もう 1 つ知っておくべき型として、`decimal` 型があります。</span><span class="sxs-lookup"><span data-stu-id="a91d1-191">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="a91d1-192">`decimal` 型は、`double` 型よりも範囲が小さいものの有効桁数が大きい型です。</span><span class="sxs-lookup"><span data-stu-id="a91d1-192">The `decimal` type has a smaller range, but greater precision than `double`.</span></span> <span data-ttu-id="a91d1-193">**固定小数点**という用語は、小数点 (またはバイナリの小数点) が動かないことを意味しています。</span><span class="sxs-lookup"><span data-stu-id="a91d1-193">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="a91d1-194">では、始めましょう。</span><span class="sxs-lookup"><span data-stu-id="a91d1-194">Let's take a look:</span></span>

      ```csharp
      decimal min = decimal.MinValue;
      decimal max = decimal.MaxValue;
      Console.WriteLine("The range of the decimal type is " + min + " to " + max);
      ```

      <span data-ttu-id="a91d1-195">`double` 型よりも範囲が小さいことに注目してください。</span><span class="sxs-lookup"><span data-stu-id="a91d1-195">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="a91d1-196">次のコードを実行すると、decimal 型では有効桁数がより大きいことを確認できます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-196">You can see the greater precision with the decimal type by trying the following code:</span></span>

      ```csharp
      double a = 1.0;
      double b = 3.0;
      Console.WriteLine(a / b);

      decimal c = 1.0M;
      decimal d = 3.0M;
      Console.WriteLine(c / d);
      ```

      <span data-ttu-id="a91d1-197">数値の末尾の `M` は、定数では `decimal` 型を使用する必要があることを示しています。</span><span class="sxs-lookup"><span data-stu-id="a91d1-197">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>

      <span data-ttu-id="a91d1-198">decimal 型を使用した演算では、小数点の右側の桁数がより多いことに注目してください。</span><span class="sxs-lookup"><span data-stu-id="a91d1-198">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> 

      <span data-ttu-id="a91d1-199">***課題***</span><span class="sxs-lookup"><span data-stu-id="a91d1-199">***Challenge***</span></span>

      <span data-ttu-id="a91d1-200">さまざまな数値型を確認したので、次は半径が 2.50 インチの円の面積を計算するコードを記述してみます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-200">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 inches.</span></span> <span data-ttu-id="a91d1-201">円の面積は、半径の 2 乗 x 円周率です。</span><span class="sxs-lookup"><span data-stu-id="a91d1-201">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="a91d1-202">ヒント: C# には `Math.PI` という円周率の定数があり、その値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-202">One hint: C# contains a constant for PI: `Math.PI` that you can use for that value.</span></span> 

      > [!NOTE]
      > <span data-ttu-id="a91d1-203">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="a91d1-203">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a91d1-204">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="a91d1-204">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="a91d1-205">課題完了</span><span class="sxs-lookup"><span data-stu-id="a91d1-205">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="a91d1-206">これで "C# の数値" に関するチュートリアルは終了です。</span><span class="sxs-lookup"><span data-stu-id="a91d1-206">You've completed the "Numbers in C#" tutorial.</span></span> <span data-ttu-id="a91d1-207">C# の数値の詳細については、次のトピックで学習できます。</span><span class="sxs-lookup"><span data-stu-id="a91d1-207">You can learn more about numbers in C# in the following topics:</span></span>

      <span data-ttu-id="a91d1-208">[整数型の一覧表](../language-reference/keywords/integral-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="a91d1-208">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  
      <span data-ttu-id="a91d1-209">[浮動小数点型の一覧表](../language-reference/keywords/floating-point-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="a91d1-209">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  
      <span data-ttu-id="a91d1-210">[組み込み型の一覧表](../language-reference/keywords/built-in-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="a91d1-210">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  
      <span data-ttu-id="a91d1-211">[暗黙的な数値変換の一覧表](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class="sxs-lookup"><span data-stu-id="a91d1-211">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  
      [<span data-ttu-id="a91d1-212">明示的な数値変換の一覧表</span><span class="sxs-lookup"><span data-stu-id="a91d1-212">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)