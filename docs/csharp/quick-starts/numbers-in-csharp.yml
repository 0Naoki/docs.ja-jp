### YamlMime:YamlDocument
documentType: Tutorial
title: 'C# での数値'
metadata:
  title: 'C# での数値'
  description: '数値型に関するこのチュートリアルでは、ブラウザーを使用して、対話的に c# について学習します。 しようとしている c# コードを記述してコンパイルして、ブラウザーで直接実行するコードの結果を参照してください。'
  audience: Developer
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: 'Branches and loops in C#'
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      このチュートリアルで説明する c# での数値型は、対話的にお使いのブラウザーを使用して c# を記述しをコンパイルして、コードの実行の結果を参照してください。 一連数字と c# での算術演算を探索するレッスンにはが含まれています。 これらのレッスンでは、c# 言語の基本を学習します。
  - title: 整数の数値演算を調査します。
    durationInMinutes: 4
    content: |
      対話型のウィンドウで次のコードを実行します。 手順を実行する対話型ウィンドウで次のコード ブロックを入力し、をクリックして、**実行**ボタンをクリックします。

      ```csharp
      int a = 18;
      int b = 6;
      int c = a + b;
      Console.WriteLine(c);
      ```

      整数と基本的な算術演算の 1 つだけ見てきました。 `int`型を表す、**整数**、正または負の整数。 使用する、`+`のシンボルを追加します。 整数の他の一般的な数値演算は次のとおりです。

      - `-`減算
      - `*`乗算の
      - `/`除算の

      > [!TIP]
      > このチュートリアルでは、対話型のウィンドウで作成したコードを修正して、自分で調べることができます。 このチュートリアルでは、各ステップで試用できる例を示します。

      これらのさまざまな操作を表示することによって開始します。 これらの各操作を再試行してくださいに 3 行目を変更します。 各編集の後にクリックして、**実行**ボタンをクリックします。

      減算します。

      ```csharp
      int c = a - b;
      ```

      乗算します。

      ```csharp
      int c = a * b;
      ```

      除算します。 

      ```csharp
      int c = a / b;
      ```

      希望の場合は、同一の行に複数の数学演算を実行することによってすることもできます。

      > [!TIP]
      > C# (または任意のプログラミング言語) を探索するよう、コードを記述するときに、間違いを行うします。 **コンパイラ**はそれらのエラーを見つけてに報告します。 出力には、エラー メッセージが含まれている、よく見る、コード例では、そして修正内容を表示する対話型ウィンドウ内のコード。
      > その手順を使用すると、c# コードの構造を学習できます。     

      > [!NOTE]
      > このオンライン コーディング エクスペリエンスはプレビュー モードです。 問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。
  - title: 操作の順序を表示します。
    durationInMinutes: 7
    content: |
      C# 言語では、数学で学習したルールのルールに一貫性のあるさまざまな数学操作の優先順位を定義します。
      乗算と除算優先加算と減算します。
      対話型ウィンドウで、次のコードを実行している従ってください。

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = a + b * c;
      Console.WriteLine(d);
      ```

      出力は、追加する前に、乗算が実行されたことを示します。

      操作の別の順序を強制するには、操作を囲むかっこを追加することで、または対象の操作が最初に実行します。

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = (a  + b) * c;
      Console.WriteLine(d);
      ```

      さまざまな操作を組み合わせることによってよりについて説明します。 次のように上記の 4 行目に置き換えます。

      ```csharp
      int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;
      ```

      お気付きの整数について注目に値する動作です。 常に整数の除算は、数学的な結果には、10 進数または分数部分にが含まれます場合でも、結果の整数値を生成します。

      この動作を目にしていない場合は、次の操作を再試行してください。

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      をクリックして**実行**結果を表示するには、もう一度です。

      > [!NOTE]
      > このオンライン コーディング エクスペリエンスはプレビュー モードです。 問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。
  - title: 整数の有効桁数および制限を探索します。
    durationInMinutes: 5
    content: |
      最後のサンプルでは、整数の除算では、結果が切り捨てられますを示しました。
      取得することができます、**剰余**を使用して、**剰余**、演算子、`%`文字。

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      int e = (a + b) % c;
      Console.WriteLine("quotient: " + d);
      Console.WriteLine("remainder: " + e);
      ```

      他の方法の 1 つの数学的な整数とは異なる整数型 (C#):`int`型が最小と最大値。 これらの制限を表示する対話型のウィンドウでこのコードを実行します。

      ```csharp
      int max = int.MaxValue;
      int min = int.MinValue;
      Console.WriteLine("The range of integers is " + min + " to " + max);
      ```

      ある場合は、計算では、これらの制限を超える値を生成、**アンダー フロー**または**オーバーフロー**条件。 別の 1 つの制限をラップする、応答が表示されます。 例を参照する対話型ウィンドウに 2 つの行を追加します。

      ```csharp
      int what = max + 3;
      Console.WriteLine("An example of overflow: " + what);
      ```

      答えが (負) 最小の整数に近い非常にことに注意してください。 同じである`min + 2`です。 加算演算**がオーバーフローした**整数の許容値。
      回答は非常に大きい負の数値をオーバーフロー「周りで折り返されます」可能な整数の最大値から最小にためです。

      さまざまな制限と有効桁数が使用するときにその他の数値型がある、`int`型は、お客様のニーズを満たしていません。 その次へ を見てみましょう。

      > [!NOTE]
      > このオンライン コーディング エクスペリエンスはプレビュー モードです。 問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。
  - title: Double 型を動作します。
    durationInMinutes: 5
    content: |
      `double`数値型が倍精度浮動小数点数を表します。 これらの用語は、初めて使用する可能性があります。 A**浮動小数点**数が非常に大きいまたは大きさにすることは整数以外の数値を表すに便利です。 **倍精度**より大きい有効桁数を使用してこれらの数値を格納することを意味**単精度**です。 最近のコンピューターは単精度の数値よりも倍精度を使用する方が一般的です。
      見てみましょう。 対話型のウィンドウで次のコードと結果を参照してください。

      ```csharp
      double a = 5;
      double b = 4;
      double c = 2;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      商の小数部分が、応答に含まれていることに注意してください。 1 個の double を少し複雑な式を試してください。

      ```csharp
      double a = 19;
      double b = 23;
      double c = 8;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      Double 型の値の範囲は、整数値よりもかなり大きくします。 対話型のウィンドウで次のコードを試してください。

      ```csharp
      double max = double.MaxValue;
      double min = double.MinValue;
      Console.WriteLine("The range of double is " + min + " to " + max);
      ```

      科学的表記法を表すには、これらの値が出力されます。 左側には、番号、`E`は、重要です。 右側の数は、10 の累乗で、指数部です。 内部的には、これらの番号は、同様が、バイナリ形式で表されます。 1 つの部分では、バイナリの桁数を表します。
      別の部分では、その有効桁数の基準としたバイナリ ポイント (小数点の位置に似ています) を配置する場所を表します。

      数値演算の 10 進数と同じように丸め誤差個の double (C#) ことができます。 このコードを試してください。

      ```csharp
      double third = 1.0 / 3.0;
      Console.WriteLine(third);
      ```

      わかって`0.3`繰り返しが正確に一致しないと同じ`1/3`です。

      ***チャレンジ***

      数値が大きい、小さい数値、乗算と除算を使用した他の計算を再試行してください、`double`型です。  複雑な計算を再試行してください。

      > [!NOTE]
      > このオンライン コーディング エクスペリエンスはプレビュー モードです。 問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。
  - title: 固定小数点型を操作します。
    durationInMinutes: 8
    content: |
      C# では、基本的な数値型を見てきました。 整数と倍です。  については、その他の 1 つの型がある:`decimal`型です。 `decimal`型には、範囲が狭いより大きい有効桁数が`double`です。 用語**ポイントを固定**小数点 (またはバイナリのポイント) に移動しないことを意味します。 見てみましょう。

      ```csharp
      decimal min = decimal.MinValue;
      decimal max = decimal.MaxValue;
      Console.WriteLine("The range of the decimal type is " + min + " to " + max);
      ```

      範囲がよりも小さいことに注意してください、`double`型です。 次のコードを試行することで、decimal 型をさらに高い精度を確認できます。

      ```csharp
      double a = 1.0;
      double b = 3.0;
      Console.WriteLine(a / b);

      decimal c = 1.0M;
      decimal d = 3.0M;
      Console.WriteLine(c / d);
      ```

      `M`番号のサフィックスが定数を使用することを指定する方法では、`decimal`型です。

      10 進数型を使用して数値演算の小数点の右側にある複数の数字であることを確認します。 

      ***チャレンジ***

      別の数値型を確認したらは、円の半径は 2.50 インチの面積を計算するコードを記述します。 覚えて PI を掛けた円の領域が乗 radius であります。 1 つのヒント: c# PI の定数が含まれる:`Math.PI`の値に対して使用することができます。 

      > [!NOTE]
      > このオンライン コーディング エクスペリエンスはプレビュー モードです。 問題が発生した場合に報告してくださいに[dotnet/試用リポジトリで](https://github.com/dotnet/try/issues)です。
  - title: 完全なチャレンジ
    durationInMinutes: 1
    content: |
      「番号で c#」チュートリアルをを完了しました。 します C# では、次のトピックでの番号の詳細を学習できます。

      [整数型の一覧表](../language-reference/keywords/integral-types-table.md)   
      [浮動小数点型の一覧表](../language-reference/keywords/floating-point-types-table.md)   
      [組み込み型の一覧表](../language-reference/keywords/built-in-types-table.md)   
      [暗黙的な数値変換の一覧表](../language-reference/keywords/implicit-numeric-conversions-table.md)   
      [明示的な数値変換の一覧表](../language-reference/keywords/explicit-numeric-conversions-table.md)