### YamlMime:Tutorial
title: <span data-ttu-id="bf5fc-101">リスト型を使用したデータ コレクションの管理について説明します</span><span class="sxs-lookup"><span data-stu-id="bf5fc-101">Learn to manage data collections using the generic list type</span></span>
metadata:
  title: データ コレクション - C# の概要に関する対話型チュートリアル
  description: このチュートリアルでは、ブラウザーを使用して C# を対話形式で学習できます。 C# コードを記述し、ブラウザーで直接コードをコンパイルして、実行した結果を確認します。
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 6b7a00a0d7ea17ab48e673b735bdd1a77328c099
  ms.sourcegitcommit: c93fd5139f9efcf6db514e3474301738a6d1d649
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 10/28/2018
  ms.locfileid: "50200166"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="bf5fc-105">このチュートリアルでは C# を対話形式で学習できます。ブラウザーを使用して C# コードを記述し、コードをコンパイルして実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-105">This tutorial teaches you C# interactively, using your browser to write C# code and see the results of compiling and running your code.</span></span> <span data-ttu-id="bf5fc-106">このチュートリアルには、コレクションと配列を作成、変更、確認する一連のレッスンが含まれています。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-106">It contains a series of lessons that create, modify and explore collections and arrays.</span></span>
- title: <span data-ttu-id="bf5fc-107">リストを作成する</span><span class="sxs-lookup"><span data-stu-id="bf5fc-107">Create lists</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="bf5fc-108">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-108">Run the following code in the interactive window.</span></span> <span data-ttu-id="bf5fc-109">そのためには、対話型ウィンドウで次のコード ブロックを入力し (`<name>` を自分の名前に置き換えて)、**[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-109">To do that, type the following code block in the interactive window (replace `<name>` with your name) and click the **Run** button:</span></span>


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    <span data-ttu-id="bf5fc-110">文字列のリストを作成し、そのリストに 3 つの名前を追加し、それらの名前をすべて大文字で出力しました。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-110">You've just created a list of strings, added three names to that list, and printed out the names in all CAPS.</span></span> <span data-ttu-id="bf5fc-111">先のチュートリアルで学習した概念を使用して、リストをループしています。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-111">You're using concepts that you've learned in earlier tutorials to loop through the list.</span></span>


    <span data-ttu-id="bf5fc-112">名前を表示するコードは、[文字列補間](../../language-reference/tokens/interpolated.md)機能を使用します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-112">The code to display names makes use of the [string interpolation](../../language-reference/tokens/interpolated.md) feature.</span></span> <span data-ttu-id="bf5fc-113">`string` の前に文字 `$` を配置すると、文字列宣言に C# コードを埋め込むことができます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-113">When you precede a `string` with the `$` character, you can embed C# code in the string declaration.</span></span> <span data-ttu-id="bf5fc-114">実際の文字列は、生成する値でその C# コードを置き換えます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-114">The actual string replaces that C# code with the value it generates.</span></span> <span data-ttu-id="bf5fc-115">この例では、<xref:System.String.ToUpper%2A?displayProperty=nameWithType> メソッドを呼び出したため、文字列は `{name.ToUpper()}` をそれぞれの名前に置き換え、文字を大文字に変換しています。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-115">In this example, it replaces the `{name.ToUpper()}` with each name, converted to capital letters, because you called the <xref:System.String.ToUpper%2A?displayProperty=nameWithType> method.</span></span>


    <span data-ttu-id="bf5fc-116">続けて確認していきましょう。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-116">Let's keep exploring.</span></span>


    > [!NOTE]

    > <span data-ttu-id="bf5fc-117">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-117">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bf5fc-118">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-118">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bf5fc-119">リスト コンテンツを変更する</span><span class="sxs-lookup"><span data-stu-id="bf5fc-119">Modify list contents</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="bf5fc-120">作成したコレクションは <xref:System.Collections.Generic.List%601> 型を使用します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-120">The collection you created uses the <xref:System.Collections.Generic.List%601> type.</span></span> <span data-ttu-id="bf5fc-121">この型は、要素のシーケンスを格納します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-121">This type stores sequences of elements.</span></span> <span data-ttu-id="bf5fc-122">要素の型を山かっこの内側で指定します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-122">You specify the type of the elements between the angle brackets.</span></span>


    <span data-ttu-id="bf5fc-123">この <xref:System.Collections.Generic.List%601> 型の重要な点は増減が可能で、要素を追加したり削除したりできることです。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-123">One important aspect of this <xref:System.Collections.Generic.List%601> type is that it can grow or shrink, enabling you to add or remove elements.</span></span> <span data-ttu-id="bf5fc-124">既に記述したコードの下に、次のコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-124">Add the following code below the code you've already written:</span></span>


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    <span data-ttu-id="bf5fc-125">さらに 2 つの名前をリストの末尾に追加しました。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-125">You've added two more names to the end of the list.</span></span> <span data-ttu-id="bf5fc-126">また、1 つを削除しました。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-126">You've also removed one as well.</span></span>


    <span data-ttu-id="bf5fc-127"><xref:System.Collections.Generic.List%601> を使用すると、**インデックス**でも個々の項目を参照できます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-127">The <xref:System.Collections.Generic.List%601> enables you to reference individual items by **index** as well.</span></span> <span data-ttu-id="bf5fc-128">`[` と `]` のトークンを使用して項目にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-128">You access items using the `[` and `]` tokens.</span></span> <span data-ttu-id="bf5fc-129">既に記述したコードの下に、次のコードを追加して試してみます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-129">Add the following code below what you've already written and try it:</span></span>


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    <span data-ttu-id="bf5fc-130">リストの末尾を越えてアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-130">You're not allowed to access past the end of the list.</span></span> <span data-ttu-id="bf5fc-131"><xref:System.Collections.Generic.List%601.Count%2A> プロパティを使用すれば、リストの長さを確認できます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-131">You can check how long the list is using the <xref:System.Collections.Generic.List%601.Count%2A> property.</span></span> <span data-ttu-id="bf5fc-132">次のコードを追加して試してみます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-132">Add the following code to try it:</span></span>


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    <span data-ttu-id="bf5fc-133">もう一度 **[実行]** をクリックして結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-133">Click **Run** again to see the results.</span></span> <span data-ttu-id="bf5fc-134">C# ではインデックスは 0 から始まるため、有効なインデックスの最大値はリスト内の項目の数より 1 小さくなります。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-134">In C#, indices start at 0, so the largest valid index is one less than the number of items in the list.</span></span>


    > [!NOTE]

    > <span data-ttu-id="bf5fc-135">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-135">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bf5fc-136">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-136">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bf5fc-137">リストを検索して並び替える</span><span class="sxs-lookup"><span data-stu-id="bf5fc-137">Search and sort lists</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="bf5fc-138">サンプルでは比較的小さいリストを使用していますが、ご利用のアプリケーションでは、より多くの (場合によっては何千もの) 要素が含まれるリストを作成することもよくあるかもしれません。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-138">Our samples use relatively small lists, but your applications may often create lists with many more elements, sometimes numbering in the thousands.</span></span> <span data-ttu-id="bf5fc-139">そうした大規模なコレクションの中から要素を見つけるには、別々の項目をリストで検索する必要があります。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-139">To find elements in these larger collections, you need to search the list for different items.</span></span> <span data-ttu-id="bf5fc-140"><xref:System.Collections.Generic.List%601.IndexOf%2A> メソッドは項目を検索し、その項目のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-140">The <xref:System.Collections.Generic.List%601.IndexOf%2A> method searches for an item and returns the index of the item.</span></span> <span data-ttu-id="bf5fc-141">これを試して動作を確認してください。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-141">Try this to see how it works.</span></span>  <span data-ttu-id="bf5fc-142">これまでに記述したコードの下に、次のコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-142">Add the following code below what you've written so far:</span></span>


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    <span data-ttu-id="bf5fc-143">リストに項目があるかどうかわからないこともあるため、常に <xref:System.Collections.Generic.List%601.IndexOf%2A> によって返されるインデックスをチェックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-143">You may not know if an item is in the list, so you should always check the index returned by <xref:System.Collections.Generic.List%601.IndexOf%2A>.</span></span> <span data-ttu-id="bf5fc-144">それが -1 だった場合は、項目が見つからなかったことを意味します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-144">If it is -1, the item was not found.</span></span>


    <span data-ttu-id="bf5fc-145">同じように、リスト内の項目を並び替えできます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-145">The items in your list can be sorted as well.</span></span> <span data-ttu-id="bf5fc-146"><xref:System.Collections.Generic.List%601.Sort%2A> メソッドは、リスト内のすべての項目を正規順序 (文字列の場合はアルファベット順) で並び替えます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-146">The <xref:System.Collections.Generic.List%601.Sort%2A> method sorts all the items in the list in their normal order (alphabetically in the case of strings).</span></span> <span data-ttu-id="bf5fc-147">次のコードを追加し、もう一度実行します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-147">Add this code and run again:</span></span>


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > <span data-ttu-id="bf5fc-148">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-148">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bf5fc-149">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-149">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bf5fc-150">その他の型のリスト</span><span class="sxs-lookup"><span data-stu-id="bf5fc-150">Lists of other types</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="bf5fc-151">ここまでは、リスト内で `string` 型を使用してきました。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-151">You've been using the `string` type in lists so far.</span></span> <span data-ttu-id="bf5fc-152">別の型を使用して <xref:System.Collections.Generic.List%601> を作成してみましょう。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-152">Let's make a <xref:System.Collections.Generic.List%601> using a different type.</span></span> <span data-ttu-id="bf5fc-153">数値のセットを作成します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-153">Let's build a set of numbers.</span></span> <span data-ttu-id="bf5fc-154">これまでに記述したコードを削除し、次のコードに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-154">Delete the code you wrote so far, and replace it with this:</span></span>


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    <span data-ttu-id="bf5fc-155">これにより整数のリストが作成され、最初の 2 つの整数が値 1 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-155">That creates a list of integers, and sets the first two integers to the value 1.</span></span> <span data-ttu-id="bf5fc-156">これらは、数列の 1 つである*フィボナッチ数列*の最初の 2 つの値です。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-156">These are the first two values of a *Fibonacci Sequence*, a sequence of numbers.</span></span> <span data-ttu-id="bf5fc-157">次のフィボナッチ数はそれぞれ、その直前の 2 つの数値の合計を取得することによって得られます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-157">Each next Fibonacci number is found by taking the sum of the previous two numbers.</span></span> <span data-ttu-id="bf5fc-158">このコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-158">Add this code:</span></span>


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    <span data-ttu-id="bf5fc-159">**[実行]** をクリックして結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-159">Press **Run** to see the results;</span></span>


    > [!NOTE]

    > <span data-ttu-id="bf5fc-160">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-160">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bf5fc-161">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-161">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bf5fc-162">課題</span><span class="sxs-lookup"><span data-stu-id="bf5fc-162">Challenge</span></span>
  durationInMinutes: 10
  content: >
    <span data-ttu-id="bf5fc-163">このレッスンと以前のレッスンの中から、いくつかの概念を理解できているかどうかを確認してみましょう。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-163">See if you can put together some of the concepts from this and earlier lessons.</span></span> <span data-ttu-id="bf5fc-164">ここまでフィボナッチ数を使用して作成してきたコードを使ってください。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-164">Expand on what you've built so far with Fibonacci Numbers.</span></span> <span data-ttu-id="bf5fc-165">シーケンスの最初の 20 個の数を生成するコードを記述してみましょう。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-165">Try and write the code to generate the first 20 numbers in the sequence.</span></span> <span data-ttu-id="bf5fc-166">(ヒント: フィボナッチ数の 20 番目の数は 6765 です。)</span><span class="sxs-lookup"><span data-stu-id="bf5fc-166">(As a hint, the 20th Fibonacci number is 6765.)</span></span>


    > [!NOTE]

    > <span data-ttu-id="bf5fc-167">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-167">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bf5fc-168">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-168">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bf5fc-169">課題完了</span><span class="sxs-lookup"><span data-stu-id="bf5fc-169">Complete challenge</span></span>
  durationInMinutes: 3
  content: "<span data-ttu-id=\"bf5fc-170\">コードは次のようになりましたか? </span><span class=\"sxs-lookup\"><span data-stu-id=\"bf5fc-170\">Did you come up with something like this?</span></span>\n\n```csharp\nvar fibonacciNumbers = new List<int> {1, 1};\n\nwhile (fibonacciNumbers.Count < 20)\n{\n    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];\n    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];\n    \n    fibonacciNumbers.Add(previous + previous2);\n}\nforeach(var item in fibonacciNumbers)\n    Console.WriteLine(item);\n```\n\n<span data-ttu-id=\"bf5fc-171\">ループの繰り返しごとに、リストの最後の 2 つの整数を取得して合計し、その値をリストに追加しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bf5fc-171\">With each iteration of the loop, you're taking the last two integers in the list, summing them, and adding that value to the list.</span></span> <span data-ttu-id=\"bf5fc-172\">このループは、20 個の項目がリストに追加されるまで繰り返されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bf5fc-172\">The loop repeats until you've added 20 items to the list.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"bf5fc-173\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bf5fc-173\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"bf5fc-174\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bf5fc-174\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- content: >-
    <span data-ttu-id="bf5fc-175">リストについてのチュートリアルはこれで終了です。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-175">You've completed the list tutorial.</span></span> <span data-ttu-id="bf5fc-176">このチュートリアルは最後の対話型チュートリアルです。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-176">This tutorial is the final interactive tutorial.</span></span> <span data-ttu-id="bf5fc-177">これまでのチュートリアルを、ご自身の開発環境でも引き続き使用できます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-177">You can continue these tutorials on your own development environment.</span></span> <span data-ttu-id="bf5fc-178">[ローカル開発](local-environment.md)の基本を学習してから、チュートリアルを選択してください。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-178">Learn the basics of [local development](local-environment.md) and then pick a tutorial.</span></span> <span data-ttu-id="bf5fc-179">これと同じ演習を試すことも、次のチュートリアルに直接移動することも、再度「[C# の数値](numbers-in-csharp-local.md)」チュートリアルから始めることもできます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-179">You can try this same exercise, move directly to the next tutorial, or start again at with the [numbers in C#](numbers-in-csharp-local.md) tutorial.</span></span>


    <span data-ttu-id="bf5fc-180">`List` 型の使用方法の詳細については、[.NET ガイド](../../../standard/index.md)の[コレクション](../../../standard/collections/index.md)に関するトピックで学習できます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-180">You can learn more about working with the `List` type in the [.NET Guide](../../../standard/index.md) topic on [collections](../../../standard/collections/index.md).</span></span> <span data-ttu-id="bf5fc-181">その他の多くのコレクション型についても学習できます。</span><span class="sxs-lookup"><span data-stu-id="bf5fc-181">You'll also learn about many other collection types.</span></span>
