### YamlMime:Tutorial
title: <span data-ttu-id="fd5e2-101">リスト型を使用したデータ コレクションの管理について説明します</span><span class="sxs-lookup"><span data-stu-id="fd5e2-101">Learn to manage data collections using the generic list type</span></span>
metadata:
  title: データ コレクション - C# の概要に関する対話型チュートリアル
  description: このチュートリアルでは、ブラウザーを使用して C# を対話形式で学習できます。 C# コードを記述し、ブラウザーで直接コードをコンパイルして、実行した結果を確認します。
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 8ee13ec60f0504982c33ecc61940b731d320d2de
  ms.sourcegitcommit: c4e9d05644c9cb89de5ce6002723de107ea2e2c4
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 05/19/2019
  ms.locfileid: "65880559"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="fd5e2-105">このチュートリアルでは C# を対話形式で学習できます。ブラウザーを使用して C# コードを記述し、コードをコンパイルして実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-105">This tutorial teaches you C# interactively, using your browser to write C# code and see the results of compiling and running your code.</span></span> <span data-ttu-id="fd5e2-106">このチュートリアルには、コレクションと配列を作成、変更、確認する一連のレッスンが含まれています。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-106">It contains a series of lessons that create, modify, and explore collections and arrays.</span></span>
- title: <span data-ttu-id="fd5e2-107">リストを作成する</span><span class="sxs-lookup"><span data-stu-id="fd5e2-107">Create lists</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="fd5e2-108">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-108">Run the following code in the interactive window.</span></span> <span data-ttu-id="fd5e2-109">そのためには、対話型ウィンドウで次のコード ブロックを入力し (`<name>` を自分の名前に置き換えて)、**[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-109">To do that, type the following code block in the interactive window (replace `<name>` with your name) and click the **Run** button:</span></span>


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    <span data-ttu-id="fd5e2-110">文字列のリストを作成し、そのリストに 3 つの名前を追加し、それらの名前をすべて大文字で出力しました。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-110">You've created a list of strings, added three names to that list, and printed out the names in all CAPS.</span></span> <span data-ttu-id="fd5e2-111">先のチュートリアルで学習した概念を使用して、リストをループしています。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-111">You're using concepts that you've learned in earlier tutorials to loop through the list.</span></span>


    <span data-ttu-id="fd5e2-112">名前を表示するコードは、[文字列補間](../../language-reference/tokens/interpolated.md)機能を使用します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-112">The code to display names makes use of the [string interpolation](../../language-reference/tokens/interpolated.md) feature.</span></span> <span data-ttu-id="fd5e2-113">`string` の前に文字 `$` を配置すると、文字列宣言に C# コードを埋め込むことができます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-113">When you precede a `string` with the `$` character, you can embed C# code in the string declaration.</span></span> <span data-ttu-id="fd5e2-114">実際の文字列は、生成する値でその C# コードを置き換えます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-114">The actual string replaces that C# code with the value it generates.</span></span> <span data-ttu-id="fd5e2-115">この例では、<xref:System.String.ToUpper%2A?displayProperty=nameWithType> メソッドを呼び出したため、文字列は `{name.ToUpper()}` をそれぞれの名前に置き換え、文字を大文字に変換しています。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-115">In this example, it replaces the `{name.ToUpper()}` with each name, converted to capital letters, because you called the <xref:System.String.ToUpper%2A?displayProperty=nameWithType> method.</span></span>


    <span data-ttu-id="fd5e2-116">続けて確認していきましょう。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-116">Let's keep exploring.</span></span>


    > [!NOTE]

    > <span data-ttu-id="fd5e2-117">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-117">This online coding experience is in preview mode.</span></span> <span data-ttu-id="fd5e2-118">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-118">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="fd5e2-119">リスト コンテンツを変更する</span><span class="sxs-lookup"><span data-stu-id="fd5e2-119">Modify list contents</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="fd5e2-120">作成したコレクションは <xref:System.Collections.Generic.List%601> 型を使用します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-120">The collection you created uses the <xref:System.Collections.Generic.List%601> type.</span></span> <span data-ttu-id="fd5e2-121">この型は、要素のシーケンスを格納します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-121">This type stores sequences of elements.</span></span> <span data-ttu-id="fd5e2-122">要素の型を山かっこの内側で指定します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-122">You specify the type of the elements between the angle brackets.</span></span>


    <span data-ttu-id="fd5e2-123">この <xref:System.Collections.Generic.List%601> 型の重要な点は増減が可能で、要素を追加したり削除したりできることです。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-123">One important aspect of this <xref:System.Collections.Generic.List%601> type is that it can grow or shrink, enabling you to add or remove elements.</span></span> <span data-ttu-id="fd5e2-124">その内容を表示した後で内容を変更することにより、結果を確認できます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-124">You can see the results by modifying the contents after you've displayed its contents.</span></span> <span data-ttu-id="fd5e2-125">既に記述したコードの下に、次のコードを追加します (内容を出力するループの下)。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-125">Add the following code below the code you've already written (below the loop that prints the contents):</span></span>


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    <span data-ttu-id="fd5e2-126">さらに 2 つの名前をリストの末尾に追加しました。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-126">You've added two more names to the end of the list.</span></span> <span data-ttu-id="fd5e2-127">また、1 つを削除しました。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-127">You've also removed one as well.</span></span> <span data-ttu-id="fd5e2-128">このコード ブロックからの出力では、初期の内容が示された後、空白行と新しい内容が出力されます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-128">The output from this block of code shows the initial contents, then prints a blank line and the new contents.</span></span>


    <span data-ttu-id="fd5e2-129"><xref:System.Collections.Generic.List%601> を使用すると、**インデックス**でも個々の項目を参照できます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-129">The <xref:System.Collections.Generic.List%601> enables you to reference individual items by **index** as well.</span></span> <span data-ttu-id="fd5e2-130">`[` と `]` のトークンを使用して項目にアクセスします。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-130">You access items using the `[` and `]` tokens.</span></span> <span data-ttu-id="fd5e2-131">既に記述したコードの下に、次のコードを追加して試してみます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-131">Add the following code below what you've already written and try it:</span></span>


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    <span data-ttu-id="fd5e2-132">リストの末尾を越えてアクセスすることはできません。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-132">You're not allowed to access past the end of the list.</span></span> <span data-ttu-id="fd5e2-133"><xref:System.Collections.Generic.List%601.Count%2A> プロパティを使用すれば、リストの長さを確認できます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-133">You can check how long the list is using the <xref:System.Collections.Generic.List%601.Count%2A> property.</span></span> <span data-ttu-id="fd5e2-134">次のコードを追加して試してみます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-134">Add the following code to try it:</span></span>


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    <span data-ttu-id="fd5e2-135">もう一度 **[実行]** をクリックして結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-135">Click **Run** again to see the results.</span></span> <span data-ttu-id="fd5e2-136">C# ではインデックスは 0 から始まるため、有効なインデックスの最大値はリスト内の項目の数より 1 小さくなります。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-136">In C#, indices start at 0, so the largest valid index is one less than the number of items in the list.</span></span>


    > [!NOTE]

    > <span data-ttu-id="fd5e2-137">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-137">This online coding experience is in preview mode.</span></span> <span data-ttu-id="fd5e2-138">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-138">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="fd5e2-139">リストを検索して並び替える</span><span class="sxs-lookup"><span data-stu-id="fd5e2-139">Search and sort lists</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="fd5e2-140">サンプルでは比較的小さいリストを使用していますが、ご利用のアプリケーションでは、より多くの (場合によっては何千もの) 要素が含まれるリストを作成することもよくあるかもしれません。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-140">Our samples use relatively small lists, but your applications may often create lists with many more elements, sometimes numbering in the thousands.</span></span> <span data-ttu-id="fd5e2-141">そうした大規模なコレクションの中から要素を見つけるには、別々の項目をリストで検索する必要があります。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-141">To find elements in these larger collections, you need to search the list for different items.</span></span> <span data-ttu-id="fd5e2-142"><xref:System.Collections.Generic.List%601.IndexOf%2A> メソッドは項目を検索し、その項目のインデックスを返します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-142">The <xref:System.Collections.Generic.List%601.IndexOf%2A> method searches for an item and returns the index of the item.</span></span> <span data-ttu-id="fd5e2-143">それを試して動作を確認してください。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-143">Try it to see how it works.</span></span>  <span data-ttu-id="fd5e2-144">これまでに記述したコードの下に、次のコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-144">Add the following code below what you've written so far:</span></span>


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    <span data-ttu-id="fd5e2-145">リストに項目があるかどうかわからないこともあるため、常に <xref:System.Collections.Generic.List%601.IndexOf%2A> によって返されるインデックスをチェックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-145">You may not know if an item is in the list, so you should always check the index returned by <xref:System.Collections.Generic.List%601.IndexOf%2A>.</span></span> <span data-ttu-id="fd5e2-146">それが -1 だった場合は、項目が見つからなかったことを意味します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-146">If it is -1, the item was not found.</span></span>


    <span data-ttu-id="fd5e2-147">同じように、リスト内の項目を並び替えできます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-147">The items in your list can be sorted as well.</span></span> <span data-ttu-id="fd5e2-148"><xref:System.Collections.Generic.List%601.Sort%2A> メソッドは、リスト内のすべての項目を正規順序 (文字列の場合はアルファベット順) で並び替えます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-148">The <xref:System.Collections.Generic.List%601.Sort%2A> method sorts all the items in the list in their normal order (alphabetically in the case of strings).</span></span> <span data-ttu-id="fd5e2-149">次のコードを追加し、もう一度実行します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-149">Add this code and run again:</span></span>


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    > [!NOTE]

    > <span data-ttu-id="fd5e2-150">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="fd5e2-151">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="fd5e2-152">その他の型のリスト</span><span class="sxs-lookup"><span data-stu-id="fd5e2-152">Lists of other types</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="fd5e2-153">ここまでは、リスト内で `string` 型を使用してきました。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-153">You've been using the `string` type in lists so far.</span></span> <span data-ttu-id="fd5e2-154">別の型を使用して <xref:System.Collections.Generic.List%601> を作成してみましょう。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-154">Let's make a <xref:System.Collections.Generic.List%601> using a different type.</span></span> <span data-ttu-id="fd5e2-155">数値のセットを作成します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-155">Let's build a set of numbers.</span></span> <span data-ttu-id="fd5e2-156">これまでに記述したコードを削除し、次のコードに置き換えます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-156">Delete the code you wrote so far, and replace it with the following code:</span></span>


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    <span data-ttu-id="fd5e2-157">これにより整数のリストが作成され、最初の 2 つの整数が値 1 に設定されます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-157">That creates a list of integers, and sets the first two integers to the value 1.</span></span> <span data-ttu-id="fd5e2-158">"*フィボナッチ数列*" (一連の数値) は、2 つの 1 から始まります。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-158">The *Fibonacci Sequence*, a sequence of numbers, starts with two 1s.</span></span> <span data-ttu-id="fd5e2-159">次のフィボナッチ数はそれぞれ、その直前の 2 つの数値の合計を取得することによって得られます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-159">Each next Fibonacci number is found by taking the sum of the previous two numbers.</span></span> <span data-ttu-id="fd5e2-160">このコードを追加します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-160">Add this code:</span></span>


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    <span data-ttu-id="fd5e2-161">**[実行]** をクリックして結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-161">Press **Run** to see the results;</span></span>


    > [!NOTE]

    > <span data-ttu-id="fd5e2-162">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-162">This online coding experience is in preview mode.</span></span> <span data-ttu-id="fd5e2-163">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-163">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="fd5e2-164">課題</span><span class="sxs-lookup"><span data-stu-id="fd5e2-164">Challenge</span></span>
  durationInMinutes: 10
  content: >
    <span data-ttu-id="fd5e2-165">このレッスンと以前のレッスンの中から、いくつかの概念を理解できているかどうかを確認してみましょう。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-165">See if you can put together some of the concepts from this and earlier lessons.</span></span> <span data-ttu-id="fd5e2-166">ここまでフィボナッチ数を使用して作成してきたコードを使ってください。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-166">Expand on what you've built so far with Fibonacci Numbers.</span></span> <span data-ttu-id="fd5e2-167">シーケンスの最初の 20 個の数を生成するコードを記述してみましょう。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-167">Try and write the code to generate the first 20 numbers in the sequence.</span></span> <span data-ttu-id="fd5e2-168">(ヒント: フィボナッチ数の 20 番目の数は 6765 です。)</span><span class="sxs-lookup"><span data-stu-id="fd5e2-168">(As a hint, the 20th Fibonacci number is 6765.)</span></span>


    > [!NOTE]

    > <span data-ttu-id="fd5e2-169">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="fd5e2-170">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="fd5e2-171">課題完了</span><span class="sxs-lookup"><span data-stu-id="fd5e2-171">Complete challenge</span></span>
  durationInMinutes: 3
  content: >
    <span data-ttu-id="fd5e2-172">コードは次のようになりましたか? </span><span class="sxs-lookup"><span data-stu-id="fd5e2-172">Did you come up with something like this?</span></span>


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    <span data-ttu-id="fd5e2-173">ループの繰り返しごとに、リストの最後の 2 つの整数を取得して合計し、その値をリストに追加しています。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-173">With each iteration of the loop, you're taking the last two integers in the list, summing them, and adding that value to the list.</span></span> <span data-ttu-id="fd5e2-174">このループは、20 個の項目がリストに追加されるまで繰り返されます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-174">The loop repeats until you've added 20 items to the list.</span></span>


    > [!NOTE]

    > <span data-ttu-id="fd5e2-175">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-175">This online coding experience is in preview mode.</span></span> <span data-ttu-id="fd5e2-176">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-176">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="fd5e2-177">これで、対話型チュートリアルは終了です。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-177">You've completed the list interactive tutorial.</span></span> <span data-ttu-id="fd5e2-178">これは、C# の対話型チュートリアルの最後の概要です。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-178">That's the final introduction to C# interactive tutorial.</span></span> <span data-ttu-id="fd5e2-179">[.NET サイト](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial)にアクセスして、.NET Core SDK をダウンロードし、お使いのコンピューター上にプロジェクトを作成し、コーディングを続けることができます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-179">You can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="fd5e2-180">"学習の継続" 手順で、お使いのコンピューター上にプロジェクトを構築するチュートリアルに戻ってきます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-180">The "Keep Learning" step brings you back to these tutorials to build projects on your machine.</span></span>


    <span data-ttu-id="fd5e2-181">[.NET コレクション](../../../standard/collections/index.md)の詳細については、次の記事で学習できます。</span><span class="sxs-lookup"><span data-stu-id="fd5e2-181">You can learn more about [.NET collections](../../../standard/collections/index.md) in the following articles:</span></span>

    - [<span data-ttu-id="fd5e2-182">コレクション型の選択</span><span class="sxs-lookup"><span data-stu-id="fd5e2-182">Selecting a collection type</span></span>](../../../standard/collections/selecting-a-collection-class.md)

    - [<span data-ttu-id="fd5e2-183">一般的に使用されるコレクション型</span><span class="sxs-lookup"><span data-stu-id="fd5e2-183">Commonly used collection types</span></span>](../../../standard/collections/commonly-used-collection-types.md)

    - [<span data-ttu-id="fd5e2-184">ジェネリック コレクションを使用する状況</span><span class="sxs-lookup"><span data-stu-id="fd5e2-184">When to use generic collections</span></span>](../../../standard/collections/when-to-use-generic-collections.md)
