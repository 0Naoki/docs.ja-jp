### YamlMime:Tutorial
title: <span data-ttu-id="83ecf-101">文字列補間を使用し、書式設定された文字列を作成する</span><span class="sxs-lookup"><span data-stu-id="83ecf-101">Use string interpolation to construct formatted strings</span></span>
metadata:
  title: 文字列補間 - C# の対話形式チュートリアル
  description: このチュートリアルでは、ブラウザーを使用して、対話形式で C# の文字列補間機能の詳細を確認します。 C# コードを記述し、ブラウザーで直接コードをコンパイルして、実行した結果を確認します。
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="83ecf-105">C# のコレクション</span><span class="sxs-lookup"><span data-stu-id="83ecf-105">Collections in C#</span></span>
  ms.openlocfilehash: c5d9ba80df952a58740ac2557bfc0011ef2ea539
  ms.sourcegitcommit: 3b9b7ae6771712337d40374d2fef6b25b0d53df6
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 01/04/2019
  ms.locfileid: "54030413"
items:
- durationInMinutes: 2
  content: >
    <span data-ttu-id="83ecf-106">このチュートリアルでは、[文字列補間](../../language-reference/tokens/interpolated.md)を使用して、単一の文字列に値を挿入する方法を説明します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-106">This tutorial teaches you how to use [string interpolation](../../language-reference/tokens/interpolated.md) to insert values into a single string.</span></span> <span data-ttu-id="83ecf-107">結果文字列のテキスト書式設定を制御する方法も紹介します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-107">You also learn how to control text formatting of the result string.</span></span> <span data-ttu-id="83ecf-108">ブラウザーを使用して C# コードを記述して実行し、結果をすぐに確認できます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-108">You use your browser to write and run C# code and can immediately see the results.</span></span>
- title: <span data-ttu-id="83ecf-109">挿入文字列を作成する</span><span class="sxs-lookup"><span data-stu-id="83ecf-109">Create an interpolated string</span></span>
  durationInMinutes: 2
  content: >
    <span data-ttu-id="83ecf-110">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="83ecf-111">そのためには、対話型ウィンドウでこのコードを入力し ("`<name>`" を自分の名前に置き換えて)、**[実行]** を選択します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-111">To do that, type the code in the interactive window (replace `<name>` with your name) and select **Run**:</span></span>


    ```csharp

    var name = "<name>";

    Console.WriteLine($"Hello, {name}. It's a pleasure to meet you!");

    ```


    <span data-ttu-id="83ecf-112">コードを実行すると、**出力**にはあいさつ文に自分の名前を含む文字列が表示されます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-112">When you run the code, **Output** displays a string that includes your name in the greeting.</span></span> <span data-ttu-id="83ecf-113"><xref:System.Console.WriteLine%2A> メソッド呼び出しの文字列引数は、*挿入文字列*です。</span><span class="sxs-lookup"><span data-stu-id="83ecf-113">The string argument of the <xref:System.Console.WriteLine%2A> method call is an *interpolated string*.</span></span> <span data-ttu-id="83ecf-114">これは、埋め込みコードを含む文字列から (*結果文字列*という) 単一の文字列を構築できる一種のテンプレートです。</span><span class="sxs-lookup"><span data-stu-id="83ecf-114">It's a kind of template that lets you construct a single string (called the *result string*) from a string that includes embedded code.</span></span> <span data-ttu-id="83ecf-115">挿入文字列は、文字列に値を挿入したり、いくつかの文字列を (結合) 連結したりする場合に特に便利です。</span><span class="sxs-lookup"><span data-stu-id="83ecf-115">Interpolated strings are particularly useful for inserting values into a string or concatenating (joining together) several strings.</span></span>


    <span data-ttu-id="83ecf-116">上記の例には、すべての挿入文字列に含める必要がある次の 2 つの要素が含まれています。</span><span class="sxs-lookup"><span data-stu-id="83ecf-116">The example above contains the two elements that every interpolated string must have:</span></span>


    - <span data-ttu-id="83ecf-117">始まりの引用符文字の前の `$` で始まる文字列リテラル。</span><span class="sxs-lookup"><span data-stu-id="83ecf-117">A string literal that begins with the `$` character before its opening quotation mark character.</span></span> <span data-ttu-id="83ecf-118">`$` シンボルと引用符文字の間にスペースを挿入することはできません </span><span class="sxs-lookup"><span data-stu-id="83ecf-118">There can't be any spaces between the `$` symbol and the quotation mark character.</span></span> <span data-ttu-id="83ecf-119">(スペースが含まれている場合の動作を確認したい場合は、対話型ウィンドウで `$` 文字の後にスペースを挿入し、更新されたコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-119">(If you'd like to see what happens if you include one, insert a space after the `$` character in the interactive window and run the updated code.</span></span> <span data-ttu-id="83ecf-120">C# コンパイラには "予期しない '$' 文字です" と示されます)。</span><span class="sxs-lookup"><span data-stu-id="83ecf-120">The C# compiler complains, "Unexpected character '$'".)</span></span>


    - <span data-ttu-id="83ecf-121">1 つ以上の*挿入式*。</span><span class="sxs-lookup"><span data-stu-id="83ecf-121">One or more *interpolated expressions*.</span></span> <span data-ttu-id="83ecf-122">挿入式は、始めかっこと終わりかっこ (`{` と `}`) で示されます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-122">An interpolated expression is indicated by an opening and closing brace (`{` and `}`).</span></span> <span data-ttu-id="83ecf-123">かっこ内に (`null` を含む) 値を返す C# 式を配置できます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-123">You can put any C# expression that returns a value (including `null`) inside the braces.</span></span>


    <span data-ttu-id="83ecf-124">その他のいくつかのデータ型を持つ文字列補間の例をさらにいくつか試してみましょう。</span><span class="sxs-lookup"><span data-stu-id="83ecf-124">Let's try a few more string interpolation examples with some other data types.</span></span>


    > [!NOTE]

    > <span data-ttu-id="83ecf-125">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="83ecf-125">This online coding experience is in preview mode.</span></span> <span data-ttu-id="83ecf-126">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="83ecf-126">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="83ecf-127">さまざまなデータ型を含める</span><span class="sxs-lookup"><span data-stu-id="83ecf-127">Include different data types</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="83ecf-128">前の手順では、文字列補間を使用して、1 つの文字列内に別の文字列を挿入しましたが、</span><span class="sxs-lookup"><span data-stu-id="83ecf-128">In the previous step, you used string interpolation to insert one string inside of another.</span></span> <span data-ttu-id="83ecf-129">挿入式の結果を任意のデータ型にすることもできます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-129">The result of an interpolated expression can be of any data type, though.</span></span> <span data-ttu-id="83ecf-130">挿入文字列にさまざまなデータ型の値を含めてみましょう。</span><span class="sxs-lookup"><span data-stu-id="83ecf-130">Let's include values of various data types in an interpolated string.</span></span>


    <span data-ttu-id="83ecf-131">次の例では、最初に、`Name` [プロパティ](../../properties.md)と `ToString` [メソッド](../../methods.md)を持つ[クラス](../../programming-guide/classes-and-structs/classes.md) データ型 `Vegetable` を定義します。このメソッドは、<xref:System.Object.ToString?displayProperty=nameWithType> メソッドの動作を[オーバーライド](../../language-reference/keywords/override.md)します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-131">In the following example, we first define a [class](../../programming-guide/classes-and-structs/classes.md) data type `Vegetable` that has a `Name` [property](../../properties.md) and a `ToString` [method](../../methods.md), which [overrides](../../language-reference/keywords/override.md) the behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="83ecf-132">[`public` アクセス修飾子](../../language-reference/keywords/public.md)により、そのメソッドは、すべてのクライアント コードで `Vegetable` インスタンスの文字列表現を取得するために使用できるようになります。</span><span class="sxs-lookup"><span data-stu-id="83ecf-132">The [`public` access modifier](../../language-reference/keywords/public.md) makes that method available to any client code to get the string representation of a `Vegetable` instance.</span></span> <span data-ttu-id="83ecf-133">この例の `Vegetable.ToString` メソッドは、`Vegetable` [コンストラクター](../../programming-guide/classes-and-structs/constructors.md)で初期化される `Name` プロパティの値を返します。`Vegetable(string name) => Name = name;`</span><span class="sxs-lookup"><span data-stu-id="83ecf-133">In the example the `Vegetable.ToString` method returns the value of the `Name` property that is initialized at the `Vegetable` [constructor](../../programming-guide/classes-and-structs/constructors.md): `Vegetable(string name) => Name = name;`.</span></span> <span data-ttu-id="83ecf-134">次に、[`new` キーワード](../../language-reference/keywords/new-operator.md)を使用し、コンストラクター `Vegetable` に名前を指定することで `item` という名前の `Vegetable` クラスのインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-134">Then we create an instance of the `Vegetable` class named `item` by using the [`new` keyword](../../language-reference/keywords/new-operator.md) and providing a name for the constructor `Vegetable`.</span></span> <span data-ttu-id="83ecf-135">最後に、インスタンスを挿入文字列に含めます。ここには、<xref:System.DateTime> 値、<xref:System.Decimal> 値、`Unit` [列挙](../../programming-guide/enumeration-types.md)値も含まれます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-135">Finally, we include that instance into an interpolated string that also contains a <xref:System.DateTime> value, a <xref:System.Decimal> value, and a `Unit` [enumeration](../../programming-guide/enumeration-types.md) value.</span></span> <span data-ttu-id="83ecf-136">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-136">Run the following code in the interactive window:</span></span>


    ```csharp

    public class Vegetable

    {
       public Vegetable(string name) => Name = name;

       public string Name { get; }

       public override string ToString() => Name;
    }


    public enum Unit { item, kilogram, gram, dozen };


    var item = new Vegetable("eggplant");

    var date = DateTime.Now;

    var price = 1.99m;

    var unit = Unit.item;

    Console.WriteLine($"On {date}, the price of {item} was {price} per {unit}.");

    ```


    <span data-ttu-id="83ecf-137">挿入文字列の挿入式 `item` は、結果の文字列のテキスト "eggplant" に解決されることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="83ecf-137">Note that the interpolated expression `item` in the interpolated string resolves to the text "eggplant" in the result string.</span></span> <span data-ttu-id="83ecf-138">これは、式の結果の型が文字列でない場合に、結果が次の方法で文字列に解決されるためです。</span><span class="sxs-lookup"><span data-stu-id="83ecf-138">That's because, when the type of the expression result is not a string, the result is resolved to a string in the following way:</span></span>


    - <span data-ttu-id="83ecf-139">挿入式が `null` の場合、空の文字列 (""、または <xref:System.String.Empty?displayProperty=nameWithType>) が使用されます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-139">If the interpolated expression evaluates to `null`, an empty string ("", or <xref:System.String.Empty?displayProperty=nameWithType>) is used.</span></span>


    - <span data-ttu-id="83ecf-140">挿入式が `null` でない場合、通常、結果の型の `ToString` メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-140">If the interpolated expression doesn't evaluate to `null`, typically the `ToString` method of the result type is called.</span></span> <span data-ttu-id="83ecf-141">`Vegetable.ToString` メソッドの実装を更新して、これをテストすることができます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-141">You can test this by updating the implementation of the `Vegetable.ToString` method.</span></span> <span data-ttu-id="83ecf-142">すべての型にこのメソッドの実装が含まれるため、`ToString` メソッドを実装する必要なない場合があります。</span><span class="sxs-lookup"><span data-stu-id="83ecf-142">You might not even need to implement the `ToString` method since every type has some implementation of this method.</span></span> <span data-ttu-id="83ecf-143">これをテストするには、例の `Vegetable.ToString` メソッドの定義をコメント アウトします (この操作を行うには、コメント シンボル `//` を前に配置します)。</span><span class="sxs-lookup"><span data-stu-id="83ecf-143">To test this, comment out the definition of the `Vegetable.ToString` method in the example (to do that, put a comment symbol, `//`, in front of it).</span></span> <span data-ttu-id="83ecf-144">出力では、"eggplant" という文字列が完全修飾型名 (型名と共に C# REPL によって定義される名前空間) に置き換えられます。これは、<xref:System.Object.ToString?displayProperty=nameWithType> メソッドの既定の動作です。</span><span class="sxs-lookup"><span data-stu-id="83ecf-144">In the output, the string "eggplant" is replaced by the fully qualified type name (the namespace defined by the C# REPL along with the type name), which is the default behavior of the <xref:System.Object.ToString?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="83ecf-145">列挙値の `ToString` メソッドの既定の動作は、値の文字列表現を返すことです。</span><span class="sxs-lookup"><span data-stu-id="83ecf-145">The default behavior of the `ToString` method for an enumeration value is to return the string representation of the value.</span></span>


    <span data-ttu-id="83ecf-146">この例の出力では、日付の精度が高すぎ ("eggplant" の価格は毎秒変更されることはありません)、価格の値は通貨の単位を示していません。</span><span class="sxs-lookup"><span data-stu-id="83ecf-146">In the output from this example, the date is too precise (the price of eggplant doesn't change every second), and the price value doesn't indicate a unit of currency.</span></span> <span data-ttu-id="83ecf-147">次の手順では、式の結果における文字列表現の書式を制御することで、こうした問題を修正する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-147">In the next step, you'll learn how to fix those issues by controlling the format of string representations of the expression results.</span></span>


    > [!NOTE]

    > <span data-ttu-id="83ecf-148">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="83ecf-148">This online coding experience is in preview mode.</span></span> <span data-ttu-id="83ecf-149">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="83ecf-149">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="83ecf-150">挿入式の書式設定を制御する</span><span class="sxs-lookup"><span data-stu-id="83ecf-150">Control the formatting of interpolated expressions</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="83ecf-151">前の手順では、適切に書式設定されていない 2 つの文字列が結果文字列に挿入されました。</span><span class="sxs-lookup"><span data-stu-id="83ecf-151">In the previous step, two poorly formatted strings were inserted into the result string.</span></span> <span data-ttu-id="83ecf-152">1 つは、日付のみが適切な日時の値でした。</span><span class="sxs-lookup"><span data-stu-id="83ecf-152">One was a date and time value for which only the date was appropriate.</span></span> <span data-ttu-id="83ecf-153">もう 1 つは、通貨単位を示さない価格でした。</span><span class="sxs-lookup"><span data-stu-id="83ecf-153">The second was a price that didn't indicate its unit of currency.</span></span> <span data-ttu-id="83ecf-154">両方の問題には簡単に対処することができます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-154">Both issues are easy to address.</span></span> <span data-ttu-id="83ecf-155">文字列補間では、特定の型の書式設定を制御する*書式指定文字列*を指定することができます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-155">String interpolation lets you specify *format strings* that control the formatting of particular types.</span></span> <span data-ttu-id="83ecf-156">前の例の `Console.WriteLine` 呼び出しを変更し、次の行に示すように、日付と価格の式の書式指定文字列を含めます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-156">Modify the call to `Console.WriteLine` from the previous example to include the format strings for the date and price expressions as shown in the following line:</span></span>


    ```csharp

    Console.WriteLine($"On {date:d}, the price of {item} was {price:C2} per {unit}.");

    ```


    <span data-ttu-id="83ecf-157">コロン (":") と書式指定文字列を持つ挿入式に従って、書式指定文字列を指定します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-157">You specify a format string by following the interpolated expression with a colon (":") and the format string.</span></span> <span data-ttu-id="83ecf-158">"d" は、短い日付形式を表す[標準の日時書式設定文字列](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier)です。</span><span class="sxs-lookup"><span data-stu-id="83ecf-158">"d" is a [standard date and time format string](../../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier) that represents the short date format.</span></span> <span data-ttu-id="83ecf-159">"C2" は、小数点以下が 2 桁の通貨値として数値を表す[標準の数値書式指定文字列](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier)です。</span><span class="sxs-lookup"><span data-stu-id="83ecf-159">"C2" is a [standard numeric format string](../../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier) that represents a number as a currency value with two digits after the decimal point.</span></span>


    <span data-ttu-id="83ecf-160">.NET ライブラリの多くの型で、定義済みの書式指定文字列セットがサポートされています。</span><span class="sxs-lookup"><span data-stu-id="83ecf-160">A number of types in the .NET libraries support a predefined set of format strings.</span></span> <span data-ttu-id="83ecf-161">これらには、数値型と日時型がすべて含まれます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-161">These include all the numeric types and the date and time types.</span></span> <span data-ttu-id="83ecf-162">書式指定文字列をサポートする型の完全なリストについては、「[.Net 型の書式設定](../../../standard/base-types/formatting-types.md)」記事の「[.NET クラス ライブラリの型および書式指定文字列](../../../standard/base-types/formatting-types.md#stringRef)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="83ecf-162">For a complete list of types that support format strings, see [Format Strings and .NET Class Library Types](../../../standard/base-types/formatting-types.md#stringRef) in the [Formatting Types in .NET](../../../standard/base-types/formatting-types.md) article.</span></span>


    <span data-ttu-id="83ecf-163">この例で書式指定文字列を変更してみて、日時と数値の書式設定にどのように影響するかを確認します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-163">Try modifying the format strings in the example to see how they affect the formatting of the date and time and the numeric value.</span></span> <span data-ttu-id="83ecf-164">`{date:d}` の "d" を "t" (短い時刻形式を表示する)、"y" (年と月を表示する)、"yyyy" (4 桁の数字として年を表示する) に変更します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-164">Change the "d" in `{date:d}` to "t" (to display the short time format), "y" (to display the year and month), and "yyyy" (to display the year as a four-digit number).</span></span> <span data-ttu-id="83ecf-165">`{price:C2}` "C2" を "e" (指数表記の場合) と "F3" (小数点以下が 3 桁の数値の場合) に変更します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-165">Change the "C2" in `{price:C2}` to "e" (for exponential notation) and "F3" (for a numeric value with three digits after the decimal point).</span></span>


    <span data-ttu-id="83ecf-166">書式設定を制御するだけでなく、結果の文字列に含まれる書式指定された文字列のフィールドの幅と配置を制御することもできます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-166">In addition to controlling formatting, you can also control the field width and alignment of the formatted strings that are included in the result string.</span></span> <span data-ttu-id="83ecf-167">次の手順では、この方法を説明します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-167">In the next step, you'll learn how to do this.</span></span>


    > [!NOTE]

    > <span data-ttu-id="83ecf-168">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="83ecf-168">This online coding experience is in preview mode.</span></span> <span data-ttu-id="83ecf-169">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="83ecf-169">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="83ecf-170">挿入式のフィールドの幅と配置を制御する</span><span class="sxs-lookup"><span data-stu-id="83ecf-170">Control the field width and alignment of interpolated expressions</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="83ecf-171">通常、挿入式の結果が文字列に書式設定される場合、文字列は先頭スペースおよび末尾スペースなしで結果文字列に含まれます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-171">Ordinarily, when the result of an interpolated expression is formatted to string, that string is included in a result string without leading or trailing spaces.</span></span> <span data-ttu-id="83ecf-172">通常、データのセットを操作する場合、フィールドの幅とテキストの配置を制御できることで、読みやすい出力を生成できます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-172">Particularly when you work with a set of data, being able to control a field width and text alignment helps to produce a more readable output.</span></span> <span data-ttu-id="83ecf-173">そのためには、次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-173">To see this, run the following code:</span></span>


    ```csharp
      var inventory = new Dictionary<string, int>()
      {
          ["hammer, ball pein"] = 18,
          ["hammer, cross pein"] = 5,
          ["screwdriver, Phillips #2"] = 14
      };

      Console.WriteLine($"Inventory on {DateTime.Now:d}");
      Console.WriteLine(" ");
      Console.WriteLine($"|{"Item",-25}|{"Quantity",10}|");
      foreach (var item in inventory)
         Console.WriteLine($"|{item.Key,-25}|{item.Value,10}|");
    ```


    <span data-ttu-id="83ecf-174">項目名は左揃えになり、その数量は右揃えになります。</span><span class="sxs-lookup"><span data-stu-id="83ecf-174">The item names are left-aligned, and their quantities are right-aligned.</span></span> <span data-ttu-id="83ecf-175">挿入式の後にコンマ (",") を追加し、*最小*のフィールド幅を指定して、配置を指定します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-175">You specify the alignment by adding a comma (",") after an interpolated expression and designating the *minimum* field width.</span></span> <span data-ttu-id="83ecf-176">指定された値が正数の場合、フィールドは右揃えになります。</span><span class="sxs-lookup"><span data-stu-id="83ecf-176">If the specified value is a positive number, the field is right-aligned.</span></span> <span data-ttu-id="83ecf-177">負数の場合、フィールドは左揃えになります。</span><span class="sxs-lookup"><span data-stu-id="83ecf-177">If it is a negative number, the field is left-aligned.</span></span>


    <span data-ttu-id="83ecf-178">`{"Item",-25}` と `{item.Key,-25}` のコードから負号を削除してみて、もう一度例を実行します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-178">Try removing the negative signs from the `{"Item",-25}` and `{item.Key,-25}` code and run the example again.</span></span> <span data-ttu-id="83ecf-179">この場合、項目名は右揃えになります。</span><span class="sxs-lookup"><span data-stu-id="83ecf-179">This time, the item names are right-aligned.</span></span>


    <span data-ttu-id="83ecf-180">単一の挿入式にアラインメント指定子と書式指定文字列を組み合わせることができます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-180">You can combine an alignment specifier and a format string for a single interpolated expression.</span></span> <span data-ttu-id="83ecf-181">この操作を行うには、最初に配置を指定して、その後にコロンと書式指定文字列を続けます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-181">To do that, specify the alignment first, followed by a colon and the format string.</span></span> <span data-ttu-id="83ecf-182">フィールド幅が定義された 3 つの書式指定された文字列を表示する、次のコードを試します。</span><span class="sxs-lookup"><span data-stu-id="83ecf-182">Try the following code that displays three formatted strings with defined field widths:</span></span>


    ```csharp

    Console.WriteLine($"[{DateTime.Now,-20:d}] Hour [{DateTime.Now,-10:HH}] [{1063.342,15:N2}] feet");

    ```


    > [!NOTE]

    > <span data-ttu-id="83ecf-183">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="83ecf-183">This online coding experience is in preview mode.</span></span> <span data-ttu-id="83ecf-184">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="83ecf-184">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="83ecf-185">文字列補間の対話式チュートリアルはこれで終了です。</span><span class="sxs-lookup"><span data-stu-id="83ecf-185">You've completed the string interpolation interactive tutorial.</span></span> <span data-ttu-id="83ecf-186">下の **C# のコレクション**のリンクをクリックして、次の対話式チュートリアルを開始することができます。また、[.NET サイト](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial)にアクセスして .NET Core SDK をダウンロードし、ご利用のコンピューター上でプロジェクトを作成し、コーディングを続けることもできます。</span><span class="sxs-lookup"><span data-stu-id="83ecf-186">You can click the **Collections in C#** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="83ecf-187">"学習の継続" の手順では、これらのチュートリアルに戻ります。</span><span class="sxs-lookup"><span data-stu-id="83ecf-187">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="83ecf-188">詳細については、[文字列補間](../../language-reference/tokens/interpolated.md)に関するトピックを参照してください。</span><span class="sxs-lookup"><span data-stu-id="83ecf-188">For more information, see [String interpolation](../../language-reference/tokens/interpolated.md).</span></span>
