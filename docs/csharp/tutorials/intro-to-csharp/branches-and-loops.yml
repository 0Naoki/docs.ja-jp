### YamlMime:Tutorial
title: <span data-ttu-id="bb8ba-101">分岐およびループ ステートメントを使用した条件付きロジックについて説明します</span><span class="sxs-lookup"><span data-stu-id="bb8ba-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: 分岐とループ - C# の概要に関する対話型チュートリアル
  description: このチュートリアルでは、ブラウザーを使用して C# の分岐とループについて対話形式で学習できます。 ブラウザーに直接 C# コードを記述し、コンパイルして実行結果を確認します。
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="bb8ba-105">リスト コレクション</span><span class="sxs-lookup"><span data-stu-id="bb8ba-105">The list collection</span></span>
  ms.openlocfilehash: 62cc52e22406c6c19dad6cc800078e0d8f34f0d6
  ms.sourcegitcommit: 0be8a279af6d8a43e03141e349d3efd5d35f8767
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 04/18/2019
  ms.locfileid: "59427527"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="bb8ba-106">このチュートリアルでは、変数を調べ、その変数に基づいて実行パスを変更するコードを記述する方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="bb8ba-107">ブラウザーを使用して対話形式で C# を記述し、コードのコンパイルおよび実行の結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="bb8ba-108">このチュートリアルには、C# における分岐構造とループ構造を確認する一連のレッスンが含まれています。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="bb8ba-109">これらのレッスンでは、C# 言語の基本を説明します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="bb8ba-110">if ステートメントを使用した条件判断</span><span class="sxs-lookup"><span data-stu-id="bb8ba-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="bb8ba-111">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="bb8ba-112">そのためには、対話型ウィンドウで次のコード ブロックを入力し、**[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="bb8ba-113">合計が 10 未満になるように `b` の宣言を変更します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="bb8ba-114">もう一度 **[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-114">Click the **Run** button again.</span></span> <span data-ttu-id="bb8ba-115">計算結果が 10 未満であるため、何も出力されません。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="bb8ba-116">判定中の**条件**が false になっています。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="bb8ba-117">`if` ステートメントの考えられる分岐の 1 つである true 分岐のみを記述したため、実行すべきコードがありません。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="bb8ba-118">C# (または何らかのプログラミング言語) について詳しく学習するに従い、コードを記述する際にミスをすることもあるでしょう。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="bb8ba-119">**コンパイラ**は、そうしたエラーを発見して報告します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="bb8ba-120">エラー メッセージが出力された場合は、例のコードをよく確認して、対話型ウィンドウで修正すべきコードを見つけます。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="bb8ba-121">こうした実習が C# コードの構造を理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="bb8ba-122">この最初のサンプルは、`if` とブール型の機能を示しています。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="bb8ba-123">*ブール値*は、`true` または `false` という 2 つの値のいずれかを持つことができる変数です。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="bb8ba-124">C# ではブール変数の `bool` という特殊な型を定義しています。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="bb8ba-125">`if` ステートメントは、`bool` の値を確認します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="bb8ba-126">値が `true` の場合、`if` に続くステートメントを実行します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="bb8ba-127">それ以外の場合はスキップします。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="bb8ba-128">条件を確認してその条件に基づいてステートメントを実行するというこのプロセスは非常に機能的です。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="bb8ba-129">さらに詳しく見てみましょう。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="bb8ba-130">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bb8ba-131">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bb8ba-132">if と else を組み合わせた使用</span><span class="sxs-lookup"><span data-stu-id="bb8ba-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"bb8ba-133\">true 分岐と false 分岐で別々のコードを実行するには、条件が false のときに実行する `else` 分岐を作成します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"bb8ba-134\">これを試してみます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"bb8ba-135\">`else` キーワードに続くステートメントは、判定中の条件が `false` のときにのみ実行されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"bb8ba-136\">`if` と `else` をブール条件と組み合わせれば、必要な機能がすべて整います。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"bb8ba-137\">`if` と `else` のステートメント内にあるインデントは、人が読みやすいようにするためのものです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"bb8ba-138\">C# 言語はインデントや空白文字を重要なものとして扱いません。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"bb8ba-139\">`if` や `else` のキーワードに続くステートメントは、条件に基づいて実行されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"bb8ba-140\">このチュートリアルのすべてのサンプルでは、一般的な記述方法に従い、ステートメントの制御フローに基づいて行にインデントを挿入しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"bb8ba-141\">インデントは重要ではないため、条件に基づいて実行するブロック内に 1 つ以上のステートメントがある場合には、`{` と `}` を使用して示します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"bb8ba-142\">通常、C# プログラマーは `if` と `else` の句にはこの中かっこを使用します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"bb8ba-143\">次の例は、さきほど作成したものと同じ内容です。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"bb8ba-144\">試してみてください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"bb8ba-145\">このチュートリアルの残りの箇所では、一般に認められている記述方法に従って、すべてのコード サンプルで中かっこを使用しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"bb8ba-146\">さらに複雑な条件を判定できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"bb8ba-147\">`==` シンボルは、\"*同等性*\" をテストします。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"bb8ba-148\">`==` を使用すると、同等性のテストが `a = 5` で確認した割り当てと区別されます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"bb8ba-149\">`&&` は \"and\" (および) を表します。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"bb8ba-150\">これは、true 分岐でステートメントを実行するには、両方の条件が true になる必要があることを意味しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"bb8ba-151\">また、これらの例では、ステートメントが `{` と `}` で囲まれていれば、各条件分岐に複数のステートメントを持つことができることを示しています。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"bb8ba-152\">\"or\" (または) を表すために `||` を使用することもできます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"bb8ba-153\">`a`、`b`、および `c`の値を変更し、探索する `&&` と `||` を切り替えます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"bb8ba-154\">`&&` 演算子と `||` 演算子がどのように機能するかをより深く理解できます。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"bb8ba-155\">このオンライン コーディング体験はプレビュー モードです。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"bb8ba-156\">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class=\"sxs-lookup\"><span data-stu-id=\"bb8ba-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="bb8ba-157">ループを使用した処理の繰り返し</span><span class="sxs-lookup"><span data-stu-id="bb8ba-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="bb8ba-158">大規模なプログラムを作成する上でもう 1 つ重要な概念は、**ループ**です。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="bb8ba-159">複数回実行したいステートメントは、ループを使用して繰り返します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="bb8ba-160">対話型ウィンドウで次のコードを試します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="bb8ba-161">`while` ステートメントは、条件を確認して `while` に続くステートメントを実行します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="bb8ba-162">条件が false になるまで、条件の確認とステートメントの実行を繰り返します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="bb8ba-163">この例では、もう 1 つ新しい演算子が使用されています。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-163">There's one other new operator in this example.</span></span> <span data-ttu-id="bb8ba-164">`counter` 変数のあとにある `++` は、**インクリメント**演算子です。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="bb8ba-165">counter の値に 1 を追加し、その値を counter 変数に格納します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="bb8ba-166">コードを実行したときに `while` のループ条件が false に切り替わることを確認してください。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="bb8ba-167">それ以外の場合は、プログラムが終了することのない**無限ループ**を作成します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="bb8ba-168">これについては実演しません。コードを実行するエンジンがタイムアウトしてプログラムから何も出力されないからです。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="bb8ba-169">`while` ループは、条件を判定してから `while` に続くコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="bb8ba-170">`do` ... `while` ループは、最初にコードを実行してからその条件を確認します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="bb8ba-171">次のようになります。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="bb8ba-172">この `do` ループと先述の `while` ループは同じ機能を持っています。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="bb8ba-173">では、最後のループ ステートメントの確認に移りましょう。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="bb8ba-174">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bb8ba-175">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bb8ba-176">for ループの処理</span><span class="sxs-lookup"><span data-stu-id="bb8ba-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="bb8ba-177">C# コードでよく目にするもう 1 つのループ ステートメントは、`for` ループです。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="bb8ba-178">対話型ウィンドウで次のコードを試します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="bb8ba-179">このループは、既に使用した `while` ループや `do` ループと同じ機能を持っています。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="bb8ba-180">`for` ステートメントは 3 つの部分に分かれてその機能を制御します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="bb8ba-181">最初の部分は、**for 初期化子**です。`int counter = 0;` は、`counter` がループ変数であることを宣言し、その初期値を `0` に設定しています。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="bb8ba-182">2 つ目の部分は、**for 条件**です。`counter < 10` は、counter の値が 10 未満である間は `for` ループが実行され続けることを宣言しています。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="bb8ba-183">最後の部分は、**for 反復子**です。`counter++` は、`for` ステートメントに続くブロックを実行したあとにループ変数を変更する方法を指定しています。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="bb8ba-184">ここでは、ブロックが実行されるごとに `counter` が 1 ずつ増加するよう指定しています。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="bb8ba-185">ご自身でこれを実行してみてください。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-185">Experiment with these yourself.</span></span> <span data-ttu-id="bb8ba-186">以下をそれぞれ試してみます。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-186">Try each of the following:</span></span>


    - <span data-ttu-id="bb8ba-187">初期化子を変更して別の値で開始する。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="bb8ba-188">条件を変更して別の値で停止する。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="bb8ba-189">完了したら次に進み、学習したことを使用して自分でいくつかのコードを記述してみましょう。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="bb8ba-190">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bb8ba-191">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bb8ba-192">分岐とループの組み合わせ</span><span class="sxs-lookup"><span data-stu-id="bb8ba-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="bb8ba-193">C# 言語における `if` ステートメントとループ構造を見てきました。では、1 から 20 の整数のうち 3 で割り切れる数の合計を求める C# コードを記述できるか確認してみましょう。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="bb8ba-194">次にいくつかヒントを示します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-194">Here are a few hints:</span></span>


    - <span data-ttu-id="bb8ba-195">`%` 演算子は、除算演算の剰余を算出します。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="bb8ba-196">`if` ステートメントは、数を合計に入れるべきかどうか確認する条件を作ります。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="bb8ba-197">`for` ループは、1 から 20 までのすべての数を 1 つずつ確認する一連の手順を繰り返すのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="bb8ba-198">ご自身で試してみてください。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-198">Try it yourself.</span></span> <span data-ttu-id="bb8ba-199">そして自分がとった方法を確認してください。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-199">Then check how you did.</span></span> <span data-ttu-id="bb8ba-200">ヒントを出します。答えは 63 になるはずです。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="bb8ba-201">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bb8ba-202">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bb8ba-203">課題完了</span><span class="sxs-lookup"><span data-stu-id="bb8ba-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="bb8ba-204">コードは次のようになりましたか?</span><span class="sxs-lookup"><span data-stu-id="bb8ba-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="bb8ba-205">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="bb8ba-206">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="bb8ba-207">おめでとうございます! </span><span class="sxs-lookup"><span data-stu-id="bb8ba-207">Congratulations!</span></span>
  content: >-
    <span data-ttu-id="bb8ba-208">これで "分岐とループ" に関する対話式チュートリアルは終了です。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="bb8ba-209">下の**挿入文字列**のリンクをクリックして次の対話式チュートリアルを開始することができます。また、[.NET サイト](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial)にアクセスして .NET Core SDK をダウンロードし、ご利用のコンピューター上でプロジェクトを作成し、コーディングを続けることもできます。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-209">You can click the **Interpolated strings** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="bb8ba-210">"学習の継続" の手順では、これらのチュートリアルに戻ります。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-210">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="bb8ba-211">次のトピックでこれらの概念の詳細を学習できます。</span><span class="sxs-lookup"><span data-stu-id="bb8ba-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="bb8ba-212">if と else ステートメント</span><span class="sxs-lookup"><span data-stu-id="bb8ba-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="bb8ba-213">while ステートメント</span><span class="sxs-lookup"><span data-stu-id="bb8ba-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="bb8ba-214">do ステートメント</span><span class="sxs-lookup"><span data-stu-id="bb8ba-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="bb8ba-215">for ステートメント</span><span class="sxs-lookup"><span data-stu-id="bb8ba-215">For statement</span></span>](../../language-reference/keywords/for.md)
