### YamlMime:Tutorial
title: <span data-ttu-id="4db63-101">C# で整数と浮動小数点数を操作する</span><span class="sxs-lookup"><span data-stu-id="4db63-101">Manipulate integral and floating point numbers in C#</span></span>
metadata:
  title: C# における数値 - C# の概要に関する対話型チュートリアル
  description: 数値型に関するこのチュートリアルでは、ブラウザーを使用して、対話形式で C# を学習します。 C# コードを記述し、ブラウザーで直接コードをコンパイルして実行した結果を確認します。
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: <span data-ttu-id="4db63-105">C# の分岐とループ</span><span class="sxs-lookup"><span data-stu-id="4db63-105">Branches and loops in C#</span></span>
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: af06d938f86841620784909b16e72d000452fc2a
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850674"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="4db63-106">このチュートリアルでは C# の数値型について対話形式で学習できます。ブラウザーを使用して C# を記述し、コードをコンパイルして実行した結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="4db63-106">This tutorial teaches you about the numeric types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="4db63-107">このチュートリアルには、C# の数値と算術演算に関する一連のレッスンが含まれています。</span><span class="sxs-lookup"><span data-stu-id="4db63-107">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="4db63-108">これらのレッスンでは、C# 言語の基本を説明します。</span><span class="sxs-lookup"><span data-stu-id="4db63-108">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="4db63-109">整数の演算の確認</span><span class="sxs-lookup"><span data-stu-id="4db63-109">Explore integer math</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="4db63-110">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="4db63-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="4db63-111">そのためには、対話型ウィンドウで次のコード ブロックを入力し、**[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="4db63-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    <span data-ttu-id="4db63-112">整数を使用した基本的な算術演算の 1 つを確認しました。</span><span class="sxs-lookup"><span data-stu-id="4db63-112">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="4db63-113">`int` 型は、**整数**を表します (正の整数、または負の整数)。</span><span class="sxs-lookup"><span data-stu-id="4db63-113">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="4db63-114">加算には `+` 記号を使用します。</span><span class="sxs-lookup"><span data-stu-id="4db63-114">You use the `+` symbol for addition.</span></span> <span data-ttu-id="4db63-115">他の一般的な整数の算術演算には次のものがあります。</span><span class="sxs-lookup"><span data-stu-id="4db63-115">Other common mathematical operations for integers include:</span></span>


    - <span data-ttu-id="4db63-116">`-`: 減算</span><span class="sxs-lookup"><span data-stu-id="4db63-116">`-` for subtraction</span></span>

    - <span data-ttu-id="4db63-117">`*`: 乗算</span><span class="sxs-lookup"><span data-stu-id="4db63-117">`*` for multiplication</span></span>

    - <span data-ttu-id="4db63-118">`/`: 除算</span><span class="sxs-lookup"><span data-stu-id="4db63-118">`/` for division</span></span>


    > [!TIP]

    > <span data-ttu-id="4db63-119">この対話型チュートリアルでは、対話型ウィンドウで作成したコードを変更して、自分で確認できます。</span><span class="sxs-lookup"><span data-stu-id="4db63-119">Throughout this interactive tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="4db63-120">このチュートリアルでは、各ステップで実際に試すことができる例を用意しています。</span><span class="sxs-lookup"><span data-stu-id="4db63-120">This tutorial provides examples that you can try at each step.</span></span>


    <span data-ttu-id="4db63-121">まずは、上記の各種演算を実行してみます。</span><span class="sxs-lookup"><span data-stu-id="4db63-121">Start by exploring those different operations.</span></span> <span data-ttu-id="4db63-122">3 行目を変更して、各演算を試します。</span><span class="sxs-lookup"><span data-stu-id="4db63-122">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="4db63-123">編集が終わるごとに、**[実行]** をクリックします。</span><span class="sxs-lookup"><span data-stu-id="4db63-123">After each edit, click the **Run** button.</span></span>


    <span data-ttu-id="4db63-124">減算：</span><span class="sxs-lookup"><span data-stu-id="4db63-124">Subtraction:</span></span>


    ```csharp

    int c = a - b;

    ```


    <span data-ttu-id="4db63-125">乗算：</span><span class="sxs-lookup"><span data-stu-id="4db63-125">Multiplication:</span></span>


    ```csharp

    int c = a * b;

    ```


    <span data-ttu-id="4db63-126">除算：</span><span class="sxs-lookup"><span data-stu-id="4db63-126">Division:</span></span>


    ```csharp

    int c = a / b;

    ```


    <span data-ttu-id="4db63-127">好みで、同じ行で複数の算術演算を実行することもできます。</span><span class="sxs-lookup"><span data-stu-id="4db63-127">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>


    > [!TIP]

    > <span data-ttu-id="4db63-128">C# (または何らかのプログラミング言語) について詳しく学習するに従い、コードを記述する際にミスをすることもあるでしょう。</span><span class="sxs-lookup"><span data-stu-id="4db63-128">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="4db63-129">**コンパイラ**は、そうしたエラーを発見して報告します。</span><span class="sxs-lookup"><span data-stu-id="4db63-129">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="4db63-130">エラー メッセージが出力された場合は、例のコードをよく確認して、対話型ウィンドウで修正すべきコードを見つけます。</span><span class="sxs-lookup"><span data-stu-id="4db63-130">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="4db63-131">こうした実習が C# コードの構造を理解するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="4db63-131">That exercise will help you learn the structure of C# code.</span></span>


    > [!NOTE]

    > <span data-ttu-id="4db63-132">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="4db63-132">This online coding experience is in preview mode.</span></span> <span data-ttu-id="4db63-133">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="4db63-133">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="4db63-134">演算の順序の確認</span><span class="sxs-lookup"><span data-stu-id="4db63-134">Explore order of operations</span></span>
  durationInMinutes: 7
  content: >
    <span data-ttu-id="4db63-135">C# 言語は、数学で学んだ規則と同じ規則で各演算の優先順位を定義します。</span><span class="sxs-lookup"><span data-stu-id="4db63-135">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>

    <span data-ttu-id="4db63-136">乗算と除算は、加算と減算よりも優先されます。</span><span class="sxs-lookup"><span data-stu-id="4db63-136">Multiplication and division take precedence over addition and subtraction.</span></span>

    <span data-ttu-id="4db63-137">対話型ウィンドウで次のコードを実行して、実際に確認しましょう。</span><span class="sxs-lookup"><span data-stu-id="4db63-137">Explore that by running the following code in the interactive window:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="4db63-138">出力を見ると、加算の前に乗算が実行されていることがわかります。</span><span class="sxs-lookup"><span data-stu-id="4db63-138">The output demonstrates that the multiplication is performed before the addition.</span></span>


    <span data-ttu-id="4db63-139">演算の周りに丸かっこを追加する、または最初に実行したい演算を追加することで、演算の順序を変えることができます。</span><span class="sxs-lookup"><span data-stu-id="4db63-139">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="4db63-140">さまざまな演算を多数組み合わせて、他にも試してみましょう。</span><span class="sxs-lookup"><span data-stu-id="4db63-140">Explore more by combining many different operations.</span></span> <span data-ttu-id="4db63-141">上記の 4 行目を次のように置き換えます。</span><span class="sxs-lookup"><span data-stu-id="4db63-141">Replace the fourth line above with something like this:</span></span>


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    <span data-ttu-id="4db63-142">整数について面白い動作をしていることに気づいたでしょうか。</span><span class="sxs-lookup"><span data-stu-id="4db63-142">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="4db63-143">結果に小数点や小数部分が含まれると予想される場合でも、整数の除算は常に整数の結果を算出します。</span><span class="sxs-lookup"><span data-stu-id="4db63-143">Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</span></span>


    <span data-ttu-id="4db63-144">この動作を確認できない場合は、次のコードを試してください。</span><span class="sxs-lookup"><span data-stu-id="4db63-144">If you haven't seen this behavior, try the following:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="4db63-145">もう一度 **[実行]** をクリックして結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="4db63-145">Click **Run** again to see the results.</span></span>


    > [!NOTE]

    > <span data-ttu-id="4db63-146">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="4db63-146">This online coding experience is in preview mode.</span></span> <span data-ttu-id="4db63-147">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="4db63-147">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="4db63-148">整数の有効桁数と制限の確認</span><span class="sxs-lookup"><span data-stu-id="4db63-148">Explore integer precision and limits</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="4db63-149">この最後のサンプルでは、整数の除算における結果の切り捨てについて確認します。</span><span class="sxs-lookup"><span data-stu-id="4db63-149">That last sample showed you that integer division truncates the result.</span></span>

    <span data-ttu-id="4db63-150">**modulo** 演算子 (`%` 文字) を使用して、**剰余**を得ることができます。</span><span class="sxs-lookup"><span data-stu-id="4db63-150">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    <span data-ttu-id="4db63-151">C# の整数型は算術における整数ともう 1 つ異なる点があります。それは `int` 型には最小値と最大値の制限があるということです。</span><span class="sxs-lookup"><span data-stu-id="4db63-151">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="4db63-152">対話型ウィンドウでこのコードを実行し、これらの制限を確認しましょう。</span><span class="sxs-lookup"><span data-stu-id="4db63-152">Run this code in the interactive window to see those limits:</span></span>


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    <span data-ttu-id="4db63-153">計算によってこれらの制限を超える値が作られると、**アンダーフロー**または**オーバーフロー**の状態になります。</span><span class="sxs-lookup"><span data-stu-id="4db63-153">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="4db63-154">計算の結果が 1 つの制限からもう 1 つの制限に折り返されているように見えます。</span><span class="sxs-lookup"><span data-stu-id="4db63-154">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="4db63-155">対話型ウィンドウに次の 2 行を追加して、例を確認します。</span><span class="sxs-lookup"><span data-stu-id="4db63-155">Add these two lines to the interactive window to see an example:</span></span>


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    <span data-ttu-id="4db63-156">計算の結果が最小値の (負の) 整数に極めて近いことに注目してください。</span><span class="sxs-lookup"><span data-stu-id="4db63-156">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="4db63-157">これは `min + 2` と同じです。</span><span class="sxs-lookup"><span data-stu-id="4db63-157">It's the same as `min + 2`.</span></span>

    <span data-ttu-id="4db63-158">加算演算が許容された整数値を**オーバーフロー**しました。</span><span class="sxs-lookup"><span data-stu-id="4db63-158">The addition operation **overflowed** the allowed values for integers.</span></span>

    <span data-ttu-id="4db63-159">整数がオーバーフローして最大値から最小値に ”折り返され” たため、計算結果が非常に大きな負の値になっています。</span><span class="sxs-lookup"><span data-stu-id="4db63-159">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>


    <span data-ttu-id="4db63-160">他にもさまざまな制限や有効桁数を持つ数値型があり、`int` 型がご自分のニーズと合わない場合は、そちらも使用できます。</span><span class="sxs-lookup"><span data-stu-id="4db63-160">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="4db63-161">次はその別の数値型を見ていきます。</span><span class="sxs-lookup"><span data-stu-id="4db63-161">Let's explore those next.</span></span>


    > [!NOTE]

    > <span data-ttu-id="4db63-162">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="4db63-162">This online coding experience is in preview mode.</span></span> <span data-ttu-id="4db63-163">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="4db63-163">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="4db63-164">double 型の処理</span><span class="sxs-lookup"><span data-stu-id="4db63-164">Work with the double type</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="4db63-165">`double` 数値型は、倍精度浮動小数点数を表します。</span><span class="sxs-lookup"><span data-stu-id="4db63-165">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="4db63-166">こうした用語を初めて見た人もいるかもしれません。</span><span class="sxs-lookup"><span data-stu-id="4db63-166">Those terms may be new to you.</span></span> <span data-ttu-id="4db63-167">**浮動小数点**数は、非常に大きな、または非常に小さな、整数ではない数値を表すのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="4db63-167">A **floating point** number is useful to represent non-integral numbers that may be very large or small in magnitude.</span></span> <span data-ttu-id="4db63-168">**倍精度**は、そうした数値が**単精度**よりも大きな有効桁数を使用して格納されることを意味しています。</span><span class="sxs-lookup"><span data-stu-id="4db63-168">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="4db63-169">最近のコンピューターでは、単精度よりも倍精度の数値を使用する方が一般的です。</span><span class="sxs-lookup"><span data-stu-id="4db63-169">On modern computers, it is more common to use double precision than single precision numbers.</span></span>

    <span data-ttu-id="4db63-170">確認してみましょう。</span><span class="sxs-lookup"><span data-stu-id="4db63-170">Let's explore.</span></span> <span data-ttu-id="4db63-171">対話型ウィンドウで次のコードを実行して結果を確認します。</span><span class="sxs-lookup"><span data-stu-id="4db63-171">Try the following code in the interactive window and see the result:</span></span>


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="4db63-172">計算結果に商の小数部分が含まれていることに注目してください。</span><span class="sxs-lookup"><span data-stu-id="4db63-172">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="4db63-173">double 型を使用して、もう少し複雑な式を試します。</span><span class="sxs-lookup"><span data-stu-id="4db63-173">Try a slightly more complicated expression with doubles:</span></span>


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="4db63-174">double 値は整数値よりも範囲が大きくなります。</span><span class="sxs-lookup"><span data-stu-id="4db63-174">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="4db63-175">対話型ウィンドウで次のコードを実行します。</span><span class="sxs-lookup"><span data-stu-id="4db63-175">Try the following code in the interactive window:</span></span>


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    <span data-ttu-id="4db63-176">これらの値は指数表記で出力されます。</span><span class="sxs-lookup"><span data-stu-id="4db63-176">These values are printed out in scientific notation.</span></span> <span data-ttu-id="4db63-177">`E` の左側は有効数字です。</span><span class="sxs-lookup"><span data-stu-id="4db63-177">The number to the left of the `E` is the significand.</span></span> <span data-ttu-id="4db63-178">右側の数値は指数であり、10 の累乗です。</span><span class="sxs-lookup"><span data-stu-id="4db63-178">The number to the right is the exponent, as a power of 10.</span></span>


    <span data-ttu-id="4db63-179">算術における 10 進数と同じように、C# における double には丸め誤差が発生することがあります。</span><span class="sxs-lookup"><span data-stu-id="4db63-179">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="4db63-180">次のコードを試してみましょう。</span><span class="sxs-lookup"><span data-stu-id="4db63-180">Try this code:</span></span>


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    <span data-ttu-id="4db63-181">`0.3` の循環小数は `1/3` と完全に同じではありません。</span><span class="sxs-lookup"><span data-stu-id="4db63-181">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>


    <span data-ttu-id="4db63-182">***課題***</span><span class="sxs-lookup"><span data-stu-id="4db63-182">***Challenge***</span></span>


    <span data-ttu-id="4db63-183">`double` 型を使用して、大きい値や小さい値、乗算、除算などの計算してみましょう。</span><span class="sxs-lookup"><span data-stu-id="4db63-183">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="4db63-184">もっと複雑な計算を試してみてください。</span><span class="sxs-lookup"><span data-stu-id="4db63-184">Try more complicated calculations.</span></span>


    > [!NOTE]

    > <span data-ttu-id="4db63-185">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="4db63-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="4db63-186">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="4db63-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="4db63-187">固定小数点型の処理</span><span class="sxs-lookup"><span data-stu-id="4db63-187">Work with fixed point types</span></span>
  durationInMinutes: 8
  content: >
    <span data-ttu-id="4db63-188">C# の基本的な数値型である整数と double について見てきました。</span><span class="sxs-lookup"><span data-stu-id="4db63-188">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="4db63-189">もう 1 つ知っておくべき型として、`decimal` 型があります。</span><span class="sxs-lookup"><span data-stu-id="4db63-189">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="4db63-190">`decimal` 型は、`double` 型よりも範囲は小さいですが、有効桁数が大きい型です。</span><span class="sxs-lookup"><span data-stu-id="4db63-190">The `decimal` type has a smaller range but greater precision than `double`.</span></span> <span data-ttu-id="4db63-191">**固定小数点**という用語は、小数点 (またはバイナリの小数点) が動かないことを意味しています。</span><span class="sxs-lookup"><span data-stu-id="4db63-191">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="4db63-192">では、始めましょう。</span><span class="sxs-lookup"><span data-stu-id="4db63-192">Let's take a look:</span></span>


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    <span data-ttu-id="4db63-193">`double` 型よりも範囲が小さいことに注目してください。</span><span class="sxs-lookup"><span data-stu-id="4db63-193">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="4db63-194">次のコードを実行すると、decimal 型では有効桁数がより大きいことを確認できます。</span><span class="sxs-lookup"><span data-stu-id="4db63-194">You can see the greater precision with the decimal type by trying the following code:</span></span>


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    <span data-ttu-id="4db63-195">数値の末尾の `M` は、定数では `decimal` 型を使用する必要があることを示しています。</span><span class="sxs-lookup"><span data-stu-id="4db63-195">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>


    <span data-ttu-id="4db63-196">decimal 型を使用した演算では、小数点の右側の桁数がより多いことに注目してください。</span><span class="sxs-lookup"><span data-stu-id="4db63-196">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span>


    <span data-ttu-id="4db63-197">***課題***</span><span class="sxs-lookup"><span data-stu-id="4db63-197">***Challenge***</span></span>


    <span data-ttu-id="4db63-198">さまざまな数値型を確認したので、次は半径が 2.50 センチメートルの円の面積を計算するコードを記述してみます。</span><span class="sxs-lookup"><span data-stu-id="4db63-198">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 centimeters.</span></span> <span data-ttu-id="4db63-199">円の面積は、半径の 2 乗 x 円周率です。</span><span class="sxs-lookup"><span data-stu-id="4db63-199">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="4db63-200">ヒント: .NET には <xref:System.Math.PI?displayProperty=nameWithType> という円周率の定数があり、その値を使用できます。</span><span class="sxs-lookup"><span data-stu-id="4db63-200">One hint: .NET contains a constant for PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.</span></span>


    > [!NOTE]

    > <span data-ttu-id="4db63-201">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="4db63-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="4db63-202">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="4db63-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>


    <span data-ttu-id="4db63-203">答えは 19 と 20 の間になるはずです。</span><span class="sxs-lookup"><span data-stu-id="4db63-203">You should get an answer between 19 and 20.</span></span>
- title: <span data-ttu-id="4db63-204">課題完了</span><span class="sxs-lookup"><span data-stu-id="4db63-204">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="4db63-205">コードは次のようになりましたか?</span><span class="sxs-lookup"><span data-stu-id="4db63-205">Did you come up with something like this?</span></span>


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    <span data-ttu-id="4db63-206">お好みで他の数式を試してみてください。</span><span class="sxs-lookup"><span data-stu-id="4db63-206">Try some other formulas if you'd like.</span></span>


    > [!NOTE]

    > <span data-ttu-id="4db63-207">このオンライン コーディング体験はプレビュー モードです。</span><span class="sxs-lookup"><span data-stu-id="4db63-207">This online coding experience is in preview mode.</span></span> <span data-ttu-id="4db63-208">問題が生じた場合は、[dotnet/try リポジトリ](https://github.com/dotnet/try/issues)でその問題をお知らせください。</span><span class="sxs-lookup"><span data-stu-id="4db63-208">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="4db63-209">これで "C# の数値" に関する対話型チュートリアルは終了です。</span><span class="sxs-lookup"><span data-stu-id="4db63-209">You've completed the "Numbers in C#" interactive tutorial.</span></span> <span data-ttu-id="4db63-210">下の**ブランチとループ**のリンクをクリックすることで次の対話式チュートリアルを開始することができます。また、[.NET サイト](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro)にアクセスして .NET Core SDK をダウンロードし、ご利用のコンピューター上でプロジェクトを作成し、コーディングを続けることもできます。</span><span class="sxs-lookup"><span data-stu-id="4db63-210">You can click the **Branches and Loops** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="4db63-211">"次の手順" セクションでは、これらのチュートリアルに戻ります。</span><span class="sxs-lookup"><span data-stu-id="4db63-211">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="4db63-212">C# の数値の詳細については、次のトピックで学習できます。</span><span class="sxs-lookup"><span data-stu-id="4db63-212">You can learn more about numbers in C# in the following topics:</span></span>


    - [<span data-ttu-id="4db63-213">整数型</span><span class="sxs-lookup"><span data-stu-id="4db63-213">Integral types</span></span>](../../language-reference/builtin-types/integral-numeric-types.md)

    - [<span data-ttu-id="4db63-214">浮動小数点型の一覧表</span><span class="sxs-lookup"><span data-stu-id="4db63-214">Floating-Point Types Table</span></span>](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [<span data-ttu-id="4db63-215">組み込み型の一覧表</span><span class="sxs-lookup"><span data-stu-id="4db63-215">Built-In Types Table</span></span>](../../language-reference/keywords/built-in-types-table.md)

    - [<span data-ttu-id="4db63-216">暗黙的な数値変換の一覧表</span><span class="sxs-lookup"><span data-stu-id="4db63-216">Implicit Numeric Conversions Table</span></span>](../../language-reference/keywords/implicit-numeric-conversions-table.md)

    - [<span data-ttu-id="4db63-217">明示的な数値変換の一覧表</span><span class="sxs-lookup"><span data-stu-id="4db63-217">Explicit Numeric Conversions Table</span></span>](../../language-reference/keywords/explicit-numeric-conversions-table.md)
