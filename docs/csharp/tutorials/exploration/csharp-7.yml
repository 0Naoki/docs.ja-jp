### YamlMime:Tutorial
title: C# 7.0 を詳しく学習する - C# に関する対話型チュートリアル
metadata:
  title: C# 7.0 を詳しく学習する - ブラウザーを使用して、C# 7.0 の新機能を対話形式で試す
  description: このチュートリアルでは、ブラウザーを使用して C# 7.0 を対話形式で詳しく学習します。 C# 7.0 で使用できる、より簡潔で読みやすいコードにすることができる新しい表現方法を詳しく学習します。
  audience: Developer
  level: intermediate
  ms.date: 03/20/2019
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 70f4e93460c69b54702f160d502163827ec73218
  ms.sourcegitcommit: 0aca6c5d166d7961a1e354c248495645b97a1dc5
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 03/30/2019
  ms.locfileid: "58675524"
items:
- durationInMinutes: 1
  content: >
    このチュートリアルでは C# 7.0 の機能を対話形式で詳しく学習できます。ブラウザーを使用して C# を記述し、コードをコンパイルして実行した結果を確認します。 これには、より新しく簡潔な C# 7.0 の機能を使用するため、以前の C# プラクティスを変更する一連のレッスンが含まれています。 この記事の残りの部分では、これらの各機能の概要と、各機能をより詳しく学習するためのリンクを提供します。
- title: 割り当て場所での out 変数の宣言
  durationInMinutes: 2
  content: "`out` パラメーターをサポートする既存の構文は、このバージョンで改良されました。 このページの下にある *[Enter Focus Mode]\\(フォーカス モードに入る\\)* ボタンをクリックし、対話型ウィンドウで次のコードを試します。 \n\n[!code-csharp[OutVariableOldStyle](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableOldStyle \"classic out variable declaration\")]\n\n現在は、別の宣言ステートメントを記述するのではなく、メソッド呼び出しの引数リストで `out` 変数を宣言できるようになりました。 宣言はメソッド呼び出しに移動できます。 対話型ウィンドウの下部に次のコードを追加します。\n\n[!code-csharp[OutVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableDeclarations \"Out variable declarations\")]\n\n`int` 宣言を `var` 宣言に変更できます。 対話型ウィンドウに次のコードを追加します。\n\n[!code-csharp[OutVarVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVarVariableDeclarations \"Implicitly typed Out variable\")]\n\n新しい構文は既存の構文と比べ、2 つの点で重要な優位性があります。\n\n* コードが読みやすくなる。 \n    - out 変数は、使用する場所で宣言します。その場所より上にある別の行で宣言しません。\n* 初期値を割り当てる必要がない。\n    - `out` 変数は、メソッド呼び出し内の使用場所で宣言することにより、割り当てる前に誤って使用することがなくなります。\n\n宣言された変数の範囲は、`if` ステートメントを囲む範囲になります。 これにより、その後はこの変数を使用することができます。 次のスニペットのように最後の `if` ブロックを変更します。\n\n```csharp\nif (!int.TryParse(input, out int result))\n{    \n    return null;\n}\n\nConsole.WriteLine(result);\n```\n"
- title: タプルからは軽量のデータ構造が作成されます。
  durationInMinutes: 1
  content: "タプルとは、データ メンバーを表す複数のフィールドを含む軽量なデータ構造です。 フィールドは検証されず、独自のメソッドを定義することはできません。\n\n> [!NOTE]\n> タプルは C# 7.0 より前で使用できましたが、効率的でなく、言語サポートがありませんでした。 これは、タプル要素が `Item1` や `Item2` などとしてのみ参照できることを意味しました。 C# 7.0 では、タプルの言語サポートが導入されたことで、新しい、より効率的なタプル型を使用するフィールドのセマンティック名が有効になります。\n\nタプルを作成するには、それぞれの名前付きメンバーに値を割り当てます。\n\n[!code-csharp[NamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#NamedTuple \"Named tuple\")]\n\n`namedLetters` タプルには、`Alpha` と `Beta` と呼ばれるフィールドが含まれています。 これらの名前は、コンパイル時にのみ存在し、実行時 (リフレクションを使用してタプルを検査するときなど) には保持されません。\n\nタプルの割り当てでは、代入の右辺でフィールドの名前を指定することもできます。 \n\n[!code-csharp[ImplicitNamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#ImplicitNamedTuple \"Implicitly named tuple\")]\n\n代入の左辺と右辺の両方でフィールドの名前を指定することができますが、右辺の名前は無視されます。\n\nタプルは、`private` メソッドと `internal` メソッドの戻り値の型として最も有用です。 タプルは、これらのメソッドで複数の離散値を返すためのシンプルな構文です。\n\nタプルの作成は、クラスや構造の作成より効率的かつ生産的です。 タプルは、複数の値を保持するデータ構造を定義するための、よりシンプルで軽量な構文です。 次の例のメソッドは、整数のシーケンス内で見つかった最小値と最大値を返します。\n\n[!code-csharp[TupleReturningMethod](~/samples/snippets/csharp/new-in-7/program.cs#TupleReturningMethod \"Tuple returning method\")]\n\n状況によっては、メソッドから返されたタプルのメンバーをばらすことが必要になる場合もあります。  そのためには、タプル内のそれぞれの値に対して別個の変数を宣言します。 この操作は、タプルの*分解*と呼ばれます。 ブラウザーで次のコードを追加して試してください。\n\n[!code-csharp[CallingWithDeconstructor](~/samples/snippets/csharp/new-in-7/program.cs#CallingWithDeconstructor \"Deconstructing a tuple\")]\n\nタプルを使用していると、しばしば、タプルの結果のうち、一部を使用しないことに気付きます。 そのとき、変数の代わりに `_` を使用することで、返された値を破棄できます。 ブラウザーで次のコードを追加して試してください。\n\n[!code-csharp[DiscardTupleMember](~/samples/snippets/csharp/new-in-7/program.cs#DiscardMember \"Discard a tuple member\")]\n\nタプルの詳細については、[タプルに関する記事](../../tuples.md)を参照してください。\n破棄の詳細については、[破棄に関する記事](../../discards.md)を参照してください。\n"
- title: is 式と共に型パターンを使用する
  durationInMinutes: 2
  content: >
    `is` パターン式を使用すると、使い慣れた [`is` 演算子](../../language-reference/keywords/is.md#pattern-matching-with-is)を拡張して、その型を超えてオブジェクトを照会できます。


    ブラウザー ウィンドウで次のコードを試してみてください。


    [!code-csharp[SimpleIs](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleIsPattern "Simple Is pattern")]


    代わりに変数宣言を文字列に変更します。


    ```csharp

    object count = "5";

    ```


    これで `is` 式が false になりました。そのため、`else` 分岐が実行されます。 else 分岐で `count` を `number` に変更してみます。


    ```csharp

    Console.WriteLine($"{number} is not an integer");

    ```


    上のコードはコンパイルされません。`else` 分岐に `number` が入っていないためです。 `if` ステートメントの `true` 分岐に入っているだけです。


    `is` 式の型パターンは、テストする型が少ないときにのみ便利です。 多くの場合、複数の種類をテストする必要があります。 それには、`switch` ステートメントに一致するパターンが必要です。
- title: switch ステートメントのパターン マッチング
  durationInMinutes: 2
  content: "\"*一致式*\" には、既に C# 言語に含まれている `switch` ステートメントに基づいた、使い慣れた構文があります。 前のページで学習した `is` 式の構文に基づく小さなサンプルから始めましょう。\n\n[!code-csharp[SimpleSwitch](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleSwitchPattern \"simple switch\")]\n\n先のコードは `int` または `null` を確認します。 その他の型はすべて、既定のケースに達します。 次の 2 行を追加し、動作を検証します。\n\n[!code-csharp[AddLongCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestLong \"Add a case for long\")]\n\n`switch` 式は、null 許容型をそれに対応する型に変換します。 次のコードを追加して検証します。\n\n[!code-csharp[NullableCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#NullableSwitch \"Add a nullable case\")]\n\nswitch ステートメントには他にもいくつでも型パターン式を追加できます。 `null` ケースの前に以下を追加します。\n\n[!code-csharp[MoreTypeCases](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreCases \"Add more type cases\")]\n\n次のテストを追加し、コードが動作することを確認してください。\n\n[!code-csharp[AddMoreTests](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreTests \"Add more type tests\")]\n\n一致式では定数もサポートされます。 これにより、単純なケースが取り除かれるため、時間を節約できます。\n\n[!code-csharp[ConstantCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#ConstantCase \"Add a constant case\")]\n\n先のケースは `case int:` 式の*前*に追加する必要があります。 このケースの後に追加した場合、前のケースにより既に処理されているとコンパイラから警告が出ます。\n\n型や定数値以外の条件をテストできるように、あらゆるパターン ケースに `when` 句を追加できます。 一般的な `string` ケースの上に次のケースを追加して試してください。\n\n[!code-csharp[WhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#WhenClause \"Add a when clause\")]\n\n次のようなコードでテストします。\n\n[!code-csharp[TestWhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestWhenClause \"Test the when clause\")]\n\nパターン マッチング式の新しい構文を使用すると、オブジェクトの型やその他のプロパティに基づいたディスパッチ アルゴリズムを、明確かつ簡潔な構文を使用して簡単に作成できます。 パターン マッチング式は、継承によって関連付けられていないデータ型に対してこれらのコンストラクトを有効にします。\n\nパターン マッチングの詳細については、[C# のパターン マッチング](../../pattern-matching.md)に特化した記事を参照してください。\n"
- title: ref ローカル変数と戻り値を使用し、メモリ ストレージを最適化する
  durationInMinutes: 2
  content: >
    この機能により、他の場所に定義されている変数への参照を使用したり返したりするアルゴリズムが実現します。 たとえば、大規模なマトリックスを使用し、特定の特性を持つ 1 つの場所を探します。 1 つのメソッドでマトリックス内の単一の場所を 2 つのインデックスに返すこともあります。


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#EverythingByValue "return indices by value")]


    このメソッドを次のコードを使用してテストできます。


    [!code-csharp[TestByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return indices by value")]



    この `Find` メソッドは、マトリックス内の項目にインデックスを返します。 そのため、呼び出し元は、これらのインデックスを使用してマトリックスを逆参照し、1 つの要素を変更するコードを記述することになります。 それよりも、変更するマトリックス内の要素への "*参照*" を返すメソッドを記述することをお勧めします。


    それでは、一連の変更を確認しながら、ref ローカル変数の機能と、内部ストレージへの参照を返すメソッドの作成方法を説明します。 その過程で、ref 戻り値および ref ローカル変数の機能の誤用を防ぐための規則についても説明します。


    まず、タプルの代わりに `ref int` を返すように `Find` メソッドの宣言を変更します。


    ```csharp

    ref int Find(int[,] matrix, Func<int, bool> predicate)

    ```


    正しいインデックスで項目を返すように return ステートメントを変更します。


    ```csharp

    return matrix[i,j];

    ```


    代わりに例外をスローするように最後の return を変更します。


    ```csharp

    throw new InvalidOperationException("Not found");

    ```


    これはコンパイルされないことに注意してください。 このメソッド宣言は `ref` return を示しますが、return ステートメントからは値の戻りが指定されます。 各 return ステートメントに `ref` キーワードを追加する必要があります。 これは、参照渡しを示します。これにより、後でコードを読む開発者にも、そのメソッドが参照渡しで返すことがわかります。


    ```csharp

    return ref matrix[i,j];

    ```


    このメソッドはマトリックス内の整数値への参照を返すため、呼び出し側のコードを修正する必要があります。 `var` 宣言は、`valItem` がタプルではなく `int` であることを意味します。 呼び出し元のコードを次のように変更します。


    ```csharp

    var valItem = Find(matrix, (val) => val == 42);

    Console.WriteLine(valItem);

    valItem = 24;

    Console.WriteLine(matrix[4, 2]);

    ```


    上記の例の 2 番目の `WriteLine` ステートメントで出力される値は `42` であり、`24` ではありません。 変数 `valItem` は、`int` であり、`ref int` ではありません。 `var` キーワードを使用すると、コンパイラは、型を指定できますが、`ref` 修飾子を暗黙的に追加しません。 代わりに、`ref return` によって参照される値が代入の左辺にある変数に "*コピー*" されます。 この変数は `ref` ローカル変数ではありません。


    返された参照を変更するには、`ref` 修飾子をローカル変数の宣言と `Find` の呼び出しの前に追加し、戻り値が参照の場合に変数が参照になるようにする必要があります。 ブラウザーでテスト コードを次のように変更します。


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return object by reference")]


    上記の例の 2 番目の `WriteLine` ステートメントは、値 `24` を出力します。これは、マトリックスのストレージが変更されたことを示しています。 ローカル変数は `ref` 修飾子で宣言されており、`ref` 戻り値を受け取ります。 `ref` 変数は宣言時に初期化する必要があります。宣言と初期化を分けることはできません。


    C# 言語には、これ以外に、`ref` ローカル変数と戻り値の誤用を防ぐ規則が 3 つあります。


    * 標準的なメソッドの戻り値を `ref` ローカル変数に割り当てることはできません。

    * 有効期間がメソッドの実行期間を超えない変数に `ref` を返すことはできません。

    * `ref` ローカル変数と戻り値は、非同期メソッドと共に使用することはできません。


    ref ローカル変数および ref 戻り値の追加により、値のコピーを回避したり、逆参照操作を複数回実行したりすることで、より効率的なアルゴリズムを実現できます。


    詳しくは、[ref](../../language-reference/keywords/ref.md) キーワードに関する記事をご覧ください。
- title: ローカル関数でコードへのアクセスを最小限に抑える
  durationInMinutes: 2
  content: "これで、他の関数の中で入れ子になるローカル関数を宣言できるようになりました。 それにより、ローカル関数をなるべく見えないようにすることができます。 ローカル関数には明白なユース ケースが 3 つあります。\n\n- 再帰関数。\n- 反復子メソッド。\n- 非同期メソッド。\n\n再帰メソッドから始めましょう。 ブラウザーで次のコードを試し、`6!` (階乗) を計算します。\n\n```csharp\nint LocalFunctionFactorial(int n)\n{\n    return nthFactorial(n);\n\n    int nthFactorial(int number) => (number < 2) ? \n        1 : number * nthFactorial(number - 1);\n}\n\nConsole.WriteLine(LocalFunctionFactorial(6));\n```\n\nローカル関数は再帰アルゴリズムを実装する優れた方法です。 他には一般的に、パブリックの反復子メソッドやパブリックの非同期メソッドで使用されます。 どちらの種類のメソッドも、プログラマーが期待するよりも遅くエラーを報告するコードを生成します。 反復子メソッドの場合、例外が検出されるのは、返されたシーケンスを列挙するコードを呼び出した場合のみです。 非同期メソッドの場合、例外が検出されるのは、返された `Task` が待機状態になったときのみです。\n\n反復子メソッドはブラウザーで簡単に試すことができます。このチュートリアルでは反復子メソッドを使用しましょう。 次のコードを試してください。これはブラウザーで反復子メソッドを呼び出します。\n\n[!code-csharp[IteratorMethod](~/samples/snippets/csharp/new-in-7/Iterator.cs#SnippetIteratorMethod \"Iterator method\")]\n\nコードを実行します。 コードが 2 つ目の結果セットの繰り返しを始めると例外がスローされることに注意してください。 最初の結果セットを繰り返すコードは既に実行されています。 このサンプルは小さく、データ構造を変更しません。そのため、無害であり、修正が簡単です。 しかしながら、大きなプログラムの場合、2 つの反復子オブジェクトが異なる子メソッドで作成されることがあれば、根本原因を見つけることが難しくなることがあります。 最初の反復子メソッドでデータの状態が変わった場合、データの破損を引き起こすことがあります。 例外は直後に、動作が完了する前にスローされることが望ましいでしょう。 パブリック メソッドですべての引数と、列挙を実行するローカル関数を検証するように、コードをリファクタリングできます。\n\n[!code-csharp[IteratorMethodRefactored](~/samples/snippets/csharp/new-in-7/Iterator.cs#IteratorMethodLocalInteractive \"Iterator method refactored\")]\n\n先のバージョンでは、ローカル メソッドが外部メソッドのコンテキストでのみ参照されることが明確になっています。 また、ローカル関数の規則により、開発者が誤ってクラス内の別の場所からローカル関数を呼び出して、引数の検証をバイパスできないようになっています。\n\n同じ手法を `async` メソッドで使用すると、引数の検証で発生する例外が非同期操作の開始前にスローされることを保証できます。\n\n> [!NOTE]\n> ローカル関数によってサポートされる設計の中には、\"*ラムダ式*\" を使用して実現できるものもあります。 興味のある方は、[その違いの詳細を確認してください](../../local-functions-vs-lambdas.md)。\n"
- content: C# 7 の主要な新機能の詳しい学習が完了しました。 次は、ご自分のアプリケーションで試してみましょう。 完全一覧は「[C# 7 の新機能](../../whats-new/csharp-7.md)」という記事にあります。
